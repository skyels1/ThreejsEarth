{
  "version": 3,
  "sources": ["../../three/src/renderers/common/DataMap.js", "../../three/src/math/MathUtils.js", "../../three/src/constants.js", "../../three/src/math/Matrix3.js", "../../three/src/utils.js", "../../three/src/math/ColorManagement.js", "../../three/src/math/Color.js", "../../three/src/renderers/common/Color4.js", "../../three/src/nodes/core/constants.js", "../../three/src/math/Matrix2.js", "../../three/src/math/Quaternion.js", "../../three/src/math/Vector3.js", "../../three/src/math/Matrix4.js", "../../three/src/math/Vector2.js", "../../three/src/math/Vector4.js", "../../three/src/nodes/core/NodeUtils.js", "../../three/src/core/EventDispatcher.js", "../../three/src/nodes/core/Node.js", "../../three/src/nodes/core/TempNode.js", "../../three/src/nodes/utils/ArrayElementNode.js", "../../three/src/nodes/utils/ConvertNode.js", "../../three/src/nodes/utils/JoinNode.js", "../../three/src/nodes/utils/SplitNode.js", "../../three/src/nodes/utils/SetNode.js", "../../three/src/nodes/utils/FlipNode.js", "../../three/src/nodes/core/InputNode.js", "../../three/src/nodes/core/ConstNode.js", "../../three/src/nodes/utils/MemberNode.js", "../../three/src/nodes/tsl/TSLCore.js", "../../three/src/nodes/core/AssignNode.js", "../../three/src/nodes/core/ArrayNode.js", "../../three/src/nodes/core/UniformGroupNode.js", "../../three/src/nodes/core/UniformNode.js", "../../three/src/nodes/core/PropertyNode.js", "../../three/src/nodes/code/FunctionCallNode.js", "../../three/src/nodes/math/OperatorNode.js", "../../three/src/nodes/math/MathNode.js", "../../three/src/nodes/math/ConditionalNode.js", "../../three/src/nodes/core/ContextNode.js", "../../three/src/nodes/core/VarNode.js", "../../three/src/nodes/core/SubBuildNode.js", "../../three/src/nodes/core/VaryingNode.js", "../../three/src/nodes/display/ColorSpaceFunctions.js", "../../three/src/nodes/display/ColorSpaceNode.js", "../../three/src/nodes/accessors/ReferenceBaseNode.js", "../../three/src/nodes/accessors/RendererReferenceNode.js", "../../three/src/nodes/display/ToneMappingNode.js", "../../three/src/extras/DataUtils.js", "../../three/src/core/BufferAttribute.js", "../../three/src/core/InterleavedBufferAttribute.js", "../../three/src/core/InterleavedBuffer.js", "../../three/src/nodes/accessors/BufferAttributeNode.js", "../../three/src/nodes/gpgpu/ComputeNode.js", "../../three/src/nodes/core/CacheNode.js", "../../three/src/nodes/core/BypassNode.js", "../../three/src/nodes/utils/RemapNode.js", "../../three/src/nodes/code/ExpressionNode.js", "../../three/src/nodes/utils/Discard.js", "../../three/src/nodes/display/RenderOutputNode.js", "../../three/src/nodes/utils/DebugNode.js", "../../three/src/nodes/core/AttributeNode.js", "../../three/src/nodes/core/IndexNode.js", "../../three/src/nodes/core/StackNode.js", "../../three/src/nodes/core/OutputStructNode.js", "../../three/src/nodes/core/MRTNode.js", "../../three/src/nodes/math/Hash.js", "../../three/src/nodes/utils/LoopNode.js", "../../three/src/nodes/math/TriNoise3D.js", "../../three/src/math/Box3.js", "../../three/src/math/Sphere.js", "../../three/src/nodes/accessors/Object3DNode.js", "../../three/src/nodes/accessors/BufferNode.js", "../../three/src/nodes/accessors/UniformArrayNode.js", "../../three/src/nodes/accessors/BuiltinNode.js", "../../three/src/nodes/accessors/Camera.js", "../../three/src/nodes/accessors/ModelNode.js", "../../three/src/nodes/accessors/Position.js", "../../three/src/nodes/utils/EquirectUV.js", "../../three/src/nodes/utils/FunctionOverloadingNode.js", "../../three/src/nodes/display/FrontFacingNode.js", "../../three/src/nodes/accessors/Normal.js", "../../three/src/nodes/utils/MatcapUV.js", "../../three/src/nodes/utils/MaxMipLevelNode.js", "../../three/src/nodes/utils/Timer.js", "../../three/src/nodes/utils/RotateNode.js", "../../three/src/nodes/utils/UVUtils.js", "../../three/src/nodes/utils/SpriteUtils.js", "../../three/src/nodes/display/ScreenNode.js", "../../three/src/nodes/accessors/UV.js", "../../three/src/nodes/accessors/TextureSizeNode.js", "../../three/src/extras/ImageUtils.js", "../../three/src/textures/Source.js", "../../three/src/textures/Texture.js", "../../three/src/nodes/accessors/TextureNode.js", "../../three/src/textures/FramebufferTexture.js", "../../three/src/nodes/display/ViewportTextureNode.js", "../../three/src/textures/DepthTexture.js", "../../three/src/nodes/display/ViewportDepthTextureNode.js", "../../three/src/nodes/display/ViewportDepthNode.js", "../../three/src/nodes/utils/ViewportUtils.js", "../../three/src/nodes/utils/SpriteSheetUVNode.js", "../../three/src/nodes/utils/TriplanarTextures.js", "../../three/src/math/Plane.js", "../../three/src/math/Euler.js", "../../three/src/core/Layers.js", "../../three/src/core/Object3D.js", "../../three/src/core/RenderTarget.js", "../../three/src/nodes/utils/ReflectorNode.js", "../../three/src/materials/Material.js", "../../three/src/nodes/accessors/MaterialProperties.js", "../../three/src/nodes/accessors/ReflectVector.js", "../../three/src/textures/CubeTexture.js", "../../three/src/nodes/accessors/CubeTextureNode.js", "../../three/src/nodes/accessors/ReferenceNode.js", "../../three/src/nodes/accessors/MaterialReferenceNode.js", "../../three/src/nodes/accessors/TangentUtils.js", "../../three/src/nodes/accessors/Tangent.js", "../../three/src/nodes/accessors/Bitangent.js", "../../three/src/nodes/accessors/AccessorsUtils.js", "../../three/src/nodes/display/NormalMapNode.js", "../../three/src/nodes/display/BumpMapNode.js", "../../three/src/nodes/accessors/MaterialNode.js", "../../three/src/nodes/accessors/ModelViewProjectionNode.js", "../../three/src/core/InstancedInterleavedBuffer.js", "../../three/src/core/InstancedBufferAttribute.js", "../../three/src/nodes/accessors/InstanceNode.js", "../../three/src/nodes/accessors/InstancedMeshNode.js", "../../three/src/nodes/accessors/BatchNode.js", "../../three/src/nodes/utils/StorageArrayElementNode.js", "../../three/src/nodes/accessors/SkinningNode.js", "../../three/src/textures/DataArrayTexture.js", "../../three/src/nodes/accessors/MorphNode.js", "../../three/src/nodes/lighting/LightingNode.js", "../../three/src/nodes/lighting/AONode.js", "../../three/src/nodes/lighting/LightingContextNode.js", "../../three/src/nodes/lighting/IrradianceNode.js", "../../three/src/nodes/accessors/ClippingNode.js", "../../three/src/materials/nodes/manager/NodeMaterialObserver.js", "../../three/src/nodes/functions/material/getAlphaHashThreshold.js", "../../three/src/nodes/accessors/VertexColorNode.js", "../../three/src/nodes/display/BlendModes.js", "../../three/src/materials/nodes/NodeMaterial.js", "../../three/src/core/BufferGeometry.js", "../../three/src/math/Ray.js", "../../three/src/math/Triangle.js", "../../three/src/materials/MeshBasicMaterial.js", "../../three/src/objects/Mesh.js", "../../three/src/cameras/Camera.js", "../../three/src/cameras/OrthographicCamera.js", "../../three/src/renderers/common/QuadMesh.js", "../../three/src/nodes/utils/RTTNode.js", "../../three/src/nodes/utils/PostProcessingUtils.js", "../../three/src/nodes/accessors/TextureBicubic.js", "../../three/src/nodes/accessors/PointUVNode.js", "../../three/src/nodes/accessors/SceneNode.js", "../../three/src/nodes/accessors/StorageTextureNode.js", "../../three/src/nodes/accessors/Texture3DNode.js", "../../three/src/nodes/accessors/VelocityNode.js", "../../three/src/nodes/display/ColorAdjustment.js", "../../three/src/nodes/display/PosterizeNode.js", "../../three/src/nodes/display/ViewportSharedTextureNode.js", "../../three/src/nodes/display/PassNode.js", "../../three/src/nodes/display/ToneMappingFunctions.js", "../../three/src/nodes/code/CodeNode.js", "../../three/src/nodes/code/ScriptableValueNode.js", "../../three/src/nodes/code/ScriptableNode.js", "../../three/src/nodes/fog/Fog.js", "../../three/src/nodes/geometry/RangeNode.js", "../../three/src/nodes/gpgpu/ComputeBuiltinNode.js", "../../three/src/nodes/gpgpu/BarrierNode.js", "../../three/src/nodes/gpgpu/AtomicFunctionNode.js", "../../three/src/nodes/lighting/ShadowBaseNode.js", "../../three/src/nodes/lighting/ShadowFilterNode.js", "../../three/src/renderers/common/ChainMap.js", "../../three/src/nodes/lighting/ShadowNode.js", "../../three/src/nodes/lighting/PointShadowNode.js", "../../three/src/nodes/lighting/LightUtils.js", "../../three/src/nodes/pmrem/PMREMUtils.js", "../../three/src/cameras/PerspectiveCamera.js", "../../three/src/geometries/BoxGeometry.js", "../../three/src/renderers/common/extras/PMREMGenerator.js", "../../three/src/nodes/pmrem/PMREMNode.js", "../../three/src/nodes/procedural/Checker.js", "../../three/src/nodes/shapes/Shapes.js", "../../three/src/nodes/materialx/lib/mx_noise.js", "../../three/src/nodes/materialx/lib/mx_hsv.js", "../../three/src/nodes/materialx/lib/mx_transform_color.js", "../../three/src/nodes/functions/BSDF/F_Schlick.js", "../../three/src/nodes/functions/BSDF/V_GGX_SmithCorrelated.js", "../../three/src/nodes/functions/BSDF/V_GGX_SmithCorrelated_Anisotropic.js", "../../three/src/nodes/functions/BSDF/D_GGX.js", "../../three/src/nodes/functions/BSDF/D_GGX_Anisotropic.js", "../../three/src/nodes/functions/BSDF/BRDF_GGX.js", "../../three/src/nodes/functions/BSDF/BRDF_Lambert.js", "../../three/src/nodes/functions/BSDF/DFGApprox.js", "../../three/src/nodes/functions/BSDF/Schlick_to_F0.js", "../../three/src/nodes/functions/material/getGeometryRoughness.js", "../../three/src/nodes/functions/material/getParallaxCorrectNormal.js", "../../three/src/nodes/functions/material/getRoughness.js", "../../three/src/nodes/functions/material/getShIrradianceAt.js", "../../three/src/geometries/SphereGeometry.js", "../../three/src/renderers/common/Background.js"],
  "sourcesContent": ["/**\r\n * Data structure for the renderer. It is intended to manage\r\n * data of objects in dictionaries.\r\n *\r\n * @private\r\n */\r\nclass DataMap {\r\n\r\n\t/**\r\n\t * Constructs a new data map.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * `DataMap` internally uses a weak map\r\n\t\t * to manage its data.\r\n\t\t *\r\n\t\t * @type {WeakMap}\r\n\t\t */\r\n\t\tthis.data = new WeakMap();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the dictionary for the given object.\r\n\t *\r\n\t * @param {Object} object - The object.\r\n\t * @return {Object} The dictionary.\r\n\t */\r\n\tget( object ) {\r\n\r\n\t\tlet map = this.data.get( object );\r\n\r\n\t\tif ( map === undefined ) {\r\n\r\n\t\t\tmap = {};\r\n\t\t\tthis.data.set( object, map );\r\n\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the dictionary for the given object.\r\n\t *\r\n\t * @param {Object} object - The object.\r\n\t * @return {?Object} The deleted dictionary.\r\n\t */\r\n\tdelete( object ) {\r\n\r\n\t\tlet map = null;\r\n\r\n\t\tif ( this.data.has( object ) ) {\r\n\r\n\t\t\tmap = this.data.get( object );\r\n\r\n\t\t\tthis.data.delete( object );\r\n\r\n\t\t}\r\n\r\n\t\treturn map;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given object has a dictionary defined.\r\n\t *\r\n\t * @param {Object} object - The object to test.\r\n\t * @return {boolean} Whether a dictionary is defined or not.\r\n\t */\r\n\thas( object ) {\r\n\r\n\t\treturn this.data.has( object );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees internal resources.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis.data = new WeakMap();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default DataMap;\r\n", "const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];\r\n\r\nlet _seed = 1234567;\r\n\r\n\r\nconst DEG2RAD = Math.PI / 180;\r\nconst RAD2DEG = 180 / Math.PI;\r\n\r\n/**\r\n * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\r\n * (universally unique identifier).\r\n *\r\n * @return {string} The UUID.\r\n */\r\nfunction generateUUID() {\r\n\r\n\t// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136\r\n\r\n\tconst d0 = Math.random() * 0xffffffff | 0;\r\n\tconst d1 = Math.random() * 0xffffffff | 0;\r\n\tconst d2 = Math.random() * 0xffffffff | 0;\r\n\tconst d3 = Math.random() * 0xffffffff | 0;\r\n\tconst uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +\r\n\t\t\t_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +\r\n\t\t\t_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +\r\n\t\t\t_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];\r\n\r\n\t// .toLowerCase() here flattens concatenated strings to save heap memory space.\r\n\treturn uuid.toLowerCase();\r\n\r\n}\r\n\r\n/**\r\n * Clamps the given value between min and max.\r\n *\r\n * @param {number} value - The value to clamp.\r\n * @param {number} min - The min value.\r\n * @param {number} max - The max value.\r\n * @return {number} The clamped value.\r\n */\r\nfunction clamp( value, min, max ) {\r\n\r\n\treturn Math.max( min, Math.min( max, value ) );\r\n\r\n}\r\n\r\n/**\r\n * Computes the Euclidean modulo of the given parameters that\r\n * is `( ( n % m ) + m ) % m`.\r\n *\r\n * @param {number} n - The first parameter.\r\n * @param {number} m - The second parameter.\r\n * @return {number} The Euclidean modulo.\r\n */\r\nfunction euclideanModulo( n, m ) {\r\n\r\n\t// https://en.wikipedia.org/wiki/Modulo_operation\r\n\r\n\treturn ( ( n % m ) + m ) % m;\r\n\r\n}\r\n\r\n/**\r\n * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\r\n * for the given value.\r\n *\r\n * @param {number} x - The value to be mapped.\r\n * @param {number} a1 - Minimum value for range A.\r\n * @param {number} a2 - Maximum value for range A.\r\n * @param {number} b1 - Minimum value for range B.\r\n * @param {number} b2 - Maximum value for range B.\r\n * @return {number} The mapped value.\r\n */\r\nfunction mapLinear( x, a1, a2, b1, b2 ) {\r\n\r\n\treturn b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );\r\n\r\n}\r\n\r\n/**\r\n * Returns the percentage in the closed interval `[0, 1]` of the given value\r\n * between the start and end point.\r\n *\r\n * @param {number} x - The start point\r\n * @param {number} y - The end point.\r\n * @param {number} value - A value between start and end.\r\n * @return {number} The interpolation factor.\r\n */\r\nfunction inverseLerp( x, y, value ) {\r\n\r\n\t// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/\r\n\r\n\tif ( x !== y ) {\r\n\r\n\t\treturn ( value - x ) / ( y - x );\r\n\r\n\t} else {\r\n\r\n\t\treturn 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Returns a value linearly interpolated from two known points based on the given interval -\r\n * `t = 0` will return `x` and `t = 1` will return `y`.\r\n *\r\n * @param {number} x - The start point\r\n * @param {number} y - The end point.\r\n * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\r\n * @return {number} The interpolated value.\r\n */\r\nfunction lerp( x, y, t ) {\r\n\r\n\treturn ( 1 - t ) * x + t * y;\r\n\r\n}\r\n\r\n/**\r\n * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\r\n * time to maintain frame rate independent movement. For details, see\r\n * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\r\n *\r\n * @param {number} x - The current point.\r\n * @param {number} y - The target point.\r\n * @param {number} lambda - A higher lambda value will make the movement more sudden,\r\n * and a lower value will make the movement more gradual.\r\n * @param {number} dt - Delta time in seconds.\r\n * @return {number} The interpolated value.\r\n */\r\nfunction damp( x, y, lambda, dt ) {\r\n\r\n\treturn lerp( x, y, 1 - Math.exp( - lambda * dt ) );\r\n\r\n}\r\n\r\n/**\r\n * Returns a value that alternates between `0` and the given `length` parameter.\r\n *\r\n * @param {number} x - The value to pingpong.\r\n * @param {number} [length=1] - The positive value the function will pingpong to.\r\n * @return {number} The alternated value.\r\n */\r\nfunction pingpong( x, length = 1 ) {\r\n\r\n\t// https://www.desmos.com/calculator/vcsjnyz7x4\r\n\r\n\treturn length - Math.abs( euclideanModulo( x, length * 2 ) - length );\r\n\r\n}\r\n\r\n/**\r\n * Returns a value in the range `[0,1]` that represents the percentage that `x` has\r\n * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\r\n * the `min` and `max`.\r\n *\r\n * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\r\n *\r\n * @param {number} x - The value to evaluate based on its position between min and max.\r\n * @param {number} min - The min value. Any x value below min will be `0`.\r\n * @param {number} max - The max value. Any x value above max will be `1`.\r\n * @return {number} The alternated value.\r\n */\r\nfunction smoothstep( x, min, max ) {\r\n\r\n\tif ( x <= min ) return 0;\r\n\tif ( x >= max ) return 1;\r\n\r\n\tx = ( x - min ) / ( max - min );\r\n\r\n\treturn x * x * ( 3 - 2 * x );\r\n\r\n}\r\n\r\n/**\r\n * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\r\n * that has zero 1st and 2nd order derivatives at x=0 and x=1.\r\n *\r\n * @param {number} x - The value to evaluate based on its position between min and max.\r\n * @param {number} min - The min value. Any x value below min will be `0`.\r\n * @param {number} max - The max value. Any x value above max will be `1`.\r\n * @return {number} The alternated value.\r\n */\r\nfunction smootherstep( x, min, max ) {\r\n\r\n\tif ( x <= min ) return 0;\r\n\tif ( x >= max ) return 1;\r\n\r\n\tx = ( x - min ) / ( max - min );\r\n\r\n\treturn x * x * x * ( x * ( x * 6 - 15 ) + 10 );\r\n\r\n}\r\n\r\n/**\r\n * Returns a random integer from `<low, high>` interval.\r\n *\r\n * @param {number} low - The lower value boundary.\r\n * @param {number} high - The upper value boundary\r\n * @return {number} A random integer.\r\n */\r\nfunction randInt( low, high ) {\r\n\r\n\treturn low + Math.floor( Math.random() * ( high - low + 1 ) );\r\n\r\n}\r\n\r\n/**\r\n * Returns a random float from `<low, high>` interval.\r\n *\r\n * @param {number} low - The lower value boundary.\r\n * @param {number} high - The upper value boundary\r\n * @return {number} A random float.\r\n */\r\nfunction randFloat( low, high ) {\r\n\r\n\treturn low + Math.random() * ( high - low );\r\n\r\n}\r\n\r\n/**\r\n * Returns a random integer from `<-range/2, range/2>` interval.\r\n *\r\n * @param {number} range - Defines the value range.\r\n * @return {number} A random float.\r\n */\r\nfunction randFloatSpread( range ) {\r\n\r\n\treturn range * ( 0.5 - Math.random() );\r\n\r\n}\r\n\r\n/**\r\n * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\r\n *\r\n * @param {number} [s] - The integer seed.\r\n * @return {number} A random float.\r\n */\r\nfunction seededRandom( s ) {\r\n\r\n\tif ( s !== undefined ) _seed = s;\r\n\r\n\t// Mulberry32 generator\r\n\r\n\tlet t = _seed += 0x6D2B79F5;\r\n\r\n\tt = Math.imul( t ^ t >>> 15, t | 1 );\r\n\r\n\tt ^= t + Math.imul( t ^ t >>> 7, t | 61 );\r\n\r\n\treturn ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;\r\n\r\n}\r\n\r\n/**\r\n * Converts degrees to radians.\r\n *\r\n * @param {number} degrees - A value in degrees.\r\n * @return {number} The converted value in radians.\r\n */\r\nfunction degToRad( degrees ) {\r\n\r\n\treturn degrees * DEG2RAD;\r\n\r\n}\r\n\r\n/**\r\n * Converts radians to degrees.\r\n *\r\n * @param {number} radians - A value in radians.\r\n * @return {number} The converted value in degrees.\r\n */\r\nfunction radToDeg( radians ) {\r\n\r\n\treturn radians * RAD2DEG;\r\n\r\n}\r\n\r\n/**\r\n * Returns `true` if the given number is a power of two.\r\n *\r\n * @param {number} value - The value to check.\r\n * @return {boolean} Whether the given number is a power of two or not.\r\n */\r\nfunction isPowerOfTwo( value ) {\r\n\r\n\treturn ( value & ( value - 1 ) ) === 0 && value !== 0;\r\n\r\n}\r\n\r\n/**\r\n * Returns the smallest power of two that is greater than or equal to the given number.\r\n *\r\n * @param {number} value - The value to find a POT for.\r\n * @return {number} The smallest power of two that is greater than or equal to the given number.\r\n */\r\nfunction ceilPowerOfTwo( value ) {\r\n\r\n\treturn Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );\r\n\r\n}\r\n\r\n/**\r\n * Returns the largest power of two that is less than or equal to the given number.\r\n *\r\n * @param {number} value - The value to find a POT for.\r\n * @return {number} The largest power of two that is less than or equal to the given number.\r\n */\r\nfunction floorPowerOfTwo( value ) {\r\n\r\n\treturn Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );\r\n\r\n}\r\n\r\n/**\r\n * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\r\n * defined by the given angles and order.\r\n *\r\n * Rotations are applied to the axes in the order specified by order:\r\n * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\r\n *\r\n * @param {Quaternion} q - The quaternion to set.\r\n * @param {number} a - The rotation applied to the first axis, in radians.\r\n * @param {number} b - The rotation applied to the second axis, in radians.\r\n * @param {number} c - The rotation applied to the third axis, in radians.\r\n * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\r\n */\r\nfunction setQuaternionFromProperEuler( q, a, b, c, order ) {\r\n\r\n\tconst cos = Math.cos;\r\n\tconst sin = Math.sin;\r\n\r\n\tconst c2 = cos( b / 2 );\r\n\tconst s2 = sin( b / 2 );\r\n\r\n\tconst c13 = cos( ( a + c ) / 2 );\r\n\tconst s13 = sin( ( a + c ) / 2 );\r\n\r\n\tconst c1_3 = cos( ( a - c ) / 2 );\r\n\tconst s1_3 = sin( ( a - c ) / 2 );\r\n\r\n\tconst c3_1 = cos( ( c - a ) / 2 );\r\n\tconst s3_1 = sin( ( c - a ) / 2 );\r\n\r\n\tswitch ( order ) {\r\n\r\n\t\tcase 'XYX':\r\n\t\t\tq.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'YZY':\r\n\t\t\tq.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'ZXZ':\r\n\t\t\tq.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'XZX':\r\n\t\t\tq.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'YXY':\r\n\t\t\tq.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tcase 'ZYZ':\r\n\t\t\tq.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tconsole.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Denormalizes the given value according to the given typed array.\r\n *\r\n * @param {number} value - The value to denormalize.\r\n * @param {TypedArray} array - The typed array that defines the data type of the value.\r\n * @return {number} The denormalize (float) value in the range `[0,1]`.\r\n */\r\nfunction denormalize( value, array ) {\r\n\r\n\tswitch ( array.constructor ) {\r\n\r\n\t\tcase Float32Array:\r\n\r\n\t\t\treturn value;\r\n\r\n\t\tcase Uint32Array:\r\n\r\n\t\t\treturn value / 4294967295.0;\r\n\r\n\t\tcase Uint16Array:\r\n\r\n\t\t\treturn value / 65535.0;\r\n\r\n\t\tcase Uint8Array:\r\n\r\n\t\t\treturn value / 255.0;\r\n\r\n\t\tcase Int32Array:\r\n\r\n\t\t\treturn Math.max( value / 2147483647.0, - 1.0 );\r\n\r\n\t\tcase Int16Array:\r\n\r\n\t\t\treturn Math.max( value / 32767.0, - 1.0 );\r\n\r\n\t\tcase Int8Array:\r\n\r\n\t\t\treturn Math.max( value / 127.0, - 1.0 );\r\n\r\n\t\tdefault:\r\n\r\n\t\t\tthrow new Error( 'Invalid component type.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Normalizes the given value according to the given typed array.\r\n *\r\n * @param {number} value - The float value in the range `[0,1]` to normalize.\r\n * @param {TypedArray} array - The typed array that defines the data type of the value.\r\n * @return {number} The normalize value.\r\n */\r\nfunction normalize( value, array ) {\r\n\r\n\tswitch ( array.constructor ) {\r\n\r\n\t\tcase Float32Array:\r\n\r\n\t\t\treturn value;\r\n\r\n\t\tcase Uint32Array:\r\n\r\n\t\t\treturn Math.round( value * 4294967295.0 );\r\n\r\n\t\tcase Uint16Array:\r\n\r\n\t\t\treturn Math.round( value * 65535.0 );\r\n\r\n\t\tcase Uint8Array:\r\n\r\n\t\t\treturn Math.round( value * 255.0 );\r\n\r\n\t\tcase Int32Array:\r\n\r\n\t\t\treturn Math.round( value * 2147483647.0 );\r\n\r\n\t\tcase Int16Array:\r\n\r\n\t\t\treturn Math.round( value * 32767.0 );\r\n\r\n\t\tcase Int8Array:\r\n\r\n\t\t\treturn Math.round( value * 127.0 );\r\n\r\n\t\tdefault:\r\n\r\n\t\t\tthrow new Error( 'Invalid component type.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * @class\r\n * @classdesc A collection of math utility functions.\r\n * @hideconstructor\r\n */\r\nconst MathUtils = {\r\n\tDEG2RAD: DEG2RAD,\r\n\tRAD2DEG: RAD2DEG,\r\n\t/**\r\n\t * Generate a [UUID]{@link https://en.wikipedia.org/wiki/Universally_unique_identifier}\r\n\t * (universally unique identifier).\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @return {string} The UUID.\r\n\t */\r\n\tgenerateUUID: generateUUID,\r\n\t/**\r\n\t * Clamps the given value between min and max.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} value - The value to clamp.\r\n\t * @param {number} min - The min value.\r\n\t * @param {number} max - The max value.\r\n\t * @return {number} The clamped value.\r\n\t */\r\n\tclamp: clamp,\r\n\t/**\r\n\t * Computes the Euclidean modulo of the given parameters that\r\n\t * is `( ( n % m ) + m ) % m`.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} n - The first parameter.\r\n\t * @param {number} m - The second parameter.\r\n\t * @return {number} The Euclidean modulo.\r\n\t */\r\n\teuclideanModulo: euclideanModulo,\r\n\t/**\r\n\t * Performs a linear mapping from range `<a1, a2>` to range `<b1, b2>`\r\n\t * for the given value.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} x - The value to be mapped.\r\n\t * @param {number} a1 - Minimum value for range A.\r\n\t * @param {number} a2 - Maximum value for range A.\r\n\t * @param {number} b1 - Minimum value for range B.\r\n\t * @param {number} b2 - Maximum value for range B.\r\n\t * @return {number} The mapped value.\r\n\t */\r\n\tmapLinear: mapLinear,\r\n\t/**\r\n\t * Returns the percentage in the closed interval `[0, 1]` of the given value\r\n\t * between the start and end point.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} x - The start point\r\n\t * @param {number} y - The end point.\r\n\t * @param {number} value - A value between start and end.\r\n\t * @return {number} The interpolation factor.\r\n\t */\r\n\tinverseLerp: inverseLerp,\r\n\t/**\r\n\t * Returns a value linearly interpolated from two known points based on the given interval -\r\n\t * `t = 0` will return `x` and `t = 1` will return `y`.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} x - The start point\r\n\t * @param {number} y - The end point.\r\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\r\n\t * @return {number} The interpolated value.\r\n\t */\r\n\tlerp: lerp,\r\n\t/**\r\n\t * Smoothly interpolate a number from `x` to `y` in  a spring-like manner using a delta\r\n\t * time to maintain frame rate independent movement. For details, see\r\n\t * [Frame rate independent damping using lerp]{@link http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/}.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} x - The current point.\r\n\t * @param {number} y - The target point.\r\n\t * @param {number} lambda - A higher lambda value will make the movement more sudden,\r\n\t * and a lower value will make the movement more gradual.\r\n\t * @param {number} dt - Delta time in seconds.\r\n\t * @return {number} The interpolated value.\r\n\t */\r\n\tdamp: damp,\r\n\t/**\r\n\t * Returns a value that alternates between `0` and the given `length` parameter.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} x - The value to pingpong.\r\n\t * @param {number} [length=1] - The positive value the function will pingpong to.\r\n\t * @return {number} The alternated value.\r\n\t */\r\n\tpingpong: pingpong,\r\n\t/**\r\n\t * Returns a value in the range `[0,1]` that represents the percentage that `x` has\r\n\t * moved between `min` and `max`, but smoothed or slowed down the closer `x` is to\r\n\t * the `min` and `max`.\r\n\t *\r\n\t * See [Smoothstep]{@link http://en.wikipedia.org/wiki/Smoothstep} for more details.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} x - The value to evaluate based on its position between min and max.\r\n\t * @param {number} min - The min value. Any x value below min will be `0`.\r\n\t * @param {number} max - The max value. Any x value above max will be `1`.\r\n\t * @return {number} The alternated value.\r\n\t */\r\n\tsmoothstep: smoothstep,\r\n\t/**\r\n\t * A [variation on smoothstep]{@link https://en.wikipedia.org/wiki/Smoothstep#Variations}\r\n\t * that has zero 1st and 2nd order derivatives at x=0 and x=1.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} x - The value to evaluate based on its position between min and max.\r\n\t * @param {number} min - The min value. Any x value below min will be `0`.\r\n\t * @param {number} max - The max value. Any x value above max will be `1`.\r\n\t * @return {number} The alternated value.\r\n\t */\r\n\tsmootherstep: smootherstep,\r\n\t/**\r\n\t * Returns a random integer from `<low, high>` interval.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} low - The lower value boundary.\r\n\t * @param {number} high - The upper value boundary\r\n\t * @return {number} A random integer.\r\n\t */\r\n\trandInt: randInt,\r\n\t/**\r\n\t * Returns a random float from `<low, high>` interval.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} low - The lower value boundary.\r\n\t * @param {number} high - The upper value boundary\r\n\t * @return {number} A random float.\r\n\t */\r\n\trandFloat: randFloat,\r\n\t/**\r\n\t * Returns a random integer from `<-range/2, range/2>` interval.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} range - Defines the value range.\r\n\t * @return {number} A random float.\r\n\t */\r\n\trandFloatSpread: randFloatSpread,\r\n\t/**\r\n\t * Returns a deterministic pseudo-random float in the interval `[0, 1]`.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} [s] - The integer seed.\r\n\t * @return {number} A random float.\r\n\t */\r\n\tseededRandom: seededRandom,\r\n\t/**\r\n\t * Converts degrees to radians.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} degrees - A value in degrees.\r\n\t * @return {number} The converted value in radians.\r\n\t */\r\n\tdegToRad: degToRad,\r\n\t/**\r\n\t * Converts radians to degrees.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} radians - A value in radians.\r\n\t * @return {number} The converted value in degrees.\r\n\t */\r\n\tradToDeg: radToDeg,\r\n\t/**\r\n\t * Returns `true` if the given number is a power of two.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} value - The value to check.\r\n\t * @return {boolean} Whether the given number is a power of two or not.\r\n\t */\r\n\tisPowerOfTwo: isPowerOfTwo,\r\n\t/**\r\n\t * Returns the smallest power of two that is greater than or equal to the given number.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} value - The value to find a POT for.\r\n\t * @return {number} The smallest power of two that is greater than or equal to the given number.\r\n\t */\r\n\tceilPowerOfTwo: ceilPowerOfTwo,\r\n\t/**\r\n\t * Returns the largest power of two that is less than or equal to the given number.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} value - The value to find a POT for.\r\n\t * @return {number} The largest power of two that is less than or equal to the given number.\r\n\t */\r\n\tfloorPowerOfTwo: floorPowerOfTwo,\r\n\t/**\r\n\t * Sets the given quaternion from the [Intrinsic Proper Euler Angles]{@link https://en.wikipedia.org/wiki/Euler_angles}\r\n\t * defined by the given angles and order.\r\n\t *\r\n\t * Rotations are applied to the axes in the order specified by order:\r\n\t * rotation by angle `a` is applied first, then by angle `b`, then by angle `c`.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {Quaternion} q - The quaternion to set.\r\n\t * @param {number} a - The rotation applied to the first axis, in radians.\r\n\t * @param {number} b - The rotation applied to the second axis, in radians.\r\n\t * @param {number} c - The rotation applied to the third axis, in radians.\r\n\t * @param {('XYX'|'XZX'|'YXY'|'YZY'|'ZXZ'|'ZYZ')} order - A string specifying the axes order.\r\n\t */\r\n\tsetQuaternionFromProperEuler: setQuaternionFromProperEuler,\r\n\t/**\r\n\t * Normalizes the given value according to the given typed array.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} value - The float value in the range `[0,1]` to normalize.\r\n\t * @param {TypedArray} array - The typed array that defines the data type of the value.\r\n\t * @return {number} The normalize value.\r\n\t */\r\n\tnormalize: normalize,\r\n\t/**\r\n\t * Denormalizes the given value according to the given typed array.\r\n\t *\r\n\t * @static\r\n\t * @method\r\n\t * @param {number} value - The value to denormalize.\r\n\t * @param {TypedArray} array - The typed array that defines the data type of the value.\r\n\t * @return {number} The denormalize (float) value in the range `[0,1]`.\r\n\t */\r\n\tdenormalize: denormalize\r\n};\r\n\r\nexport {\r\n\tDEG2RAD,\r\n\tRAD2DEG,\r\n\tgenerateUUID,\r\n\tclamp,\r\n\teuclideanModulo,\r\n\tmapLinear,\r\n\tinverseLerp,\r\n\tlerp,\r\n\tdamp,\r\n\tpingpong,\r\n\tsmoothstep,\r\n\tsmootherstep,\r\n\trandInt,\r\n\trandFloat,\r\n\trandFloatSpread,\r\n\tseededRandom,\r\n\tdegToRad,\r\n\tradToDeg,\r\n\tisPowerOfTwo,\r\n\tceilPowerOfTwo,\r\n\tfloorPowerOfTwo,\r\n\tsetQuaternionFromProperEuler,\r\n\tnormalize,\r\n\tdenormalize,\r\n\tMathUtils\r\n};\r\n", "export const REVISION = '178';\r\n\r\n/**\r\n * Represents mouse buttons and interaction types in context of controls.\r\n *\r\n * @type {ConstantsMouse}\r\n * @constant\r\n */\r\nexport const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };\r\n\r\n/**\r\n * Represents touch interaction types in context of controls.\r\n *\r\n * @type {ConstantsTouch}\r\n * @constant\r\n */\r\nexport const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };\r\n\r\n/**\r\n * Disables face culling.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CullFaceNone = 0;\r\n\r\n/**\r\n * Culls back faces.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CullFaceBack = 1;\r\n\r\n/**\r\n * Culls front faces.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CullFaceFront = 2;\r\n\r\n/**\r\n * Culls both front and back faces.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CullFaceFrontBack = 3;\r\n\r\n/**\r\n * Gives unfiltered shadow maps - fastest, but lowest quality.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const BasicShadowMap = 0;\r\n\r\n/**\r\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const PCFShadowMap = 1;\r\n\r\n/**\r\n * Filters shadow maps using the Percentage-Closer Filtering (PCF) algorithm with\r\n * better soft shadows especially when using low-resolution shadow maps.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const PCFSoftShadowMap = 2;\r\n\r\n/**\r\n * Filters shadow maps using the Variance Shadow Map (VSM) algorithm.\r\n * When using VSMShadowMap all shadow receivers will also cast shadows.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const VSMShadowMap = 3;\r\n\r\n/**\r\n * Only front faces are rendered.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const FrontSide = 0;\r\n\r\n/**\r\n * Only back faces are rendered.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const BackSide = 1;\r\n\r\n/**\r\n * Both front and back faces are rendered.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DoubleSide = 2;\r\n\r\n/**\r\n * No blending is performed which effectively disables\r\n * alpha transparency.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NoBlending = 0;\r\n\r\n/**\r\n * The default blending.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NormalBlending = 1;\r\n\r\n/**\r\n * Represents additive blending.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AdditiveBlending = 2;\r\n\r\n/**\r\n * Represents subtractive blending.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SubtractiveBlending = 3;\r\n\r\n/**\r\n * Represents multiply blending.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MultiplyBlending = 4;\r\n\r\n/**\r\n * Represents custom blending.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CustomBlending = 5;\r\n\r\n/**\r\n * A `source + destination` blending equation.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AddEquation = 100;\r\n\r\n/**\r\n * A `source - destination` blending equation.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SubtractEquation = 101;\r\n\r\n/**\r\n * A `destination - source` blending equation.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ReverseSubtractEquation = 102;\r\n\r\n/**\r\n * A blend equation that uses the minimum of source and destination.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MinEquation = 103;\r\n\r\n/**\r\n * A blend equation that uses the maximum of source and destination.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MaxEquation = 104;\r\n\r\n/**\r\n * Multiplies all colors by `0`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ZeroFactor = 200;\r\n\r\n/**\r\n * Multiplies all colors by `1`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneFactor = 201;\r\n\r\n/**\r\n * Multiplies all colors by the source colors.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SrcColorFactor = 202;\r\n\r\n/**\r\n * Multiplies all colors by `1` minus each source color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusSrcColorFactor = 203;\r\n\r\n/**\r\n * Multiplies all colors by the source alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SrcAlphaFactor = 204;\r\n\r\n/**\r\n * Multiplies all colors by 1 minus the source alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusSrcAlphaFactor = 205;\r\n\r\n/**\r\n * Multiplies all colors by the destination alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DstAlphaFactor = 206;\r\n\r\n/**\r\n * Multiplies all colors by `1` minus the destination alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusDstAlphaFactor = 207;\r\n\r\n/**\r\n * Multiplies all colors by the destination color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DstColorFactor = 208;\r\n\r\n/**\r\n * Multiplies all colors by `1` minus each destination color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusDstColorFactor = 209;\r\n\r\n/**\r\n * Multiplies the RGB colors by the smaller of either the source alpha\r\n * value or the value of `1` minus the destination alpha value. The alpha\r\n * value is multiplied by `1`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SrcAlphaSaturateFactor = 210;\r\n\r\n/**\r\n * Multiplies all colors by a constant color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ConstantColorFactor = 211;\r\n\r\n/**\r\n * Multiplies all colors by `1` minus a constant color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusConstantColorFactor = 212;\r\n\r\n/**\r\n * Multiplies all colors by a constant alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ConstantAlphaFactor = 213;\r\n\r\n/**\r\n * Multiplies all colors by 1 minus a constant alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const OneMinusConstantAlphaFactor = 214;\r\n\r\n/**\r\n * Never pass.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NeverDepth = 0;\r\n\r\n/**\r\n * Always pass.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AlwaysDepth = 1;\r\n\r\n/**\r\n * Pass if the incoming value is less than the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessDepth = 2;\r\n\r\n/**\r\n * Pass if the incoming value is less than or equal to the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessEqualDepth = 3;\r\n\r\n/**\r\n * Pass if the incoming value equals the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const EqualDepth = 4;\r\n\r\n/**\r\n * Pass if the incoming value is greater than or equal to the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterEqualDepth = 5;\r\n\r\n/**\r\n * Pass if the incoming value is greater than the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterDepth = 6;\r\n\r\n/**\r\n * Pass if the incoming value is not equal to the depth buffer value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NotEqualDepth = 7;\r\n\r\n/**\r\n * Multiplies the environment map color with the surface color.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MultiplyOperation = 0;\r\n\r\n/**\r\n * Uses reflectivity to blend between the two colors.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MixOperation = 1;\r\n\r\n/**\r\n * Adds the two colors.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AddOperation = 2;\r\n\r\n/**\r\n * No tone mapping is applied.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NoToneMapping = 0;\r\n\r\n/**\r\n * Linear tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LinearToneMapping = 1;\r\n\r\n/**\r\n * Reinhard tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ReinhardToneMapping = 2;\r\n\r\n/**\r\n * Cineon tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CineonToneMapping = 3;\r\n\r\n/**\r\n * ACES Filmic tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ACESFilmicToneMapping = 4;\r\n\r\n/**\r\n * Custom tone mapping.\r\n *\r\n * Expects a custom implementation by modifying shader code of the material's fragment shader.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CustomToneMapping = 5;\r\n\r\n/**\r\n * AgX tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AgXToneMapping = 6;\r\n\r\n/**\r\n * Neutral tone mapping.\r\n *\r\n * Implementation based on the Khronos 3D Commerce Group standard tone mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NeutralToneMapping = 7;\r\n\r\n/**\r\n * The skinned mesh shares the same world space as the skeleton.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const AttachedBindMode = 'attached';\r\n\r\n/**\r\n * The skinned mesh does not share the same world space as the skeleton.\r\n * This is useful when a skeleton is shared across multiple skinned meshes.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const DetachedBindMode = 'detached';\r\n\r\n/**\r\n * Maps textures using the geometry's UV coordinates.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UVMapping = 300;\r\n\r\n/**\r\n * Reflection mapping for cube textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CubeReflectionMapping = 301;\r\n\r\n/**\r\n * Refraction mapping for cube textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CubeRefractionMapping = 302;\r\n\r\n/**\r\n * Reflection mapping for equirectangular textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const EquirectangularReflectionMapping = 303;\r\n\r\n/**\r\n * Refraction mapping for equirectangular textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const EquirectangularRefractionMapping = 304;\r\n\r\n/**\r\n * Reflection mapping for PMREM textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const CubeUVReflectionMapping = 306;\r\n\r\n/**\r\n * The texture will simply repeat to infinity.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RepeatWrapping = 1000;\r\n\r\n/**\r\n * The last pixel of the texture stretches to the edge of the mesh.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ClampToEdgeWrapping = 1001;\r\n\r\n/**\r\n * The texture will repeats to infinity, mirroring on each repeat.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const MirroredRepeatWrapping = 1002;\r\n\r\n/**\r\n * Returns the value of the texture element that is nearest (in Manhattan distance)\r\n * to the specified texture coordinates.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NearestFilter = 1003;\r\n\r\n/**\r\n * Chooses the mipmap that most closely matches the size of the pixel being textured\r\n * and uses the `NearestFilter` criterion (the texel nearest to the center of the pixel)\r\n * to produce a texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NearestMipmapNearestFilter = 1004;\r\nexport const NearestMipMapNearestFilter = 1004; // legacy\r\n\r\n/**\r\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and\r\n * uses the `NearestFilter` criterion to produce a texture value from each mipmap.\r\n * The final texture value is a weighted average of those two values.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NearestMipmapLinearFilter = 1005;\r\nexport const NearestMipMapLinearFilter = 1005; // legacy\r\n\r\n/**\r\n * Returns the weighted average of the four texture elements that are closest to the specified\r\n * texture coordinates, and can include items wrapped or repeated from other parts of a texture,\r\n * depending on the values of `wrapS` and `wrapT`, and on the exact mapping.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LinearFilter = 1006;\r\n\r\n/**\r\n * Chooses the mipmap that most closely matches the size of the pixel being textured and uses\r\n * the `LinearFilter` criterion (a weighted average of the four texels that are closest to the\r\n * center of the pixel) to produce a texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LinearMipmapNearestFilter = 1007;\r\nexport const LinearMipMapNearestFilter = 1007; // legacy\r\n\r\n/**\r\n * Chooses the two mipmaps that most closely match the size of the pixel being textured and uses\r\n * the `LinearFilter` criterion to produce a texture value from each mipmap. The final texture value\r\n * is a weighted average of those two values.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LinearMipmapLinearFilter = 1008;\r\nexport const LinearMipMapLinearFilter = 1008; // legacy\r\n\r\n/**\r\n * An unsigned byte data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedByteType = 1009;\r\n\r\n/**\r\n * A byte data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ByteType = 1010;\r\n\r\n/**\r\n * A short data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ShortType = 1011;\r\n\r\n/**\r\n * An unsigned short data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedShortType = 1012;\r\n\r\n/**\r\n * An int data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const IntType = 1013;\r\n\r\n/**\r\n * An unsigned int data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedIntType = 1014;\r\n\r\n/**\r\n * A float data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const FloatType = 1015;\r\n\r\n/**\r\n * A half float data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const HalfFloatType = 1016;\r\n\r\n/**\r\n * An unsigned short 4_4_4_4 (packed) data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedShort4444Type = 1017;\r\n\r\n/**\r\n * An unsigned short 5_5_5_1 (packed) data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedShort5551Type = 1018;\r\n\r\n/**\r\n * An unsigned int 24_8 data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedInt248Type = 1020;\r\n\r\n/**\r\n * An unsigned int 5_9_9_9 (packed) data type for textures.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const UnsignedInt5999Type = 35902;\r\n\r\n/**\r\n * Discards the red, green and blue components and reads just the alpha component.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AlphaFormat = 1021;\r\n\r\n/**\r\n * Discards the alpha component and reads the red, green and blue component.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBFormat = 1022;\r\n\r\n/**\r\n * Reads the red, green, blue and alpha components.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBAFormat = 1023;\r\n\r\n/**\r\n * Reads each element as a single depth value, converts it to floating point, and clamps to the range `[0,1]`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DepthFormat = 1026;\r\n\r\n/**\r\n * Reads each element is a pair of depth and stencil values. The depth component of the pair is interpreted as\r\n * in `DepthFormat`. The stencil component is interpreted based on the depth + stencil internal format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DepthStencilFormat = 1027;\r\n\r\n/**\r\n * Discards the green, blue and alpha components and reads just the red component.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RedFormat = 1028;\r\n\r\n/**\r\n * Discards the green, blue and alpha components and reads just the red component. The texels are read as integers instead of floating point.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RedIntegerFormat = 1029;\r\n\r\n/**\r\n * Discards the alpha, and blue components and reads the red, and green components.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGFormat = 1030;\r\n\r\n/**\r\n * Discards the alpha, and blue components and reads the red, and green components. The texels are read as integers instead of floating point.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGIntegerFormat = 1031;\r\n\r\n/**\r\n * Discards the alpha component and reads the red, green and blue component. The texels are read as integers instead of floating point.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBIntegerFormat = 1032;\r\n\r\n/**\r\n * Reads the red, green, blue and alpha components. The texels are read as integers instead of floating point.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBAIntegerFormat = 1033;\r\n\r\n/**\r\n * A DXT1-compressed image in an RGB image format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_S3TC_DXT1_Format = 33776;\r\n\r\n/**\r\n * A DXT1-compressed image in an RGB image format with a simple on/off alpha value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_S3TC_DXT1_Format = 33777;\r\n\r\n/**\r\n * A DXT3-compressed image in an RGBA image format. Compared to a 32-bit RGBA texture, it offers 4:1 compression.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_S3TC_DXT3_Format = 33778;\r\n\r\n/**\r\n * A DXT5-compressed image in an RGBA image format. It also provides a 4:1 compression, but differs to the DXT3\r\n * compression in how the alpha compression is done.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_S3TC_DXT5_Format = 33779;\r\n\r\n/**\r\n * PVRTC RGB compression in 4-bit mode. One block for each 4×4 pixels.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_PVRTC_4BPPV1_Format = 35840;\r\n\r\n/**\r\n * PVRTC RGB compression in 2-bit mode. One block for each 8×4 pixels.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_PVRTC_2BPPV1_Format = 35841;\r\n\r\n/**\r\n * PVRTC RGBA compression in 4-bit mode. One block for each 4×4 pixels.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_PVRTC_4BPPV1_Format = 35842;\r\n\r\n/**\r\n * PVRTC RGBA compression in 2-bit mode. One block for each 8×4 pixels.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_PVRTC_2BPPV1_Format = 35843;\r\n\r\n/**\r\n * ETC1 RGB format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_ETC1_Format = 36196;\r\n\r\n/**\r\n * ETC2 RGB format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_ETC2_Format = 37492;\r\n\r\n/**\r\n * ETC2 RGBA format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ETC2_EAC_Format = 37496;\r\n\r\n/**\r\n * ASTC RGBA 4x4 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_4x4_Format = 37808;\r\n\r\n/**\r\n * ASTC RGBA 5x4 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_5x4_Format = 37809;\r\n\r\n/**\r\n * ASTC RGBA 5x5 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_5x5_Format = 37810;\r\n\r\n/**\r\n * ASTC RGBA 6x5 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_6x5_Format = 37811;\r\n\r\n/**\r\n * ASTC RGBA 6x6 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_6x6_Format = 37812;\r\n\r\n/**\r\n * ASTC RGBA 8x5 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_8x5_Format = 37813;\r\n\r\n/**\r\n * ASTC RGBA 8x6 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_8x6_Format = 37814;\r\n\r\n/**\r\n * ASTC RGBA 8x8 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_8x8_Format = 37815;\r\n\r\n/**\r\n * ASTC RGBA 10x5 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_10x5_Format = 37816;\r\n\r\n/**\r\n * ASTC RGBA 10x6 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_10x6_Format = 37817;\r\n\r\n/**\r\n * ASTC RGBA 10x8 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_10x8_Format = 37818;\r\n\r\n/**\r\n * ASTC RGBA 10x10 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_10x10_Format = 37819;\r\n\r\n/**\r\n * ASTC RGBA 12x10 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_12x10_Format = 37820;\r\n\r\n/**\r\n * ASTC RGBA 12x12 format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_ASTC_12x12_Format = 37821;\r\n\r\n/**\r\n * BPTC RGBA format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBA_BPTC_Format = 36492;\r\n\r\n/**\r\n * BPTC Signed RGB format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_BPTC_SIGNED_Format = 36494;\r\n\r\n/**\r\n * BPTC Unsigned RGB format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGB_BPTC_UNSIGNED_Format = 36495;\r\n\r\n/**\r\n * RGTC1 Red format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RED_RGTC1_Format = 36283;\r\n\r\n/**\r\n * RGTC1 Signed Red format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SIGNED_RED_RGTC1_Format = 36284;\r\n\r\n/**\r\n * RGTC2 Red Green format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RED_GREEN_RGTC2_Format = 36285;\r\n\r\n/**\r\n * RGTC2 Signed Red Green format.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const SIGNED_RED_GREEN_RGTC2_Format = 36286;\r\n\r\n/**\r\n * Animations are played once.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LoopOnce = 2200;\r\n\r\n/**\r\n * Animations are played with a chosen number of repetitions, each time jumping from\r\n * the end of the clip directly to its beginning.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LoopRepeat = 2201;\r\n\r\n/**\r\n * Animations are played with a chosen number of repetitions, alternately playing forward\r\n * and backward.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LoopPingPong = 2202;\r\n\r\n/**\r\n * Discrete interpolation mode for keyframe tracks.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const InterpolateDiscrete = 2300;\r\n\r\n/**\r\n * Linear interpolation mode for keyframe tracks.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const InterpolateLinear = 2301;\r\n\r\n/**\r\n * Smooth interpolation mode for keyframe tracks.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const InterpolateSmooth = 2302;\r\n\r\n/**\r\n * Zero curvature ending for animations.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ZeroCurvatureEnding = 2400;\r\n\r\n/**\r\n * Zero slope ending for animations.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ZeroSlopeEnding = 2401;\r\n\r\n/**\r\n * Wrap around ending for animations.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const WrapAroundEnding = 2402;\r\n\r\n/**\r\n * Default animation blend mode.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NormalAnimationBlendMode = 2500;\r\n\r\n/**\r\n * Additive animation blend mode. Can be used to layer motions on top of\r\n * each other to build complex performances from smaller re-usable assets.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AdditiveAnimationBlendMode = 2501;\r\n\r\n/**\r\n * For every three vertices draw a single triangle.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const TrianglesDrawMode = 0;\r\n\r\n/**\r\n * For each vertex draw a triangle from the last three vertices.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const TriangleStripDrawMode = 1;\r\n\r\n/**\r\n * For each vertex draw a triangle from the first vertex and the last two vertices.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const TriangleFanDrawMode = 2;\r\n\r\n/**\r\n * Basic depth packing.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const BasicDepthPacking = 3200;\r\n\r\n/**\r\n * A depth value is packed into 32 bit RGBA.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBADepthPacking = 3201;\r\n\r\n/**\r\n * A depth value is packed into 24 bit RGB.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGBDepthPacking = 3202;\r\n\r\n/**\r\n * A depth value is packed into 16 bit RG.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const RGDepthPacking = 3203;\r\n\r\n/**\r\n * Normal information is relative to the underlying surface.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const TangentSpaceNormalMap = 0;\r\n\r\n/**\r\n * Normal information is relative to the object orientation.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ObjectSpaceNormalMap = 1;\r\n\r\n// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.\r\n\r\n/**\r\n * No color space.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const NoColorSpace = '';\r\n\r\n/**\r\n * sRGB color space.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const SRGBColorSpace = 'srgb';\r\n\r\n/**\r\n * sRGB-linear color space.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const LinearSRGBColorSpace = 'srgb-linear';\r\n\r\n/**\r\n * Linear transfer function.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const LinearTransfer = 'linear';\r\n\r\n/**\r\n * sRGB transfer function.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const SRGBTransfer = 'srgb';\r\n\r\n/**\r\n * Sets the stencil buffer value to `0`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ZeroStencilOp = 0;\r\n\r\n/**\r\n * Keeps the current value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const KeepStencilOp = 7680;\r\n\r\n/**\r\n * Sets the stencil buffer value to the specified reference value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const ReplaceStencilOp = 7681;\r\n\r\n/**\r\n * Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const IncrementStencilOp = 7682;\r\n\r\n/**\r\n * Decrements the current stencil buffer value. Clamps to `0`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DecrementStencilOp = 7683;\r\n\r\n/**\r\n * Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing\r\n * the maximum representable unsigned value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const IncrementWrapStencilOp = 34055;\r\n\r\n/**\r\n * Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum representable\r\n * unsigned value when decrementing a stencil buffer value of `0`.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DecrementWrapStencilOp = 34056;\r\n\r\n/**\r\n * Inverts the current stencil buffer value bitwise.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const InvertStencilOp = 5386;\r\n\r\n/**\r\n * Will never return true.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NeverStencilFunc = 512;\r\n\r\n/**\r\n * Will return true if the stencil reference value is less than the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessStencilFunc = 513;\r\n\r\n/**\r\n * Will return true if the stencil reference value is equal to the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const EqualStencilFunc = 514;\r\n\r\n/**\r\n * Will return true if the stencil reference value is less than or equal to the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessEqualStencilFunc = 515;\r\n\r\n/**\r\n * Will return true if the stencil reference value is greater than the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterStencilFunc = 516;\r\n\r\n/**\r\n * Will return true if the stencil reference value is not equal to the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NotEqualStencilFunc = 517;\r\n\r\n/**\r\n * Will return true if the stencil reference value is greater than or equal to the current stencil value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterEqualStencilFunc = 518;\r\n\r\n/**\r\n * Will always return true.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AlwaysStencilFunc = 519;\r\n\r\n/**\r\n * Never pass.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NeverCompare = 512;\r\n\r\n/**\r\n * Pass if the incoming value is less than the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessCompare = 513;\r\n\r\n/**\r\n * Pass if the incoming value equals the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const EqualCompare = 514;\r\n\r\n/**\r\n * Pass if the incoming value is less than or equal to the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const LessEqualCompare = 515;\r\n\r\n/**\r\n * Pass if the incoming value is greater than the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterCompare = 516;\r\n\r\n/**\r\n * Pass if the incoming value is not equal to the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const NotEqualCompare = 517;\r\n\r\n/**\r\n * Pass if the incoming value is greater than or equal to the texture value.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const GreaterEqualCompare = 518;\r\n\r\n/**\r\n * Always pass.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const AlwaysCompare = 519;\r\n\r\n/**\r\n * The contents are intended to be specified once by the application, and used many\r\n * times as the source for drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StaticDrawUsage = 35044;\r\n\r\n/**\r\n * The contents are intended to be respecified repeatedly by the application, and\r\n * used many times as the source for drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DynamicDrawUsage = 35048;\r\n\r\n/**\r\n * The contents are intended to be specified once by the application, and used at most\r\n * a few times as the source for drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StreamDrawUsage = 35040;\r\n\r\n/**\r\n * The contents are intended to be specified once by reading data from the 3D API, and queried\r\n * many times by the application.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StaticReadUsage = 35045;\r\n\r\n/**\r\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and queried\r\n * many times by the application.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DynamicReadUsage = 35049;\r\n\r\n/**\r\n * The contents are intended to be specified once by reading data from the 3D API, and queried at most\r\n * a few times by the application\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StreamReadUsage = 35041;\r\n\r\n/**\r\n * The contents are intended to be specified once by reading data from the 3D API, and used many times as\r\n * the source for WebGL drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StaticCopyUsage = 35046;\r\n\r\n/**\r\n * The contents are intended to be respecified repeatedly by reading data from the 3D API, and used many times\r\n * as the source for WebGL drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const DynamicCopyUsage = 35050;\r\n\r\n/**\r\n * The contents are intended to be specified once by reading data from the 3D API, and used at most a few times\r\n * as the source for WebGL drawing and image specification commands.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const StreamCopyUsage = 35042;\r\n\r\n/**\r\n * GLSL 1 shader code.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const GLSL1 = '100';\r\n\r\n/**\r\n * GLSL 3 shader code.\r\n *\r\n * @type {string}\r\n * @constant\r\n */\r\nexport const GLSL3 = '300 es';\r\n\r\n/**\r\n * WebGL coordinate system.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const WebGLCoordinateSystem = 2000;\r\n\r\n/**\r\n * WebGPU coordinate system.\r\n *\r\n * @type {number}\r\n * @constant\r\n */\r\nexport const WebGPUCoordinateSystem = 2001;\r\n\r\n/**\r\n * Represents the different timestamp query types.\r\n *\r\n * @type {ConstantsTimestampQuery}\r\n * @constant\r\n */\r\nexport const TimestampQuery = {\r\n\tCOMPUTE: 'compute',\r\n\tRENDER: 'render'\r\n};\r\n\r\n/**\r\n * Represents mouse buttons and interaction types in context of controls.\r\n *\r\n * @type {ConstantsInterpolationSamplingType}\r\n * @constant\r\n */\r\nexport const InterpolationSamplingType = {\r\n\tPERSPECTIVE: 'perspective',\r\n\tLINEAR: 'linear',\r\n\tFLAT: 'flat'\r\n};\r\n\r\n/**\r\n * Represents the different interpolation sampling modes.\r\n *\r\n * @type {ConstantsInterpolationSamplingMode}\r\n * @constant\r\n */\r\nexport const InterpolationSamplingMode = {\r\n\tNORMAL: 'normal',\r\n\tCENTROID: 'centroid',\r\n\tSAMPLE: 'sample',\r\n\tFIRST: 'first',\r\n\tEITHER: 'either'\r\n};\r\n\r\n/**\r\n * This type represents mouse buttons and interaction types in context of controls.\r\n *\r\n * @typedef {Object} ConstantsMouse\r\n * @property {number} MIDDLE - The left mouse button.\r\n * @property {number} LEFT - The middle mouse button.\r\n * @property {number} RIGHT - The right mouse button.\r\n * @property {number} ROTATE - A rotate interaction.\r\n * @property {number} DOLLY - A dolly interaction.\r\n * @property {number} PAN - A pan interaction.\r\n **/\r\n\r\n/**\r\n * This type represents touch interaction types in context of controls.\r\n *\r\n * @typedef {Object} ConstantsTouch\r\n * @property {number} ROTATE - A rotate interaction.\r\n * @property {number} PAN - A pan interaction.\r\n * @property {number} DOLLY_PAN - The dolly-pan interaction.\r\n * @property {number} DOLLY_ROTATE - A dolly-rotate interaction.\r\n **/\r\n\r\n/**\r\n * This type represents the different timestamp query types.\r\n *\r\n * @typedef {Object} ConstantsTimestampQuery\r\n * @property {string} COMPUTE - A `compute` timestamp query.\r\n * @property {string} RENDER - A `render` timestamp query.\r\n **/\r\n\r\n/**\r\n * Represents the different interpolation sampling types.\r\n *\r\n * @typedef {Object} ConstantsInterpolationSamplingType\r\n * @property {string} PERSPECTIVE - Perspective-correct interpolation.\r\n * @property {string} LINEAR - Linear interpolation.\r\n * @property {string} FLAT - Flat interpolation.\r\n */\r\n\r\n/**\r\n * Represents the different interpolation sampling modes.\r\n *\r\n * @typedef {Object} ConstantsInterpolationSamplingMode\r\n * @property {string} NORMAL - Normal sampling mode.\r\n * @property {string} CENTROID - Centroid sampling mode.\r\n * @property {string} SAMPLE - Sample-specific sampling mode.\r\n * @property {string} FLAT_FIRST - Flat interpolation using the first vertex.\r\n * @property {string} FLAT_EITHER - Flat interpolation using either vertex.\r\n */\r\n", "/**\r\n * Represents a 3x3 matrix.\r\n *\r\n * A Note on Row-Major and Column-Major Ordering:\r\n *\r\n * The constructor and {@link Matrix3#set} method take arguments in\r\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\r\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\r\n * This means that calling:\r\n * ```js\r\n * const m = new THREE.Matrix();\r\n * m.set( 11, 12, 13,\r\n *        21, 22, 23,\r\n *        31, 32, 33 );\r\n * ```\r\n * will result in the elements array containing:\r\n * ```js\r\n * m.elements = [ 11, 21, 31,\r\n *                12, 22, 32,\r\n *                13, 23, 33 ];\r\n * ```\r\n * and internally all calculations are performed using column-major ordering.\r\n * However, as the actual ordering makes no difference mathematically and\r\n * most people are used to thinking about matrices in row-major order, the\r\n * three.js documentation shows matrices in row-major order. Just bear in\r\n * mind that if you are reading the source code, you'll have to take the\r\n * transpose of any matrices outlined here to make sense of the calculations.\r\n */\r\nclass Matrix3 {\r\n\r\n\t/**\r\n\t * Constructs a new 3x3 matrix. The arguments are supposed to be\r\n\t * in row-major order. If no arguments are provided, the constructor\r\n\t * initializes the matrix as an identity matrix.\r\n\t *\r\n\t * @param {number} [n11] - 1-1 matrix element.\r\n\t * @param {number} [n12] - 1-2 matrix element.\r\n\t * @param {number} [n13] - 1-3 matrix element.\r\n\t * @param {number} [n21] - 2-1 matrix element.\r\n\t * @param {number} [n22] - 2-2 matrix element.\r\n\t * @param {number} [n23] - 2-3 matrix element.\r\n\t * @param {number} [n31] - 3-1 matrix element.\r\n\t * @param {number} [n32] - 3-2 matrix element.\r\n\t * @param {number} [n33] - 3-3 matrix element.\r\n\t */\r\n\tconstructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tMatrix3.prototype.isMatrix3 = true;\r\n\r\n\t\t/**\r\n\t\t * A column-major list of matrix values.\r\n\t\t *\r\n\t\t * @type {Array<number>}\r\n\t\t */\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( n11 !== undefined ) {\r\n\r\n\t\t\tthis.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the elements of the matrix.The arguments are supposed to be\r\n\t * in row-major order.\r\n\t *\r\n\t * @param {number} [n11] - 1-1 matrix element.\r\n\t * @param {number} [n12] - 1-2 matrix element.\r\n\t * @param {number} [n13] - 1-3 matrix element.\r\n\t * @param {number} [n21] - 2-1 matrix element.\r\n\t * @param {number} [n22] - 2-2 matrix element.\r\n\t * @param {number} [n23] - 2-3 matrix element.\r\n\t * @param {number} [n31] - 3-1 matrix element.\r\n\t * @param {number} [n32] - 3-2 matrix element.\r\n\t * @param {number} [n33] - 3-3 matrix element.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tset( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;\r\n\t\tte[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;\r\n\t\tte[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix to the 3x3 identity matrix.\r\n\t *\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tidentity() {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0,\r\n\t\t\t0, 1, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given matrix to this instance.\r\n\t *\r\n\t * @param {Matrix3} m - The matrix to copy.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tcopy( m ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];\r\n\t\tte[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];\r\n\t\tte[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts the basis of this matrix into the three axis vectors provided.\r\n\t *\r\n\t * @param {Vector3} xAxis - The basis's x axis.\r\n\t * @param {Vector3} yAxis - The basis's y axis.\r\n\t * @param {Vector3} zAxis - The basis's z axis.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\textractBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrix3Column( this, 0 );\r\n\t\tyAxis.setFromMatrix3Column( this, 1 );\r\n\t\tzAxis.setFromMatrix3Column( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Set this matrix to the upper 3x3 matrix of the given 4x4 matrix.\r\n\t *\r\n\t * @param {Matrix4} m - The 4x4 matrix.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tsetFromMatrix4( m ) {\r\n\r\n\t\tconst me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 4 ], me[ 8 ],\r\n\t\t\tme[ 1 ], me[ 5 ], me[ 9 ],\r\n\t\t\tme[ 2 ], me[ 6 ], me[ 10 ]\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-multiplies this matrix by the given 3x3 matrix.\r\n\t *\r\n\t * @param {Matrix3} m - The matrix to multiply with.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tmultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-multiplies this matrix by the given 3x3 matrix.\r\n\t *\r\n\t * @param {Matrix3} m - The matrix to multiply with.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tpremultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiples the given 3x3 matrices and stores the result\r\n\t * in this matrix.\r\n\t *\r\n\t * @param {Matrix3} a - The first matrix.\r\n\t * @param {Matrix3} b - The second matrix.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tmultiplyMatrices( a, b ) {\r\n\r\n\t\tconst ae = a.elements;\r\n\t\tconst be = b.elements;\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];\r\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];\r\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];\r\n\r\n\t\tconst b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];\r\n\t\tconst b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];\r\n\t\tconst b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;\r\n\t\tte[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;\r\n\t\tte[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;\r\n\t\tte[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;\r\n\t\tte[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;\r\n\t\tte[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;\r\n\t\tte[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies every component of the matrix by the given scalar.\r\n\t *\r\n\t * @param {number} s - The scalar.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes and returns the determinant of this matrix.\r\n\t *\r\n\t * @return {number} The determinant.\r\n\t */\r\n\tdeterminant() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],\r\n\t\t\td = te[ 3 ], e = te[ 4 ], f = te[ 5 ],\r\n\t\t\tg = te[ 6 ], h = te[ 7 ], i = te[ 8 ];\r\n\r\n\t\treturn a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\r\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\r\n\t * a zero matrix instead.\r\n\t *\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tinvert() {\r\n\r\n\t\tconst te = this.elements,\r\n\r\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],\r\n\t\t\tn12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],\r\n\t\t\tn13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],\r\n\r\n\t\t\tt11 = n33 * n22 - n32 * n23,\r\n\t\t\tt12 = n32 * n13 - n33 * n12,\r\n\t\t\tt13 = n23 * n12 - n22 * n13,\r\n\r\n\t\t\tdet = n11 * t11 + n21 * t12 + n31 * t13;\r\n\r\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );\r\n\r\n\t\tconst detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;\r\n\t\tte[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;\r\n\r\n\t\tte[ 3 ] = t12 * detInv;\r\n\t\tte[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;\r\n\t\tte[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;\r\n\r\n\t\tte[ 6 ] = t13 * detInv;\r\n\t\tte[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;\r\n\t\tte[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transposes this matrix in place.\r\n\t *\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\ttranspose() {\r\n\r\n\t\tlet tmp;\r\n\t\tconst m = this.elements;\r\n\r\n\t\ttmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;\r\n\t\ttmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;\r\n\t\ttmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the normal matrix which is the inverse transpose of the upper\r\n\t * left 3x3 portion of the given 4x4 matrix.\r\n\t *\r\n\t * @param {Matrix4} matrix4 - The 4x4 matrix.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tgetNormalMatrix( matrix4 ) {\r\n\r\n\t\treturn this.setFromMatrix4( matrix4 ).invert().transpose();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transposes this matrix into the supplied array, and returns itself unchanged.\r\n\t *\r\n\t * @param {Array<number>} r - An array to store the transposed matrix elements.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\ttransposeIntoArray( r ) {\r\n\r\n\t\tconst m = this.elements;\r\n\r\n\t\tr[ 0 ] = m[ 0 ];\r\n\t\tr[ 1 ] = m[ 3 ];\r\n\t\tr[ 2 ] = m[ 6 ];\r\n\t\tr[ 3 ] = m[ 1 ];\r\n\t\tr[ 4 ] = m[ 4 ];\r\n\t\tr[ 5 ] = m[ 7 ];\r\n\t\tr[ 6 ] = m[ 2 ];\r\n\t\tr[ 7 ] = m[ 5 ];\r\n\t\tr[ 8 ] = m[ 8 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the UV transform matrix from offset, repeat, rotation, and center.\r\n\t *\r\n\t * @param {number} tx - Offset x.\r\n\t * @param {number} ty - Offset y.\r\n\t * @param {number} sx - Repeat x.\r\n\t * @param {number} sy - Repeat y.\r\n\t * @param {number} rotation - Rotation, in radians. Positive values rotate counterclockwise.\r\n\t * @param {number} cx - Center x of rotation.\r\n\t * @param {number} cy - Center y of rotation\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tsetUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {\r\n\r\n\t\tconst c = Math.cos( rotation );\r\n\t\tconst s = Math.sin( rotation );\r\n\r\n\t\tthis.set(\r\n\t\t\tsx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,\r\n\t\t\t- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,\r\n\t\t\t0, 0, 1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Scales this matrix with the given scalar values.\r\n\t *\r\n\t * @param {number} sx - The amount to scale in the X axis.\r\n\t * @param {number} sy - The amount to scale in the Y axis.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tscale( sx, sy ) {\r\n\r\n\t\tthis.premultiply( _m3.makeScale( sx, sy ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates this matrix by the given angle.\r\n\t *\r\n\t * @param {number} theta - The rotation in radians.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\trotate( theta ) {\r\n\r\n\t\tthis.premultiply( _m3.makeRotation( - theta ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Translates this matrix by the given scalar values.\r\n\t *\r\n\t * @param {number} tx - The amount to translate in the X axis.\r\n\t * @param {number} ty - The amount to translate in the Y axis.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\ttranslate( tx, ty ) {\r\n\r\n\t\tthis.premultiply( _m3.makeTranslation( tx, ty ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t// for 2D Transforms\r\n\r\n\t/**\r\n\t * Sets this matrix as a 2D translation transform.\r\n\t *\r\n\t * @param {number|Vector2} x - The amount to translate in the X axis or alternatively a translation vector.\r\n\t * @param {number} y - The amount to translate in the Y axis.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tmakeTranslation( x, y ) {\r\n\r\n\t\tif ( x.isVector2 ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, x.x,\r\n\t\t\t\t0, 1, x.y,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, x,\r\n\t\t\t\t0, 1, y,\r\n\t\t\t\t0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix as a 2D rotational transformation.\r\n\t *\r\n\t * @param {number} theta - The rotation in radians.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tmakeRotation( theta ) {\r\n\r\n\t\t// counterclockwise\r\n\r\n\t\tconst c = Math.cos( theta );\r\n\t\tconst s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0,\r\n\t\t\ts, c, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix as a 2D scale transform.\r\n\t *\r\n\t * @param {number} x - The amount to scale in the X axis.\r\n\t * @param {number} y - The amount to scale in the Y axis.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tmakeScale( x, y ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0,\r\n\t\t\t0, y, 0,\r\n\t\t\t0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this matrix is equal with the given one.\r\n\t *\r\n\t * @param {Matrix3} matrix - The matrix to test for equality.\r\n\t * @return {boolean} Whether this matrix is equal with the given one.\r\n\t */\r\n\tequals( matrix ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = matrix.elements;\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the elements of the matrix from the given array.\r\n\t *\r\n\t * @param {Array<number>} array - The matrix elements in column-major order.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Matrix3} A reference to this matrix.\r\n\t */\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tfor ( let i = 0; i < 9; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Writes the elements of this matrix to the given array. If no array is provided,\r\n\t * the method returns a new instance.\r\n\t *\r\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Array<number>} The matrix elements in column-major order.\r\n\t */\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a matrix with copied values from this instance.\r\n\t *\r\n\t * @return {Matrix3} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().fromArray( this.elements );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _m3 = /*@__PURE__*/ new Matrix3();\r\n\r\nexport { Matrix3 };\r\n", "function arrayMin( array ) {\r\n\r\n\tif ( array.length === 0 ) return Infinity;\r\n\r\n\tlet min = array[ 0 ];\r\n\r\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\tif ( array[ i ] < min ) min = array[ i ];\r\n\r\n\t}\r\n\r\n\treturn min;\r\n\r\n}\r\n\r\nfunction arrayMax( array ) {\r\n\r\n\tif ( array.length === 0 ) return - Infinity;\r\n\r\n\tlet max = array[ 0 ];\r\n\r\n\tfor ( let i = 1, l = array.length; i < l; ++ i ) {\r\n\r\n\t\tif ( array[ i ] > max ) max = array[ i ];\r\n\r\n\t}\r\n\r\n\treturn max;\r\n\r\n}\r\n\r\nfunction arrayNeedsUint32( array ) {\r\n\r\n\t// assumes larger values usually on last\r\n\r\n\tfor ( let i = array.length - 1; i >= 0; -- i ) {\r\n\r\n\t\tif ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565\r\n\r\n\t}\r\n\r\n\treturn false;\r\n\r\n}\r\n\r\nconst TYPED_ARRAYS = {\r\n\tInt8Array: Int8Array,\r\n\tUint8Array: Uint8Array,\r\n\tUint8ClampedArray: Uint8ClampedArray,\r\n\tInt16Array: Int16Array,\r\n\tUint16Array: Uint16Array,\r\n\tInt32Array: Int32Array,\r\n\tUint32Array: Uint32Array,\r\n\tFloat32Array: Float32Array,\r\n\tFloat64Array: Float64Array\r\n};\r\n\r\nfunction getTypedArray( type, buffer ) {\r\n\r\n\treturn new TYPED_ARRAYS[ type ]( buffer );\r\n\r\n}\r\n\r\nfunction createElementNS( name ) {\r\n\r\n\treturn document.createElementNS( 'http://www.w3.org/1999/xhtml', name );\r\n\r\n}\r\n\r\nfunction createCanvasElement() {\r\n\r\n\tconst canvas = createElementNS( 'canvas' );\r\n\tcanvas.style.display = 'block';\r\n\treturn canvas;\r\n\r\n}\r\n\r\nconst _cache = {};\r\n\r\nfunction warnOnce( message ) {\r\n\r\n\tif ( message in _cache ) return;\r\n\r\n\t_cache[ message ] = true;\r\n\r\n\tconsole.warn( message );\r\n\r\n}\r\n\r\nfunction probeAsync( gl, sync, interval ) {\r\n\r\n\treturn new Promise( function ( resolve, reject ) {\r\n\r\n\t\tfunction probe() {\r\n\r\n\t\t\tswitch ( gl.clientWaitSync( sync, gl.SYNC_FLUSH_COMMANDS_BIT, 0 ) ) {\r\n\r\n\t\t\t\tcase gl.WAIT_FAILED:\r\n\t\t\t\t\treject();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase gl.TIMEOUT_EXPIRED:\r\n\t\t\t\t\tsetTimeout( probe, interval );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tresolve();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tsetTimeout( probe, interval );\r\n\r\n\t} );\r\n\r\n}\r\n\r\nfunction toNormalizedProjectionMatrix( projectionMatrix ) {\r\n\r\n\tconst m = projectionMatrix.elements;\r\n\r\n\t// Convert [-1, 1] to [0, 1] projection matrix\r\n\tm[ 2 ] = 0.5 * m[ 2 ] + 0.5 * m[ 3 ];\r\n\tm[ 6 ] = 0.5 * m[ 6 ] + 0.5 * m[ 7 ];\r\n\tm[ 10 ] = 0.5 * m[ 10 ] + 0.5 * m[ 11 ];\r\n\tm[ 14 ] = 0.5 * m[ 14 ] + 0.5 * m[ 15 ];\r\n\r\n}\r\n\r\nfunction toReversedProjectionMatrix( projectionMatrix ) {\r\n\r\n\tconst m = projectionMatrix.elements;\r\n\tconst isPerspectiveMatrix = m[ 11 ] === - 1;\r\n\r\n\t// Reverse [0, 1] projection matrix\r\n\tif ( isPerspectiveMatrix ) {\r\n\r\n\t\tm[ 10 ] = - m[ 10 ] - 1;\r\n\t\tm[ 14 ] = - m[ 14 ];\r\n\r\n\t} else {\r\n\r\n\t\tm[ 10 ] = - m[ 10 ];\r\n\t\tm[ 14 ] = - m[ 14 ] + 1;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { arrayMin, arrayMax, arrayNeedsUint32, getTypedArray, createElementNS, createCanvasElement, warnOnce, probeAsync, toNormalizedProjectionMatrix, toReversedProjectionMatrix };\r\n", "import { SRGBColorSpace, LinearSRGBColorSpace, SRGBTransfer, LinearTransfer, NoColorSpace } from '../constants.js';\r\nimport { Matrix3 } from './Matrix3.js';\r\nimport { warnOnce } from '../utils.js';\r\n\r\nconst LINEAR_REC709_TO_XYZ = /*@__PURE__*/ new Matrix3().set(\r\n\t0.4123908, 0.3575843, 0.1804808,\r\n\t0.2126390, 0.7151687, 0.0721923,\r\n\t0.0193308, 0.1191948, 0.9505322\r\n);\r\n\r\nconst XYZ_TO_LINEAR_REC709 = /*@__PURE__*/ new Matrix3().set(\r\n\t3.2409699, - 1.5373832, - 0.4986108,\r\n\t- 0.9692436, 1.8759675, 0.0415551,\r\n\t0.0556301, - 0.2039770, 1.0569715\r\n);\r\n\r\nfunction createColorManagement() {\r\n\r\n\tconst ColorManagement = {\r\n\r\n\t\tenabled: true,\r\n\r\n\t\tworkingColorSpace: LinearSRGBColorSpace,\r\n\r\n\t\t/**\r\n\t\t * Implementations of supported color spaces.\r\n\t\t *\r\n\t\t * Required:\r\n\t\t *\t- primaries: chromaticity coordinates [ rx ry gx gy bx by ]\r\n\t\t *\t- whitePoint: reference white [ x y ]\r\n\t\t *\t- transfer: transfer function (pre-defined)\r\n\t\t *\t- toXYZ: Matrix3 RGB to XYZ transform\r\n\t\t *\t- fromXYZ: Matrix3 XYZ to RGB transform\r\n\t\t *\t- luminanceCoefficients: RGB luminance coefficients\r\n\t\t *\r\n\t\t * Optional:\r\n\t\t *  - outputColorSpaceConfig: { drawingBufferColorSpace: ColorSpace }\r\n\t\t *  - workingColorSpaceConfig: { unpackColorSpace: ColorSpace }\r\n\t\t *\r\n\t\t * Reference:\r\n\t\t * - https://www.russellcottrell.com/photo/matrixCalculator.htm\r\n\t\t */\r\n\t\tspaces: {},\r\n\r\n\t\tconvert: function ( color, sourceColorSpace, targetColorSpace ) {\r\n\r\n\t\t\tif ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {\r\n\r\n\t\t\t\treturn color;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.spaces[ sourceColorSpace ].transfer === SRGBTransfer ) {\r\n\r\n\t\t\t\tcolor.r = SRGBToLinear( color.r );\r\n\t\t\t\tcolor.g = SRGBToLinear( color.g );\r\n\t\t\t\tcolor.b = SRGBToLinear( color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.spaces[ sourceColorSpace ].primaries !== this.spaces[ targetColorSpace ].primaries ) {\r\n\r\n\t\t\t\tcolor.applyMatrix3( this.spaces[ sourceColorSpace ].toXYZ );\r\n\t\t\t\tcolor.applyMatrix3( this.spaces[ targetColorSpace ].fromXYZ );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.spaces[ targetColorSpace ].transfer === SRGBTransfer ) {\r\n\r\n\t\t\t\tcolor.r = LinearToSRGB( color.r );\r\n\t\t\t\tcolor.g = LinearToSRGB( color.g );\r\n\t\t\t\tcolor.b = LinearToSRGB( color.b );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn color;\r\n\r\n\t\t},\r\n\r\n\t\tworkingToColorSpace: function ( color, targetColorSpace ) {\r\n\r\n\t\t\treturn this.convert( color, this.workingColorSpace, targetColorSpace );\r\n\r\n\t\t},\r\n\r\n\t\tcolorSpaceToWorking: function ( color, sourceColorSpace ) {\r\n\r\n\t\t\treturn this.convert( color, sourceColorSpace, this.workingColorSpace );\r\n\r\n\t\t},\r\n\r\n\t\tgetPrimaries: function ( colorSpace ) {\r\n\r\n\t\t\treturn this.spaces[ colorSpace ].primaries;\r\n\r\n\t\t},\r\n\r\n\t\tgetTransfer: function ( colorSpace ) {\r\n\r\n\t\t\tif ( colorSpace === NoColorSpace ) return LinearTransfer;\r\n\r\n\t\t\treturn this.spaces[ colorSpace ].transfer;\r\n\r\n\t\t},\r\n\r\n\t\tgetLuminanceCoefficients: function ( target, colorSpace = this.workingColorSpace ) {\r\n\r\n\t\t\treturn target.fromArray( this.spaces[ colorSpace ].luminanceCoefficients );\r\n\r\n\t\t},\r\n\r\n\t\tdefine: function ( colorSpaces ) {\r\n\r\n\t\t\tObject.assign( this.spaces, colorSpaces );\r\n\r\n\t\t},\r\n\r\n\t\t// Internal APIs\r\n\r\n\t\t_getMatrix: function ( targetMatrix, sourceColorSpace, targetColorSpace ) {\r\n\r\n\t\t\treturn targetMatrix\r\n\t\t\t\t.copy( this.spaces[ sourceColorSpace ].toXYZ )\r\n\t\t\t\t.multiply( this.spaces[ targetColorSpace ].fromXYZ );\r\n\r\n\t\t},\r\n\r\n\t\t_getDrawingBufferColorSpace: function ( colorSpace ) {\r\n\r\n\t\t\treturn this.spaces[ colorSpace ].outputColorSpaceConfig.drawingBufferColorSpace;\r\n\r\n\t\t},\r\n\r\n\t\t_getUnpackColorSpace: function ( colorSpace = this.workingColorSpace ) {\r\n\r\n\t\t\treturn this.spaces[ colorSpace ].workingColorSpaceConfig.unpackColorSpace;\r\n\r\n\t\t},\r\n\r\n\t\t// Deprecated\r\n\r\n\t\tfromWorkingColorSpace: function ( color, targetColorSpace ) {\r\n\r\n\t\t\twarnOnce( 'THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace().' ); // @deprecated, r177\r\n\r\n\t\t\treturn ColorManagement.workingToColorSpace( color, targetColorSpace );\r\n\r\n\t\t},\r\n\r\n\t\ttoWorkingColorSpace: function ( color, sourceColorSpace ) {\r\n\r\n\t\t\twarnOnce( 'THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking().' ); // @deprecated, r177\r\n\r\n\t\t\treturn ColorManagement.colorSpaceToWorking( color, sourceColorSpace );\r\n\r\n\t\t},\r\n\r\n\t};\r\n\r\n\t/******************************************************************************\r\n\t * sRGB definitions\r\n\t */\r\n\r\n\tconst REC709_PRIMARIES = [ 0.640, 0.330, 0.300, 0.600, 0.150, 0.060 ];\r\n\tconst REC709_LUMINANCE_COEFFICIENTS = [ 0.2126, 0.7152, 0.0722 ];\r\n\tconst D65 = [ 0.3127, 0.3290 ];\r\n\r\n\tColorManagement.define( {\r\n\r\n\t\t[ LinearSRGBColorSpace ]: {\r\n\t\t\tprimaries: REC709_PRIMARIES,\r\n\t\t\twhitePoint: D65,\r\n\t\t\ttransfer: LinearTransfer,\r\n\t\t\ttoXYZ: LINEAR_REC709_TO_XYZ,\r\n\t\t\tfromXYZ: XYZ_TO_LINEAR_REC709,\r\n\t\t\tluminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\r\n\t\t\tworkingColorSpaceConfig: { unpackColorSpace: SRGBColorSpace },\r\n\t\t\toutputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }\r\n\t\t},\r\n\r\n\t\t[ SRGBColorSpace ]: {\r\n\t\t\tprimaries: REC709_PRIMARIES,\r\n\t\t\twhitePoint: D65,\r\n\t\t\ttransfer: SRGBTransfer,\r\n\t\t\ttoXYZ: LINEAR_REC709_TO_XYZ,\r\n\t\t\tfromXYZ: XYZ_TO_LINEAR_REC709,\r\n\t\t\tluminanceCoefficients: REC709_LUMINANCE_COEFFICIENTS,\r\n\t\t\toutputColorSpaceConfig: { drawingBufferColorSpace: SRGBColorSpace }\r\n\t\t},\r\n\r\n\t} );\r\n\r\n\treturn ColorManagement;\r\n\r\n}\r\n\r\nexport const ColorManagement = /*@__PURE__*/ createColorManagement();\r\n\r\nexport function SRGBToLinear( c ) {\r\n\r\n\treturn ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );\r\n\r\n}\r\n\r\nexport function LinearToSRGB( c ) {\r\n\r\n\treturn ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;\r\n\r\n}\r\n", "import { clamp, euclideanModulo, lerp } from './MathUtils.js';\r\nimport { ColorManagement, SRGBToLinear, LinearToSRGB } from './ColorManagement.js';\r\nimport { SRGBColorSpace } from '../constants.js';\r\n\r\nconst _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,\r\n\t'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,\r\n\t'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,\r\n\t'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,\r\n\t'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,\r\n\t'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,\r\n\t'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,\r\n\t'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,\r\n\t'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,\r\n\t'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,\r\n\t'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,\r\n\t'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,\r\n\t'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,\r\n\t'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,\r\n\t'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,\r\n\t'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,\r\n\t'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,\r\n\t'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,\r\n\t'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,\r\n\t'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,\r\n\t'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,\r\n\t'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,\r\n\t'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,\r\n\t'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };\r\n\r\nconst _hslA = { h: 0, s: 0, l: 0 };\r\nconst _hslB = { h: 0, s: 0, l: 0 };\r\n\r\nfunction hue2rgb( p, q, t ) {\r\n\r\n\tif ( t < 0 ) t += 1;\r\n\tif ( t > 1 ) t -= 1;\r\n\tif ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;\r\n\tif ( t < 1 / 2 ) return q;\r\n\tif ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );\r\n\treturn p;\r\n\r\n}\r\n\r\n/**\r\n * A Color instance is represented by RGB components in the linear <i>working\r\n * color space</i>, which defaults to `LinearSRGBColorSpace`. Inputs\r\n * conventionally using `SRGBColorSpace` (such as hexadecimals and CSS\r\n * strings) are converted to the working color space automatically.\r\n *\r\n * ```js\r\n * // converted automatically from SRGBColorSpace to LinearSRGBColorSpace\r\n * const color = new THREE.Color().setHex( 0x112233 );\r\n * ```\r\n * Source color spaces may be specified explicitly, to ensure correct conversions.\r\n * ```js\r\n * // assumed already LinearSRGBColorSpace; no conversion\r\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5 );\r\n *\r\n * // converted explicitly from SRGBColorSpace to LinearSRGBColorSpace\r\n * const color = new THREE.Color().setRGB( 0.5, 0.5, 0.5, SRGBColorSpace );\r\n * ```\r\n * If THREE.ColorManagement is disabled, no conversions occur. For details,\r\n * see <i>Color management</i>. Iterating through a Color instance will yield\r\n * its components (r, g, b) in the corresponding order. A Color can be initialised\r\n * in any of the following ways:\r\n * ```js\r\n * //empty constructor - will default white\r\n * const color1 = new THREE.Color();\r\n *\r\n * //Hexadecimal color (recommended)\r\n * const color2 = new THREE.Color( 0xff0000 );\r\n *\r\n * //RGB string\r\n * const color3 = new THREE.Color(\"rgb(255, 0, 0)\");\r\n * const color4 = new THREE.Color(\"rgb(100%, 0%, 0%)\");\r\n *\r\n * //X11 color name - all 140 color names are supported.\r\n * //Note the lack of CamelCase in the name\r\n * const color5 = new THREE.Color( 'skyblue' );\r\n * //HSL string\r\n * const color6 = new THREE.Color(\"hsl(0, 100%, 50%)\");\r\n *\r\n * //Separate RGB values between 0 and 1\r\n * const color7 = new THREE.Color( 1, 0, 0 );\r\n * ```\r\n */\r\nclass Color {\r\n\r\n\t/**\r\n\t * Constructs a new color.\r\n\t *\r\n\t * Note that standard method of specifying color in three.js is with a hexadecimal triplet,\r\n\t * and that method is used throughout the rest of the documentation.\r\n\t *\r\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\r\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\r\n\t * @param {number} [g] - The green component.\r\n\t * @param {number} [b] - The blue component.\r\n\t */\r\n\tconstructor( r, g, b ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isColor = true;\r\n\r\n\t\t/**\r\n\t\t * The red component.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.r = 1;\r\n\r\n\t\t/**\r\n\t\t * The green component.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.g = 1;\r\n\r\n\t\t/**\r\n\t\t * The blue component.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.b = 1;\r\n\r\n\t\treturn this.set( r, g, b );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the colors's components from the given values.\r\n\t *\r\n\t * @param {(number|string|Color)} [r] - The red component of the color. If `g` and `b` are\r\n\t * not provided, it can be hexadecimal triplet, a CSS-style string or another `Color` instance.\r\n\t * @param {number} [g] - The green component.\r\n\t * @param {number} [b] - The blue component.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tset( r, g, b ) {\r\n\r\n\t\tif ( g === undefined && b === undefined ) {\r\n\r\n\t\t\t// r is THREE.Color, hex or string\r\n\r\n\t\t\tconst value = r;\r\n\r\n\t\t\tif ( value && value.isColor ) {\r\n\r\n\t\t\t\tthis.copy( value );\r\n\r\n\t\t\t} else if ( typeof value === 'number' ) {\r\n\r\n\t\t\t\tthis.setHex( value );\r\n\r\n\t\t\t} else if ( typeof value === 'string' ) {\r\n\r\n\t\t\t\tthis.setStyle( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.setRGB( r, g, b );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the colors's components to the given scalar value.\r\n\t *\r\n\t * @param {number} scalar - The scalar value.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.r = scalar;\r\n\t\tthis.g = scalar;\r\n\t\tthis.b = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this color from a hexadecimal value.\r\n\t *\r\n\t * @param {number} hex - The hexadecimal value.\r\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tsetHex( hex, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\thex = Math.floor( hex );\r\n\r\n\t\tthis.r = ( hex >> 16 & 255 ) / 255;\r\n\t\tthis.g = ( hex >> 8 & 255 ) / 255;\r\n\t\tthis.b = ( hex & 255 ) / 255;\r\n\r\n\t\tColorManagement.colorSpaceToWorking( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this color from RGB values.\r\n\t *\r\n\t * @param {number} r - Red channel value between `0.0` and `1.0`.\r\n\t * @param {number} g - Green channel value between `0.0` and `1.0`.\r\n\t * @param {number} b - Blue channel value between `0.0` and `1.0`.\r\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tsetRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\tthis.r = r;\r\n\t\tthis.g = g;\r\n\t\tthis.b = b;\r\n\r\n\t\tColorManagement.colorSpaceToWorking( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this color from RGB values.\r\n\t *\r\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\r\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\r\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\r\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tsetHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\t\th = euclideanModulo( h, 1 );\r\n\t\ts = clamp( s, 0, 1 );\r\n\t\tl = clamp( l, 0, 1 );\r\n\r\n\t\tif ( s === 0 ) {\r\n\r\n\t\t\tthis.r = this.g = this.b = l;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );\r\n\t\t\tconst q = ( 2 * l ) - p;\r\n\r\n\t\t\tthis.r = hue2rgb( q, p, h + 1 / 3 );\r\n\t\t\tthis.g = hue2rgb( q, p, h );\r\n\t\t\tthis.b = hue2rgb( q, p, h - 1 / 3 );\r\n\r\n\t\t}\r\n\r\n\t\tColorManagement.colorSpaceToWorking( this, colorSpace );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this color from a CSS-style string. For example, `rgb(250, 0,0)`,\r\n\t * `rgb(100%, 0%, 0%)`, `hsl(0, 100%, 50%)`, `#ff0000`, `#f00`, or `red` ( or\r\n\t * any [X11 color name]{@link https://en.wikipedia.org/wiki/X11_color_names#Color_name_chart} -\r\n\t * all 140 color names are supported).\r\n\t *\r\n\t * @param {string} style - Color as a CSS-style string.\r\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tsetStyle( style, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tfunction handleAlpha( string ) {\r\n\r\n\t\t\tif ( string === undefined ) return;\r\n\r\n\t\t\tif ( parseFloat( string ) < 1 ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\r\n\t\tlet m;\r\n\r\n\t\tif ( m = /^(\\w+)\\(([^\\)]*)\\)/.exec( style ) ) {\r\n\r\n\t\t\t// rgb / hsl\r\n\r\n\t\t\tlet color;\r\n\t\t\tconst name = m[ 1 ];\r\n\t\t\tconst components = m[ 2 ];\r\n\r\n\t\t\tswitch ( name ) {\r\n\r\n\t\t\t\tcase 'rgb':\r\n\t\t\t\tcase 'rgba':\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(255,0,0) rgba(255,0,0,0.5)\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this.setRGB(\r\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,\r\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,\r\n\t\t\t\t\t\t\tMath.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,\r\n\t\t\t\t\t\t\tcolorSpace\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*,\\s*(\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this.setRGB(\r\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,\r\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,\r\n\t\t\t\t\t\t\tMath.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,\r\n\t\t\t\t\t\t\tcolorSpace\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'hsl':\r\n\t\t\t\tcase 'hsla':\r\n\r\n\t\t\t\t\tif ( color = /^\\s*(\\d*\\.?\\d+)\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*,\\s*(\\d*\\.?\\d+)\\%\\s*(?:,\\s*(\\d*\\.?\\d+)\\s*)?$/.exec( components ) ) {\r\n\r\n\t\t\t\t\t\t// hsl(120,50%,50%) hsla(120,50%,50%,0.5)\r\n\r\n\t\t\t\t\t\thandleAlpha( color[ 4 ] );\r\n\r\n\t\t\t\t\t\treturn this.setHSL(\r\n\t\t\t\t\t\t\tparseFloat( color[ 1 ] ) / 360,\r\n\t\t\t\t\t\t\tparseFloat( color[ 2 ] ) / 100,\r\n\t\t\t\t\t\t\tparseFloat( color[ 3 ] ) / 100,\r\n\t\t\t\t\t\t\tcolorSpace\r\n\t\t\t\t\t\t);\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.Color: Unknown color model ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( m = /^\\#([A-Fa-f\\d]+)$/.exec( style ) ) {\r\n\r\n\t\t\t// hex color\r\n\r\n\t\t\tconst hex = m[ 1 ];\r\n\t\t\tconst size = hex.length;\r\n\r\n\t\t\tif ( size === 3 ) {\r\n\r\n\t\t\t\t// #ff0\r\n\t\t\t\treturn this.setRGB(\r\n\t\t\t\t\tparseInt( hex.charAt( 0 ), 16 ) / 15,\r\n\t\t\t\t\tparseInt( hex.charAt( 1 ), 16 ) / 15,\r\n\t\t\t\t\tparseInt( hex.charAt( 2 ), 16 ) / 15,\r\n\t\t\t\t\tcolorSpace\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( size === 6 ) {\r\n\r\n\t\t\t\t// #ff0000\r\n\t\t\t\treturn this.setHex( parseInt( hex, 16 ), colorSpace );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Color: Invalid hex color ' + style );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( style && style.length > 0 ) {\r\n\r\n\t\t\treturn this.setColorName( style, colorSpace );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this color from a color name. Faster than {@link Color#setStyle} if\r\n\t * you don't need the other CSS-style formats.\r\n\t *\r\n\t * For convenience, the list of names is exposed in `Color.NAMES` as a hash.\r\n\t * ```js\r\n\t * Color.NAMES.aliceblue // returns 0xF0F8FF\r\n\t * ```\r\n\t *\r\n\t * @param {string} style - The color name.\r\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tsetColorName( style, colorSpace = SRGBColorSpace ) {\r\n\r\n\t\t// color keywords\r\n\t\tconst hex = _colorKeywords[ style.toLowerCase() ];\r\n\r\n\t\tif ( hex !== undefined ) {\r\n\r\n\t\t\t// red\r\n\t\t\tthis.setHex( hex, colorSpace );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// unknown color\r\n\t\t\tconsole.warn( 'THREE.Color: Unknown color ' + style );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new color with copied values from this instance.\r\n\t *\r\n\t * @return {Color} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given color to this instance.\r\n\t *\r\n\t * @param {Color} color - The color to copy.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tcopy( color ) {\r\n\r\n\t\tthis.r = color.r;\r\n\t\tthis.g = color.g;\r\n\t\tthis.b = color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the given color into this color, and then converts this color from\r\n\t * `SRGBColorSpace` to `LinearSRGBColorSpace`.\r\n\t *\r\n\t * @param {Color} color - The color to copy/convert.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tcopySRGBToLinear( color ) {\r\n\r\n\t\tthis.r = SRGBToLinear( color.r );\r\n\t\tthis.g = SRGBToLinear( color.g );\r\n\t\tthis.b = SRGBToLinear( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the given color into this color, and then converts this color from\r\n\t * `LinearSRGBColorSpace` to `SRGBColorSpace`.\r\n\t *\r\n\t * @param {Color} color - The color to copy/convert.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tcopyLinearToSRGB( color ) {\r\n\r\n\t\tthis.r = LinearToSRGB( color.r );\r\n\t\tthis.g = LinearToSRGB( color.g );\r\n\t\tthis.b = LinearToSRGB( color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts this color from `SRGBColorSpace` to `LinearSRGBColorSpace`.\r\n\t *\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tconvertSRGBToLinear() {\r\n\r\n\t\tthis.copySRGBToLinear( this );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts this color from `LinearSRGBColorSpace` to `SRGBColorSpace`.\r\n\t *\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tconvertLinearToSRGB() {\r\n\r\n\t\tthis.copyLinearToSRGB( this );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the hexadecimal value of this color.\r\n\t *\r\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\r\n\t * @return {number} The hexadecimal value.\r\n\t */\r\n\tgetHex( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\treturn Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the hexadecimal value of this color as a string (for example, 'FFFFFF').\r\n\t *\r\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\r\n\t * @return {string} The hexadecimal value as a string.\r\n\t */\r\n\tgetHexString( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\treturn ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the colors RGB values into the HSL format and stores them into the\r\n\t * given target object.\r\n\t *\r\n\t * @param {{h:number,s:number,l:number}} target - The target object that is used to store the method's result.\r\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\r\n\t * @return {{h:number,s:number,l:number}} The HSL representation of this color.\r\n\t */\r\n\tgetHSL( target, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\t// h,s,l ranges are in 0.0 - 1.0\r\n\r\n\t\tColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\r\n\r\n\t\tconst max = Math.max( r, g, b );\r\n\t\tconst min = Math.min( r, g, b );\r\n\r\n\t\tlet hue, saturation;\r\n\t\tconst lightness = ( min + max ) / 2.0;\r\n\r\n\t\tif ( min === max ) {\r\n\r\n\t\t\thue = 0;\r\n\t\t\tsaturation = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst delta = max - min;\r\n\r\n\t\t\tsaturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );\r\n\r\n\t\t\tswitch ( max ) {\r\n\r\n\t\t\t\tcase r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;\r\n\t\t\t\tcase g: hue = ( b - r ) / delta + 2; break;\r\n\t\t\t\tcase b: hue = ( r - g ) / delta + 4; break;\r\n\r\n\t\t\t}\r\n\r\n\t\t\thue /= 6;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.h = hue;\r\n\t\ttarget.s = saturation;\r\n\t\ttarget.l = lightness;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the RGB values of this color and stores them into the given target object.\r\n\t *\r\n\t * @param {Color} target - The target color that is used to store the method's result.\r\n\t * @param {string} [colorSpace=ColorManagement.workingColorSpace] - The color space.\r\n\t * @return {Color} The RGB representation of this color.\r\n\t */\r\n\tgetRGB( target, colorSpace = ColorManagement.workingColorSpace ) {\r\n\r\n\t\tColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\ttarget.r = _color.r;\r\n\t\ttarget.g = _color.g;\r\n\t\ttarget.b = _color.b;\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of this color as a CSS style string. Example: `rgb(255,0,0)`.\r\n\t *\r\n\t * @param {string} [colorSpace=SRGBColorSpace] - The color space.\r\n\t * @return {string} The CSS representation of this color.\r\n\t */\r\n\tgetStyle( colorSpace = SRGBColorSpace ) {\r\n\r\n\t\tColorManagement.workingToColorSpace( _color.copy( this ), colorSpace );\r\n\r\n\t\tconst r = _color.r, g = _color.g, b = _color.b;\r\n\r\n\t\tif ( colorSpace !== SRGBColorSpace ) {\r\n\r\n\t\t\t// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).\r\n\t\t\treturn `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;\r\n\r\n\t\t}\r\n\r\n\t\treturn `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given HSL values to this color's values.\r\n\t * Internally, this converts the color's RGB values to HSL, adds HSL\r\n\t * and then converts the color back to RGB.\r\n\t *\r\n\t * @param {number} h - Hue value between `0.0` and `1.0`.\r\n\t * @param {number} s - Saturation value between `0.0` and `1.0`.\r\n\t * @param {number} l - Lightness value between `0.0` and `1.0`.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\toffsetHSL( h, s, l ) {\r\n\r\n\t\tthis.getHSL( _hslA );\r\n\r\n\t\treturn this.setHSL( _hslA.h + h, _hslA.s + s, _hslA.l + l );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the RGB values of the given color to the RGB values of this color.\r\n\t *\r\n\t * @param {Color} color - The color to add.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tadd( color ) {\r\n\r\n\t\tthis.r += color.r;\r\n\t\tthis.g += color.g;\r\n\t\tthis.b += color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the RGB values of the given colors and stores the result in this instance.\r\n\t *\r\n\t * @param {Color} color1 - The first color.\r\n\t * @param {Color} color2 - The second color.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\taddColors( color1, color2 ) {\r\n\r\n\t\tthis.r = color1.r + color2.r;\r\n\t\tthis.g = color1.g + color2.g;\r\n\t\tthis.b = color1.b + color2.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given scalar value to the RGB values of this color.\r\n\t *\r\n\t * @param {number} s - The scalar to add.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.r += s;\r\n\t\tthis.g += s;\r\n\t\tthis.b += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the RGB values of the given color from the RGB values of this color.\r\n\t *\r\n\t * @param {Color} color - The color to subtract.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tsub( color ) {\r\n\r\n\t\tthis.r = Math.max( 0, this.r - color.r );\r\n\t\tthis.g = Math.max( 0, this.g - color.g );\r\n\t\tthis.b = Math.max( 0, this.b - color.b );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the RGB values of the given color with the RGB values of this color.\r\n\t *\r\n\t * @param {Color} color - The color to multiply.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tmultiply( color ) {\r\n\r\n\t\tthis.r *= color.r;\r\n\t\tthis.g *= color.g;\r\n\t\tthis.b *= color.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the given scalar value with the RGB values of this color.\r\n\t *\r\n\t * @param {number} s - The scalar to multiply.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tthis.r *= s;\r\n\t\tthis.g *= s;\r\n\t\tthis.b *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Linearly interpolates this color's RGB values toward the RGB values of the\r\n\t * given color. The alpha argument can be thought of as the ratio between\r\n\t * the two colors, where `0.0` is this color and `1.0` is the first argument.\r\n\t *\r\n\t * @param {Color} color - The color to converge on.\r\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tlerp( color, alpha ) {\r\n\r\n\t\tthis.r += ( color.r - this.r ) * alpha;\r\n\t\tthis.g += ( color.g - this.g ) * alpha;\r\n\t\tthis.b += ( color.b - this.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Linearly interpolates between the given colors and stores the result in this instance.\r\n\t * The alpha argument can be thought of as the ratio between the two colors, where `0.0`\r\n\t * is the first and `1.0` is the second color.\r\n\t *\r\n\t * @param {Color} color1 - The first color.\r\n\t * @param {Color} color2 - The second color.\r\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tlerpColors( color1, color2, alpha ) {\r\n\r\n\t\tthis.r = color1.r + ( color2.r - color1.r ) * alpha;\r\n\t\tthis.g = color1.g + ( color2.g - color1.g ) * alpha;\r\n\t\tthis.b = color1.b + ( color2.b - color1.b ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Linearly interpolates this color's HSL values toward the HSL values of the\r\n\t * given color. It differs from {@link Color#lerp} by not interpolating straight\r\n\t * from one color to the other, but instead going through all the hues in between\r\n\t * those two colors. The alpha argument can be thought of as the ratio between\r\n\t * the two colors, where 0.0 is this color and 1.0 is the first argument.\r\n\t *\r\n\t * @param {Color} color - The color to converge on.\r\n\t * @param {number} alpha - The interpolation factor in the closed interval `[0,1]`.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tlerpHSL( color, alpha ) {\r\n\r\n\t\tthis.getHSL( _hslA );\r\n\t\tcolor.getHSL( _hslB );\r\n\r\n\t\tconst h = lerp( _hslA.h, _hslB.h, alpha );\r\n\t\tconst s = lerp( _hslA.s, _hslB.s, alpha );\r\n\t\tconst l = lerp( _hslA.l, _hslB.l, alpha );\r\n\r\n\t\tthis.setHSL( h, s, l );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the color's RGB components from the given 3D vector.\r\n\t *\r\n\t * @param {Vector3} v - The vector to set.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tsetFromVector3( v ) {\r\n\r\n\t\tthis.r = v.x;\r\n\t\tthis.g = v.y;\r\n\t\tthis.b = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms this color with the given 3x3 matrix.\r\n\t *\r\n\t * @param {Matrix3} m - The matrix.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst r = this.r, g = this.g, b = this.b;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;\r\n\t\tthis.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;\r\n\t\tthis.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this color is equal with the given one.\r\n\t *\r\n\t * @param {Color} c - The color to test for equality.\r\n\t * @return {boolean} Whether this bounding color is equal with the given one.\r\n\t */\r\n\tequals( c ) {\r\n\r\n\t\treturn ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this color's RGB components from the given array.\r\n\t *\r\n\t * @param {Array<number>} array - An array holding the RGB values.\r\n\t * @param {number} [offset=0] - The offset into the array.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.r = array[ offset ];\r\n\t\tthis.g = array[ offset + 1 ];\r\n\t\tthis.b = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Writes the RGB components of this color to the given array. If no array is provided,\r\n\t * the method returns a new instance.\r\n\t *\r\n\t * @param {Array<number>} [array=[]] - The target array holding the color components.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Array<number>} The color components.\r\n\t */\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.r;\r\n\t\tarray[ offset + 1 ] = this.g;\r\n\t\tarray[ offset + 2 ] = this.b;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the components of this color from the given buffer attribute.\r\n\t *\r\n\t * @param {BufferAttribute} attribute - The buffer attribute holding color data.\r\n\t * @param {number} index - The index into the attribute.\r\n\t * @return {Color} A reference to this color.\r\n\t */\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.r = attribute.getX( index );\r\n\t\tthis.g = attribute.getY( index );\r\n\t\tthis.b = attribute.getZ( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This methods defines the serialization result of this class. Returns the color\r\n\t * as a hexadecimal value.\r\n\t *\r\n\t * @return {number} The hexadecimal value.\r\n\t */\r\n\ttoJSON() {\r\n\r\n\t\treturn this.getHex();\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.r;\r\n\t\tyield this.g;\r\n\t\tyield this.b;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _color = /*@__PURE__*/ new Color();\r\n\r\n/**\r\n * A dictionary with X11 color names.\r\n *\r\n * Note that multiple words such as Dark Orange become the string 'darkorange'.\r\n *\r\n * @static\r\n * @type {Object}\r\n */\r\nColor.NAMES = _colorKeywords;\r\n\r\nexport { Color };\r\n", "import { Color } from '../../math/Color.js';\r\n\r\n/**\r\n * A four-component version of {@link Color} which is internally\r\n * used by the renderer to represents clear color with alpha as\r\n * one object.\r\n *\r\n * @private\r\n * @augments Color\r\n */\r\nclass Color4 extends Color {\r\n\r\n\t/**\r\n\t * Constructs a new four-component color.\r\n\t * You can also pass a single THREE.Color, hex or\r\n\t * string argument to this constructor.\r\n\t *\r\n\t * @param {number|string} [r=1] - The red value.\r\n\t * @param {number} [g=1] - The green value.\r\n\t * @param {number} [b=1] - The blue value.\r\n\t * @param {number} [a=1] - The alpha value.\r\n\t */\r\n\tconstructor( r, g, b, a = 1 ) {\r\n\r\n\t\tsuper( r, g, b );\r\n\r\n\t\tthis.a = a;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default to honor alpha.\r\n\t * You can also pass a single THREE.Color, hex or\r\n\t * string argument to this method.\r\n\t *\r\n\t * @param {number|string|Color} r - The red value.\r\n\t * @param {number} g - The green value.\r\n\t * @param {number} b - The blue value.\r\n\t * @param {number} [a=1] - The alpha value.\r\n\t * @return {Color4} A reference to this object.\r\n\t */\r\n\tset( r, g, b, a = 1 ) {\r\n\r\n\t\tthis.a = a;\r\n\r\n\t\treturn super.set( r, g, b );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default to honor alpha.\r\n\t *\r\n\t * @param {Color4} color - The color to copy.\r\n\t * @return {Color4} A reference to this object.\r\n\t */\r\n\tcopy( color ) {\r\n\r\n\t\tif ( color.a !== undefined ) this.a = color.a;\r\n\r\n\t\treturn super.copy( color );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default to honor alpha.\r\n\t *\r\n\t * @return {Color4} The cloned color.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.r, this.g, this.b, this.a );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Color4;\r\n", "/**\r\n * Possible shader stages.\r\n *\r\n * @property {string} VERTEX The vertex shader stage.\r\n * @property {string} FRAGMENT The fragment shader stage.\r\n */\r\nexport const NodeShaderStage = {\r\n\tVERTEX: 'vertex',\r\n\tFRAGMENT: 'fragment'\r\n};\r\n\r\n/**\r\n * Update types of a node.\r\n *\r\n * @property {string} NONE The update method is not executed.\r\n * @property {string} FRAME The update method is executed per frame.\r\n * @property {string} RENDER The update method is executed per render. A frame might be produced by multiple render calls so this value allows more detailed updates than FRAME.\r\n * @property {string} OBJECT The update method is executed per {@link Object3D} that uses the node for rendering.\r\n */\r\nexport const NodeUpdateType = {\r\n\tNONE: 'none',\r\n\tFRAME: 'frame',\r\n\tRENDER: 'render',\r\n\tOBJECT: 'object'\r\n};\r\n\r\n/**\r\n * Data types of a node.\r\n *\r\n * @property {string} BOOLEAN Boolean type.\r\n * @property {string} INTEGER Integer type.\r\n * @property {string} FLOAT Float type.\r\n * @property {string} VECTOR2 Two-dimensional vector type.\r\n * @property {string} VECTOR3 Three-dimensional vector type.\r\n * @property {string} VECTOR4 Four-dimensional vector type.\r\n * @property {string} MATRIX2 2x2 matrix type.\r\n * @property {string} MATRIX3 3x3 matrix type.\r\n * @property {string} MATRIX4 4x4 matrix type.\r\n */\r\nexport const NodeType = {\r\n\tBOOLEAN: 'bool',\r\n\tINTEGER: 'int',\r\n\tFLOAT: 'float',\r\n\tVECTOR2: 'vec2',\r\n\tVECTOR3: 'vec3',\r\n\tVECTOR4: 'vec4',\r\n\tMATRIX2: 'mat2',\r\n\tMATRIX3: 'mat3',\r\n\tMATRIX4: 'mat4'\r\n};\r\n\r\n/**\r\n * Access types of a node. These are relevant for compute and storage usage.\r\n *\r\n * @property {string} READ_ONLY Read-only access\r\n * @property {string} WRITE_ONLY Write-only access.\r\n * @property {string} READ_WRITE Read and write access.\r\n */\r\nexport const NodeAccess = {\r\n\tREAD_ONLY: 'readOnly',\r\n\tWRITE_ONLY: 'writeOnly',\r\n\tREAD_WRITE: 'readWrite',\r\n};\r\n\r\nexport const defaultShaderStages = [ 'fragment', 'vertex' ];\r\nexport const defaultBuildStages = [ 'setup', 'analyze', 'generate' ];\r\nexport const shaderStages = [ ...defaultShaderStages, 'compute' ];\r\nexport const vectorComponents = [ 'x', 'y', 'z', 'w' ];\r\n", "/**\r\n * Represents a 2x2 matrix.\r\n *\r\n * A Note on Row-Major and Column-Major Ordering:\r\n *\r\n * The constructor and {@link Matrix2#set} method take arguments in\r\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\r\n * order, while internally they are stored in the {@link Matrix2#elements} array in column-major order.\r\n * This means that calling:\r\n * ```js\r\n * const m = new THREE.Matrix2();\r\n * m.set( 11, 12,\r\n *        21, 22 );\r\n * ```\r\n * will result in the elements array containing:\r\n * ```js\r\n * m.elements = [ 11, 21,\r\n *                12, 22 ];\r\n * ```\r\n * and internally all calculations are performed using column-major ordering.\r\n * However, as the actual ordering makes no difference mathematically and\r\n * most people are used to thinking about matrices in row-major order, the\r\n * three.js documentation shows matrices in row-major order. Just bear in\r\n * mind that if you are reading the source code, you'll have to take the\r\n * transpose of any matrices outlined here to make sense of the calculations.\r\n */\r\nexport class Matrix2 {\r\n\r\n\t/**\r\n\t * Constructs a new 2x2 matrix. The arguments are supposed to be\r\n\t * in row-major order. If no arguments are provided, the constructor\r\n\t * initializes the matrix as an identity matrix.\r\n\t *\r\n\t * @param {number} [n11] - 1-1 matrix element.\r\n\t * @param {number} [n12] - 1-2 matrix element.\r\n\t * @param {number} [n21] - 2-1 matrix element.\r\n\t * @param {number} [n22] - 2-2 matrix element.\r\n\t */\r\n\tconstructor( n11, n12, n21, n22 ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tMatrix2.prototype.isMatrix2 = true;\r\n\r\n\t\t/**\r\n\t\t * A column-major list of matrix values.\r\n\t\t *\r\n\t\t * @type {Array<number>}\r\n\t\t */\r\n\t\tthis.elements = [\r\n\t\t\t1, 0,\r\n\t\t\t0, 1,\r\n\t\t];\r\n\r\n\t\tif ( n11 !== undefined ) {\r\n\r\n\t\t\tthis.set( n11, n12, n21, n22 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix to the 2x2 identity matrix.\r\n\t *\r\n\t * @return {Matrix2} A reference to this matrix.\r\n\t */\r\n\tidentity() {\r\n\r\n\t\tthis.set(\r\n\t\t\t1, 0,\r\n\t\t\t0, 1,\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the elements of the matrix from the given array.\r\n\t *\r\n\t * @param {Array<number>} array - The matrix elements in column-major order.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Matrix2} A reference to this matrix.\r\n\t */\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tfor ( let i = 0; i < 4; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the elements of the matrix.The arguments are supposed to be\r\n\t * in row-major order.\r\n\t *\r\n\t * @param {number} n11 - 1-1 matrix element.\r\n\t * @param {number} n12 - 1-2 matrix element.\r\n\t * @param {number} n21 - 2-1 matrix element.\r\n\t * @param {number} n22 - 2-2 matrix element.\r\n\t * @return {Matrix2} A reference to this matrix.\r\n\t */\r\n\tset( n11, n12, n21, n22 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 2 ] = n12;\r\n\t\tte[ 1 ] = n21; te[ 3 ] = n22;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n", "import { clamp } from './MathUtils.js';\r\n\r\n/**\r\n * Class for representing a Quaternion. Quaternions are used in three.js to represent rotations.\r\n *\r\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\r\n * the corresponding order.\r\n *\r\n * Note that three.js expects Quaternions to be normalized.\r\n * ```js\r\n * const quaternion = new THREE.Quaternion();\r\n * quaternion.setFromAxisAngle( new THREE.Vector3( 0, 1, 0 ), Math.PI / 2 );\r\n *\r\n * const vector = new THREE.Vector3( 1, 0, 0 );\r\n * vector.applyQuaternion( quaternion );\r\n * ```\r\n */\r\nclass Quaternion {\r\n\r\n\t/**\r\n\t * Constructs a new quaternion.\r\n\t *\r\n\t * @param {number} [x=0] - The x value of this quaternion.\r\n\t * @param {number} [y=0] - The y value of this quaternion.\r\n\t * @param {number} [z=0] - The z value of this quaternion.\r\n\t * @param {number} [w=1] - The w value of this quaternion.\r\n\t */\r\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isQuaternion = true;\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Interpolates between two quaternions via SLERP. This implementation assumes the\r\n\t * quaternion data are managed  in flat arrays.\r\n\t *\r\n\t * @param {Array<number>} dst - The destination array.\r\n\t * @param {number} dstOffset - An offset into the destination array.\r\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\r\n\t * @param {number} srcOffset0 - An offset into the first source array.\r\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\r\n\t * @param {number} srcOffset1 - An offset into the second source array.\r\n\t * @param {number} t - The interpolation factor in the range `[0,1]`.\r\n\t * @see {@link Quaternion#slerp}\r\n\t */\r\n\tstatic slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {\r\n\r\n\t\t// fuzz-free, array-based Quaternion SLERP operation\r\n\r\n\t\tlet x0 = src0[ srcOffset0 + 0 ],\r\n\t\t\ty0 = src0[ srcOffset0 + 1 ],\r\n\t\t\tz0 = src0[ srcOffset0 + 2 ],\r\n\t\t\tw0 = src0[ srcOffset0 + 3 ];\r\n\r\n\t\tconst x1 = src1[ srcOffset1 + 0 ],\r\n\t\t\ty1 = src1[ srcOffset1 + 1 ],\r\n\t\t\tz1 = src1[ srcOffset1 + 2 ],\r\n\t\t\tw1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tif ( t === 0 ) {\r\n\r\n\t\t\tdst[ dstOffset + 0 ] = x0;\r\n\t\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\t\tdst[ dstOffset + 3 ] = w0;\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( t === 1 ) {\r\n\r\n\t\t\tdst[ dstOffset + 0 ] = x1;\r\n\t\t\tdst[ dstOffset + 1 ] = y1;\r\n\t\t\tdst[ dstOffset + 2 ] = z1;\r\n\t\t\tdst[ dstOffset + 3 ] = w1;\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {\r\n\r\n\t\t\tlet s = 1 - t;\r\n\t\t\tconst cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,\r\n\t\t\t\tdir = ( cos >= 0 ? 1 : - 1 ),\r\n\t\t\t\tsqrSin = 1 - cos * cos;\r\n\r\n\t\t\t// Skip the Slerp for tiny steps to avoid numeric problems:\r\n\t\t\tif ( sqrSin > Number.EPSILON ) {\r\n\r\n\t\t\t\tconst sin = Math.sqrt( sqrSin ),\r\n\t\t\t\t\tlen = Math.atan2( sin, cos * dir );\r\n\r\n\t\t\t\ts = Math.sin( s * len ) / sin;\r\n\t\t\t\tt = Math.sin( t * len ) / sin;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst tDir = t * dir;\r\n\r\n\t\t\tx0 = x0 * s + x1 * tDir;\r\n\t\t\ty0 = y0 * s + y1 * tDir;\r\n\t\t\tz0 = z0 * s + z1 * tDir;\r\n\t\t\tw0 = w0 * s + w1 * tDir;\r\n\r\n\t\t\t// Normalize in case we just did a lerp:\r\n\t\t\tif ( s === 1 - t ) {\r\n\r\n\t\t\t\tconst f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );\r\n\r\n\t\t\t\tx0 *= f;\r\n\t\t\t\ty0 *= f;\r\n\t\t\t\tz0 *= f;\r\n\t\t\t\tw0 *= f;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tdst[ dstOffset ] = x0;\r\n\t\tdst[ dstOffset + 1 ] = y0;\r\n\t\tdst[ dstOffset + 2 ] = z0;\r\n\t\tdst[ dstOffset + 3 ] = w0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies two quaternions. This implementation assumes the quaternion data are managed\r\n\t * in flat arrays.\r\n\t *\r\n\t * @param {Array<number>} dst - The destination array.\r\n\t * @param {number} dstOffset - An offset into the destination array.\r\n\t * @param {Array<number>} src0 - The source array of the first quaternion.\r\n\t * @param {number} srcOffset0 - An offset into the first source array.\r\n\t * @param {Array<number>} src1 -  The source array of the second quaternion.\r\n\t * @param {number} srcOffset1 - An offset into the second source array.\r\n\t * @return {Array<number>} The destination array.\r\n\t * @see {@link Quaternion#multiplyQuaternions}.\r\n\t */\r\n\tstatic multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {\r\n\r\n\t\tconst x0 = src0[ srcOffset0 ];\r\n\t\tconst y0 = src0[ srcOffset0 + 1 ];\r\n\t\tconst z0 = src0[ srcOffset0 + 2 ];\r\n\t\tconst w0 = src0[ srcOffset0 + 3 ];\r\n\r\n\t\tconst x1 = src1[ srcOffset1 ];\r\n\t\tconst y1 = src1[ srcOffset1 + 1 ];\r\n\t\tconst z1 = src1[ srcOffset1 + 2 ];\r\n\t\tconst w1 = src1[ srcOffset1 + 3 ];\r\n\r\n\t\tdst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;\r\n\t\tdst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;\r\n\t\tdst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;\r\n\t\tdst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;\r\n\r\n\t\treturn dst;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The x value of this quaternion.\r\n\t *\r\n\t * @type {number}\r\n\t * @default 0\r\n\t */\r\n\tget x() {\r\n\r\n\t\treturn this._x;\r\n\r\n\t}\r\n\r\n\tset x( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The y value of this quaternion.\r\n\t *\r\n\t * @type {number}\r\n\t * @default 0\r\n\t */\r\n\tget y() {\r\n\r\n\t\treturn this._y;\r\n\r\n\t}\r\n\r\n\tset y( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The z value of this quaternion.\r\n\t *\r\n\t * @type {number}\r\n\t * @default 0\r\n\t */\r\n\tget z() {\r\n\r\n\t\treturn this._z;\r\n\r\n\t}\r\n\r\n\tset z( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The w value of this quaternion.\r\n\t *\r\n\t * @type {number}\r\n\t * @default 1\r\n\t */\r\n\tget w() {\r\n\r\n\t\treturn this._w;\r\n\r\n\t}\r\n\r\n\tset w( value ) {\r\n\r\n\t\tthis._w = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the quaternion components.\r\n\t *\r\n\t * @param {number} x - The x value of this quaternion.\r\n\t * @param {number} y - The y value of this quaternion.\r\n\t * @param {number} z - The z value of this quaternion.\r\n\t * @param {number} w - The w value of this quaternion.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tset( x, y, z, w ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._w = w;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new quaternion with copied values from this instance.\r\n\t *\r\n\t * @return {Quaternion} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._w );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given quaternion to this instance.\r\n\t *\r\n\t * @param {Quaternion} quaternion - The quaternion to copy.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tcopy( quaternion ) {\r\n\r\n\t\tthis._x = quaternion.x;\r\n\t\tthis._y = quaternion.y;\r\n\t\tthis._z = quaternion.z;\r\n\t\tthis._w = quaternion.w;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this quaternion from the rotation specified by the given\r\n\t * Euler angles.\r\n\t *\r\n\t * @param {Euler} euler - The Euler angles.\r\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tsetFromEuler( euler, update = true ) {\r\n\r\n\t\tconst x = euler._x, y = euler._y, z = euler._z, order = euler._order;\r\n\r\n\t\t// http://www.mathworks.com/matlabcentral/fileexchange/\r\n\t\t// \t20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/\r\n\t\t//\tcontent/SpinCalc.m\r\n\r\n\t\tconst cos = Math.cos;\r\n\t\tconst sin = Math.sin;\r\n\r\n\t\tconst c1 = cos( x / 2 );\r\n\t\tconst c2 = cos( y / 2 );\r\n\t\tconst c3 = cos( z / 2 );\r\n\r\n\t\tconst s1 = sin( x / 2 );\r\n\t\tconst s2 = sin( y / 2 );\r\n\t\tconst s3 = sin( z / 2 );\r\n\r\n\t\tswitch ( order ) {\r\n\r\n\t\t\tcase 'XYZ':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YXZ':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZXY':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZYX':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YZX':\r\n\t\t\t\tthis._x = s1 * c2 * c3 + c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 + s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 - s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 - s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'XZY':\r\n\t\t\t\tthis._x = s1 * c2 * c3 - c1 * s2 * s3;\r\n\t\t\t\tthis._y = c1 * s2 * c3 - s1 * c2 * s3;\r\n\t\t\t\tthis._z = c1 * c2 * s3 + s1 * s2 * c3;\r\n\t\t\t\tthis._w = c1 * c2 * c3 + s1 * s2 * s3;\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\t\t\t\tconsole.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tif ( update === true ) this._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this quaternion from the given axis and angle.\r\n\t *\r\n\t * @param {Vector3} axis - The normalized axis.\r\n\t * @param {number} angle - The angle in radians.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tsetFromAxisAngle( axis, angle ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\r\n\r\n\t\tconst halfAngle = angle / 2, s = Math.sin( halfAngle );\r\n\r\n\t\tthis._x = axis.x * s;\r\n\t\tthis._y = axis.y * s;\r\n\t\tthis._z = axis.z * s;\r\n\t\tthis._w = Math.cos( halfAngle );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this quaternion from the given rotation matrix.\r\n\t *\r\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tsetFromRotationMatrix( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tconst te = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],\r\n\r\n\t\t\ttrace = m11 + m22 + m33;\r\n\r\n\t\tif ( trace > 0 ) {\r\n\r\n\t\t\tconst s = 0.5 / Math.sqrt( trace + 1.0 );\r\n\r\n\t\t\tthis._w = 0.25 / s;\r\n\t\t\tthis._x = ( m32 - m23 ) * s;\r\n\t\t\tthis._y = ( m13 - m31 ) * s;\r\n\t\t\tthis._z = ( m21 - m12 ) * s;\r\n\r\n\t\t} else if ( m11 > m22 && m11 > m33 ) {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );\r\n\r\n\t\t\tthis._w = ( m32 - m23 ) / s;\r\n\t\t\tthis._x = 0.25 * s;\r\n\t\t\tthis._y = ( m12 + m21 ) / s;\r\n\t\t\tthis._z = ( m13 + m31 ) / s;\r\n\r\n\t\t} else if ( m22 > m33 ) {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );\r\n\r\n\t\t\tthis._w = ( m13 - m31 ) / s;\r\n\t\t\tthis._x = ( m12 + m21 ) / s;\r\n\t\t\tthis._y = 0.25 * s;\r\n\t\t\tthis._z = ( m23 + m32 ) / s;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );\r\n\r\n\t\t\tthis._w = ( m21 - m12 ) / s;\r\n\t\t\tthis._x = ( m13 + m31 ) / s;\r\n\t\t\tthis._y = ( m23 + m32 ) / s;\r\n\t\t\tthis._z = 0.25 * s;\r\n\r\n\t\t}\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this quaternion to the rotation required to rotate the direction vector\r\n\t * `vFrom` to the direction vector `vTo`.\r\n\t *\r\n\t * @param {Vector3} vFrom - The first (normalized) direction vector.\r\n\t * @param {Vector3} vTo - The second (normalized) direction vector.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tsetFromUnitVectors( vFrom, vTo ) {\r\n\r\n\t\t// assumes direction vectors vFrom and vTo are normalized\r\n\r\n\t\tlet r = vFrom.dot( vTo ) + 1;\r\n\r\n\t\tif ( r < 1e-8 ) { // the epsilon value has been discussed in #31286\r\n\r\n\t\t\t// vFrom and vTo point in opposite directions\r\n\r\n\t\t\tr = 0;\r\n\r\n\t\t\tif ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {\r\n\r\n\t\t\t\tthis._x = - vFrom.y;\r\n\t\t\t\tthis._y = vFrom.x;\r\n\t\t\t\tthis._z = 0;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis._x = 0;\r\n\t\t\t\tthis._y = - vFrom.z;\r\n\t\t\t\tthis._z = vFrom.y;\r\n\t\t\t\tthis._w = r;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3\r\n\r\n\t\t\tthis._x = vFrom.y * vTo.z - vFrom.z * vTo.y;\r\n\t\t\tthis._y = vFrom.z * vTo.x - vFrom.x * vTo.z;\r\n\t\t\tthis._z = vFrom.x * vTo.y - vFrom.y * vTo.x;\r\n\t\t\tthis._w = r;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the angle between this quaternion and the given one in radians.\r\n\t *\r\n\t * @param {Quaternion} q - The quaternion to compute the angle with.\r\n\t * @return {number} The angle in radians.\r\n\t */\r\n\tangleTo( q ) {\r\n\r\n\t\treturn 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates this quaternion by a given angular step to the given quaternion.\r\n\t * The method ensures that the final quaternion will not overshoot `q`.\r\n\t *\r\n\t * @param {Quaternion} q - The target quaternion.\r\n\t * @param {number} step - The angular step in radians.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\trotateTowards( q, step ) {\r\n\r\n\t\tconst angle = this.angleTo( q );\r\n\r\n\t\tif ( angle === 0 ) return this;\r\n\r\n\t\tconst t = Math.min( 1, step / angle );\r\n\r\n\t\tthis.slerp( q, t );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this quaternion to the identity quaternion; that is, to the\r\n\t * quaternion that represents \"no rotation\".\r\n\t *\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tidentity() {\r\n\r\n\t\treturn this.set( 0, 0, 0, 1 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Inverts this quaternion via {@link Quaternion#conjugate}. The\r\n\t * quaternion is assumed to have unit length.\r\n\t *\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tinvert() {\r\n\r\n\t\treturn this.conjugate();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the rotational conjugate of this quaternion. The conjugate of a\r\n\t * quaternion represents the same rotation in the opposite direction about\r\n\t * the rotational axis.\r\n\t *\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tconjugate() {\r\n\r\n\t\tthis._x *= - 1;\r\n\t\tthis._y *= - 1;\r\n\t\tthis._z *= - 1;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the dot product of this quaternion and the given one.\r\n\t *\r\n\t * @param {Quaternion} v - The quaternion to compute the dot product with.\r\n\t * @return {number} The result of the dot product.\r\n\t */\r\n\tdot( v ) {\r\n\r\n\t\treturn this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the squared Euclidean length (straight-line length) of this quaternion,\r\n\t * considered as a 4 dimensional vector. This can be useful if you are comparing the\r\n\t * lengths of two quaternions, as this is a slightly more efficient calculation than\r\n\t * {@link Quaternion#length}.\r\n\t *\r\n\t * @return {number} The squared Euclidean length.\r\n\t */\r\n\tlengthSq() {\r\n\r\n\t\treturn this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the Euclidean length (straight-line length) of this quaternion,\r\n\t * considered as a 4 dimensional vector.\r\n\t *\r\n\t * @return {number} The Euclidean length.\r\n\t */\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Normalizes this quaternion - that is, calculated the quaternion that performs\r\n\t * the same rotation as this one, but has a length equal to `1`.\r\n\t *\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tnormalize() {\r\n\r\n\t\tlet l = this.length();\r\n\r\n\t\tif ( l === 0 ) {\r\n\r\n\t\t\tthis._x = 0;\r\n\t\t\tthis._y = 0;\r\n\t\t\tthis._z = 0;\r\n\t\t\tthis._w = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tl = 1 / l;\r\n\r\n\t\t\tthis._x = this._x * l;\r\n\t\t\tthis._y = this._y * l;\r\n\t\t\tthis._z = this._z * l;\r\n\t\t\tthis._w = this._w * l;\r\n\r\n\t\t}\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies this quaternion by the given one.\r\n\t *\r\n\t * @param {Quaternion} q - The quaternion.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tmultiply( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( this, q );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-multiplies this quaternion by the given one.\r\n\t *\r\n\t * @param {Quaternion} q - The quaternion.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tpremultiply( q ) {\r\n\r\n\t\treturn this.multiplyQuaternions( q, this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the given quaternions and stores the result in this instance.\r\n\t *\r\n\t * @param {Quaternion} a - The first quaternion.\r\n\t * @param {Quaternion} b - The second quaternion.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tmultiplyQuaternions( a, b ) {\r\n\r\n\t\t// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm\r\n\r\n\t\tconst qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;\r\n\t\tconst qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;\r\n\r\n\t\tthis._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;\r\n\t\tthis._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;\r\n\t\tthis._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;\r\n\t\tthis._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a spherical linear interpolation between quaternions.\r\n\t *\r\n\t * @param {Quaternion} qb - The target quaternion.\r\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tslerp( qb, t ) {\r\n\r\n\t\tif ( t === 0 ) return this;\r\n\t\tif ( t === 1 ) return this.copy( qb );\r\n\r\n\t\tconst x = this._x, y = this._y, z = this._z, w = this._w;\r\n\r\n\t\t// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\r\n\r\n\t\tlet cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;\r\n\r\n\t\tif ( cosHalfTheta < 0 ) {\r\n\r\n\t\t\tthis._w = - qb._w;\r\n\t\t\tthis._x = - qb._x;\r\n\t\t\tthis._y = - qb._y;\r\n\t\t\tthis._z = - qb._z;\r\n\r\n\t\t\tcosHalfTheta = - cosHalfTheta;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.copy( qb );\r\n\r\n\t\t}\r\n\r\n\t\tif ( cosHalfTheta >= 1.0 ) {\r\n\r\n\t\t\tthis._w = w;\r\n\t\t\tthis._x = x;\r\n\t\t\tthis._y = y;\r\n\t\t\tthis._z = z;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;\r\n\r\n\t\tif ( sqrSinHalfTheta <= Number.EPSILON ) {\r\n\r\n\t\t\tconst s = 1 - t;\r\n\t\t\tthis._w = s * w + t * this._w;\r\n\t\t\tthis._x = s * x + t * this._x;\r\n\t\t\tthis._y = s * y + t * this._y;\r\n\t\t\tthis._z = s * z + t * this._z;\r\n\r\n\t\t\tthis.normalize(); // normalize calls _onChangeCallback()\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sinHalfTheta = Math.sqrt( sqrSinHalfTheta );\r\n\t\tconst halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );\r\n\t\tconst ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,\r\n\t\t\tratioB = Math.sin( t * halfTheta ) / sinHalfTheta;\r\n\r\n\t\tthis._w = ( w * ratioA + this._w * ratioB );\r\n\t\tthis._x = ( x * ratioA + this._x * ratioB );\r\n\t\tthis._y = ( y * ratioA + this._y * ratioB );\r\n\t\tthis._z = ( z * ratioA + this._z * ratioB );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Performs a spherical linear interpolation between the given quaternions\r\n\t * and stores the result in this quaternion.\r\n\t *\r\n\t * @param {Quaternion} qa - The source quaternion.\r\n\t * @param {Quaternion} qb - The target quaternion.\r\n\t * @param {number} t - The interpolation factor in the closed interval `[0, 1]`.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tslerpQuaternions( qa, qb, t ) {\r\n\r\n\t\treturn this.copy( qa ).slerp( qb, t );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this quaternion to a uniformly random, normalized quaternion.\r\n\t *\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\trandom() {\r\n\r\n\t\t// Ken Shoemake\r\n\t\t// Uniform random rotations\r\n\t\t// D. Kirk, editor, Graphics Gems III, pages 124-132. Academic Press, New York, 1992.\r\n\r\n\t\tconst theta1 = 2 * Math.PI * Math.random();\r\n\t\tconst theta2 = 2 * Math.PI * Math.random();\r\n\r\n\t\tconst x0 = Math.random();\r\n\t\tconst r1 = Math.sqrt( 1 - x0 );\r\n\t\tconst r2 = Math.sqrt( x0 );\r\n\r\n\t\treturn this.set(\r\n\t\t\tr1 * Math.sin( theta1 ),\r\n\t\t\tr1 * Math.cos( theta1 ),\r\n\t\t\tr2 * Math.sin( theta2 ),\r\n\t\t\tr2 * Math.cos( theta2 ),\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this quaternion is equal with the given one.\r\n\t *\r\n\t * @param {Quaternion} quaternion - The quaternion to test for equality.\r\n\t * @return {boolean} Whether this quaternion is equal with the given one.\r\n\t */\r\n\tequals( quaternion ) {\r\n\r\n\t\treturn ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this quaternion's components from the given array.\r\n\t *\r\n\t * @param {Array<number>} array - An array holding the quaternion component values.\r\n\t * @param {number} [offset=0] - The offset into the array.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis._x = array[ offset ];\r\n\t\tthis._y = array[ offset + 1 ];\r\n\t\tthis._z = array[ offset + 2 ];\r\n\t\tthis._w = array[ offset + 3 ];\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Writes the components of this quaternion to the given array. If no array is provided,\r\n\t * the method returns a new instance.\r\n\t *\r\n\t * @param {Array<number>} [array=[]] - The target array holding the quaternion components.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Array<number>} The quaternion components.\r\n\t */\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._w;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the components of this quaternion from the given buffer attribute.\r\n\t *\r\n\t * @param {BufferAttribute} attribute - The buffer attribute holding quaternion data.\r\n\t * @param {number} index - The index into the attribute.\r\n\t * @return {Quaternion} A reference to this quaternion.\r\n\t */\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis._x = attribute.getX( index );\r\n\t\tthis._y = attribute.getY( index );\r\n\t\tthis._z = attribute.getZ( index );\r\n\t\tthis._w = attribute.getW( index );\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This methods defines the serialization result of this class. Returns the\r\n\t * numerical elements of this quaternion in an array of format `[x, y, z, w]`.\r\n\t *\r\n\t * @return {Array<number>} The serialized quaternion.\r\n\t */\r\n\ttoJSON() {\r\n\r\n\t\treturn this.toArray();\r\n\r\n\t}\r\n\r\n\t_onChange( callback ) {\r\n\r\n\t\tthis._onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_onChangeCallback() {}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this._x;\r\n\t\tyield this._y;\r\n\t\tyield this._z;\r\n\t\tyield this._w;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Quaternion };\r\n", "import { clamp } from './MathUtils.js';\r\nimport { Quaternion } from './Quaternion.js';\r\n\r\n/**\r\n * Class representing a 3D vector. A 3D vector is an ordered triplet of numbers\r\n * (labeled x, y and z), which can be used to represent a number of things, such as:\r\n *\r\n * - A point in 3D space.\r\n * - A direction and length in 3D space. In three.js the length will\r\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0)` to `(x, y, z)`\r\n * and the direction is also measured from `(0, 0, 0)` towards `(x, y, z)`.\r\n * - Any arbitrary ordered triplet of numbers.\r\n *\r\n * There are other things a 3D vector can be used to represent, such as\r\n * momentum vectors and so on, however these are the most\r\n * common uses in three.js.\r\n *\r\n * Iterating through a vector instance will yield its components `(x, y, z)` in\r\n * the corresponding order.\r\n * ```js\r\n * const a = new THREE.Vector3( 0, 1, 0 );\r\n *\r\n * //no arguments; will be initialised to (0, 0, 0)\r\n * const b = new THREE.Vector3( );\r\n *\r\n * const d = a.distanceTo( b );\r\n * ```\r\n */\r\nclass Vector3 {\r\n\r\n\t/**\r\n\t * Constructs a new 3D vector.\r\n\t *\r\n\t * @param {number} [x=0] - The x value of this vector.\r\n\t * @param {number} [y=0] - The y value of this vector.\r\n\t * @param {number} [z=0] - The z value of this vector.\r\n\t */\r\n\tconstructor( x = 0, y = 0, z = 0 ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tVector3.prototype.isVector3 = true;\r\n\r\n\t\t/**\r\n\t\t * The x value of this vector.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.x = x;\r\n\r\n\t\t/**\r\n\t\t * The y value of this vector.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.y = y;\r\n\r\n\t\t/**\r\n\t\t * The z value of this vector.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.z = z;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components.\r\n\t *\r\n\t * @param {number} x - The value of the x component.\r\n\t * @param {number} y - The value of the y component.\r\n\t * @param {number} z - The value of the z component.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tset( x, y, z ) {\r\n\r\n\t\tif ( z === undefined ) z = this.z; // sprite.scale.set(x,y)\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components to the same value.\r\n\t *\r\n\t * @param {number} scalar - The value to set for all vector components.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector's x component to the given value\r\n\t *\r\n\t * @param {number} x - The value to set.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector's y component to the given value\r\n\t *\r\n\t * @param {number} y - The value to set.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector's z component to the given value\r\n\t *\r\n\t * @param {number} z - The value to set.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetZ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Allows to set a vector component with an index.\r\n\t *\r\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\r\n\t * @param {number} value - The value to set.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the vector component which matches the given index.\r\n\t *\r\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y, `2` equals to z.\r\n\t * @return {number} A vector component value.\r\n\t */\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new vector with copied values from this instance.\r\n\t *\r\n\t * @return {Vector3} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given vector to this instance.\r\n\t *\r\n\t * @param {Vector3} v - The vector to copy.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given vector to this instance.\r\n\t *\r\n\t * @param {Vector3} v - The vector to add.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given scalar value to all components of this instance.\r\n\t *\r\n\t * @param {number} s - The scalar to add.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given vectors and stores the result in this instance.\r\n\t *\r\n\t * @param {Vector3} a - The first vector.\r\n\t * @param {Vector3} b - The second vector.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given vector scaled by the given factor to this instance.\r\n\t *\r\n\t * @param {Vector3|Vector4} v - The vector.\r\n\t * @param {number} s - The factor that scales `v`.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the given vector from this instance.\r\n\t *\r\n\t * @param {Vector3} v - The vector to subtract.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the given scalar value from all components of this instance.\r\n\t *\r\n\t * @param {number} s - The scalar to subtract.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the given vectors and stores the result in this instance.\r\n\t *\r\n\t * @param {Vector3} a - The first vector.\r\n\t * @param {Vector3} b - The second vector.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the given vector with this instance.\r\n\t *\r\n\t * @param {Vector3} v - The vector to multiply.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the given scalar value with all components of this instance.\r\n\t *\r\n\t * @param {number} scalar - The scalar to multiply.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the given vectors and stores the result in this instance.\r\n\t *\r\n\t * @param {Vector3} a - The first vector.\r\n\t * @param {Vector3} b - The second vector.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tmultiplyVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x * b.x;\r\n\t\tthis.y = a.y * b.y;\r\n\t\tthis.z = a.z * b.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given Euler rotation to this vector.\r\n\t *\r\n\t * @param {Euler} euler - The Euler angles.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tapplyEuler( euler ) {\r\n\r\n\t\treturn this.applyQuaternion( _quaternion.setFromEuler( euler ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a rotation specified by an axis and an angle to this vector.\r\n\t *\r\n\t * @param {Vector3} axis - A normalized vector representing the rotation axis.\r\n\t * @param {number} angle - The angle in radians.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tapplyAxisAngle( axis, angle ) {\r\n\r\n\t\treturn this.applyQuaternion( _quaternion.setFromAxisAngle( axis, angle ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies this vector with the given 3x3 matrix.\r\n\t *\r\n\t * @param {Matrix3} m - The 3x3 matrix.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies this vector by the given normal matrix and normalizes\r\n\t * the result.\r\n\t *\r\n\t * @param {Matrix3} m - The normal matrix.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\treturn this.applyMatrix3( m ).normalize();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies this vector (with an implicit 1 in the 4th dimension) by m, and\r\n\t * divides by perspective.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix to apply.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tconst w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );\r\n\r\n\t\tthis.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;\r\n\t\tthis.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;\r\n\t\tthis.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given Quaternion to this vector.\r\n\t *\r\n\t * @param {Quaternion} q - The Quaternion.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\t// quaternion q is assumed to have unit length\r\n\r\n\t\tconst vx = this.x, vy = this.y, vz = this.z;\r\n\t\tconst qx = q.x, qy = q.y, qz = q.z, qw = q.w;\r\n\r\n\t\t// t = 2 * cross( q.xyz, v );\r\n\t\tconst tx = 2 * ( qy * vz - qz * vy );\r\n\t\tconst ty = 2 * ( qz * vx - qx * vz );\r\n\t\tconst tz = 2 * ( qx * vy - qy * vx );\r\n\r\n\t\t// v + q.w * t + cross( q.xyz, t );\r\n\t\tthis.x = vx + qw * tx + qy * tz - qz * ty;\r\n\t\tthis.y = vy + qw * ty + qz * tx - qx * tz;\r\n\t\tthis.z = vz + qw * tz + qx * ty - qy * tx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Projects this vector from world space into the camera's normalized\r\n\t * device coordinate (NDC) space.\r\n\t *\r\n\t * @param {Camera} camera - The camera.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tproject( camera ) {\r\n\r\n\t\treturn this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Unprojects this vector from the camera's normalized device coordinate (NDC)\r\n\t * space into world space.\r\n\t *\r\n\t * @param {Camera} camera - The camera.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tunproject( camera ) {\r\n\r\n\t\treturn this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms the direction of this vector by a matrix (the upper left 3 x 3\r\n\t * subset of the given 4x4 matrix and then normalizes the result.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\ttransformDirection( m ) {\r\n\r\n\t\t// input: THREE.Matrix4 affine matrix\r\n\t\t// vector interpreted as a direction\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;\r\n\r\n\t\treturn this.normalize();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Divides this instance by the given vector.\r\n\t *\r\n\t * @param {Vector3} v - The vector to divide.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tdivide( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Divides this vector by the given scalar.\r\n\t *\r\n\t * @param {number} scalar - The scalar to divide.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x, y or z value is greater than the given vector's x, y or z\r\n\t * value, replace that value with the corresponding min value.\r\n\t *\r\n\t * @param {Vector3} v - The vector.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x, y or z value is less than the given vector's x, y or z\r\n\t * value, replace that value with the corresponding max value.\r\n\t *\r\n\t * @param {Vector3} v - The vector.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x, y or z value is greater than the max vector's x, y or z\r\n\t * value, it is replaced by the corresponding value.\r\n\t * If this vector's x, y or z value is less than the min vector's x, y or z value,\r\n\t * it is replaced by the corresponding value.\r\n\t *\r\n\t * @param {Vector3} min - The minimum x, y and z values.\r\n\t * @param {Vector3} max - The maximum x, y and z values in the desired range.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = clamp( this.x, min.x, max.x );\r\n\t\tthis.y = clamp( this.y, min.y, max.y );\r\n\t\tthis.z = clamp( this.z, min.z, max.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x, y or z values are greater than the max value, they are\r\n\t * replaced by the max value.\r\n\t * If this vector's x, y or z values are less than the min value, they are\r\n\t * replaced by the min value.\r\n\t *\r\n\t * @param {number} minVal - The minimum value the components will be clamped to.\r\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = clamp( this.x, minVal, maxVal );\r\n\t\tthis.y = clamp( this.y, minVal, maxVal );\r\n\t\tthis.z = clamp( this.z, minVal, maxVal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's length is greater than the max value, it is replaced by\r\n\t * the max value.\r\n\t * If this vector's length is less than the min value, it is replaced by the\r\n\t * min value.\r\n\t *\r\n\t * @param {number} min - The minimum value the vector length will be clamped to.\r\n\t * @param {number} max - The maximum value the vector length will be clamped to.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded down to the nearest integer value.\r\n\t *\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded up to the nearest integer value.\r\n\t *\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded to the nearest integer value\r\n\t *\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded towards zero (up if negative,\r\n\t * down if positive) to an integer value.\r\n\t *\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\troundToZero() {\r\n\r\n\t\tthis.x = Math.trunc( this.x );\r\n\t\tthis.y = Math.trunc( this.y );\r\n\t\tthis.z = Math.trunc( this.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Inverts this vector - i.e. sets x = -x, y = -y and z = -z.\r\n\t *\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the dot product of the given vector with this instance.\r\n\t *\r\n\t * @param {Vector3} v - The vector to compute the dot product with.\r\n\t * @return {number} The result of the dot product.\r\n\t */\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z;\r\n\r\n\t}\r\n\r\n\t// TODO lengthSquared?\r\n\r\n\t/**\r\n\t * Computes the square of the Euclidean length (straight-line length) from\r\n\t * (0, 0, 0) to (x, y, z). If you are comparing the lengths of vectors, you should\r\n\t * compare the length squared instead as it is slightly more efficient to calculate.\r\n\t *\r\n\t * @return {number} The square length of this vector.\r\n\t */\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0) to (x, y, z).\r\n\t *\r\n\t * @return {number} The length of this vector.\r\n\t */\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the Manhattan length of this vector.\r\n\t *\r\n\t * @return {number} The length of this vector.\r\n\t */\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\r\n\t * with the same direction as this one, but with a vector length of `1`.\r\n\t *\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this vector to a vector with the same direction as this one, but\r\n\t * with the specified length.\r\n\t *\r\n\t * @param {number} length - The new length of this vector.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Linearly interpolates between the given vector and this instance, where\r\n\t * alpha is the percent distance along the line - alpha = 0 will be this\r\n\t * vector, and alpha = 1 will be the given one.\r\n\t *\r\n\t * @param {Vector3} v - The vector to interpolate towards.\r\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Linearly interpolates between the given vectors, where alpha is the percent\r\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\r\n\t * be the second one. The result is stored in this instance.\r\n\t *\r\n\t * @param {Vector3} v1 - The first vector.\r\n\t * @param {Vector3} v2 - The second vector.\r\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the cross product of the given vector with this instance.\r\n\t *\r\n\t * @param {Vector3} v - The vector to compute the cross product with.\r\n\t * @return {Vector3} The result of the cross product.\r\n\t */\r\n\tcross( v ) {\r\n\r\n\t\treturn this.crossVectors( this, v );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the cross product of the given vectors and stores the result\r\n\t * in this instance.\r\n\t *\r\n\t * @param {Vector3} a - The first vector.\r\n\t * @param {Vector3} b - The second vector.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tcrossVectors( a, b ) {\r\n\r\n\t\tconst ax = a.x, ay = a.y, az = a.z;\r\n\t\tconst bx = b.x, by = b.y, bz = b.z;\r\n\r\n\t\tthis.x = ay * bz - az * by;\r\n\t\tthis.y = az * bx - ax * bz;\r\n\t\tthis.z = ax * by - ay * bx;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Projects this vector onto the given one.\r\n\t *\r\n\t * @param {Vector3} v - The vector to project to.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tprojectOnVector( v ) {\r\n\r\n\t\tconst denominator = v.lengthSq();\r\n\r\n\t\tif ( denominator === 0 ) return this.set( 0, 0, 0 );\r\n\r\n\t\tconst scalar = v.dot( this ) / denominator;\r\n\r\n\t\treturn this.copy( v ).multiplyScalar( scalar );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Projects this vector onto a plane by subtracting this\r\n\t * vector projected onto the plane's normal from this vector.\r\n\t *\r\n\t * @param {Vector3} planeNormal - The plane normal.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tprojectOnPlane( planeNormal ) {\r\n\r\n\t\t_vector.copy( this ).projectOnVector( planeNormal );\r\n\r\n\t\treturn this.sub( _vector );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Reflects this vector off a plane orthogonal to the given normal vector.\r\n\t *\r\n\t * @param {Vector3} normal - The (normalized) normal vector.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\treflect( normal ) {\r\n\r\n\t\treturn this.sub( _vector.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );\r\n\r\n\t}\r\n\t/**\r\n\t * Returns the angle between the given vector and this instance in radians.\r\n\t *\r\n\t * @param {Vector3} v - The vector to compute the angle with.\r\n\t * @return {number} The angle in radians.\r\n\t */\r\n\tangleTo( v ) {\r\n\r\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\tif ( denominator === 0 ) return Math.PI / 2;\r\n\r\n\t\tconst theta = this.dot( v ) / denominator;\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the distance from the given vector to this instance.\r\n\t *\r\n\t * @param {Vector3} v - The vector to compute the distance to.\r\n\t * @return {number} The distance.\r\n\t */\r\n\tdistanceTo( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the squared distance from the given vector to this instance.\r\n\t * If you are just comparing the distance with another distance, you should compare\r\n\t * the distance squared instead as it is slightly more efficient to calculate.\r\n\t *\r\n\t * @param {Vector3} v - The vector to compute the squared distance to.\r\n\t * @return {number} The squared distance.\r\n\t */\r\n\tdistanceToSquared( v ) {\r\n\r\n\t\tconst dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;\r\n\r\n\t\treturn dx * dx + dy * dy + dz * dz;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the Manhattan distance from the given vector to this instance.\r\n\t *\r\n\t * @param {Vector3} v - The vector to compute the Manhattan distance to.\r\n\t * @return {number} The Manhattan distance.\r\n\t */\r\n\tmanhattanDistanceTo( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components from the given spherical coordinates.\r\n\t *\r\n\t * @param {Spherical} s - The spherical coordinates.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetFromSpherical( s ) {\r\n\r\n\t\treturn this.setFromSphericalCoords( s.radius, s.phi, s.theta );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components from the given spherical coordinates.\r\n\t *\r\n\t * @param {number} radius - The radius.\r\n\t * @param {number} phi - The phi angle in radians.\r\n\t * @param {number} theta - The theta angle in radians.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetFromSphericalCoords( radius, phi, theta ) {\r\n\r\n\t\tconst sinPhiRadius = Math.sin( phi ) * radius;\r\n\r\n\t\tthis.x = sinPhiRadius * Math.sin( theta );\r\n\t\tthis.y = Math.cos( phi ) * radius;\r\n\t\tthis.z = sinPhiRadius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components from the given cylindrical coordinates.\r\n\t *\r\n\t * @param {Cylindrical} c - The cylindrical coordinates.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetFromCylindrical( c ) {\r\n\r\n\t\treturn this.setFromCylindricalCoords( c.radius, c.theta, c.y );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components from the given cylindrical coordinates.\r\n\t *\r\n\t * @param {number} radius - The radius.\r\n\t * @param {number} theta - The theta angle in radians.\r\n\t * @param {number} y - The y value.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetFromCylindricalCoords( radius, theta, y ) {\r\n\r\n\t\tthis.x = radius * Math.sin( theta );\r\n\t\tthis.y = y;\r\n\t\tthis.z = radius * Math.cos( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components to the position elements of the\r\n\t * given transformation matrix.\r\n\t *\r\n\t * @param {Matrix4} m - The 4x4 matrix.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetFromMatrixPosition( m ) {\r\n\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 12 ];\r\n\t\tthis.y = e[ 13 ];\r\n\t\tthis.z = e[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components to the scale elements of the\r\n\t * given transformation matrix.\r\n\t *\r\n\t * @param {Matrix4} m - The 4x4 matrix.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetFromMatrixScale( m ) {\r\n\r\n\t\tconst sx = this.setFromMatrixColumn( m, 0 ).length();\r\n\t\tconst sy = this.setFromMatrixColumn( m, 1 ).length();\r\n\t\tconst sz = this.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tthis.x = sx;\r\n\t\tthis.y = sy;\r\n\t\tthis.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components from the specified matrix column.\r\n\t *\r\n\t * @param {Matrix4} m - The 4x4 matrix.\r\n\t * @param {number} index - The column index.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetFromMatrixColumn( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 4 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components from the specified matrix column.\r\n\t *\r\n\t * @param {Matrix3} m - The 3x3 matrix.\r\n\t * @param {number} index - The column index.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetFromMatrix3Column( m, index ) {\r\n\r\n\t\treturn this.fromArray( m.elements, index * 3 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components from the given Euler angles.\r\n\t *\r\n\t * @param {Euler} e - The Euler angles to set.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetFromEuler( e ) {\r\n\r\n\t\tthis.x = e._x;\r\n\t\tthis.y = e._y;\r\n\t\tthis.z = e._z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components from the RGB components of the\r\n\t * given color.\r\n\t *\r\n\t * @param {Color} c - The color to set.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tsetFromColor( c ) {\r\n\r\n\t\tthis.x = c.r;\r\n\t\tthis.y = c.g;\r\n\t\tthis.z = c.b;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this vector is equal with the given one.\r\n\t *\r\n\t * @param {Vector3} v - The vector to test for equality.\r\n\t * @return {boolean} Whether this vector is equal with the given one.\r\n\t */\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`\r\n\t * and z value to be `array[ offset + 2 ]`.\r\n\t *\r\n\t * @param {Array<number>} array - An array holding the vector component values.\r\n\t * @param {number} [offset=0] - The offset into the array.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Writes the components of this vector to the given array. If no array is provided,\r\n\t * the method returns a new instance.\r\n\t *\r\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Array<number>} The vector components.\r\n\t */\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the components of this vector from the given buffer attribute.\r\n\t *\r\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\r\n\t * @param {number} index - The index into the attribute.\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets each component of this vector to a pseudo-random value between `0` and\r\n\t * `1`, excluding `1`.\r\n\t *\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\t\tthis.z = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this vector to a uniformly random point on a unit sphere.\r\n\t *\r\n\t * @return {Vector3} A reference to this vector.\r\n\t */\r\n\trandomDirection() {\r\n\r\n\t\t// https://mathworld.wolfram.com/SpherePointPicking.html\r\n\r\n\t\tconst theta = Math.random() * Math.PI * 2;\r\n\t\tconst u = Math.random() * 2 - 1;\r\n\t\tconst c = Math.sqrt( 1 - u * u );\r\n\r\n\t\tthis.x = c * Math.cos( theta );\r\n\t\tthis.y = u;\r\n\t\tthis.z = c * Math.sin( theta );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\t\tyield this.z;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nexport { Vector3 };\r\n", "import { WebGLCoordinateSystem, WebGPUCoordinateSystem } from '../constants.js';\r\nimport { Vector3 } from './Vector3.js';\r\n\r\n/**\r\n * Represents a 4x4 matrix.\r\n *\r\n * The most common use of a 4x4 matrix in 3D computer graphics is as a transformation matrix.\r\n * For an introduction to transformation matrices as used in WebGL, check out [this tutorial]{@link https://www.opengl-tutorial.org/beginners-tutorials/tutorial-3-matrices}\r\n *\r\n * This allows a 3D vector representing a point in 3D space to undergo\r\n * transformations such as translation, rotation, shear, scale, reflection,\r\n * orthogonal or perspective projection and so on, by being multiplied by the\r\n * matrix. This is known as `applying` the matrix to the vector.\r\n *\r\n * A Note on Row-Major and Column-Major Ordering:\r\n *\r\n * The constructor and {@link Matrix3#set} method take arguments in\r\n * [row-major]{@link https://en.wikipedia.org/wiki/Row-_and_column-major_order#Column-major_order}\r\n * order, while internally they are stored in the {@link Matrix3#elements} array in column-major order.\r\n * This means that calling:\r\n * ```js\r\n * const m = new THREE.Matrix4();\r\n * m.set( 11, 12, 13, 14,\r\n *        21, 22, 23, 24,\r\n *        31, 32, 33, 34,\r\n *        41, 42, 43, 44 );\r\n * ```\r\n * will result in the elements array containing:\r\n * ```js\r\n * m.elements = [ 11, 21, 31, 41,\r\n *                12, 22, 32, 42,\r\n *                13, 23, 33, 43,\r\n *                14, 24, 34, 44 ];\r\n * ```\r\n * and internally all calculations are performed using column-major ordering.\r\n * However, as the actual ordering makes no difference mathematically and\r\n * most people are used to thinking about matrices in row-major order, the\r\n * three.js documentation shows matrices in row-major order. Just bear in\r\n * mind that if you are reading the source code, you'll have to take the\r\n * transpose of any matrices outlined here to make sense of the calculations.\r\n */\r\nclass Matrix4 {\r\n\r\n\t/**\r\n\t * Constructs a new 4x4 matrix. The arguments are supposed to be\r\n\t * in row-major order. If no arguments are provided, the constructor\r\n\t * initializes the matrix as an identity matrix.\r\n\t *\r\n\t * @param {number} [n11] - 1-1 matrix element.\r\n\t * @param {number} [n12] - 1-2 matrix element.\r\n\t * @param {number} [n13] - 1-3 matrix element.\r\n\t * @param {number} [n14] - 1-4 matrix element.\r\n\t * @param {number} [n21] - 2-1 matrix element.\r\n\t * @param {number} [n22] - 2-2 matrix element.\r\n\t * @param {number} [n23] - 2-3 matrix element.\r\n\t * @param {number} [n24] - 2-4 matrix element.\r\n\t * @param {number} [n31] - 3-1 matrix element.\r\n\t * @param {number} [n32] - 3-2 matrix element.\r\n\t * @param {number} [n33] - 3-3 matrix element.\r\n\t * @param {number} [n34] - 3-4 matrix element.\r\n\t * @param {number} [n41] - 4-1 matrix element.\r\n\t * @param {number} [n42] - 4-2 matrix element.\r\n\t * @param {number} [n43] - 4-3 matrix element.\r\n\t * @param {number} [n44] - 4-4 matrix element.\r\n\t */\r\n\tconstructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tMatrix4.prototype.isMatrix4 = true;\r\n\r\n\t\t/**\r\n\t\t * A column-major list of matrix values.\r\n\t\t *\r\n\t\t * @type {Array<number>}\r\n\t\t */\r\n\t\tthis.elements = [\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t];\r\n\r\n\t\tif ( n11 !== undefined ) {\r\n\r\n\t\t\tthis.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the elements of the matrix.The arguments are supposed to be\r\n\t * in row-major order.\r\n\t *\r\n\t * @param {number} [n11] - 1-1 matrix element.\r\n\t * @param {number} [n12] - 1-2 matrix element.\r\n\t * @param {number} [n13] - 1-3 matrix element.\r\n\t * @param {number} [n14] - 1-4 matrix element.\r\n\t * @param {number} [n21] - 2-1 matrix element.\r\n\t * @param {number} [n22] - 2-2 matrix element.\r\n\t * @param {number} [n23] - 2-3 matrix element.\r\n\t * @param {number} [n24] - 2-4 matrix element.\r\n\t * @param {number} [n31] - 3-1 matrix element.\r\n\t * @param {number} [n32] - 3-2 matrix element.\r\n\t * @param {number} [n33] - 3-3 matrix element.\r\n\t * @param {number} [n34] - 3-4 matrix element.\r\n\t * @param {number} [n41] - 4-1 matrix element.\r\n\t * @param {number} [n42] - 4-2 matrix element.\r\n\t * @param {number} [n43] - 4-3 matrix element.\r\n\t * @param {number} [n44] - 4-4 matrix element.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tset( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;\r\n\t\tte[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;\r\n\t\tte[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;\r\n\t\tte[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix to the 4x4 identity matrix.\r\n\t *\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tidentity() {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, 1, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a matrix with copied values from this instance.\r\n\t *\r\n\t * @return {Matrix4} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new Matrix4().fromArray( this.elements );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given matrix to this instance.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix to copy.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tcopy( m ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tte[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];\r\n\t\tte[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];\r\n\t\tte[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];\r\n\t\tte[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the translation component of the given matrix\r\n\t * into this matrix's translation component.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix to copy the translation component.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tcopyPosition( m ) {\r\n\r\n\t\tconst te = this.elements, me = m.elements;\r\n\r\n\t\tte[ 12 ] = me[ 12 ];\r\n\t\tte[ 13 ] = me[ 13 ];\r\n\t\tte[ 14 ] = me[ 14 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Set the upper 3x3 elements of this matrix to the values of given 3x3 matrix.\r\n\t *\r\n\t * @param {Matrix3} m - The 3x3 matrix.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tsetFromMatrix3( m ) {\r\n\r\n\t\tconst me = m.elements;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tme[ 0 ], me[ 3 ], me[ 6 ], 0,\r\n\t\t\tme[ 1 ], me[ 4 ], me[ 7 ], 0,\r\n\t\t\tme[ 2 ], me[ 5 ], me[ 8 ], 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts the basis of this matrix into the three axis vectors provided.\r\n\t *\r\n\t * @param {Vector3} xAxis - The basis's x axis.\r\n\t * @param {Vector3} yAxis - The basis's y axis.\r\n\t * @param {Vector3} zAxis - The basis's z axis.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\textractBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\txAxis.setFromMatrixColumn( this, 0 );\r\n\t\tyAxis.setFromMatrixColumn( this, 1 );\r\n\t\tzAxis.setFromMatrixColumn( this, 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given basis vectors to this matrix.\r\n\t *\r\n\t * @param {Vector3} xAxis - The basis's x axis.\r\n\t * @param {Vector3} yAxis - The basis's y axis.\r\n\t * @param {Vector3} zAxis - The basis's z axis.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeBasis( xAxis, yAxis, zAxis ) {\r\n\r\n\t\tthis.set(\r\n\t\t\txAxis.x, yAxis.x, zAxis.x, 0,\r\n\t\t\txAxis.y, yAxis.y, zAxis.y, 0,\r\n\t\t\txAxis.z, yAxis.z, zAxis.z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts the rotation component of the given matrix\r\n\t * into this matrix's rotation component.\r\n\t *\r\n\t * Note: This method does not support reflection matrices.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\textractRotation( m ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = m.elements;\r\n\r\n\t\tconst scaleX = 1 / _v1.setFromMatrixColumn( m, 0 ).length();\r\n\t\tconst scaleY = 1 / _v1.setFromMatrixColumn( m, 1 ).length();\r\n\t\tconst scaleZ = 1 / _v1.setFromMatrixColumn( m, 2 ).length();\r\n\r\n\t\tte[ 0 ] = me[ 0 ] * scaleX;\r\n\t\tte[ 1 ] = me[ 1 ] * scaleX;\r\n\t\tte[ 2 ] = me[ 2 ] * scaleX;\r\n\t\tte[ 3 ] = 0;\r\n\r\n\t\tte[ 4 ] = me[ 4 ] * scaleY;\r\n\t\tte[ 5 ] = me[ 5 ] * scaleY;\r\n\t\tte[ 6 ] = me[ 6 ] * scaleY;\r\n\t\tte[ 7 ] = 0;\r\n\r\n\t\tte[ 8 ] = me[ 8 ] * scaleZ;\r\n\t\tte[ 9 ] = me[ 9 ] * scaleZ;\r\n\t\tte[ 10 ] = me[ 10 ] * scaleZ;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the rotation component (the upper left 3x3 matrix) of this matrix to\r\n\t * the rotation specified by the given Euler angles. The rest of\r\n\t * the matrix is set to the identity. Depending on the {@link Euler#order},\r\n\t * there are six possible outcomes. See [this page]{@link https://en.wikipedia.org/wiki/Euler_angles#Rotation_matrix}\r\n\t * for a complete list.\r\n\t *\r\n\t * @param {Euler} euler - The Euler angles.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeRotationFromEuler( euler ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst x = euler.x, y = euler.y, z = euler.z;\r\n\t\tconst a = Math.cos( x ), b = Math.sin( x );\r\n\t\tconst c = Math.cos( y ), d = Math.sin( y );\r\n\t\tconst e = Math.cos( z ), f = Math.sin( z );\r\n\r\n\t\tif ( euler.order === 'XYZ' ) {\r\n\r\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - c * f;\r\n\t\t\tte[ 8 ] = d;\r\n\r\n\t\t\tte[ 1 ] = af + be * d;\r\n\t\t\tte[ 5 ] = ae - bf * d;\r\n\t\t\tte[ 9 ] = - b * c;\r\n\r\n\t\t\tte[ 2 ] = bf - ae * d;\r\n\t\t\tte[ 6 ] = be + af * d;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YXZ' ) {\r\n\r\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce + df * b;\r\n\t\t\tte[ 4 ] = de * b - cf;\r\n\t\t\tte[ 8 ] = a * d;\r\n\r\n\t\t\tte[ 1 ] = a * f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b;\r\n\r\n\t\t\tte[ 2 ] = cf * b - de;\r\n\t\t\tte[ 6 ] = df + ce * b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZXY' ) {\r\n\r\n\t\t\tconst ce = c * e, cf = c * f, de = d * e, df = d * f;\r\n\r\n\t\t\tte[ 0 ] = ce - df * b;\r\n\t\t\tte[ 4 ] = - a * f;\r\n\t\t\tte[ 8 ] = de + cf * b;\r\n\r\n\t\t\tte[ 1 ] = cf + de * b;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = df - ce * b;\r\n\r\n\t\t\tte[ 2 ] = - a * d;\r\n\t\t\tte[ 6 ] = b;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'ZYX' ) {\r\n\r\n\t\t\tconst ae = a * e, af = a * f, be = b * e, bf = b * f;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = be * d - af;\r\n\t\t\tte[ 8 ] = ae * d + bf;\r\n\r\n\t\t\tte[ 1 ] = c * f;\r\n\t\t\tte[ 5 ] = bf * d + ae;\r\n\t\t\tte[ 9 ] = af * d - be;\r\n\r\n\t\t\tte[ 2 ] = - d;\r\n\t\t\tte[ 6 ] = b * c;\r\n\t\t\tte[ 10 ] = a * c;\r\n\r\n\t\t} else if ( euler.order === 'YZX' ) {\r\n\r\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = bd - ac * f;\r\n\t\t\tte[ 8 ] = bc * f + ad;\r\n\r\n\t\t\tte[ 1 ] = f;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = - b * e;\r\n\r\n\t\t\tte[ 2 ] = - d * e;\r\n\t\t\tte[ 6 ] = ad * f + bc;\r\n\t\t\tte[ 10 ] = ac - bd * f;\r\n\r\n\t\t} else if ( euler.order === 'XZY' ) {\r\n\r\n\t\t\tconst ac = a * c, ad = a * d, bc = b * c, bd = b * d;\r\n\r\n\t\t\tte[ 0 ] = c * e;\r\n\t\t\tte[ 4 ] = - f;\r\n\t\t\tte[ 8 ] = d * e;\r\n\r\n\t\t\tte[ 1 ] = ac * f + bd;\r\n\t\t\tte[ 5 ] = a * e;\r\n\t\t\tte[ 9 ] = ad * f - bc;\r\n\r\n\t\t\tte[ 2 ] = bc * f - ad;\r\n\t\t\tte[ 6 ] = b * e;\r\n\t\t\tte[ 10 ] = bd * f + ac;\r\n\r\n\t\t}\r\n\r\n\t\t// bottom row\r\n\t\tte[ 3 ] = 0;\r\n\t\tte[ 7 ] = 0;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\t// last column\r\n\t\tte[ 12 ] = 0;\r\n\t\tte[ 13 ] = 0;\r\n\t\tte[ 14 ] = 0;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the rotation component of this matrix to the rotation specified by\r\n\t * the given Quaternion as outlined [here]{@link https://en.wikipedia.org/wiki/Rotation_matrix#Quaternion}\r\n\t * The rest of the matrix is set to the identity.\r\n\t *\r\n\t * @param {Quaternion} q - The Quaternion.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeRotationFromQuaternion( q ) {\r\n\r\n\t\treturn this.compose( _zero, q, _one );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the rotation component of the transformation matrix, looking from `eye` towards\r\n\t * `target`, and oriented by the up-direction.\r\n\t *\r\n\t * @param {Vector3} eye - The eye vector.\r\n\t * @param {Vector3} target - The target vector.\r\n\t * @param {Vector3} up - The up vector.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tlookAt( eye, target, up ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\t_z.subVectors( eye, target );\r\n\r\n\t\tif ( _z.lengthSq() === 0 ) {\r\n\r\n\t\t\t// eye and target are in the same position\r\n\r\n\t\t\t_z.z = 1;\r\n\r\n\t\t}\r\n\r\n\t\t_z.normalize();\r\n\t\t_x.crossVectors( up, _z );\r\n\r\n\t\tif ( _x.lengthSq() === 0 ) {\r\n\r\n\t\t\t// up and z are parallel\r\n\r\n\t\t\tif ( Math.abs( up.z ) === 1 ) {\r\n\r\n\t\t\t\t_z.x += 0.0001;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t_z.z += 0.0001;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_z.normalize();\r\n\t\t\t_x.crossVectors( up, _z );\r\n\r\n\t\t}\r\n\r\n\t\t_x.normalize();\r\n\t\t_y.crossVectors( _z, _x );\r\n\r\n\t\tte[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;\r\n\t\tte[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;\r\n\t\tte[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Post-multiplies this matrix by the given 4x4 matrix.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix to multiply with.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( this, m );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-multiplies this matrix by the given 4x4 matrix.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix to multiply with.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tpremultiply( m ) {\r\n\r\n\t\treturn this.multiplyMatrices( m, this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiples the given 4x4 matrices and stores the result\r\n\t * in this matrix.\r\n\t *\r\n\t * @param {Matrix4} a - The first matrix.\r\n\t * @param {Matrix4} b - The second matrix.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmultiplyMatrices( a, b ) {\r\n\r\n\t\tconst ae = a.elements;\r\n\t\tconst be = b.elements;\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];\r\n\t\tconst a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];\r\n\t\tconst a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];\r\n\t\tconst a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];\r\n\r\n\t\tconst b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];\r\n\t\tconst b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];\r\n\t\tconst b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];\r\n\t\tconst b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];\r\n\r\n\t\tte[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\r\n\t\tte[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\r\n\t\tte[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\r\n\t\tte[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\r\n\r\n\t\tte[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\r\n\t\tte[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\r\n\t\tte[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\r\n\t\tte[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\r\n\r\n\t\tte[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\r\n\t\tte[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\r\n\t\tte[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\r\n\t\tte[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\r\n\r\n\t\tte[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\r\n\t\tte[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\r\n\t\tte[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\r\n\t\tte[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies every component of the matrix by the given scalar.\r\n\t *\r\n\t * @param {number} s - The scalar.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmultiplyScalar( s ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tte[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;\r\n\t\tte[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;\r\n\t\tte[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;\r\n\t\tte[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes and returns the determinant of this matrix.\r\n\t *\r\n\t * Based on the method outlined [here]{@link http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.html}.\r\n\t *\r\n\t * @return {number} The determinant.\r\n\t */\r\n\tdeterminant() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];\r\n\t\tconst n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];\r\n\t\tconst n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];\r\n\t\tconst n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];\r\n\r\n\t\t//TODO: make this more efficient\r\n\r\n\t\treturn (\r\n\t\t\tn41 * (\r\n\t\t\t\t+ n14 * n23 * n32\r\n\t\t\t\t - n13 * n24 * n32\r\n\t\t\t\t - n14 * n22 * n33\r\n\t\t\t\t + n12 * n24 * n33\r\n\t\t\t\t + n13 * n22 * n34\r\n\t\t\t\t - n12 * n23 * n34\r\n\t\t\t) +\r\n\t\t\tn42 * (\r\n\t\t\t\t+ n11 * n23 * n34\r\n\t\t\t\t - n11 * n24 * n33\r\n\t\t\t\t + n14 * n21 * n33\r\n\t\t\t\t - n13 * n21 * n34\r\n\t\t\t\t + n13 * n24 * n31\r\n\t\t\t\t - n14 * n23 * n31\r\n\t\t\t) +\r\n\t\t\tn43 * (\r\n\t\t\t\t+ n11 * n24 * n32\r\n\t\t\t\t - n11 * n22 * n34\r\n\t\t\t\t - n14 * n21 * n32\r\n\t\t\t\t + n12 * n21 * n34\r\n\t\t\t\t + n14 * n22 * n31\r\n\t\t\t\t - n12 * n24 * n31\r\n\t\t\t) +\r\n\t\t\tn44 * (\r\n\t\t\t\t- n13 * n22 * n31\r\n\t\t\t\t - n11 * n23 * n32\r\n\t\t\t\t + n11 * n22 * n33\r\n\t\t\t\t + n13 * n21 * n32\r\n\t\t\t\t - n12 * n21 * n33\r\n\t\t\t\t + n12 * n23 * n31\r\n\t\t\t)\r\n\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transposes this matrix in place.\r\n\t *\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\ttranspose() {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tlet tmp;\r\n\r\n\t\ttmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;\r\n\t\ttmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;\r\n\t\ttmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;\r\n\r\n\t\ttmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;\r\n\t\ttmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;\r\n\t\ttmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the position component for this matrix from the given vector,\r\n\t * without affecting the rest of the matrix.\r\n\t *\r\n\t * @param {number|Vector3} x - The x component of the vector or alternatively the vector object.\r\n\t * @param {number} y - The y component of the vector.\r\n\t * @param {number} z - The z component of the vector.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tsetPosition( x, y, z ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\tte[ 12 ] = x.x;\r\n\t\t\tte[ 13 ] = x.y;\r\n\t\t\tte[ 14 ] = x.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tte[ 12 ] = x;\r\n\t\t\tte[ 13 ] = y;\r\n\t\t\tte[ 14 ] = z;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Inverts this matrix, using the [analytic method]{@link https://en.wikipedia.org/wiki/Invertible_matrix#Analytic_solution}.\r\n\t * You can not invert with a determinant of zero. If you attempt this, the method produces\r\n\t * a zero matrix instead.\r\n\t *\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tinvert() {\r\n\r\n\t\t// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n\t\tconst te = this.elements,\r\n\r\n\t\t\tn11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],\r\n\t\t\tn12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],\r\n\t\t\tn13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],\r\n\t\t\tn14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],\r\n\r\n\t\t\tt11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n\t\t\tt12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n\t\t\tt13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n\t\t\tt14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\r\n\r\n\t\tconst det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;\r\n\r\n\t\tif ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );\r\n\r\n\t\tconst detInv = 1 / det;\r\n\r\n\t\tte[ 0 ] = t11 * detInv;\r\n\t\tte[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;\r\n\t\tte[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;\r\n\t\tte[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 4 ] = t12 * detInv;\r\n\t\tte[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;\r\n\t\tte[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;\r\n\t\tte[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;\r\n\r\n\t\tte[ 8 ] = t13 * detInv;\r\n\t\tte[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;\r\n\t\tte[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;\r\n\t\tte[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;\r\n\r\n\t\tte[ 12 ] = t14 * detInv;\r\n\t\tte[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;\r\n\t\tte[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;\r\n\t\tte[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the columns of this matrix by the given vector.\r\n\t *\r\n\t * @param {Vector3} v - The scale vector.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tscale( v ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst x = v.x, y = v.y, z = v.z;\r\n\r\n\t\tte[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;\r\n\t\tte[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;\r\n\t\tte[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;\r\n\t\tte[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the maximum scale value of the three axes.\r\n\t *\r\n\t * @return {number} The maximum scale.\r\n\t */\r\n\tgetMaxScaleOnAxis() {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];\r\n\t\tconst scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];\r\n\t\tconst scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];\r\n\r\n\t\treturn Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix as a translation transform from the given vector.\r\n\t *\r\n\t * @param {number|Vector3} x - The amount to translate in the X axis or alternatively a translation vector.\r\n\t * @param {number} y - The amount to translate in the Y axis.\r\n\t * @param {number} z - The amount to translate in the z axis.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeTranslation( x, y, z ) {\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x.x,\r\n\t\t\t\t0, 1, 0, x.y,\r\n\t\t\t\t0, 0, 1, x.z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.set(\r\n\r\n\t\t\t\t1, 0, 0, x,\r\n\t\t\t\t0, 1, 0, y,\r\n\t\t\t\t0, 0, 1, z,\r\n\t\t\t\t0, 0, 0, 1\r\n\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix as a rotational transformation around the X axis by\r\n\t * the given angle.\r\n\t *\r\n\t * @param {number} theta - The rotation in radians.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeRotationX( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, 0, 0, 0,\r\n\t\t\t0, c, - s, 0,\r\n\t\t\t0, s, c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix as a rotational transformation around the Y axis by\r\n\t * the given angle.\r\n\t *\r\n\t * @param {number} theta - The rotation in radians.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeRotationY( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t c, 0, s, 0,\r\n\t\t\t 0, 1, 0, 0,\r\n\t\t\t- s, 0, c, 0,\r\n\t\t\t 0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix as a rotational transformation around the Z axis by\r\n\t * the given angle.\r\n\t *\r\n\t * @param {number} theta - The rotation in radians.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeRotationZ( theta ) {\r\n\r\n\t\tconst c = Math.cos( theta ), s = Math.sin( theta );\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tc, - s, 0, 0,\r\n\t\t\ts, c, 0, 0,\r\n\t\t\t0, 0, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix as a rotational transformation around the given axis by\r\n\t * the given angle.\r\n\t *\r\n\t * This is a somewhat controversial but mathematically sound alternative to\r\n\t * rotating via Quaternions. See the discussion [here]{@link https://www.gamedev.net/articles/programming/math-and-physics/do-we-really-need-quaternions-r1199}.\r\n\t *\r\n\t * @param {Vector3} axis - The normalized rotation axis.\r\n\t * @param {number} angle - The rotation in radians.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeRotationAxis( axis, angle ) {\r\n\r\n\t\t// Based on http://www.gamedev.net/reference/articles/article1199.asp\r\n\r\n\t\tconst c = Math.cos( angle );\r\n\t\tconst s = Math.sin( angle );\r\n\t\tconst t = 1 - c;\r\n\t\tconst x = axis.x, y = axis.y, z = axis.z;\r\n\t\tconst tx = t * x, ty = t * y;\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\ttx * x + c, tx * y - s * z, tx * z + s * y, 0,\r\n\t\t\ttx * y + s * z, ty * y + c, ty * z - s * x, 0,\r\n\t\t\ttx * z - s * y, ty * z + s * x, t * z * z + c, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix as a scale transformation.\r\n\t *\r\n\t * @param {number} x - The amount to scale in the X axis.\r\n\t * @param {number} y - The amount to scale in the Y axis.\r\n\t * @param {number} z - The amount to scale in the Z axis.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeScale( x, y, z ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\tx, 0, 0, 0,\r\n\t\t\t0, y, 0, 0,\r\n\t\t\t0, 0, z, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix as a shear transformation.\r\n\t *\r\n\t * @param {number} xy - The amount to shear X by Y.\r\n\t * @param {number} xz - The amount to shear X by Z.\r\n\t * @param {number} yx - The amount to shear Y by X.\r\n\t * @param {number} yz - The amount to shear Y by Z.\r\n\t * @param {number} zx - The amount to shear Z by X.\r\n\t * @param {number} zy - The amount to shear Z by Y.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeShear( xy, xz, yx, yz, zx, zy ) {\r\n\r\n\t\tthis.set(\r\n\r\n\t\t\t1, yx, zx, 0,\r\n\t\t\txy, 1, zy, 0,\r\n\t\t\txz, yz, 1, 0,\r\n\t\t\t0, 0, 0, 1\r\n\r\n\t\t);\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this matrix to the transformation composed of the given position,\r\n\t * rotation (Quaternion) and scale.\r\n\t *\r\n\t * @param {Vector3} position - The position vector.\r\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\r\n\t * @param {Vector3} scale - The scale vector.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tcompose( position, quaternion, scale ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tconst x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;\r\n\t\tconst x2 = x + x,\ty2 = y + y, z2 = z + z;\r\n\t\tconst xx = x * x2, xy = x * y2, xz = x * z2;\r\n\t\tconst yy = y * y2, yz = y * z2, zz = z * z2;\r\n\t\tconst wx = w * x2, wy = w * y2, wz = w * z2;\r\n\r\n\t\tconst sx = scale.x, sy = scale.y, sz = scale.z;\r\n\r\n\t\tte[ 0 ] = ( 1 - ( yy + zz ) ) * sx;\r\n\t\tte[ 1 ] = ( xy + wz ) * sx;\r\n\t\tte[ 2 ] = ( xz - wy ) * sx;\r\n\t\tte[ 3 ] = 0;\r\n\r\n\t\tte[ 4 ] = ( xy - wz ) * sy;\r\n\t\tte[ 5 ] = ( 1 - ( xx + zz ) ) * sy;\r\n\t\tte[ 6 ] = ( yz + wx ) * sy;\r\n\t\tte[ 7 ] = 0;\r\n\r\n\t\tte[ 8 ] = ( xz + wy ) * sz;\r\n\t\tte[ 9 ] = ( yz - wx ) * sz;\r\n\t\tte[ 10 ] = ( 1 - ( xx + yy ) ) * sz;\r\n\t\tte[ 11 ] = 0;\r\n\r\n\t\tte[ 12 ] = position.x;\r\n\t\tte[ 13 ] = position.y;\r\n\t\tte[ 14 ] = position.z;\r\n\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Decomposes this matrix into its position, rotation and scale components\r\n\t * and provides the result in the given objects.\r\n\t *\r\n\t * Note: Not all matrices are decomposable in this way. For example, if an\r\n\t * object has a non-uniformly scaled parent, then the object's world matrix\r\n\t * may not be decomposable, and this method may not be appropriate.\r\n\t *\r\n\t * @param {Vector3} position - The position vector.\r\n\t * @param {Quaternion} quaternion - The rotation as a Quaternion.\r\n\t * @param {Vector3} scale - The scale vector.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tdecompose( position, quaternion, scale ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tlet sx = _v1.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();\r\n\t\tconst sy = _v1.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();\r\n\t\tconst sz = _v1.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();\r\n\r\n\t\t// if determine is negative, we need to invert one scale\r\n\t\tconst det = this.determinant();\r\n\t\tif ( det < 0 ) sx = - sx;\r\n\r\n\t\tposition.x = te[ 12 ];\r\n\t\tposition.y = te[ 13 ];\r\n\t\tposition.z = te[ 14 ];\r\n\r\n\t\t// scale the rotation part\r\n\t\t_m1.copy( this );\r\n\r\n\t\tconst invSX = 1 / sx;\r\n\t\tconst invSY = 1 / sy;\r\n\t\tconst invSZ = 1 / sz;\r\n\r\n\t\t_m1.elements[ 0 ] *= invSX;\r\n\t\t_m1.elements[ 1 ] *= invSX;\r\n\t\t_m1.elements[ 2 ] *= invSX;\r\n\r\n\t\t_m1.elements[ 4 ] *= invSY;\r\n\t\t_m1.elements[ 5 ] *= invSY;\r\n\t\t_m1.elements[ 6 ] *= invSY;\r\n\r\n\t\t_m1.elements[ 8 ] *= invSZ;\r\n\t\t_m1.elements[ 9 ] *= invSZ;\r\n\t\t_m1.elements[ 10 ] *= invSZ;\r\n\r\n\t\tquaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\tscale.x = sx;\r\n\t\tscale.y = sy;\r\n\t\tscale.z = sz;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a perspective projection matrix. This is used internally by\r\n\t * {@link PerspectiveCamera#updateProjectionMatrix}.\r\n\r\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\r\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\r\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\r\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\r\n\t * @param {number} near - The distance from the camera to the near plane.\r\n\t * @param {number} far - The distance from the camera to the far plane.\r\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst x = 2 * near / ( right - left );\r\n\t\tconst y = 2 * near / ( top - bottom );\r\n\r\n\t\tconst a = ( right + left ) / ( right - left );\r\n\t\tconst b = ( top + bottom ) / ( top - bottom );\r\n\r\n\t\tlet c, d;\r\n\r\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tc = - ( far + near ) / ( far - near );\r\n\t\t\td = ( - 2 * far * near ) / ( far - near );\r\n\r\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\tc = - far / ( far - near );\r\n\t\t\td = ( - far * near ) / ( far - near );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );\r\n\r\n\t\t}\r\n\r\n\t\tte[ 0 ] = x;\tte[ 4 ] = 0;\tte[ 8 ] = a; \tte[ 12 ] = 0;\r\n\t\tte[ 1 ] = 0;\tte[ 5 ] = y;\tte[ 9 ] = b; \tte[ 13 ] = 0;\r\n\t\tte[ 2 ] = 0;\tte[ 6 ] = 0;\tte[ 10 ] = c; \tte[ 14 ] = d;\r\n\t\tte[ 3 ] = 0;\tte[ 7 ] = 0;\tte[ 11 ] = - 1;\tte[ 15 ] = 0;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a orthographic projection matrix. This is used internally by\r\n\t * {@link OrthographicCamera#updateProjectionMatrix}.\r\n\r\n\t * @param {number} left - Left boundary of the viewing frustum at the near plane.\r\n\t * @param {number} right - Right boundary of the viewing frustum at the near plane.\r\n\t * @param {number} top - Top boundary of the viewing frustum at the near plane.\r\n\t * @param {number} bottom - Bottom boundary of the viewing frustum at the near plane.\r\n\t * @param {number} near - The distance from the camera to the near plane.\r\n\t * @param {number} far - The distance from the camera to the far plane.\r\n\t * @param {(WebGLCoordinateSystem|WebGPUCoordinateSystem)} [coordinateSystem=WebGLCoordinateSystem] - The coordinate system.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tmakeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst w = 1.0 / ( right - left );\r\n\t\tconst h = 1.0 / ( top - bottom );\r\n\t\tconst p = 1.0 / ( far - near );\r\n\r\n\t\tconst x = ( right + left ) * w;\r\n\t\tconst y = ( top + bottom ) * h;\r\n\r\n\t\tlet z, zInv;\r\n\r\n\t\tif ( coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tz = ( far + near ) * p;\r\n\t\t\tzInv = - 2 * p;\r\n\r\n\t\t} else if ( coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\tz = near * p;\r\n\t\t\tzInv = - 1 * p;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );\r\n\r\n\t\t}\r\n\r\n\t\tte[ 0 ] = 2 * w;\tte[ 4 ] = 0;\t\tte[ 8 ] = 0; \t\tte[ 12 ] = - x;\r\n\t\tte[ 1 ] = 0; \t\tte[ 5 ] = 2 * h;\tte[ 9 ] = 0; \t\tte[ 13 ] = - y;\r\n\t\tte[ 2 ] = 0; \t\tte[ 6 ] = 0;\t\tte[ 10 ] = zInv;\tte[ 14 ] = - z;\r\n\t\tte[ 3 ] = 0; \t\tte[ 7 ] = 0;\t\tte[ 11 ] = 0;\t\tte[ 15 ] = 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this matrix is equal with the given one.\r\n\t *\r\n\t * @param {Matrix4} matrix - The matrix to test for equality.\r\n\t * @return {boolean} Whether this matrix is equal with the given one.\r\n\t */\r\n\tequals( matrix ) {\r\n\r\n\t\tconst te = this.elements;\r\n\t\tconst me = matrix.elements;\r\n\r\n\t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tif ( te[ i ] !== me[ i ] ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the elements of the matrix from the given array.\r\n\t *\r\n\t * @param {Array<number>} array - The matrix elements in column-major order.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Matrix4} A reference to this matrix.\r\n\t */\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tfor ( let i = 0; i < 16; i ++ ) {\r\n\r\n\t\t\tthis.elements[ i ] = array[ i + offset ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Writes the elements of this matrix to the given array. If no array is provided,\r\n\t * the method returns a new instance.\r\n\t *\r\n\t * @param {Array<number>} [array=[]] - The target array holding the matrix elements in column-major order.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Array<number>} The matrix elements in column-major order.\r\n\t */\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tconst te = this.elements;\r\n\r\n\t\tarray[ offset ] = te[ 0 ];\r\n\t\tarray[ offset + 1 ] = te[ 1 ];\r\n\t\tarray[ offset + 2 ] = te[ 2 ];\r\n\t\tarray[ offset + 3 ] = te[ 3 ];\r\n\r\n\t\tarray[ offset + 4 ] = te[ 4 ];\r\n\t\tarray[ offset + 5 ] = te[ 5 ];\r\n\t\tarray[ offset + 6 ] = te[ 6 ];\r\n\t\tarray[ offset + 7 ] = te[ 7 ];\r\n\r\n\t\tarray[ offset + 8 ] = te[ 8 ];\r\n\t\tarray[ offset + 9 ] = te[ 9 ];\r\n\t\tarray[ offset + 10 ] = te[ 10 ];\r\n\t\tarray[ offset + 11 ] = te[ 11 ];\r\n\r\n\t\tarray[ offset + 12 ] = te[ 12 ];\r\n\t\tarray[ offset + 13 ] = te[ 13 ];\r\n\t\tarray[ offset + 14 ] = te[ 14 ];\r\n\t\tarray[ offset + 15 ] = te[ 15 ];\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );\r\nconst _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );\r\nconst _x = /*@__PURE__*/ new Vector3();\r\nconst _y = /*@__PURE__*/ new Vector3();\r\nconst _z = /*@__PURE__*/ new Vector3();\r\n\r\nexport { Matrix4 };\r\n", "import { clamp } from './MathUtils.js';\r\n\r\n/**\r\n * Class representing a 2D vector. A 2D vector is an ordered pair of numbers\r\n * (labeled x and y), which can be used to represent a number of things, such as:\r\n *\r\n * - A point in 2D space (i.e. a position on a plane).\r\n * - A direction and length across a plane. In three.js the length will\r\n * always be the Euclidean distance(straight-line distance) from `(0, 0)` to `(x, y)`\r\n * and the direction is also measured from `(0, 0)` towards `(x, y)`.\r\n * - Any arbitrary ordered pair of numbers.\r\n *\r\n * There are other things a 2D vector can be used to represent, such as\r\n * momentum vectors, complex numbers and so on, however these are the most\r\n * common uses in three.js.\r\n *\r\n * Iterating through a vector instance will yield its components `(x, y)` in\r\n * the corresponding order.\r\n * ```js\r\n * const a = new THREE.Vector2( 0, 1 );\r\n *\r\n * //no arguments; will be initialised to (0, 0)\r\n * const b = new THREE.Vector2( );\r\n *\r\n * const d = a.distanceTo( b );\r\n * ```\r\n */\r\nclass Vector2 {\r\n\r\n\t/**\r\n\t * Constructs a new 2D vector.\r\n\t *\r\n\t * @param {number} [x=0] - The x value of this vector.\r\n\t * @param {number} [y=0] - The y value of this vector.\r\n\t */\r\n\tconstructor( x = 0, y = 0 ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tVector2.prototype.isVector2 = true;\r\n\r\n\t\t/**\r\n\t\t * The x value of this vector.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.x = x;\r\n\r\n\t\t/**\r\n\t\t * The y value of this vector.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.y = y;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Alias for {@link Vector2#x}.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tget width() {\r\n\r\n\t\treturn this.x;\r\n\r\n\t}\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.x = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Alias for {@link Vector2#y}.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tget height() {\r\n\r\n\t\treturn this.y;\r\n\r\n\t}\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.y = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components.\r\n\t *\r\n\t * @param {number} x - The value of the x component.\r\n\t * @param {number} y - The value of the y component.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tset( x, y ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components to the same value.\r\n\t *\r\n\t * @param {number} scalar - The value to set for all vector components.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector's x component to the given value\r\n\t *\r\n\t * @param {number} x - The value to set.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector's y component to the given value\r\n\t *\r\n\t * @param {number} y - The value to set.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Allows to set a vector component with an index.\r\n\t *\r\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\r\n\t * @param {number} value - The value to set.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the vector component which matches the given index.\r\n\t *\r\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y.\r\n\t * @return {number} A vector component value.\r\n\t */\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new vector with copied values from this instance.\r\n\t *\r\n\t * @return {Vector2} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given vector to this instance.\r\n\t *\r\n\t * @param {Vector2} v - The vector to copy.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given vector to this instance.\r\n\t *\r\n\t * @param {Vector2} v - The vector to add.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given scalar value to all components of this instance.\r\n\t *\r\n\t * @param {number} s - The scalar to add.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given vectors and stores the result in this instance.\r\n\t *\r\n\t * @param {Vector2} a - The first vector.\r\n\t * @param {Vector2} b - The second vector.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given vector scaled by the given factor to this instance.\r\n\t *\r\n\t * @param {Vector2} v - The vector.\r\n\t * @param {number} s - The factor that scales `v`.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the given vector from this instance.\r\n\t *\r\n\t * @param {Vector2} v - The vector to subtract.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the given scalar value from all components of this instance.\r\n\t *\r\n\t * @param {number} s - The scalar to subtract.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the given vectors and stores the result in this instance.\r\n\t *\r\n\t * @param {Vector2} a - The first vector.\r\n\t * @param {Vector2} b - The second vector.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the given vector with this instance.\r\n\t *\r\n\t * @param {Vector2} v - The vector to multiply.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the given scalar value with all components of this instance.\r\n\t *\r\n\t * @param {number} scalar - The scalar to multiply.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Divides this instance by the given vector.\r\n\t *\r\n\t * @param {Vector2} v - The vector to divide.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tdivide( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Divides this vector by the given scalar.\r\n\t *\r\n\t * @param {number} scalar - The scalar to divide.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies this vector (with an implicit 1 as the 3rd component) by\r\n\t * the given 3x3 matrix.\r\n\t *\r\n\t * @param {Matrix3} m - The matrix to apply.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];\r\n\t\tthis.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x or y value is greater than the given vector's x or y\r\n\t * value, replace that value with the corresponding min value.\r\n\t *\r\n\t * @param {Vector2} v - The vector.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x or y value is less than the given vector's x or y\r\n\t * value, replace that value with the corresponding max value.\r\n\t *\r\n\t * @param {Vector2} v - The vector.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x or y value is greater than the max vector's x or y\r\n\t * value, it is replaced by the corresponding value.\r\n\t * If this vector's x or y value is less than the min vector's x or y value,\r\n\t * it is replaced by the corresponding value.\r\n\t *\r\n\t * @param {Vector2} min - The minimum x and y values.\r\n\t * @param {Vector2} max - The maximum x and y values in the desired range.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = clamp( this.x, min.x, max.x );\r\n\t\tthis.y = clamp( this.y, min.y, max.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x or y values are greater than the max value, they are\r\n\t * replaced by the max value.\r\n\t * If this vector's x or y values are less than the min value, they are\r\n\t * replaced by the min value.\r\n\t *\r\n\t * @param {number} minVal - The minimum value the components will be clamped to.\r\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = clamp( this.x, minVal, maxVal );\r\n\t\tthis.y = clamp( this.y, minVal, maxVal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's length is greater than the max value, it is replaced by\r\n\t * the max value.\r\n\t * If this vector's length is less than the min value, it is replaced by the\r\n\t * min value.\r\n\t *\r\n\t * @param {number} min - The minimum value the vector length will be clamped to.\r\n\t * @param {number} max - The maximum value the vector length will be clamped to.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded down to the nearest integer value.\r\n\t *\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded up to the nearest integer value.\r\n\t *\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded to the nearest integer value\r\n\t *\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded towards zero (up if negative,\r\n\t * down if positive) to an integer value.\r\n\t *\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\troundToZero() {\r\n\r\n\t\tthis.x = Math.trunc( this.x );\r\n\t\tthis.y = Math.trunc( this.y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Inverts this vector - i.e. sets x = -x and y = -y.\r\n\t *\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the dot product of the given vector with this instance.\r\n\t *\r\n\t * @param {Vector2} v - The vector to compute the dot product with.\r\n\t * @return {number} The result of the dot product.\r\n\t */\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the cross product of the given vector with this instance.\r\n\t *\r\n\t * @param {Vector2} v - The vector to compute the cross product with.\r\n\t * @return {number} The result of the cross product.\r\n\t */\r\n\tcross( v ) {\r\n\r\n\t\treturn this.x * v.y - this.y * v.x;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the square of the Euclidean length (straight-line length) from\r\n\t * (0, 0) to (x, y). If you are comparing the lengths of vectors, you should\r\n\t * compare the length squared instead as it is slightly more efficient to calculate.\r\n\t *\r\n\t * @return {number} The square length of this vector.\r\n\t */\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the  Euclidean length (straight-line length) from (0, 0) to (x, y).\r\n\t *\r\n\t * @return {number} The length of this vector.\r\n\t */\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the Manhattan length of this vector.\r\n\t *\r\n\t * @return {number} The length of this vector.\r\n\t */\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\r\n\t * with the same direction as this one, but with a vector length of `1`.\r\n\t *\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the angle in radians of this vector with respect to the positive x-axis.\r\n\t *\r\n\t * @return {number} The angle in radians.\r\n\t */\r\n\tangle() {\r\n\r\n\t\tconst angle = Math.atan2( - this.y, - this.x ) + Math.PI;\r\n\r\n\t\treturn angle;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the angle between the given vector and this instance in radians.\r\n\t *\r\n\t * @param {Vector2} v - The vector to compute the angle with.\r\n\t * @return {number} The angle in radians.\r\n\t */\r\n\tangleTo( v ) {\r\n\r\n\t\tconst denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );\r\n\r\n\t\tif ( denominator === 0 ) return Math.PI / 2;\r\n\r\n\t\tconst theta = this.dot( v ) / denominator;\r\n\r\n\t\t// clamp, to handle numerical problems\r\n\r\n\t\treturn Math.acos( clamp( theta, - 1, 1 ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the distance from the given vector to this instance.\r\n\t *\r\n\t * @param {Vector2} v - The vector to compute the distance to.\r\n\t * @return {number} The distance.\r\n\t */\r\n\tdistanceTo( v ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceToSquared( v ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the squared distance from the given vector to this instance.\r\n\t * If you are just comparing the distance with another distance, you should compare\r\n\t * the distance squared instead as it is slightly more efficient to calculate.\r\n\t *\r\n\t * @param {Vector2} v - The vector to compute the squared distance to.\r\n\t * @return {number} The squared distance.\r\n\t */\r\n\tdistanceToSquared( v ) {\r\n\r\n\t\tconst dx = this.x - v.x, dy = this.y - v.y;\r\n\t\treturn dx * dx + dy * dy;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the Manhattan distance from the given vector to this instance.\r\n\t *\r\n\t * @param {Vector2} v - The vector to compute the Manhattan distance to.\r\n\t * @return {number} The Manhattan distance.\r\n\t */\r\n\tmanhattanDistanceTo( v ) {\r\n\r\n\t\treturn Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this vector to a vector with the same direction as this one, but\r\n\t * with the specified length.\r\n\t *\r\n\t * @param {number} length - The new length of this vector.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Linearly interpolates between the given vector and this instance, where\r\n\t * alpha is the percent distance along the line - alpha = 0 will be this\r\n\t * vector, and alpha = 1 will be the given one.\r\n\t *\r\n\t * @param {Vector2} v - The vector to interpolate towards.\r\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Linearly interpolates between the given vectors, where alpha is the percent\r\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\r\n\t * be the second one. The result is stored in this instance.\r\n\t *\r\n\t * @param {Vector2} v1 - The first vector.\r\n\t * @param {Vector2} v2 - The second vector.\r\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this vector is equal with the given one.\r\n\t *\r\n\t * @param {Vector2} v - The vector to test for equality.\r\n\t * @return {boolean} Whether this vector is equal with the given one.\r\n\t */\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this vector's x value to be `array[ offset ]` and y\r\n\t * value to be `array[ offset + 1 ]`.\r\n\t *\r\n\t * @param {Array<number>} array - An array holding the vector component values.\r\n\t * @param {number} [offset=0] - The offset into the array.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Writes the components of this vector to the given array. If no array is provided,\r\n\t * the method returns a new instance.\r\n\t *\r\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Array<number>} The vector components.\r\n\t */\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the components of this vector from the given buffer attribute.\r\n\t *\r\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\r\n\t * @param {number} index - The index into the attribute.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates this vector around the given center by the given angle.\r\n\t *\r\n\t * @param {Vector2} center - The point around which to rotate.\r\n\t * @param {number} angle - The angle to rotate, in radians.\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\trotateAround( center, angle ) {\r\n\r\n\t\tconst c = Math.cos( angle ), s = Math.sin( angle );\r\n\r\n\t\tconst x = this.x - center.x;\r\n\t\tconst y = this.y - center.y;\r\n\r\n\t\tthis.x = x * c - y * s + center.x;\r\n\t\tthis.y = x * s + y * c + center.y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets each component of this vector to a pseudo-random value between `0` and\r\n\t * `1`, excluding `1`.\r\n\t *\r\n\t * @return {Vector2} A reference to this vector.\r\n\t */\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Vector2 };\r\n", "import { clamp } from './MathUtils.js';\r\n\r\n/**\r\n * Class representing a 4D vector. A 4D vector is an ordered quadruplet of numbers\r\n * (labeled x, y, z and w), which can be used to represent a number of things, such as:\r\n *\r\n * - A point in 4D space.\r\n * - A direction and length in 4D space. In three.js the length will\r\n * always be the Euclidean distance(straight-line distance) from `(0, 0, 0, 0)` to `(x, y, z, w)`\r\n * and the direction is also measured from `(0, 0, 0, 0)` towards `(x, y, z, w)`.\r\n * - Any arbitrary ordered quadruplet of numbers.\r\n *\r\n * There are other things a 4D vector can be used to represent, however these\r\n * are the most common uses in *three.js*.\r\n *\r\n * Iterating through a vector instance will yield its components `(x, y, z, w)` in\r\n * the corresponding order.\r\n * ```js\r\n * const a = new THREE.Vector4( 0, 1, 0, 0 );\r\n *\r\n * //no arguments; will be initialised to (0, 0, 0, 1)\r\n * const b = new THREE.Vector4( );\r\n *\r\n * const d = a.dot( b );\r\n * ```\r\n */\r\nclass Vector4 {\r\n\r\n\t/**\r\n\t * Constructs a new 4D vector.\r\n\t *\r\n\t * @param {number} [x=0] - The x value of this vector.\r\n\t * @param {number} [y=0] - The y value of this vector.\r\n\t * @param {number} [z=0] - The z value of this vector.\r\n\t * @param {number} [w=1] - The w value of this vector.\r\n\t */\r\n\tconstructor( x = 0, y = 0, z = 0, w = 1 ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tVector4.prototype.isVector4 = true;\r\n\r\n\t\t/**\r\n\t\t * The x value of this vector.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.x = x;\r\n\r\n\t\t/**\r\n\t\t * The y value of this vector.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.y = y;\r\n\r\n\t\t/**\r\n\t\t * The z value of this vector.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.z = z;\r\n\r\n\t\t/**\r\n\t\t * The w value of this vector.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.w = w;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Alias for {@link Vector4#z}.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tget width() {\r\n\r\n\t\treturn this.z;\r\n\r\n\t}\r\n\r\n\tset width( value ) {\r\n\r\n\t\tthis.z = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Alias for {@link Vector4#w}.\r\n\t *\r\n\t * @type {number}\r\n\t */\r\n\tget height() {\r\n\r\n\t\treturn this.w;\r\n\r\n\t}\r\n\r\n\tset height( value ) {\r\n\r\n\t\tthis.w = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components.\r\n\t *\r\n\t * @param {number} x - The value of the x component.\r\n\t * @param {number} y - The value of the y component.\r\n\t * @param {number} z - The value of the z component.\r\n\t * @param {number} w - The value of the w component.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tset( x, y, z, w ) {\r\n\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t\tthis.z = z;\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components to the same value.\r\n\t *\r\n\t * @param {number} scalar - The value to set for all vector components.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsetScalar( scalar ) {\r\n\r\n\t\tthis.x = scalar;\r\n\t\tthis.y = scalar;\r\n\t\tthis.z = scalar;\r\n\t\tthis.w = scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector's x component to the given value\r\n\t *\r\n\t * @param {number} x - The value to set.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsetX( x ) {\r\n\r\n\t\tthis.x = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector's y component to the given value\r\n\t *\r\n\t * @param {number} y - The value to set.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsetY( y ) {\r\n\r\n\t\tthis.y = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector's z component to the given value\r\n\t *\r\n\t * @param {number} z - The value to set.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsetZ( z ) {\r\n\r\n\t\tthis.z = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector's w component to the given value\r\n\t *\r\n\t * @param {number} w - The value to set.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsetW( w ) {\r\n\r\n\t\tthis.w = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Allows to set a vector component with an index.\r\n\t *\r\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\r\n\t * `2` equals to z, `3` equals to w.\r\n\t * @param {number} value - The value to set.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsetComponent( index, value ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: this.x = value; break;\r\n\t\t\tcase 1: this.y = value; break;\r\n\t\t\tcase 2: this.z = value; break;\r\n\t\t\tcase 3: this.w = value; break;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of the vector component which matches the given index.\r\n\t *\r\n\t * @param {number} index - The component index. `0` equals to x, `1` equals to y,\r\n\t * `2` equals to z, `3` equals to w.\r\n\t * @return {number} A vector component value.\r\n\t */\r\n\tgetComponent( index ) {\r\n\r\n\t\tswitch ( index ) {\r\n\r\n\t\t\tcase 0: return this.x;\r\n\t\t\tcase 1: return this.y;\r\n\t\t\tcase 2: return this.z;\r\n\t\t\tcase 3: return this.w;\r\n\t\t\tdefault: throw new Error( 'index is out of range: ' + index );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new vector with copied values from this instance.\r\n\t *\r\n\t * @return {Vector4} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.x, this.y, this.z, this.w );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given vector to this instance.\r\n\t *\r\n\t * @param {Vector3|Vector4} v - The vector to copy.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tcopy( v ) {\r\n\r\n\t\tthis.x = v.x;\r\n\t\tthis.y = v.y;\r\n\t\tthis.z = v.z;\r\n\t\tthis.w = ( v.w !== undefined ) ? v.w : 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given vector to this instance.\r\n\t *\r\n\t * @param {Vector4} v - The vector to add.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tadd( v ) {\r\n\r\n\t\tthis.x += v.x;\r\n\t\tthis.y += v.y;\r\n\t\tthis.z += v.z;\r\n\t\tthis.w += v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given scalar value to all components of this instance.\r\n\t *\r\n\t * @param {number} s - The scalar to add.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\taddScalar( s ) {\r\n\r\n\t\tthis.x += s;\r\n\t\tthis.y += s;\r\n\t\tthis.z += s;\r\n\t\tthis.w += s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given vectors and stores the result in this instance.\r\n\t *\r\n\t * @param {Vector4} a - The first vector.\r\n\t * @param {Vector4} b - The second vector.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\taddVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x + b.x;\r\n\t\tthis.y = a.y + b.y;\r\n\t\tthis.z = a.z + b.z;\r\n\t\tthis.w = a.w + b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given vector scaled by the given factor to this instance.\r\n\t *\r\n\t * @param {Vector4} v - The vector.\r\n\t * @param {number} s - The factor that scales `v`.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\taddScaledVector( v, s ) {\r\n\r\n\t\tthis.x += v.x * s;\r\n\t\tthis.y += v.y * s;\r\n\t\tthis.z += v.z * s;\r\n\t\tthis.w += v.w * s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the given vector from this instance.\r\n\t *\r\n\t * @param {Vector4} v - The vector to subtract.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsub( v ) {\r\n\r\n\t\tthis.x -= v.x;\r\n\t\tthis.y -= v.y;\r\n\t\tthis.z -= v.z;\r\n\t\tthis.w -= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the given scalar value from all components of this instance.\r\n\t *\r\n\t * @param {number} s - The scalar to subtract.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsubScalar( s ) {\r\n\r\n\t\tthis.x -= s;\r\n\t\tthis.y -= s;\r\n\t\tthis.z -= s;\r\n\t\tthis.w -= s;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Subtracts the given vectors and stores the result in this instance.\r\n\t *\r\n\t * @param {Vector4} a - The first vector.\r\n\t * @param {Vector4} b - The second vector.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsubVectors( a, b ) {\r\n\r\n\t\tthis.x = a.x - b.x;\r\n\t\tthis.y = a.y - b.y;\r\n\t\tthis.z = a.z - b.z;\r\n\t\tthis.w = a.w - b.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the given vector with this instance.\r\n\t *\r\n\t * @param {Vector4} v - The vector to multiply.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tmultiply( v ) {\r\n\r\n\t\tthis.x *= v.x;\r\n\t\tthis.y *= v.y;\r\n\t\tthis.z *= v.z;\r\n\t\tthis.w *= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies the given scalar value with all components of this instance.\r\n\t *\r\n\t * @param {number} scalar - The scalar to multiply.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tmultiplyScalar( scalar ) {\r\n\r\n\t\tthis.x *= scalar;\r\n\t\tthis.y *= scalar;\r\n\t\tthis.z *= scalar;\r\n\t\tthis.w *= scalar;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Multiplies this vector with the given 4x4 matrix.\r\n\t *\r\n\t * @param {Matrix4} m - The 4x4 matrix.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tconst x = this.x, y = this.y, z = this.z, w = this.w;\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;\r\n\t\tthis.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;\r\n\t\tthis.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;\r\n\t\tthis.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Divides this instance by the given vector.\r\n\t *\r\n\t * @param {Vector4} v - The vector to divide.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tdivide( v ) {\r\n\r\n\t\tthis.x /= v.x;\r\n\t\tthis.y /= v.y;\r\n\t\tthis.z /= v.z;\r\n\t\tthis.w /= v.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Divides this vector by the given scalar.\r\n\t *\r\n\t * @param {number} scalar - The scalar to divide.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tdivideScalar( scalar ) {\r\n\r\n\t\treturn this.multiplyScalar( 1 / scalar );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the x, y and z components of this\r\n\t * vector to the quaternion's axis and w to the angle.\r\n\t *\r\n\t * @param {Quaternion} q - The Quaternion to set.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsetAxisAngleFromQuaternion( q ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\r\n\r\n\t\t// q is assumed to be normalized\r\n\r\n\t\tthis.w = 2 * Math.acos( q.w );\r\n\r\n\t\tconst s = Math.sqrt( 1 - q.w * q.w );\r\n\r\n\t\tif ( s < 0.0001 ) {\r\n\r\n\t\t\tthis.x = 1;\r\n\t\t\tthis.y = 0;\r\n\t\t\tthis.z = 0;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.x = q.x / s;\r\n\t\t\tthis.y = q.y / s;\r\n\t\t\tthis.z = q.z / s;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the x, y and z components of this\r\n\t * vector to the axis of rotation and w to the angle.\r\n\t *\r\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper left 3x3 matrix is a pure rotation matrix.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsetAxisAngleFromRotationMatrix( m ) {\r\n\r\n\t\t// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tlet angle, x, y, z; // variables for result\r\n\t\tconst epsilon = 0.01,\t\t// margin to allow for rounding errors\r\n\t\t\tepsilon2 = 0.1,\t\t// margin to distinguish between 0 and 180 degrees\r\n\r\n\t\t\tte = m.elements,\r\n\r\n\t\t\tm11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],\r\n\t\t\tm21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],\r\n\t\t\tm31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tif ( ( Math.abs( m12 - m21 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m13 - m31 ) < epsilon ) &&\r\n\t\t     ( Math.abs( m23 - m32 ) < epsilon ) ) {\r\n\r\n\t\t\t// singularity found\r\n\t\t\t// first check for identity matrix which must have +1 for all terms\r\n\t\t\t// in leading diagonal and zero in other terms\r\n\r\n\t\t\tif ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m13 + m31 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m23 + m32 ) < epsilon2 ) &&\r\n\t\t\t     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {\r\n\r\n\t\t\t\t// this singularity is identity matrix so angle = 0\r\n\r\n\t\t\t\tthis.set( 1, 0, 0, 0 );\r\n\r\n\t\t\t\treturn this; // zero angle, arbitrary axis\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise this singularity is angle = 180\r\n\r\n\t\t\tangle = Math.PI;\r\n\r\n\t\t\tconst xx = ( m11 + 1 ) / 2;\r\n\t\t\tconst yy = ( m22 + 1 ) / 2;\r\n\t\t\tconst zz = ( m33 + 1 ) / 2;\r\n\t\t\tconst xy = ( m12 + m21 ) / 4;\r\n\t\t\tconst xz = ( m13 + m31 ) / 4;\r\n\t\t\tconst yz = ( m23 + m32 ) / 4;\r\n\r\n\t\t\tif ( ( xx > yy ) && ( xx > zz ) ) {\r\n\r\n\t\t\t\t// m11 is the largest diagonal term\r\n\r\n\t\t\t\tif ( xx < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tx = Math.sqrt( xx );\r\n\t\t\t\t\ty = xy / x;\r\n\t\t\t\t\tz = xz / x;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( yy > zz ) {\r\n\r\n\t\t\t\t// m22 is the largest diagonal term\r\n\r\n\t\t\t\tif ( yy < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0;\r\n\t\t\t\t\tz = 0.707106781;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ty = Math.sqrt( yy );\r\n\t\t\t\t\tx = xy / y;\r\n\t\t\t\t\tz = yz / y;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// m33 is the largest diagonal term so base result on this\r\n\r\n\t\t\t\tif ( zz < epsilon ) {\r\n\r\n\t\t\t\t\tx = 0.707106781;\r\n\t\t\t\t\ty = 0.707106781;\r\n\t\t\t\t\tz = 0;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tz = Math.sqrt( zz );\r\n\t\t\t\t\tx = xz / z;\r\n\t\t\t\t\ty = yz / z;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.set( x, y, z, angle );\r\n\r\n\t\t\treturn this; // return 180 deg rotation\r\n\r\n\t\t}\r\n\r\n\t\t// as we have reached here there are no singularities so we can handle normally\r\n\r\n\t\tlet s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +\r\n\t\t\t( m13 - m31 ) * ( m13 - m31 ) +\r\n\t\t\t( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize\r\n\r\n\t\tif ( Math.abs( s ) < 0.001 ) s = 1;\r\n\r\n\t\t// prevent divide by zero, should not happen if matrix is orthogonal and should be\r\n\t\t// caught by singularity test above, but I've left it in just in case\r\n\r\n\t\tthis.x = ( m32 - m23 ) / s;\r\n\t\tthis.y = ( m13 - m31 ) / s;\r\n\t\tthis.z = ( m21 - m12 ) / s;\r\n\t\tthis.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the vector components to the position elements of the\r\n\t * given transformation matrix.\r\n\t *\r\n\t * @param {Matrix4} m - The 4x4 matrix.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsetFromMatrixPosition( m ) {\r\n\r\n\t\tconst e = m.elements;\r\n\r\n\t\tthis.x = e[ 12 ];\r\n\t\tthis.y = e[ 13 ];\r\n\t\tthis.z = e[ 14 ];\r\n\t\tthis.w = e[ 15 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x, y, z or w value is greater than the given vector's x, y, z or w\r\n\t * value, replace that value with the corresponding min value.\r\n\t *\r\n\t * @param {Vector4} v - The vector.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tmin( v ) {\r\n\r\n\t\tthis.x = Math.min( this.x, v.x );\r\n\t\tthis.y = Math.min( this.y, v.y );\r\n\t\tthis.z = Math.min( this.z, v.z );\r\n\t\tthis.w = Math.min( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x, y, z or w value is less than the given vector's x, y, z or w\r\n\t * value, replace that value with the corresponding max value.\r\n\t *\r\n\t * @param {Vector4} v - The vector.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tmax( v ) {\r\n\r\n\t\tthis.x = Math.max( this.x, v.x );\r\n\t\tthis.y = Math.max( this.y, v.y );\r\n\t\tthis.z = Math.max( this.z, v.z );\r\n\t\tthis.w = Math.max( this.w, v.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x, y, z or w value is greater than the max vector's x, y, z or w\r\n\t * value, it is replaced by the corresponding value.\r\n\t * If this vector's x, y, z or w value is less than the min vector's x, y, z or w value,\r\n\t * it is replaced by the corresponding value.\r\n\t *\r\n\t * @param {Vector4} min - The minimum x, y and z values.\r\n\t * @param {Vector4} max - The maximum x, y and z values in the desired range.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tclamp( min, max ) {\r\n\r\n\t\t// assumes min < max, componentwise\r\n\r\n\t\tthis.x = clamp( this.x, min.x, max.x );\r\n\t\tthis.y = clamp( this.y, min.y, max.y );\r\n\t\tthis.z = clamp( this.z, min.z, max.z );\r\n\t\tthis.w = clamp( this.w, min.w, max.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's x, y, z or w values are greater than the max value, they are\r\n\t * replaced by the max value.\r\n\t * If this vector's x, y, z or w values are less than the min value, they are\r\n\t * replaced by the min value.\r\n\t *\r\n\t * @param {number} minVal - The minimum value the components will be clamped to.\r\n\t * @param {number} maxVal - The maximum value the components will be clamped to.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tclampScalar( minVal, maxVal ) {\r\n\r\n\t\tthis.x = clamp( this.x, minVal, maxVal );\r\n\t\tthis.y = clamp( this.y, minVal, maxVal );\r\n\t\tthis.z = clamp( this.z, minVal, maxVal );\r\n\t\tthis.w = clamp( this.w, minVal, maxVal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * If this vector's length is greater than the max value, it is replaced by\r\n\t * the max value.\r\n\t * If this vector's length is less than the min value, it is replaced by the\r\n\t * min value.\r\n\t *\r\n\t * @param {number} min - The minimum value the vector length will be clamped to.\r\n\t * @param {number} max - The maximum value the vector length will be clamped to.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tclampLength( min, max ) {\r\n\r\n\t\tconst length = this.length();\r\n\r\n\t\treturn this.divideScalar( length || 1 ).multiplyScalar( clamp( length, min, max ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded down to the nearest integer value.\r\n\t *\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tfloor() {\r\n\r\n\t\tthis.x = Math.floor( this.x );\r\n\t\tthis.y = Math.floor( this.y );\r\n\t\tthis.z = Math.floor( this.z );\r\n\t\tthis.w = Math.floor( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded up to the nearest integer value.\r\n\t *\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tceil() {\r\n\r\n\t\tthis.x = Math.ceil( this.x );\r\n\t\tthis.y = Math.ceil( this.y );\r\n\t\tthis.z = Math.ceil( this.z );\r\n\t\tthis.w = Math.ceil( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded to the nearest integer value\r\n\t *\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tround() {\r\n\r\n\t\tthis.x = Math.round( this.x );\r\n\t\tthis.y = Math.round( this.y );\r\n\t\tthis.z = Math.round( this.z );\r\n\t\tthis.w = Math.round( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The components of this vector are rounded towards zero (up if negative,\r\n\t * down if positive) to an integer value.\r\n\t *\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\troundToZero() {\r\n\r\n\t\tthis.x = Math.trunc( this.x );\r\n\t\tthis.y = Math.trunc( this.y );\r\n\t\tthis.z = Math.trunc( this.z );\r\n\t\tthis.w = Math.trunc( this.w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Inverts this vector - i.e. sets x = -x, y = -y, z = -z, w = -w.\r\n\t *\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tnegate() {\r\n\r\n\t\tthis.x = - this.x;\r\n\t\tthis.y = - this.y;\r\n\t\tthis.z = - this.z;\r\n\t\tthis.w = - this.w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates the dot product of the given vector with this instance.\r\n\t *\r\n\t * @param {Vector4} v - The vector to compute the dot product with.\r\n\t * @return {number} The result of the dot product.\r\n\t */\r\n\tdot( v ) {\r\n\r\n\t\treturn this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the square of the Euclidean length (straight-line length) from\r\n\t * (0, 0, 0, 0) to (x, y, z, w). If you are comparing the lengths of vectors, you should\r\n\t * compare the length squared instead as it is slightly more efficient to calculate.\r\n\t *\r\n\t * @return {number} The square length of this vector.\r\n\t */\r\n\tlengthSq() {\r\n\r\n\t\treturn this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the  Euclidean length (straight-line length) from (0, 0, 0, 0) to (x, y, z, w).\r\n\t *\r\n\t * @return {number} The length of this vector.\r\n\t */\r\n\tlength() {\r\n\r\n\t\treturn Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the Manhattan length of this vector.\r\n\t *\r\n\t * @return {number} The length of this vector.\r\n\t */\r\n\tmanhattanLength() {\r\n\r\n\t\treturn Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts this vector to a unit vector - that is, sets it equal to a vector\r\n\t * with the same direction as this one, but with a vector length of `1`.\r\n\t *\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tnormalize() {\r\n\r\n\t\treturn this.divideScalar( this.length() || 1 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this vector to a vector with the same direction as this one, but\r\n\t * with the specified length.\r\n\t *\r\n\t * @param {number} length - The new length of this vector.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tsetLength( length ) {\r\n\r\n\t\treturn this.normalize().multiplyScalar( length );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Linearly interpolates between the given vector and this instance, where\r\n\t * alpha is the percent distance along the line - alpha = 0 will be this\r\n\t * vector, and alpha = 1 will be the given one.\r\n\t *\r\n\t * @param {Vector4} v - The vector to interpolate towards.\r\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tlerp( v, alpha ) {\r\n\r\n\t\tthis.x += ( v.x - this.x ) * alpha;\r\n\t\tthis.y += ( v.y - this.y ) * alpha;\r\n\t\tthis.z += ( v.z - this.z ) * alpha;\r\n\t\tthis.w += ( v.w - this.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Linearly interpolates between the given vectors, where alpha is the percent\r\n\t * distance along the line - alpha = 0 will be first vector, and alpha = 1 will\r\n\t * be the second one. The result is stored in this instance.\r\n\t *\r\n\t * @param {Vector4} v1 - The first vector.\r\n\t * @param {Vector4} v2 - The second vector.\r\n\t * @param {number} alpha - The interpolation factor, typically in the closed interval `[0, 1]`.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tlerpVectors( v1, v2, alpha ) {\r\n\r\n\t\tthis.x = v1.x + ( v2.x - v1.x ) * alpha;\r\n\t\tthis.y = v1.y + ( v2.y - v1.y ) * alpha;\r\n\t\tthis.z = v1.z + ( v2.z - v1.z ) * alpha;\r\n\t\tthis.w = v1.w + ( v2.w - v1.w ) * alpha;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this vector is equal with the given one.\r\n\t *\r\n\t * @param {Vector4} v - The vector to test for equality.\r\n\t * @return {boolean} Whether this vector is equal with the given one.\r\n\t */\r\n\tequals( v ) {\r\n\r\n\t\treturn ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this vector's x value to be `array[ offset ]`, y value to be `array[ offset + 1 ]`,\r\n\t * z value to be `array[ offset + 2 ]`, w value to be `array[ offset + 3 ]`.\r\n\t *\r\n\t * @param {Array<number>} array - An array holding the vector component values.\r\n\t * @param {number} [offset=0] - The offset into the array.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tfromArray( array, offset = 0 ) {\r\n\r\n\t\tthis.x = array[ offset ];\r\n\t\tthis.y = array[ offset + 1 ];\r\n\t\tthis.z = array[ offset + 2 ];\r\n\t\tthis.w = array[ offset + 3 ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Writes the components of this vector to the given array. If no array is provided,\r\n\t * the method returns a new instance.\r\n\t *\r\n\t * @param {Array<number>} [array=[]] - The target array holding the vector components.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Array<number>} The vector components.\r\n\t */\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this.x;\r\n\t\tarray[ offset + 1 ] = this.y;\r\n\t\tarray[ offset + 2 ] = this.z;\r\n\t\tarray[ offset + 3 ] = this.w;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the components of this vector from the given buffer attribute.\r\n\t *\r\n\t * @param {BufferAttribute} attribute - The buffer attribute holding vector data.\r\n\t * @param {number} index - The index into the attribute.\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\tfromBufferAttribute( attribute, index ) {\r\n\r\n\t\tthis.x = attribute.getX( index );\r\n\t\tthis.y = attribute.getY( index );\r\n\t\tthis.z = attribute.getZ( index );\r\n\t\tthis.w = attribute.getW( index );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets each component of this vector to a pseudo-random value between `0` and\r\n\t * `1`, excluding `1`.\r\n\t *\r\n\t * @return {Vector4} A reference to this vector.\r\n\t */\r\n\trandom() {\r\n\r\n\t\tthis.x = Math.random();\r\n\t\tthis.y = Math.random();\r\n\t\tthis.z = Math.random();\r\n\t\tthis.w = Math.random();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this.x;\r\n\t\tyield this.y;\r\n\t\tyield this.z;\r\n\t\tyield this.w;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Vector4 };\r\n", "import { Color } from '../../math/Color.js';\r\nimport { Matrix2 } from '../../math/Matrix2.js';\r\nimport { Matrix3 } from '../../math/Matrix3.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\n// cyrb53 (c) 2018 bryc (github.com/bryc). License: Public domain. Attribution appreciated.\r\n// A fast and simple 64-bit (or 53-bit) string hash function with decent collision resistance.\r\n// Largely inspired by MurmurHash2/3, but with a focus on speed/simplicity.\r\n// See https://stackoverflow.com/questions/7616461/generate-a-hash-from-string-in-javascript/52171480#52171480\r\n// https://github.com/bryc/code/blob/master/jshash/experimental/cyrb53.js\r\nfunction cyrb53( value, seed = 0 ) {\r\n\r\n\tlet h1 = 0xdeadbeef ^ seed, h2 = 0x41c6ce57 ^ seed;\r\n\r\n\tif ( value instanceof Array ) {\r\n\r\n\t\tfor ( let i = 0, val; i < value.length; i ++ ) {\r\n\r\n\t\t\tval = value[ i ];\r\n\t\t\th1 = Math.imul( h1 ^ val, 2654435761 );\r\n\t\t\th2 = Math.imul( h2 ^ val, 1597334677 );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\tfor ( let i = 0, ch; i < value.length; i ++ ) {\r\n\r\n\t\t\tch = value.charCodeAt( i );\r\n\t\t\th1 = Math.imul( h1 ^ ch, 2654435761 );\r\n\t\t\th2 = Math.imul( h2 ^ ch, 1597334677 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\th1 = Math.imul( h1 ^ ( h1 >>> 16 ), 2246822507 );\r\n\th1 ^= Math.imul( h2 ^ ( h2 >>> 13 ), 3266489909 );\r\n\th2 = Math.imul( h2 ^ ( h2 >>> 16 ), 2246822507 );\r\n\th2 ^= Math.imul( h1 ^ ( h1 >>> 13 ), 3266489909 );\r\n\r\n\treturn 4294967296 * ( 2097151 & h2 ) + ( h1 >>> 0 );\r\n\r\n}\r\n\r\n/**\r\n * Computes a hash for the given string.\r\n *\r\n * @method\r\n * @param {string} str - The string to be hashed.\r\n * @return {number} The hash.\r\n */\r\nexport const hashString = ( str ) => cyrb53( str );\r\n\r\n/**\r\n * Computes a hash for the given array.\r\n *\r\n * @method\r\n * @param {Array<number>} array - The array to be hashed.\r\n * @return {number} The hash.\r\n */\r\nexport const hashArray = ( array ) => cyrb53( array );\r\n\r\n/**\r\n * Computes a hash for the given list of parameters.\r\n *\r\n * @method\r\n * @param {...number} params - A list of parameters.\r\n * @return {number} The hash.\r\n */\r\nexport const hash = ( ...params ) => cyrb53( params );\r\n\r\n/**\r\n * Computes a cache key for the given node.\r\n *\r\n * @method\r\n * @param {Object|Node} object - The object to be hashed.\r\n * @param {boolean} [force=false] - Whether to force a cache key computation or not.\r\n * @return {number} The hash.\r\n */\r\nexport function getCacheKey( object, force = false ) {\r\n\r\n\tconst values = [];\r\n\r\n\tif ( object.isNode === true ) {\r\n\r\n\t\tvalues.push( object.id );\r\n\t\tobject = object.getSelf();\r\n\r\n\t}\r\n\r\n\tfor ( const { property, childNode } of getNodeChildren( object ) ) {\r\n\r\n\t\tvalues.push( cyrb53( property.slice( 0, - 4 ) ), childNode.getCacheKey( force ) );\r\n\r\n\t}\r\n\r\n\treturn cyrb53( values );\r\n\r\n}\r\n\r\n/**\r\n * This generator function can be used to iterate over the node children\r\n * of the given object.\r\n *\r\n * @generator\r\n * @param {Object} node - The object to be hashed.\r\n * @param {boolean} [toJSON=false] - Whether to return JSON or not.\r\n * @yields {Object} A result node holding the property, index (if available) and the child node.\r\n */\r\nexport function* getNodeChildren( node, toJSON = false ) {\r\n\r\n\tfor ( const property in node ) {\r\n\r\n\t\t// Ignore private properties.\r\n\t\tif ( property.startsWith( '_' ) === true ) continue;\r\n\r\n\t\tconst object = node[ property ];\r\n\r\n\t\tif ( Array.isArray( object ) === true ) {\r\n\r\n\t\t\tfor ( let i = 0; i < object.length; i ++ ) {\r\n\r\n\t\t\t\tconst child = object[ i ];\r\n\r\n\t\t\t\tif ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {\r\n\r\n\t\t\t\t\tyield { property, index: i, childNode: child };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( object && object.isNode === true ) {\r\n\r\n\t\t\tyield { property, childNode: object };\r\n\r\n\t\t} else if ( typeof object === 'object' ) {\r\n\r\n\t\t\tfor ( const subProperty in object ) {\r\n\r\n\t\t\t\tconst child = object[ subProperty ];\r\n\r\n\t\t\t\tif ( child && ( child.isNode === true || toJSON && typeof child.toJSON === 'function' ) ) {\r\n\r\n\t\t\t\t\tyield { property, index: subProperty, childNode: child };\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst typeFromLength = /*@__PURE__*/ new Map( [\r\n\t[ 1, 'float' ],\r\n\t[ 2, 'vec2' ],\r\n\t[ 3, 'vec3' ],\r\n\t[ 4, 'vec4' ],\r\n\t[ 9, 'mat3' ],\r\n\t[ 16, 'mat4' ]\r\n] );\r\n\r\nconst dataFromObject = /*@__PURE__*/ new WeakMap();\r\n\r\n/**\r\n * Returns the data type for the given the length.\r\n *\r\n * @method\r\n * @param {number} length - The length.\r\n * @return {string} The data type.\r\n */\r\nexport function getTypeFromLength( length ) {\r\n\r\n\treturn typeFromLength.get( length );\r\n\r\n}\r\n\r\n/**\r\n * Returns the typed array for the given data type.\r\n *\r\n * @method\r\n * @param {string} type - The data type.\r\n * @return {TypedArray} The typed array.\r\n */\r\nexport function getTypedArrayFromType( type ) {\r\n\r\n\t// Handle component type for vectors and matrices\r\n\tif ( /[iu]?vec\\d/.test( type ) ) {\r\n\r\n\t\t// Handle int vectors\r\n\t\tif ( type.startsWith( 'ivec' ) ) return Int32Array;\r\n\t\t// Handle uint vectors\r\n\t\tif ( type.startsWith( 'uvec' ) ) return Uint32Array;\r\n\t\t// Default to float vectors\r\n\t\treturn Float32Array;\r\n\r\n\t}\r\n\r\n\t// Handle matrices (always float)\r\n\tif ( /mat\\d/.test( type ) ) return Float32Array;\r\n\r\n\t// Basic types\r\n\tif ( /float/.test( type ) ) return Float32Array;\r\n\tif ( /uint/.test( type ) ) return Uint32Array;\r\n\tif ( /int/.test( type ) ) return Int32Array;\r\n\r\n\tthrow new Error( `THREE.NodeUtils: Unsupported type: ${type}` );\r\n\r\n}\r\n\r\n/**\r\n * Returns the length for the given data type.\r\n *\r\n * @method\r\n * @param {string} type - The data type.\r\n * @return {number} The length.\r\n */\r\nexport function getLengthFromType( type ) {\r\n\r\n\tif ( /float|int|uint/.test( type ) ) return 1;\r\n\tif ( /vec2/.test( type ) ) return 2;\r\n\tif ( /vec3/.test( type ) ) return 3;\r\n\tif ( /vec4/.test( type ) ) return 4;\r\n\tif ( /mat2/.test( type ) ) return 4;\r\n\tif ( /mat3/.test( type ) ) return 9;\r\n\tif ( /mat4/.test( type ) ) return 16;\r\n\r\n\tconsole.error( 'THREE.TSL: Unsupported type:', type );\r\n\r\n}\r\n\r\n/**\r\n * Returns the gpu memory length for the given data type.\r\n *\r\n * @method\r\n * @param {string} type - The data type.\r\n * @return {number} The length.\r\n */\r\nexport function getMemoryLengthFromType( type ) {\r\n\r\n\tif ( /float|int|uint/.test( type ) ) return 1;\r\n\tif ( /vec2/.test( type ) ) return 2;\r\n\tif ( /vec3/.test( type ) ) return 3;\r\n\tif ( /vec4/.test( type ) ) return 4;\r\n\tif ( /mat2/.test( type ) ) return 4;\r\n\tif ( /mat3/.test( type ) ) return 12;\r\n\tif ( /mat4/.test( type ) ) return 16;\r\n\r\n\tconsole.error( 'THREE.TSL: Unsupported type:', type );\r\n\r\n}\r\n\r\n/**\r\n * Returns the byte boundary for the given data type.\r\n *\r\n * @method\r\n * @param {string} type - The data type.\r\n * @return {number} The byte boundary.\r\n */\r\nexport function getByteBoundaryFromType( type ) {\r\n\r\n\tif ( /float|int|uint/.test( type ) ) return 4;\r\n\tif ( /vec2/.test( type ) ) return 8;\r\n\tif ( /vec3/.test( type ) ) return 16;\r\n\tif ( /vec4/.test( type ) ) return 16;\r\n\tif ( /mat2/.test( type ) ) return 8;\r\n\tif ( /mat3/.test( type ) ) return 48;\r\n\tif ( /mat4/.test( type ) ) return 64;\r\n\r\n\tconsole.error( 'THREE.TSL: Unsupported type:', type );\r\n\r\n}\r\n\r\n/**\r\n * Returns the data type for the given value.\r\n *\r\n * @method\r\n * @param {any} value - The value.\r\n * @return {?string} The data type.\r\n */\r\nexport function getValueType( value ) {\r\n\r\n\tif ( value === undefined || value === null ) return null;\r\n\r\n\tconst typeOf = typeof value;\r\n\r\n\tif ( value.isNode === true ) {\r\n\r\n\t\treturn 'node';\r\n\r\n\t} else if ( typeOf === 'number' ) {\r\n\r\n\t\treturn 'float';\r\n\r\n\t} else if ( typeOf === 'boolean' ) {\r\n\r\n\t\treturn 'bool';\r\n\r\n\t} else if ( typeOf === 'string' ) {\r\n\r\n\t\treturn 'string';\r\n\r\n\t} else if ( typeOf === 'function' ) {\r\n\r\n\t\treturn 'shader';\r\n\r\n\t} else if ( value.isVector2 === true ) {\r\n\r\n\t\treturn 'vec2';\r\n\r\n\t} else if ( value.isVector3 === true ) {\r\n\r\n\t\treturn 'vec3';\r\n\r\n\t} else if ( value.isVector4 === true ) {\r\n\r\n\t\treturn 'vec4';\r\n\r\n\t} else if ( value.isMatrix2 === true ) {\r\n\r\n\t\treturn 'mat2';\r\n\r\n\t} else if ( value.isMatrix3 === true ) {\r\n\r\n\t\treturn 'mat3';\r\n\r\n\t} else if ( value.isMatrix4 === true ) {\r\n\r\n\t\treturn 'mat4';\r\n\r\n\t} else if ( value.isColor === true ) {\r\n\r\n\t\treturn 'color';\r\n\r\n\t} else if ( value instanceof ArrayBuffer ) {\r\n\r\n\t\treturn 'ArrayBuffer';\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n}\r\n\r\n/**\r\n * Returns the value/object for the given data type and parameters.\r\n *\r\n * @method\r\n * @param {string} type - The given type.\r\n * @param {...any} params - A parameter list.\r\n * @return {any} The value/object.\r\n */\r\nexport function getValueFromType( type, ...params ) {\r\n\r\n\tconst last4 = type ? type.slice( - 4 ) : undefined;\r\n\r\n\tif ( params.length === 1 ) { // ensure same behaviour as in NodeBuilder.format()\r\n\r\n\t\tif ( last4 === 'vec2' ) params = [ params[ 0 ], params[ 0 ] ];\r\n\t\telse if ( last4 === 'vec3' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ] ];\r\n\t\telse if ( last4 === 'vec4' ) params = [ params[ 0 ], params[ 0 ], params[ 0 ], params[ 0 ] ];\r\n\r\n\t}\r\n\r\n\tif ( type === 'color' ) {\r\n\r\n\t\treturn new Color( ...params );\r\n\r\n\t} else if ( last4 === 'vec2' ) {\r\n\r\n\t\treturn new Vector2( ...params );\r\n\r\n\t} else if ( last4 === 'vec3' ) {\r\n\r\n\t\treturn new Vector3( ...params );\r\n\r\n\t} else if ( last4 === 'vec4' ) {\r\n\r\n\t\treturn new Vector4( ...params );\r\n\r\n\t} else if ( last4 === 'mat2' ) {\r\n\r\n\t\treturn new Matrix2( ...params );\r\n\r\n\t} else if ( last4 === 'mat3' ) {\r\n\r\n\t\treturn new Matrix3( ...params );\r\n\r\n\t} else if ( last4 === 'mat4' ) {\r\n\r\n\t\treturn new Matrix4( ...params );\r\n\r\n\t} else if ( type === 'bool' ) {\r\n\r\n\t\treturn params[ 0 ] || false;\r\n\r\n\t} else if ( ( type === 'float' ) || ( type === 'int' ) || ( type === 'uint' ) ) {\r\n\r\n\t\treturn params[ 0 ] || 0;\r\n\r\n\t} else if ( type === 'string' ) {\r\n\r\n\t\treturn params[ 0 ] || '';\r\n\r\n\t} else if ( type === 'ArrayBuffer' ) {\r\n\r\n\t\treturn base64ToArrayBuffer( params[ 0 ] );\r\n\r\n\t}\r\n\r\n\treturn null;\r\n\r\n}\r\n\r\n/**\r\n * Gets the object data that can be shared between different rendering steps.\r\n *\r\n * @param {Object} object - The object to get the data for.\r\n * @return {Object} The object data.\r\n */\r\nexport function getDataFromObject( object ) {\r\n\r\n\tlet data = dataFromObject.get( object );\r\n\r\n\tif ( data === undefined ) {\r\n\r\n\t\tdata = {};\r\n\t\tdataFromObject.set( object, data );\r\n\r\n\t}\r\n\r\n\treturn data;\r\n\r\n}\r\n\r\n/**\r\n * Converts the given array buffer to a Base64 string.\r\n *\r\n * @method\r\n * @param {ArrayBuffer} arrayBuffer - The array buffer.\r\n * @return {string} The Base64 string.\r\n */\r\nexport function arrayBufferToBase64( arrayBuffer ) {\r\n\r\n\tlet chars = '';\r\n\r\n\tconst array = new Uint8Array( arrayBuffer );\r\n\r\n\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\tchars += String.fromCharCode( array[ i ] );\r\n\r\n\t}\r\n\r\n\treturn btoa( chars );\r\n\r\n}\r\n\r\n/**\r\n * Converts the given Base64 string to an array buffer.\r\n *\r\n * @method\r\n * @param {string} base64 - The Base64 string.\r\n * @return {ArrayBuffer} The array buffer.\r\n */\r\nexport function base64ToArrayBuffer( base64 ) {\r\n\r\n\treturn Uint8Array.from( atob( base64 ), c => c.charCodeAt( 0 ) ).buffer;\r\n\r\n}\r\n", "/**\r\n * This modules allows to dispatch event objects on custom JavaScript objects.\r\n *\r\n * Main repository: [eventdispatcher.js]{@link https://github.com/mrdoob/eventdispatcher.js/}\r\n *\r\n * Code Example:\r\n * ```js\r\n * class Car extends EventDispatcher {\r\n * \tstart() {\r\n *\t\tthis.dispatchEvent( { type: 'start', message: 'vroom vroom!' } );\r\n *\t}\r\n *};\r\n *\r\n * // Using events with the custom object\r\n * const car = new Car();\r\n * car.addEventListener( 'start', function ( event ) {\r\n * \talert( event.message );\r\n * } );\r\n *\r\n * car.start();\r\n * ```\r\n */\r\nclass EventDispatcher {\r\n\r\n\t/**\r\n\t * Adds the given event listener to the given event type.\r\n\t *\r\n\t * @param {string} type - The type of event to listen to.\r\n\t * @param {Function} listener - The function that gets called when the event is fired.\r\n\t */\r\n\taddEventListener( type, listener ) {\r\n\r\n\t\tif ( this._listeners === undefined ) this._listeners = {};\r\n\r\n\t\tconst listeners = this._listeners;\r\n\r\n\t\tif ( listeners[ type ] === undefined ) {\r\n\r\n\t\t\tlisteners[ type ] = [];\r\n\r\n\t\t}\r\n\r\n\t\tif ( listeners[ type ].indexOf( listener ) === - 1 ) {\r\n\r\n\t\t\tlisteners[ type ].push( listener );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given event listener has been added to the given event type.\r\n\t *\r\n\t * @param {string} type - The type of event.\r\n\t * @param {Function} listener - The listener to check.\r\n\t * @return {boolean} Whether the given event listener has been added to the given event type.\r\n\t */\r\n\thasEventListener( type, listener ) {\r\n\r\n\t\tconst listeners = this._listeners;\r\n\r\n\t\tif ( listeners === undefined ) return false;\r\n\r\n\t\treturn listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the given event listener from the given event type.\r\n\t *\r\n\t * @param {string} type - The type of event.\r\n\t * @param {Function} listener - The listener to remove.\r\n\t */\r\n\tremoveEventListener( type, listener ) {\r\n\r\n\t\tconst listeners = this._listeners;\r\n\r\n\t\tif ( listeners === undefined ) return;\r\n\r\n\t\tconst listenerArray = listeners[ type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tconst index = listenerArray.indexOf( listener );\r\n\r\n\t\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\t\tlistenerArray.splice( index, 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches an event object.\r\n\t *\r\n\t * @param {Object} event - The event that gets fired.\r\n\t */\r\n\tdispatchEvent( event ) {\r\n\r\n\t\tconst listeners = this._listeners;\r\n\r\n\t\tif ( listeners === undefined ) return;\r\n\r\n\t\tconst listenerArray = listeners[ event.type ];\r\n\r\n\t\tif ( listenerArray !== undefined ) {\r\n\r\n\t\t\tevent.target = this;\r\n\r\n\t\t\t// Make a copy, in case listeners are removed while iterating.\r\n\t\t\tconst array = listenerArray.slice( 0 );\r\n\r\n\t\t\tfor ( let i = 0, l = array.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tarray[ i ].call( this, event );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tevent.target = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { EventDispatcher };\r\n", "import { NodeUpdateType } from './constants.js';\r\nimport { getNodeChildren, getCacheKey, hash } from './NodeUtils.js';\r\n\r\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\r\nimport { MathUtils } from '../../math/MathUtils.js';\r\n\r\nconst _parentBuildStage = {\r\n\tanalyze: 'setup',\r\n\tgenerate: 'analyze'\r\n};\r\n\r\nlet _nodeId = 0;\r\n\r\n/**\r\n * Base class for all nodes.\r\n *\r\n * @augments EventDispatcher\r\n */\r\nclass Node extends EventDispatcher {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'Node';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new node.\r\n\t *\r\n\t * @param {?string} nodeType - The node type.\r\n\t */\r\n\tconstructor( nodeType = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node type. This represents the result type of the node (e.g. `float` or `vec3`).\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.nodeType = nodeType;\r\n\r\n\t\t/**\r\n\t\t * The update type of the node's {@link Node#update} method. Possible values are listed in {@link NodeUpdateType}.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'none'\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.NONE;\r\n\r\n\t\t/**\r\n\t\t * The update type of the node's {@link Node#updateBefore} method. Possible values are listed in {@link NodeUpdateType}.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'none'\r\n\t\t */\r\n\t\tthis.updateBeforeType = NodeUpdateType.NONE;\r\n\r\n\t\t/**\r\n\t\t * The update type of the node's {@link Node#updateAfter} method. Possible values are listed in {@link NodeUpdateType}.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'none'\r\n\t\t */\r\n\t\tthis.updateAfterType = NodeUpdateType.NONE;\r\n\r\n\t\t/**\r\n\t\t * The UUID of the node.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.uuid = MathUtils.generateUUID();\r\n\r\n\t\t/**\r\n\t\t * The version of the node. The version automatically is increased when {@link Node#needsUpdate} is set to `true`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.version = 0;\r\n\r\n\t\t/**\r\n\t\t * Whether this node is global or not. This property is relevant for the internal\r\n\t\t * node caching system. All nodes which should be declared just once should\r\n\t\t * set this flag to `true` (a typical example is {@link AttributeNode}).\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.global = false;\r\n\r\n\t\t/**\r\n\t\t * Create a list of parents for this node during the build process.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.parents = false;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isNode = true;\r\n\r\n\t\t// private\r\n\r\n\t\t/**\r\n\t\t * The cache key of this node.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {?number}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._cacheKey = null;\r\n\r\n\t\t/**\r\n\t\t * The cache key 's version.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis._cacheKeyVersion = 0;\r\n\r\n\t\tObject.defineProperty( this, 'id', { value: _nodeId ++ } );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Set this property to `true` when the node should be regenerated.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default false\r\n\t * @param {boolean} value\r\n\t */\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The type of the class. The value is usually the constructor name.\r\n\t *\r\n\t * @type {string}\r\n \t * @readonly\r\n\t */\r\n\tget type() {\r\n\r\n\t\treturn this.constructor.type;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Convenient method for defining {@link Node#update}.\r\n\t *\r\n\t * @param {Function} callback - The update method.\r\n\t * @param {string} updateType - The update type.\r\n\t * @return {Node} A reference to this node.\r\n\t */\r\n\tonUpdate( callback, updateType ) {\r\n\r\n\t\tthis.updateType = updateType;\r\n\t\tthis.update = callback.bind( this.getSelf() );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but\r\n\t * this method automatically sets the update type to `FRAME`.\r\n\t *\r\n\t * @param {Function} callback - The update method.\r\n\t * @return {Node} A reference to this node.\r\n\t */\r\n\tonFrameUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.FRAME );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but\r\n\t * this method automatically sets the update type to `RENDER`.\r\n\t *\r\n\t * @param {Function} callback - The update method.\r\n\t * @return {Node} A reference to this node.\r\n\t */\r\n\tonRenderUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.RENDER );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Convenient method for defining {@link Node#update}. Similar to {@link Node#onUpdate}, but\r\n\t * this method automatically sets the update type to `OBJECT`.\r\n\t *\r\n\t * @param {Function} callback - The update method.\r\n\t * @return {Node} A reference to this node.\r\n\t */\r\n\tonObjectUpdate( callback ) {\r\n\r\n\t\treturn this.onUpdate( callback, NodeUpdateType.OBJECT );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Convenient method for defining {@link Node#updateReference}.\r\n\t *\r\n\t * @param {Function} callback - The update method.\r\n\t * @return {Node} A reference to this node.\r\n\t */\r\n\tonReference( callback ) {\r\n\r\n\t\tthis.updateReference = callback.bind( this.getSelf() );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The `this` reference might point to a Proxy so this method can be used\r\n\t * to get the reference to the actual node instance.\r\n\t *\r\n\t * @return {Node} A reference to the node.\r\n\t */\r\n\tgetSelf() {\r\n\r\n\t\t// Returns non-node object.\r\n\r\n\t\treturn this.self || this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Nodes might refer to other objects like materials. This method allows to dynamically update the reference\r\n\t * to such objects based on a given state (e.g. the current node frame or builder).\r\n\t *\r\n\t * @param {any} state - This method can be invocated in different contexts so `state` can refer to any object type.\r\n\t * @return {any} The updated reference.\r\n\t */\r\n\tupdateReference( /*state*/ ) {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * By default this method returns the value of the {@link Node#global} flag. This method\r\n\t * can be overwritten in derived classes if an analytical way is required to determine the\r\n\t * global cache referring to the current shader-stage.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {boolean} Whether this node is global or not.\r\n\t */\r\n\tisGlobal( /*builder*/ ) {\r\n\r\n\t\treturn this.global;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generator function that can be used to iterate over the child nodes.\r\n\t *\r\n\t * @generator\r\n\t * @yields {Node} A child node.\r\n\t */\r\n\t* getChildren() {\r\n\r\n\t\tfor ( const { childNode } of getNodeChildren( this ) ) {\r\n\r\n\t\t\tyield childNode;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calling this method dispatches the `dispose` event. This event can be used\r\n\t * to register event listeners for clean up tasks.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Callback for {@link Node#traverse}.\r\n\t *\r\n\t * @callback traverseCallback\r\n\t * @param {Node} node - The current node.\r\n\t */\r\n\r\n\t/**\r\n\t * Can be used to traverse through the node's hierarchy.\r\n\t *\r\n\t * @param {traverseCallback} callback - A callback that is executed per node.\r\n\t */\r\n\ttraverse( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tfor ( const childNode of this.getChildren() ) {\r\n\r\n\t\t\tchildNode.traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the cache key for this node.\r\n\t *\r\n\t * @param {boolean} [force=false] - When set to `true`, a recomputation of the cache key is forced.\r\n\t * @return {number} The cache key of the node.\r\n\t */\r\n\tgetCacheKey( force = false ) {\r\n\r\n\t\tforce = force || this.version !== this._cacheKeyVersion;\r\n\r\n\t\tif ( force === true || this._cacheKey === null ) {\r\n\r\n\t\t\tthis._cacheKey = hash( getCacheKey( this, force ), this.customCacheKey() );\r\n\t\t\tthis._cacheKeyVersion = this.version;\r\n\r\n\t\t}\r\n\r\n\t\treturn this._cacheKey;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generate a custom cache key for this node.\r\n\t *\r\n\t * @return {number} The cache key of the node.\r\n\t */\r\n\tcustomCacheKey() {\r\n\r\n\t\treturn 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the references to this node which is by default `this`.\r\n\t *\r\n\t * @return {Node} A reference to this node.\r\n\t */\r\n\tgetScope() {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the hash of the node which is used to identify the node. By default it's\r\n\t * the {@link Node#uuid} however derived node classes might have to overwrite this method\r\n\t * depending on their implementation.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The hash.\r\n\t */\r\n\tgetHash( /*builder*/ ) {\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the update type of {@link Node#update}.\r\n\t *\r\n\t * @return {NodeUpdateType} The update type.\r\n\t */\r\n\tgetUpdateType() {\r\n\r\n\t\treturn this.updateType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the update type of {@link Node#updateBefore}.\r\n\t *\r\n\t * @return {NodeUpdateType} The update type.\r\n\t */\r\n\tgetUpdateBeforeType() {\r\n\r\n\t\treturn this.updateBeforeType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the update type of {@link Node#updateAfter}.\r\n\t *\r\n\t * @return {NodeUpdateType} The update type.\r\n\t */\r\n\tgetUpdateAfterType() {\r\n\r\n\t\treturn this.updateAfterType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Certain types are composed of multiple elements. For example a `vec3`\r\n\t * is composed of three `float` values. This method returns the type of\r\n\t * these elements.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The type of the node.\r\n\t */\r\n\tgetElementType( builder ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst elementType = builder.getElementType( type );\r\n\r\n\t\treturn elementType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the node member type for the given name.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {string} name - The name of the member.\r\n\t * @return {string} The type of the node.\r\n\t */\r\n\tgetMemberType( /*builder, name*/ ) {\r\n\r\n\t\treturn 'void';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the node's type.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The type of the node.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( nodeProperties.outputNode ) {\r\n\r\n\t\t\treturn nodeProperties.outputNode.getNodeType( builder );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is used during the build process of a node and ensures\r\n\t * equal nodes are not built multiple times but just once. For example if\r\n\t * `attribute( 'uv' )` is used multiple times by the user, the build\r\n\t * process makes sure to process just the first node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node} The shared node if possible. Otherwise `this` is returned.\r\n\t */\r\n\tgetShared( builder ) {\r\n\r\n\t\tconst hash = this.getHash( builder );\r\n\t\tconst nodeFromHash = builder.getNodeFromHash( hash );\r\n\r\n\t\treturn nodeFromHash || this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Represents the setup stage which is the first step of the build process, see {@link Node#build} method.\r\n\t * This method is often overwritten in derived modules to prepare the node which is used as the output/result.\r\n\t * The output node must be returned in the `return` statement.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {?Node} The output node.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\tlet index = 0;\r\n\r\n\t\tfor ( const childNode of this.getChildren() ) {\r\n\r\n\t\t\tnodeProperties[ 'node' + index ++ ] = childNode;\r\n\r\n\t\t}\r\n\r\n\t\t// return a outputNode if exists or null\r\n\r\n\t\treturn nodeProperties.outputNode || null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Represents the analyze stage which is the second step of the build process, see {@link Node#build} method.\r\n\t * This stage analyzes the node hierarchy and ensures descendent nodes are built.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {?Node} output - The target output node.\r\n\t */\r\n\tanalyze( builder, output = null ) {\r\n\r\n\t\tconst usageCount = builder.increaseUsage( this );\r\n\r\n\t\tif ( this.parents === true ) {\r\n\r\n\t\t\tconst nodeData = builder.getDataFromNode( this, 'any' );\r\n\t\t\tnodeData.stages = nodeData.stages || {};\r\n\t\t\tnodeData.stages[ builder.shaderStage ] = nodeData.stages[ builder.shaderStage ] || [];\r\n\t\t\tnodeData.stages[ builder.shaderStage ].push( output );\r\n\r\n\t\t}\r\n\r\n\t\tif ( usageCount === 1 ) {\r\n\r\n\t\t\t// node flow children\r\n\r\n\t\t\tconst nodeProperties = builder.getNodeProperties( this );\r\n\r\n\t\t\tfor ( const childNode of Object.values( nodeProperties ) ) {\r\n\r\n\t\t\t\tif ( childNode && childNode.isNode === true ) {\r\n\r\n\t\t\t\t\tchildNode.build( builder, this );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Represents the generate stage which is the third step of the build process, see {@link Node#build} method.\r\n\t * This state builds the output node and returns the resulting shader string.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {?string} output - Can be used to define the output type.\r\n\t * @return {?string} The generated shader string.\r\n\t */\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { outputNode } = builder.getNodeProperties( this );\r\n\r\n\t\tif ( outputNode && outputNode.isNode === true ) {\r\n\r\n\t\t\treturn outputNode.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The method can be implemented to update the node's internal state before it is used to render an object.\r\n\t * The {@link Node#updateBeforeType} property defines how often the update is executed.\r\n\t *\r\n\t * @abstract\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).\r\n\t */\r\n\tupdateBefore( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The method can be implemented to update the node's internal state after it was used to render an object.\r\n\t * The {@link Node#updateAfterType} property defines how often the update is executed.\r\n\t *\r\n\t * @abstract\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).\r\n\t */\r\n\tupdateAfter( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The method can be implemented to update the node's internal state when it is used to render an object.\r\n\t * The {@link Node#updateType} property defines how often the update is executed.\r\n\t *\r\n\t * @abstract\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t * @return {?boolean} An optional bool that indicates whether the implementation actually performed an update or not (e.g. due to caching).\r\n\t */\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method performs the build of a node. The behavior and return value depend on the current build stage:\r\n\t * - **setup**: Prepares the node and its children for the build process. This process can also create new nodes. Returns the node itself or a variant.\r\n\t * - **analyze**: Analyzes the node hierarchy for optimizations in the code generation stage. Returns `null`.\r\n\t * - **generate**: Generates the shader code for the node. Returns the generated shader string.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {string|Node|null} [output=null] - Can be used to define the output type.\r\n\t * @return {Node|string|null} The result of the build process, depending on the build stage.\r\n\t */\r\n\tbuild( builder, output = null ) {\r\n\r\n\t\tconst refNode = this.getShared( builder );\r\n\r\n\t\tif ( this !== refNode ) {\r\n\r\n\t\t\treturn refNode.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\t\tnodeData.buildStages = nodeData.buildStages || {};\r\n\t\tnodeData.buildStages[ builder.buildStage ] = true;\r\n\r\n\t\tconst parentBuildStage = _parentBuildStage[ builder.buildStage ];\r\n\r\n\t\tif ( parentBuildStage && nodeData.buildStages[ parentBuildStage ] !== true ) {\r\n\r\n\t\t\t// force parent build stage (setup or analyze)\r\n\r\n\t\t\tconst previousBuildStage = builder.getBuildStage();\r\n\r\n\t\t\tbuilder.setBuildStage( parentBuildStage );\r\n\r\n\t\t\tthis.build( builder );\r\n\r\n\t\t\tbuilder.setBuildStage( previousBuildStage );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tbuilder.addNode( this );\r\n\t\tbuilder.addChain( this );\r\n\r\n\t\t/* Build stages expected results:\r\n\t\t\t- \"setup\"\t\t-> Node\r\n\t\t\t- \"analyze\"\t\t-> null\r\n\t\t\t- \"generate\"\t-> String\r\n\t\t*/\r\n\t\tlet result = null;\r\n\r\n\t\tconst buildStage = builder.getBuildStage();\r\n\r\n\t\tif ( buildStage === 'setup' ) {\r\n\r\n\t\t\tthis.updateReference( builder );\r\n\r\n\t\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\t\tif ( properties.initialized !== true ) {\r\n\r\n\t\t\t\t//const stackNodesBeforeSetup = builder.stack.nodes.length;\r\n\r\n\t\t\t\tproperties.initialized = true;\r\n\t\t\t\tproperties.outputNode = this.setup( builder ) || properties.outputNode || null;\r\n\r\n\t\t\t\t/*if ( isNodeOutput && builder.stack.nodes.length !== stackNodesBeforeSetup ) {\r\n\r\n\t\t\t\t\t// !! no outputNode !!\r\n\t\t\t\t\t//outputNode = builder.stack;\r\n\r\n\t\t\t\t}*/\r\n\r\n\t\t\t\tfor ( const childNode of Object.values( properties ) ) {\r\n\r\n\t\t\t\t\tif ( childNode && childNode.isNode === true ) {\r\n\r\n\t\t\t\t\t\tif ( childNode.parents === true ) {\r\n\r\n\t\t\t\t\t\t\tconst childProperties = builder.getNodeProperties( childNode );\r\n\t\t\t\t\t\t\tchildProperties.parents = childProperties.parents || [];\r\n\t\t\t\t\t\t\tchildProperties.parents.push( this );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tchildNode.build( builder );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult = properties.outputNode;\r\n\r\n\t\t} else if ( buildStage === 'analyze' ) {\r\n\r\n\t\t\tthis.analyze( builder, output );\r\n\r\n\t\t} else if ( buildStage === 'generate' ) {\r\n\r\n\t\t\tconst isGenerateOnce = this.generate.length === 1;\r\n\r\n\t\t\tif ( isGenerateOnce ) {\r\n\r\n\t\t\t\tconst type = this.getNodeType( builder );\r\n\t\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\t\tresult = nodeData.snippet;\r\n\r\n\t\t\t\tif ( result === undefined ) {\r\n\r\n\t\t\t\t\tif ( nodeData.generated === undefined ) {\r\n\r\n\t\t\t\t\t\tnodeData.generated = true;\r\n\r\n\t\t\t\t\t\tresult = this.generate( builder ) || '';\r\n\r\n\t\t\t\t\t\tnodeData.snippet = result;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.Node: Recursion detected.', this );\r\n\r\n\t\t\t\t\t\tresult = '/* Recursion detected. */';\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( nodeData.flowCodes !== undefined && builder.context.nodeBlock !== undefined ) {\r\n\r\n\t\t\t\t\tbuilder.addFlowCodeHierarchy( this, builder.context.nodeBlock );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tresult = builder.format( result, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tresult = this.generate( builder, output ) || '';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.removeChain( this );\r\n\t\tbuilder.addSequentialNode( this );\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the child nodes as a JSON object.\r\n\t *\r\n\t * @return {Array<Object>} An iterable list of serialized child objects as JSON.\r\n\t */\r\n\tgetSerializeChildren() {\r\n\r\n\t\treturn getNodeChildren( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes the node to JSON.\r\n\t *\r\n\t * @param {Object} json - The output JSON object.\r\n\t */\r\n\tserialize( json ) {\r\n\r\n\t\tconst nodeChildren = this.getSerializeChildren();\r\n\r\n\t\tconst inputNodes = {};\r\n\r\n\t\tfor ( const { property, index, childNode } of nodeChildren ) {\r\n\r\n\t\t\tif ( index !== undefined ) {\r\n\r\n\t\t\t\tif ( inputNodes[ property ] === undefined ) {\r\n\r\n\t\t\t\t\tinputNodes[ property ] = Number.isInteger( index ) ? [] : {};\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tinputNodes[ property ][ index ] = childNode.toJSON( json.meta ).uuid;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tinputNodes[ property ] = childNode.toJSON( json.meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( Object.keys( inputNodes ).length > 0 ) {\r\n\r\n\t\t\tjson.inputNodes = inputNodes;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Deserializes the node from the given JSON.\r\n\t *\r\n\t * @param {Object} json - The JSON object.\r\n\t */\r\n\tdeserialize( json ) {\r\n\r\n\t\tif ( json.inputNodes !== undefined ) {\r\n\r\n\t\t\tconst nodes = json.meta.nodes;\r\n\r\n\t\t\tfor ( const property in json.inputNodes ) {\r\n\r\n\t\t\t\tif ( Array.isArray( json.inputNodes[ property ] ) ) {\r\n\r\n\t\t\t\t\tconst inputArray = [];\r\n\r\n\t\t\t\t\tfor ( const uuid of json.inputNodes[ property ] ) {\r\n\r\n\t\t\t\t\t\tinputArray.push( nodes[ uuid ] );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis[ property ] = inputArray;\r\n\r\n\t\t\t\t} else if ( typeof json.inputNodes[ property ] === 'object' ) {\r\n\r\n\t\t\t\t\tconst inputObject = {};\r\n\r\n\t\t\t\t\tfor ( const subProperty in json.inputNodes[ property ] ) {\r\n\r\n\t\t\t\t\t\tconst uuid = json.inputNodes[ property ][ subProperty ];\r\n\r\n\t\t\t\t\t\tinputObject[ subProperty ] = nodes[ uuid ];\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tthis[ property ] = inputObject;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconst uuid = json.inputNodes[ property ];\r\n\r\n\t\t\t\t\tthis[ property ] = nodes[ uuid ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes the node into the three.js JSON Object/Scene format.\r\n\t *\r\n\t * @param {?Object} meta - An optional JSON object that already holds serialized data from other scene objects.\r\n\t * @return {Object} The serialized node.\r\n\t */\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst { uuid, type } = this;\r\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// serialize\r\n\r\n\t\tlet data = meta.nodes[ uuid ];\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tdata = {\r\n\t\t\t\tuuid,\r\n\t\t\t\ttype,\r\n\t\t\t\tmeta,\r\n\t\t\t\tmetadata: {\r\n\t\t\t\t\tversion: 4.7,\r\n\t\t\t\t\ttype: 'Node',\r\n\t\t\t\t\tgenerator: 'Node.toJSON'\r\n\t\t\t\t}\r\n\t\t\t};\r\n\r\n\t\t\tif ( isRoot !== true ) meta.nodes[ data.uuid ] = data;\r\n\r\n\t\t\tthis.serialize( data );\r\n\r\n\t\t\tdelete data.meta;\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Node;\r\n", "import Node from './Node.js';\r\n\r\n/**\r\n * This module uses cache management to create temporary variables\r\n * if the node is used more than once to prevent duplicate calculations.\r\n *\r\n * The class acts as a base class for many other nodes types.\r\n *\r\n * @augments Node\r\n */\r\nclass TempNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'TempNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a temp node.\r\n\t *\r\n\t * @param {?string} nodeType - The node type.\r\n\t */\r\n\tconstructor( nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isTempNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Whether this node is used more than once in context of other nodes.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The node builder.\r\n\t * @return {boolean} A flag that indicates if there is more than one dependency to other nodes.\r\n\t */\r\n\thasDependencies( builder ) {\r\n\r\n\t\treturn builder.getDataFromNode( this ).usageCount > 1;\r\n\r\n\t}\r\n\r\n\tbuild( builder, output ) {\r\n\r\n\t\tconst buildStage = builder.getBuildStage();\r\n\r\n\t\tif ( buildStage === 'generate' ) {\r\n\r\n\t\t\tconst type = builder.getVectorType( this.getNodeType( builder, output ) );\r\n\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\tif ( nodeData.propertyName !== undefined ) {\r\n\r\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\r\n\r\n\t\t\t} else if ( type !== 'void' && output !== 'void' && this.hasDependencies( builder ) ) {\r\n\r\n\t\t\t\tconst snippet = super.build( builder, type );\r\n\r\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this, null, type );\r\n\t\t\t\tconst propertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${ propertyName } = ${ snippet }`, this );\r\n\r\n\t\t\t\tnodeData.snippet = snippet;\r\n\t\t\t\tnodeData.propertyName = propertyName;\r\n\r\n\t\t\t\treturn builder.format( nodeData.propertyName, type, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn super.build( builder, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TempNode;\r\n", "import Node from '../core/Node.js';\r\n\r\n/**\r\n * Base class for representing element access on an array-like\r\n * node data structures.\r\n *\r\n * @augments Node\r\n */\r\nclass ArrayElementNode extends Node { // @TODO: If extending from TempNode it breaks webgpu_compute\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ArrayElementNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs an array element node.\r\n\t *\r\n\t * @param {Node} node - The array-like node.\r\n\t * @param {Node} indexNode - The index node that defines the element access.\r\n\t */\r\n\tconstructor( node, indexNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The array-like node.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * The index node that defines the element access.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.indexNode = indexNode;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isArrayElementNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from the array-like node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getElementType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst indexType = this.indexNode.getNodeType( builder );\r\n\r\n\t\tconst nodeSnippet = this.node.build( builder );\r\n\t\tconst indexSnippet = this.indexNode.build( builder, ! builder.isVector( indexType ) && builder.isInteger( indexType ) ? indexType : 'uint' );\r\n\r\n\t\treturn `${ nodeSnippet }[ ${ indexSnippet } ]`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ArrayElementNode;\r\n", "import Node from '../core/Node.js';\r\n\r\n/**\r\n * This module is part of the TSL core and usually not used in app level code.\r\n * It represents a convert operation during the shader generation process\r\n * meaning it converts the data type of a node to a target data type.\r\n *\r\n * @augments Node\r\n */\r\nclass ConvertNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ConvertNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new convert node.\r\n\t *\r\n\t * @param {Node} node - The node which type should be converted.\r\n\t * @param {string} convertTo - The target node type. Multiple types can be defined by separating them with a `|` sign.\r\n\t */\r\n\tconstructor( node, convertTo ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node which type should be converted.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * The target node type. Multiple types can be defined by separating them with a `|` sign.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.convertTo = convertTo;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the implementation tries to infer the best\r\n\t * matching type from the {@link ConvertNode#convertTo} property.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst requestType = this.node.getNodeType( builder );\r\n\r\n\t\tlet convertTo = null;\r\n\r\n\t\tfor ( const overloadingType of this.convertTo.split( '|' ) ) {\r\n\r\n\t\t\tif ( convertTo === null || builder.getTypeLength( requestType ) === builder.getTypeLength( overloadingType ) ) {\r\n\r\n\t\t\t\tconvertTo = overloadingType;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn convertTo;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.convertTo = this.convertTo;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.convertTo = data.convertTo;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst node = this.node;\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tconst snippet = node.build( builder, type );\r\n\r\n\t\treturn builder.format( snippet, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ConvertNode;\r\n", "import TempNode from '../core/TempNode.js';\r\n\r\n/**\r\n * This module is part of the TSL core and usually not used in app level code.\r\n * It represents a join operation during the shader generation process.\r\n * For example in can compose/join two single floats into a `vec2` type.\r\n *\r\n * @augments TempNode\r\n */\r\nclass JoinNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'JoinNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new join node.\r\n\t *\r\n\t * @param {Array<Node>} nodes - An array of nodes that should be joined.\r\n\t * @param {?string} [nodeType=null] - The node type.\r\n\t */\r\n\tconstructor( nodes = [], nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\t/**\r\n\t\t * An array of nodes that should be joined.\r\n\t\t *\r\n\t\t * @type {Array<Node>}\r\n\t\t */\r\n\t\tthis.nodes = nodes;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type must be inferred from the\r\n\t * joined data length if not explicitly defined.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.nodeType !== null ) {\r\n\r\n\t\t\treturn builder.getVectorType( this.nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getTypeFromLength( this.nodes.reduce( ( count, cur ) => count + builder.getTypeLength( cur.getNodeType( builder ) ), 0 ) );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst maxLength = builder.getTypeLength( type );\r\n\r\n\t\tconst nodes = this.nodes;\r\n\r\n\t\tconst primitiveType = builder.getComponentType( type );\r\n\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tlet length = 0;\r\n\r\n\t\tfor ( const input of nodes ) {\r\n\r\n\t\t\tif ( length >= maxLength ) {\r\n\r\n\t\t\t\tconsole.error( `THREE.TSL: Length of parameters exceeds maximum length of function '${ type }()' type.` );\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet inputType = input.getNodeType( builder );\r\n\t\t\tlet inputTypeLength = builder.getTypeLength( inputType );\r\n\t\t\tlet inputSnippet;\r\n\r\n\t\t\tif ( length + inputTypeLength > maxLength ) {\r\n\r\n\t\t\t\tconsole.error( `THREE.TSL: Length of '${ type }()' data exceeds maximum length of output type.` );\r\n\r\n\t\t\t\tinputTypeLength = maxLength - length;\r\n\t\t\t\tinputType = builder.getTypeFromLength( inputTypeLength );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlength += inputTypeLength;\r\n\t\t\tinputSnippet = input.build( builder, inputType );\r\n\r\n\t\t\tconst inputPrimitiveType = builder.getComponentType( inputType );\r\n\r\n\t\t\tif ( inputPrimitiveType !== primitiveType ) {\r\n\r\n\t\t\t\tinputSnippet = builder.format( inputSnippet, inputPrimitiveType, primitiveType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tsnippetValues.push( inputSnippet );\r\n\r\n\t\t}\r\n\r\n\t\tconst snippet = `${ builder.getType( type ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t\treturn builder.format( snippet, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default JoinNode;\r\n", "import Node from '../core/Node.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\nconst _stringVectorComponents = vectorComponents.join( '' );\r\n\r\n/**\r\n * This module is part of the TSL core and usually not used in app level code.\r\n * `SplitNode` represents a property access operation which means it is\r\n * used to implement any `.xyzw`, `.rgba` and `stpq` usage on node objects.\r\n * For example:\r\n * ```js\r\n * const redValue = color.r;\r\n * ```\r\n *\r\n * @augments Node\r\n */\r\nclass SplitNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SplitNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new split node.\r\n\t *\r\n\t * @param {Node} node - The node that should be accessed.\r\n\t * @param {string} [components='x'] - The components that should be accessed.\r\n\t */\r\n\tconstructor( node, components = 'x' ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node that should be accessed.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * The components that should be accessed.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.components = components;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isSplitNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the vector length which is computed based on the requested components.\r\n\t *\r\n\t * @return {number} The vector length.\r\n\t */\r\n\tgetVectorLength() {\r\n\r\n\t\tlet vectorLength = this.components.length;\r\n\r\n\t\tfor ( const c of this.components ) {\r\n\r\n\t\t\tvectorLength = Math.max( vectorComponents.indexOf( c ) + 1, vectorLength );\r\n\r\n\t\t}\r\n\r\n\t\treturn vectorLength;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the component type of the node's type.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The component type.\r\n\t */\r\n\tgetComponentType( builder ) {\r\n\r\n\t\treturn builder.getComponentType( this.node.getNodeType( builder ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from requested components.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn builder.getTypeFromLength( this.components.length, this.getComponentType( builder ) );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst node = this.node;\r\n\t\tconst nodeTypeLength = builder.getTypeLength( node.getNodeType( builder ) );\r\n\r\n\t\tlet snippet = null;\r\n\r\n\t\tif ( nodeTypeLength > 1 ) {\r\n\r\n\t\t\tlet type = null;\r\n\r\n\t\t\tconst componentsLength = this.getVectorLength();\r\n\r\n\t\t\tif ( componentsLength >= nodeTypeLength ) {\r\n\r\n\t\t\t\t// needed expand the input node\r\n\r\n\t\t\t\ttype = builder.getTypeFromLength( this.getVectorLength(), this.getComponentType( builder ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst nodeSnippet = node.build( builder, type );\r\n\r\n\t\t\tif ( this.components.length === nodeTypeLength && this.components === _stringVectorComponents.slice( 0, this.components.length ) ) {\r\n\r\n\t\t\t\t// unnecessary swizzle\r\n\r\n\t\t\t\tsnippet = builder.format( nodeSnippet, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippet = builder.format( `${nodeSnippet}.${this.components}`, this.getNodeType( builder ), output );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// ignore .components if .node returns float/integer\r\n\r\n\t\t\tsnippet = node.build( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.components = this.components;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.components = data.components;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SplitNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\n/**\r\n * This module is part of the TSL core and usually not used in app level code.\r\n * `SetNode` represents a set operation which means it is used to implement any\r\n * `setXYZW()`, `setRGBA()` and `setSTPQ()` method invocations on node objects.\r\n * For example:\r\n * ```js\r\n * materialLine.colorNode = color( 0, 0, 0 ).setR( float( 1 ) );\r\n * ```\r\n *\r\n * @augments TempNode\r\n */\r\nclass SetNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SetNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new set node.\r\n\t *\r\n\t * @param {Node} sourceNode - The node that should be updated.\r\n\t * @param {string} components - The components that should be updated.\r\n\t * @param {Node} targetNode - The value node.\r\n\t */\r\n\tconstructor( sourceNode, components, targetNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node that should be updated.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.sourceNode = sourceNode;\r\n\r\n\t\t/**\r\n\t\t * The components that should be updated.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.components = components;\r\n\r\n\t\t/**\r\n\t\t * The value node.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.targetNode = targetNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from {@link SetNode#sourceNode}.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.sourceNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { sourceNode, components, targetNode } = this;\r\n\r\n\t\tconst sourceType = this.getNodeType( builder );\r\n\r\n\t\tconst componentType = builder.getComponentType( targetNode.getNodeType( builder ) );\r\n\t\tconst targetType = builder.getTypeFromLength( components.length, componentType );\r\n\r\n\t\tconst targetSnippet = targetNode.build( builder, targetType );\r\n\t\tconst sourceSnippet = sourceNode.build( builder, sourceType );\r\n\r\n\t\tconst length = builder.getTypeLength( sourceType );\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tconst component = vectorComponents[ i ];\r\n\r\n\t\t\tif ( component === components[ 0 ] ) {\r\n\r\n\t\t\t\tsnippetValues.push( targetSnippet );\r\n\r\n\t\t\t\ti += components.length - 1;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippetValues.push( sourceSnippet + '.' + component );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SetNode;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\n/**\r\n * This module is part of the TSL core and usually not used in app level code.\r\n * It represents a flip operation during the shader generation process\r\n * meaning it flips normalized values with the following formula:\r\n * ```\r\n * x = 1 - x;\r\n * ```\r\n * `FlipNode` is internally used to implement any `flipXYZW()`, `flipRGBA()` and\r\n * `flipSTPQ()` method invocations on node objects. For example:\r\n * ```js\r\n * uvNode = uvNode.flipY();\r\n * ```\r\n *\r\n * @augments TempNode\r\n */\r\nclass FlipNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FlipNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new flip node.\r\n\t *\r\n\t * @param {Node} sourceNode - The node which component(s) should be flipped.\r\n\t * @param {string} components - The components that should be flipped e.g. `'x'` or `'xy'`.\r\n\t */\r\n\tconstructor( sourceNode, components ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node which component(s) should be flipped.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.sourceNode = sourceNode;\r\n\r\n\t\t/**\r\n\t\t * The components that should be flipped e.g. `'x'` or `'xy'`.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.components = components;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from the source node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.sourceNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { components, sourceNode } = this;\r\n\r\n\t\tconst sourceType = this.getNodeType( builder );\r\n\t\tconst sourceSnippet = sourceNode.build( builder );\r\n\r\n\t\tconst sourceCache = builder.getVarFromNode( this );\r\n\t\tconst sourceProperty = builder.getPropertyName( sourceCache );\r\n\r\n\t\tbuilder.addLineFlowCode( sourceProperty + ' = ' + sourceSnippet, this );\r\n\r\n\t\tconst length = builder.getTypeLength( sourceType );\r\n\t\tconst snippetValues = [];\r\n\r\n\t\tlet componentIndex = 0;\r\n\r\n\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\tconst component = vectorComponents[ i ];\r\n\r\n\t\t\tif ( component === components[ componentIndex ] ) {\r\n\r\n\t\t\t\tsnippetValues.push( '1.0 - ' + ( sourceProperty + '.' + component ) );\r\n\r\n\t\t\t\tcomponentIndex ++;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippetValues.push( sourceProperty + '.' + component );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn `${ builder.getType( sourceType ) }( ${ snippetValues.join( ', ' ) } )`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FlipNode;\r\n", "import Node from './Node.js';\r\nimport { getValueType, getValueFromType, arrayBufferToBase64 } from './NodeUtils.js';\r\n\r\n/**\r\n * Base class for representing data input nodes.\r\n *\r\n * @augments Node\r\n */\r\nclass InputNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'InputNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new input node.\r\n\t *\r\n\t * @param {any} value - The value of this node. This can be any JS primitive, functions, array buffers or even three.js objects (vector, matrices, colors).\r\n\t * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.\r\n\t */\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isInputNode = true;\r\n\r\n\t\t/**\r\n\t\t * The value of this node. This can be any JS primitive, functions, array buffers or even three.js objects (vector, matrices, colors).\r\n\t\t *\r\n\t\t * @type {any}\r\n\t\t */\r\n\t\tthis.value = value;\r\n\r\n\t\t/**\r\n\t\t * The precision of the value in the shader.\r\n\t\t *\r\n\t\t * @type {?('low'|'medium'|'high')}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.precision = null;\r\n\r\n\t}\r\n\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\tif ( this.nodeType === null ) {\r\n\r\n\t\t\treturn getValueType( this.value );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the input type of the node which is by default the node type. Derived modules\r\n\t * might overwrite this method and use a fixed type or compute one analytically.\r\n\t *\r\n\t * A typical example for different input and node types are textures. The input type of a\r\n\t * normal RGBA texture is `texture` whereas its node type is `vec4`.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The input type.\r\n\t */\r\n\tgetInputType( builder ) {\r\n\r\n\t\treturn this.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the precision to the given value. The method can be\r\n\t * overwritten in derived classes if the final precision must be computed\r\n\t * analytically.\r\n\t *\r\n\t * @param {('low'|'medium'|'high')} precision - The precision of the input value in the shader.\r\n\t * @return {InputNode} A reference to this node.\r\n\t */\r\n\tsetPrecision( precision ) {\r\n\r\n\t\tthis.precision = precision;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.value = this.value;\r\n\r\n\t\tif ( this.value && this.value.toArray ) data.value = this.value.toArray();\r\n\r\n\t\tdata.valueType = getValueType( this.value );\r\n\t\tdata.nodeType = this.nodeType;\r\n\r\n\t\tif ( data.valueType === 'ArrayBuffer' ) data.value = arrayBufferToBase64( data.value );\r\n\r\n\t\tdata.precision = this.precision;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.nodeType = data.nodeType;\r\n\t\tthis.value = Array.isArray( data.value ) ? getValueFromType( data.valueType, ...data.value ) : data.value;\r\n\r\n\t\tthis.precision = data.precision || null;\r\n\r\n\t\tif ( this.value && this.value.fromArray ) this.value = this.value.fromArray( data.value );\r\n\r\n\t}\r\n\r\n\tgenerate( /*builder, output*/ ) {\r\n\r\n\t\tconsole.warn( 'Abstract function.' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default InputNode;\r\n", "import InputNode from './InputNode.js';\r\n\r\nconst _regNum = /float|u?int/;\r\n\r\n/**\r\n * Class for representing a constant value in the shader.\r\n *\r\n * @augments InputNode\r\n */\r\nclass ConstNode extends InputNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ConstNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new input node.\r\n\t *\r\n\t * @param {any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color).\r\n\t * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.\r\n\t */\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( value, nodeType );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isConstNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the shader string of the value with the current node builder.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The generated value as a shader string.\r\n\t */\r\n\tgenerateConst( builder ) {\r\n\r\n\t\treturn builder.generateConst( this.getNodeType( builder ), this.value );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tif ( _regNum.test( type ) && _regNum.test( output ) ) {\r\n\r\n\t\t\treturn builder.generateConst( output, this.value );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.format( this.generateConst( builder ), type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ConstNode;\r\n", "import Node from '../core/Node.js';\r\n\r\n/**\r\n * Base class for representing member access on an object-like\r\n * node data structures.\r\n *\r\n * @augments Node\r\n */\r\nclass MemberNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MemberNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs an array element node.\r\n\t *\r\n\t * @param {Node} node - The array-like node.\r\n\t * @param {string} property - The property name.\r\n\t */\r\n\tconstructor( node, property ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The array-like node.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * The property name.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.property = property;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isMemberNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getMemberType( builder, this.property );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst propertyName = this.node.build( builder );\r\n\r\n\t\treturn propertyName + '.' + this.property;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MemberNode;\r\n", "import Node from '../core/Node.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\nimport ConvertNode from '../utils/ConvertNode.js';\r\nimport JoinNode from '../utils/JoinNode.js';\r\nimport SplitNode from '../utils/SplitNode.js';\r\nimport SetNode from '../utils/SetNode.js';\r\nimport FlipNode from '../utils/FlipNode.js';\r\nimport ConstNode from '../core/ConstNode.js';\r\nimport MemberNode from '../utils/MemberNode.js';\r\nimport { getValueFromType, getValueType } from '../core/NodeUtils.js';\r\n\r\nlet currentStack = null;\r\n\r\nconst NodeElements = new Map();\r\n\r\nexport function addMethodChaining( name, nodeElement ) {\r\n\r\n\tif ( NodeElements.has( name ) ) {\r\n\r\n\t\tconsole.warn( `THREE.TSL: Redefinition of method chaining '${ name }'.` );\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\tif ( typeof nodeElement !== 'function' ) throw new Error( `THREE.TSL: Node element ${ name } is not a function` );\r\n\r\n\tNodeElements.set( name, nodeElement );\r\n\r\n}\r\n\r\nconst parseSwizzle = ( props ) => props.replace( /r|s/g, 'x' ).replace( /g|t/g, 'y' ).replace( /b|p/g, 'z' ).replace( /a|q/g, 'w' );\r\nconst parseSwizzleAndSort = ( props ) => parseSwizzle( props ).split( '' ).sort().join( '' );\r\n\r\nconst shaderNodeHandler = {\r\n\r\n\tsetup( NodeClosure, params ) {\r\n\r\n\t\tconst inputs = params.shift();\r\n\r\n\t\treturn NodeClosure( nodeObjects( inputs ), ...params );\r\n\r\n\t},\r\n\r\n\tget( node, prop, nodeObj ) {\r\n\r\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\r\n\r\n\t\t\tif ( node.isStackNode !== true && prop === 'assign' ) {\r\n\r\n\t\t\t\treturn ( ...params ) => {\r\n\r\n\t\t\t\t\tcurrentStack.assign( nodeObj, ...params );\r\n\r\n\t\t\t\t\treturn nodeObj;\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t} else if ( NodeElements.has( prop ) ) {\r\n\r\n\t\t\t\tconst nodeElement = NodeElements.get( prop );\r\n\r\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.add( nodeElement( ...params ) ) : ( ...params ) => nodeElement( nodeObj, ...params );\r\n\r\n\t\t\t} else if ( prop === 'self' ) {\r\n\r\n\t\t\t\treturn node;\r\n\r\n\t\t\t} else if ( prop.endsWith( 'Assign' ) && NodeElements.has( prop.slice( 0, prop.length - 'Assign'.length ) ) ) {\r\n\r\n\t\t\t\tconst nodeElement = NodeElements.get( prop.slice( 0, prop.length - 'Assign'.length ) );\r\n\r\n\t\t\t\treturn node.isStackNode ? ( ...params ) => nodeObj.assign( params[ 0 ], nodeElement( ...params ) ) : ( ...params ) => nodeObj.assign( nodeElement( nodeObj, ...params ) );\r\n\r\n\t\t\t} else if ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// accessing properties ( swizzle )\r\n\r\n\t\t\t\tprop = parseSwizzle( prop );\r\n\r\n\t\t\t\treturn nodeObject( new SplitNode( nodeObj, prop ) );\r\n\r\n\t\t\t} else if ( /^set[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// set properties ( swizzle ) and sort to xyzw sequence\r\n\r\n\t\t\t\tprop = parseSwizzleAndSort( prop.slice( 3 ).toLowerCase() );\r\n\r\n\t\t\t\treturn ( value ) => nodeObject( new SetNode( node, prop, nodeObject( value ) ) );\r\n\r\n\t\t\t} else if ( /^flip[XYZWRGBASTPQ]{1,4}$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// set properties ( swizzle ) and sort to xyzw sequence\r\n\r\n\t\t\t\tprop = parseSwizzleAndSort( prop.slice( 4 ).toLowerCase() );\r\n\r\n\t\t\t\treturn () => nodeObject( new FlipNode( nodeObject( node ), prop ) );\r\n\r\n\t\t\t} else if ( prop === 'width' || prop === 'height' || prop === 'depth' ) {\r\n\r\n\t\t\t\t// accessing property\r\n\r\n\t\t\t\tif ( prop === 'width' ) prop = 'x';\r\n\t\t\t\telse if ( prop === 'height' ) prop = 'y';\r\n\t\t\t\telse if ( prop === 'depth' ) prop = 'z';\r\n\r\n\t\t\t\treturn nodeObject( new SplitNode( node, prop ) );\r\n\r\n\t\t\t} else if ( /^\\d+$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// accessing array\r\n\r\n\t\t\t\treturn nodeObject( new ArrayElementNode( nodeObj, new ConstNode( Number( prop ), 'uint' ) ) );\r\n\r\n\t\t\t} else if ( /^get$/.test( prop ) === true ) {\r\n\r\n\t\t\t\t// accessing properties\r\n\r\n\t\t\t\treturn ( value ) => nodeObject( new MemberNode( nodeObj, value ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Reflect.get( node, prop, nodeObj );\r\n\r\n\t},\r\n\r\n\tset( node, prop, value, nodeObj ) {\r\n\r\n\t\tif ( typeof prop === 'string' && node[ prop ] === undefined ) {\r\n\r\n\t\t\t// setting properties\r\n\r\n\t\t\tif ( /^[xyzwrgbastpq]{1,4}$/.test( prop ) === true || prop === 'width' || prop === 'height' || prop === 'depth' || /^\\d+$/.test( prop ) === true ) {\r\n\r\n\t\t\t\tnodeObj[ prop ].assign( value );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn Reflect.set( node, prop, value, nodeObj );\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst nodeObjectsCacheMap = new WeakMap();\r\nconst nodeBuilderFunctionsCacheMap = new WeakMap();\r\n\r\nconst ShaderNodeObject = function ( obj, altType = null ) {\r\n\r\n\tconst type = getValueType( obj );\r\n\r\n\tif ( type === 'node' ) {\r\n\r\n\t\tlet nodeObject = nodeObjectsCacheMap.get( obj );\r\n\r\n\t\tif ( nodeObject === undefined ) {\r\n\r\n\t\t\tnodeObject = new Proxy( obj, shaderNodeHandler );\r\n\r\n\t\t\tnodeObjectsCacheMap.set( obj, nodeObject );\r\n\t\t\tnodeObjectsCacheMap.set( nodeObject, nodeObject );\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeObject;\r\n\r\n\t} else if ( ( altType === null && ( type === 'float' || type === 'boolean' ) ) || ( type && type !== 'shader' && type !== 'string' ) ) {\r\n\r\n\t\treturn nodeObject( getConstNode( obj, altType ) );\r\n\r\n\t} else if ( type === 'shader' ) {\r\n\r\n\t\treturn obj.isFn ? obj : Fn( obj );\r\n\r\n\t}\r\n\r\n\treturn obj;\r\n\r\n};\r\n\r\nconst ShaderNodeObjects = function ( objects, altType = null ) {\r\n\r\n\tfor ( const name in objects ) {\r\n\r\n\t\tobjects[ name ] = nodeObject( objects[ name ], altType );\r\n\r\n\t}\r\n\r\n\treturn objects;\r\n\r\n};\r\n\r\nconst ShaderNodeArray = function ( array, altType = null ) {\r\n\r\n\tconst len = array.length;\r\n\r\n\tfor ( let i = 0; i < len; i ++ ) {\r\n\r\n\t\tarray[ i ] = nodeObject( array[ i ], altType );\r\n\r\n\t}\r\n\r\n\treturn array;\r\n\r\n};\r\n\r\nconst ShaderNodeProxy = function ( NodeClass, scope = null, factor = null, settings = null ) {\r\n\r\n\tconst assignNode = ( node ) => nodeObject( settings !== null ? Object.assign( node, settings ) : node );\r\n\r\n\tlet fn, name = scope, minParams, maxParams;\r\n\r\n\tfunction verifyParamsLimit( params ) {\r\n\r\n\t\tlet tslName;\r\n\r\n\t\tif ( name ) tslName = /[a-z]/i.test( name ) ? name + '()' : name;\r\n\t\telse tslName = NodeClass.type;\r\n\r\n\t\tif ( minParams !== undefined && params.length < minParams ) {\r\n\r\n\t\t\tconsole.error( `THREE.TSL: \"${ tslName }\" parameter length is less than minimum required.` );\r\n\r\n\t\t\treturn params.concat( new Array( minParams - params.length ).fill( 0 ) );\r\n\r\n\t\t} else if ( maxParams !== undefined && params.length > maxParams ) {\r\n\r\n\t\t\tconsole.error( `THREE.TSL: \"${ tslName }\" parameter length exceeds limit.` );\r\n\r\n\t\t\treturn params.slice( 0, maxParams );\r\n\r\n\t\t}\r\n\r\n\t\treturn params;\r\n\r\n\t}\r\n\r\n\tif ( scope === null ) {\r\n\r\n\t\tfn = ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( ...nodeArray( verifyParamsLimit( params ) ) ) );\r\n\r\n\t\t};\r\n\r\n\t} else if ( factor !== null ) {\r\n\r\n\t\tfactor = nodeObject( factor );\r\n\r\n\t\tfn = ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( verifyParamsLimit( params ) ), factor ) );\r\n\r\n\t\t};\r\n\r\n\t} else {\r\n\r\n\t\tfn = ( ...params ) => {\r\n\r\n\t\t\treturn assignNode( new NodeClass( scope, ...nodeArray( verifyParamsLimit( params ) ) ) );\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n\tfn.setParameterLength = ( ...params ) => {\r\n\r\n\t\tif ( params.length === 1 ) minParams = maxParams = params[ 0 ];\r\n\t\telse if ( params.length === 2 ) [ minParams, maxParams ] = params;\r\n\r\n\t\treturn fn;\r\n\r\n\t};\r\n\r\n\tfn.setName = ( value ) => {\r\n\r\n\t\tname = value;\r\n\r\n\t\treturn fn;\r\n\r\n\t};\r\n\r\n\treturn fn;\r\n\r\n};\r\n\r\nconst ShaderNodeImmutable = function ( NodeClass, ...params ) {\r\n\r\n\treturn nodeObject( new NodeClass( ...nodeArray( params ) ) );\r\n\r\n};\r\n\r\nclass ShaderCallNodeInternal extends Node {\r\n\r\n\tconstructor( shaderNode, inputNodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.shaderNode = shaderNode;\r\n\t\tthis.inputNodes = inputNodes;\r\n\r\n\t\tthis.isShaderCallNodeInternal = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.shaderNode.nodeType || this.getOutputNode( builder ).getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgetMemberType( builder, name ) {\r\n\r\n\t\treturn this.getOutputNode( builder ).getMemberType( builder, name );\r\n\r\n\t}\r\n\r\n\tcall( builder ) {\r\n\r\n\t\tconst { shaderNode, inputNodes } = this;\r\n\r\n\t\tconst properties = builder.getNodeProperties( shaderNode );\r\n\r\n\t\tconst subBuild = builder.getClosestSubBuild( shaderNode.subBuilds ) || '';\r\n\t\tconst subBuildProperty = subBuild || 'default';\r\n\r\n\t\tif ( properties[ subBuildProperty ] ) {\r\n\r\n\t\t\treturn properties[ subBuildProperty ];\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst previousSubBuildFn = builder.subBuildFn;\r\n\r\n\t\tbuilder.subBuildFn = subBuild;\r\n\r\n\t\tlet result = null;\r\n\r\n\t\tif ( shaderNode.layout ) {\r\n\r\n\t\t\tlet functionNodesCacheMap = nodeBuilderFunctionsCacheMap.get( builder.constructor );\r\n\r\n\t\t\tif ( functionNodesCacheMap === undefined ) {\r\n\r\n\t\t\t\tfunctionNodesCacheMap = new WeakMap();\r\n\r\n\t\t\t\tnodeBuilderFunctionsCacheMap.set( builder.constructor, functionNodesCacheMap );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet functionNode = functionNodesCacheMap.get( shaderNode );\r\n\r\n\t\t\tif ( functionNode === undefined ) {\r\n\r\n\t\t\t\tfunctionNode = nodeObject( builder.buildFunctionNode( shaderNode ) );\r\n\r\n\t\t\t\tfunctionNodesCacheMap.set( shaderNode, functionNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbuilder.addInclude( functionNode );\r\n\r\n\t\t\tresult = nodeObject( functionNode.call( inputNodes ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst jsFunc = shaderNode.jsFunc;\r\n\t\t\tconst outputNode = inputNodes !== null || jsFunc.length > 1 ? jsFunc( inputNodes || [], builder ) : jsFunc( builder );\r\n\r\n\t\t\tresult = nodeObject( outputNode );\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.subBuildFn = previousSubBuildFn;\r\n\r\n\t\tif ( shaderNode.once ) {\r\n\r\n\t\t\tproperties[ subBuildProperty ] = result;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tsetupOutput( builder ) {\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tbuilder.stack.outputNode = this.call( builder );\r\n\r\n\t\treturn builder.removeStack();\r\n\r\n\t}\r\n\r\n\tgetOutputNode( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tconst subBuildOutput = builder.getSubBuildOutput( this );\r\n\r\n\t\tproperties[ subBuildOutput ] = properties[ subBuildOutput ] || this.setupOutput( builder );\r\n\t\tproperties[ subBuildOutput ].subBuild = builder.getClosestSubBuild( this );\r\n\r\n\t\treturn properties[ subBuildOutput ];\r\n\r\n\t}\r\n\r\n\tbuild( builder, output = null ) {\r\n\r\n\t\tlet result = null;\r\n\r\n\t\tconst buildStage = builder.getBuildStage();\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tconst subBuildOutput = builder.getSubBuildOutput( this );\r\n\t\tconst outputNode = this.getOutputNode( builder );\r\n\r\n\t\tif ( buildStage === 'setup' ) {\r\n\r\n\t\t\tconst subBuildInitialized = builder.getSubBuildProperty( 'initialized', this );\r\n\r\n\t\t\tif ( properties[ subBuildInitialized ] !== true ) {\r\n\r\n\t\t\t\tproperties[ subBuildInitialized ] = true;\r\n\r\n\t\t\t\tproperties[ subBuildOutput ] = this.getOutputNode( builder );\r\n\t\t\t\tproperties[ subBuildOutput ].build( builder );\r\n\r\n\t\t\t\t// If the shaderNode has subBuilds, add them to the chaining nodes\r\n\t\t\t\t// so they can be built later in the build process.\r\n\r\n\t\t\t\tif ( this.shaderNode.subBuilds ) {\r\n\r\n\t\t\t\t\tfor ( const node of builder.chaining ) {\r\n\r\n\t\t\t\t\t\tconst nodeData = builder.getDataFromNode( node, 'any' );\r\n\t\t\t\t\t\tnodeData.subBuilds = nodeData.subBuilds || new Set();\r\n\r\n\t\t\t\t\t\tfor ( const subBuild of this.shaderNode.subBuilds ) {\r\n\r\n\t\t\t\t\t\t\tnodeData.subBuilds.add( subBuild );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t//builder.getDataFromNode( node ).subBuilds = nodeData.subBuilds;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresult = properties[ subBuildOutput ];\r\n\r\n\t\t} else if ( buildStage === 'analyze' ) {\r\n\r\n\t\t\toutputNode.build( builder, output );\r\n\r\n\t\t} else if ( buildStage === 'generate' ) {\r\n\r\n\t\t\tresult = outputNode.build( builder, output ) || '';\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass ShaderNodeInternal extends Node {\r\n\r\n\tconstructor( jsFunc, nodeType ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\tthis.jsFunc = jsFunc;\r\n\t\tthis.layout = null;\r\n\r\n\t\tthis.global = true;\r\n\r\n\t\tthis.once = false;\r\n\r\n\t}\r\n\r\n\tsetLayout( layout ) {\r\n\r\n\t\tthis.layout = layout;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tcall( inputs = null ) {\r\n\r\n\t\tnodeObjects( inputs );\r\n\r\n\t\treturn nodeObject( new ShaderCallNodeInternal( this, inputs ) );\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.call();\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst bools = [ false, true ];\r\nconst uints = [ 0, 1, 2, 3 ];\r\nconst ints = [ - 1, - 2 ];\r\nconst floats = [ 0.5, 1.5, 1 / 3, 1e-6, 1e6, Math.PI, Math.PI * 2, 1 / Math.PI, 2 / Math.PI, 1 / ( Math.PI * 2 ), Math.PI / 2 ];\r\n\r\nconst boolsCacheMap = new Map();\r\nfor ( const bool of bools ) boolsCacheMap.set( bool, new ConstNode( bool ) );\r\n\r\nconst uintsCacheMap = new Map();\r\nfor ( const uint of uints ) uintsCacheMap.set( uint, new ConstNode( uint, 'uint' ) );\r\n\r\nconst intsCacheMap = new Map( [ ...uintsCacheMap ].map( el => new ConstNode( el.value, 'int' ) ) );\r\nfor ( const int of ints ) intsCacheMap.set( int, new ConstNode( int, 'int' ) );\r\n\r\nconst floatsCacheMap = new Map( [ ...intsCacheMap ].map( el => new ConstNode( el.value ) ) );\r\nfor ( const float of floats ) floatsCacheMap.set( float, new ConstNode( float ) );\r\nfor ( const float of floats ) floatsCacheMap.set( - float, new ConstNode( - float ) );\r\n\r\nconst cacheMaps = { bool: boolsCacheMap, uint: uintsCacheMap, ints: intsCacheMap, float: floatsCacheMap };\r\n\r\nconst constNodesCacheMap = new Map( [ ...boolsCacheMap, ...floatsCacheMap ] );\r\n\r\nconst getConstNode = ( value, type ) => {\r\n\r\n\tif ( constNodesCacheMap.has( value ) ) {\r\n\r\n\t\treturn constNodesCacheMap.get( value );\r\n\r\n\t} else if ( value.isNode === true ) {\r\n\r\n\t\treturn value;\r\n\r\n\t} else {\r\n\r\n\t\treturn new ConstNode( value, type );\r\n\r\n\t}\r\n\r\n};\r\n\r\nconst ConvertType = function ( type, cacheMap = null ) {\r\n\r\n\treturn ( ...params ) => {\r\n\r\n\t\tif ( params.length === 0 || ( ! [ 'bool', 'float', 'int', 'uint' ].includes( type ) && params.every( param => typeof param !== 'object' ) ) ) {\r\n\r\n\t\t\tparams = [ getValueFromType( type, ...params ) ];\r\n\r\n\t\t}\r\n\r\n\t\tif ( params.length === 1 && cacheMap !== null && cacheMap.has( params[ 0 ] ) ) {\r\n\r\n\t\t\treturn nodeObject( cacheMap.get( params[ 0 ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( params.length === 1 ) {\r\n\r\n\t\t\tconst node = getConstNode( params[ 0 ], type );\r\n\t\t\tif ( node.nodeType === type ) return nodeObject( node );\r\n\t\t\treturn nodeObject( new ConvertNode( node, type ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst nodes = params.map( param => getConstNode( param ) );\r\n\t\treturn nodeObject( new JoinNode( nodes, type ) );\r\n\r\n\t};\r\n\r\n};\r\n\r\n// exports\r\n\r\nexport const defined = ( v ) => typeof v === 'object' && v !== null ? v.value : v; // TODO: remove boolean conversion and defined function\r\n\r\n// utils\r\n\r\nexport const getConstNodeType = ( value ) => ( value !== undefined && value !== null ) ? ( value.nodeType || value.convertTo || ( typeof value === 'string' ? value : null ) ) : null;\r\n\r\n// shader node base\r\n\r\nexport function ShaderNode( jsFunc, nodeType ) {\r\n\r\n\treturn new Proxy( new ShaderNodeInternal( jsFunc, nodeType ), shaderNodeHandler );\r\n\r\n}\r\n\r\nexport const nodeObject = ( val, altType = null ) => /* new */ ShaderNodeObject( val, altType );\r\nexport const nodeObjects = ( val, altType = null ) => new ShaderNodeObjects( val, altType );\r\nexport const nodeArray = ( val, altType = null ) => new ShaderNodeArray( val, altType );\r\nexport const nodeProxy = ( ...params ) => new ShaderNodeProxy( ...params );\r\nexport const nodeImmutable = ( ...params ) => new ShaderNodeImmutable( ...params );\r\n\r\nlet fnId = 0;\r\n\r\nexport const Fn = ( jsFunc, layout = null ) => {\r\n\r\n\tlet nodeType = null;\r\n\r\n\tif ( layout !== null ) {\r\n\r\n\t\tif ( typeof layout === 'object' ) {\r\n\r\n\t\t\tnodeType = layout.return;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( typeof layout === 'string' ) {\r\n\r\n\t\t\t\tnodeType = layout;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconsole.error( 'THREE.TSL: Invalid layout type.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlayout = null;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tconst shaderNode = new ShaderNode( jsFunc, nodeType );\r\n\r\n\tconst fn = ( ...params ) => {\r\n\r\n\t\tlet inputs;\r\n\r\n\t\tnodeObjects( params );\r\n\r\n\t\tconst isArrayAsParameter = params[ 0 ] && ( params[ 0 ].isNode || Object.getPrototypeOf( params[ 0 ] ) !== Object.prototype );\r\n\r\n\t\tif ( isArrayAsParameter ) {\r\n\r\n\t\t\tinputs = [ ...params ];\r\n\r\n\t\t} else {\r\n\r\n\t\t\tinputs = params[ 0 ];\r\n\r\n\t\t}\r\n\r\n\t\tconst fnCall = shaderNode.call( inputs );\r\n\r\n\t\tif ( nodeType === 'void' ) fnCall.toStack();\r\n\r\n\t\treturn fnCall;\r\n\r\n\t};\r\n\r\n\tfn.shaderNode = shaderNode;\r\n\tfn.id = shaderNode.id;\r\n\r\n\tfn.isFn = true;\r\n\r\n\tfn.getNodeType = ( ...params ) => shaderNode.getNodeType( ...params );\r\n\tfn.getCacheKey = ( ...params ) => shaderNode.getCacheKey( ...params );\r\n\r\n\tfn.setLayout = ( layout ) => {\r\n\r\n\t\tshaderNode.setLayout( layout );\r\n\r\n\t\treturn fn;\r\n\r\n\t};\r\n\r\n\tfn.once = ( subBuilds = null ) => {\r\n\r\n\t\tshaderNode.once = true;\r\n\t\tshaderNode.subBuilds = subBuilds;\r\n\r\n\t\treturn fn;\r\n\r\n\t};\r\n\r\n\tif ( layout !== null ) {\r\n\r\n\t\tif ( typeof layout.inputs !== 'object' ) {\r\n\r\n\t\t\tconst fullLayout = {\r\n\t\t\t\tname: 'fn' + fnId ++,\r\n\t\t\t\ttype: nodeType,\r\n\t\t\t\tinputs: []\r\n\t\t\t};\r\n\r\n\t\t\tfor ( const name in layout ) {\r\n\r\n\t\t\t\tif ( name === 'return' ) continue;\r\n\r\n\t\t\t\tfullLayout.inputs.push( {\r\n\t\t\t\t\tname: name,\r\n\t\t\t\t\ttype: layout[ name ]\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlayout = fullLayout;\r\n\r\n\t\t}\r\n\r\n\t\tfn.setLayout( layout );\r\n\r\n\t}\r\n\r\n\treturn fn;\r\n\r\n};\r\n\r\n//\r\n\r\nexport const setCurrentStack = ( stack ) => {\r\n\r\n\tif ( currentStack === stack ) {\r\n\r\n\t\t//throw new Error( 'Stack already defined.' );\r\n\r\n\t}\r\n\r\n\tcurrentStack = stack;\r\n\r\n};\r\n\r\nexport const getCurrentStack = () => currentStack;\r\n\r\n/**\r\n * Represent a conditional node using if/else statements.\r\n *\r\n * ```js\r\n * If( condition, function )\r\n * \t.ElseIf( condition, function )\r\n * \t.Else( function )\r\n * ```\r\n * @tsl\r\n * @function\r\n * @param {...any} params - The parameters for the conditional node.\r\n * @returns {StackNode} The conditional node.\r\n */\r\nexport const If = ( ...params ) => currentStack.If( ...params );\r\n\r\n/**\r\n * Represent a conditional node using switch/case statements.\r\n *\r\n * ```js\r\n * Switch( value )\r\n * \t.Case( 1, function )\r\n * \t.Case( 2, 3, 4, function )\r\n * \t.Default( function )\r\n * ```\r\n * @tsl\r\n * @function\r\n * @param {...any} params - The parameters for the conditional node.\r\n * @returns {StackNode} The conditional node.\r\n */\r\nexport const Switch = ( ...params ) => currentStack.Switch( ...params );\r\n\r\n/**\r\n * Add the given node to the current stack.\r\n *\r\n * @param {Node} node - The node to add.\r\n * @returns {Node} The node that was added to the stack.\r\n */\r\nexport function Stack( node ) {\r\n\r\n\tif ( currentStack ) currentStack.add( node );\r\n\r\n\treturn node;\r\n\r\n}\r\n\r\naddMethodChaining( 'toStack', Stack );\r\n\r\n// types\r\n\r\nexport const color = new ConvertType( 'color' );\r\n\r\nexport const float = new ConvertType( 'float', cacheMaps.float );\r\nexport const int = new ConvertType( 'int', cacheMaps.ints );\r\nexport const uint = new ConvertType( 'uint', cacheMaps.uint );\r\nexport const bool = new ConvertType( 'bool', cacheMaps.bool );\r\n\r\nexport const vec2 = new ConvertType( 'vec2' );\r\nexport const ivec2 = new ConvertType( 'ivec2' );\r\nexport const uvec2 = new ConvertType( 'uvec2' );\r\nexport const bvec2 = new ConvertType( 'bvec2' );\r\n\r\nexport const vec3 = new ConvertType( 'vec3' );\r\nexport const ivec3 = new ConvertType( 'ivec3' );\r\nexport const uvec3 = new ConvertType( 'uvec3' );\r\nexport const bvec3 = new ConvertType( 'bvec3' );\r\n\r\nexport const vec4 = new ConvertType( 'vec4' );\r\nexport const ivec4 = new ConvertType( 'ivec4' );\r\nexport const uvec4 = new ConvertType( 'uvec4' );\r\nexport const bvec4 = new ConvertType( 'bvec4' );\r\n\r\nexport const mat2 = new ConvertType( 'mat2' );\r\nexport const mat3 = new ConvertType( 'mat3' );\r\nexport const mat4 = new ConvertType( 'mat4' );\r\n\r\nexport const string = ( value = '' ) => nodeObject( new ConstNode( value, 'string' ) );\r\nexport const arrayBuffer = ( value ) => nodeObject( new ConstNode( value, 'ArrayBuffer' ) );\r\n\r\naddMethodChaining( 'toColor', color );\r\naddMethodChaining( 'toFloat', float );\r\naddMethodChaining( 'toInt', int );\r\naddMethodChaining( 'toUint', uint );\r\naddMethodChaining( 'toBool', bool );\r\naddMethodChaining( 'toVec2', vec2 );\r\naddMethodChaining( 'toIVec2', ivec2 );\r\naddMethodChaining( 'toUVec2', uvec2 );\r\naddMethodChaining( 'toBVec2', bvec2 );\r\naddMethodChaining( 'toVec3', vec3 );\r\naddMethodChaining( 'toIVec3', ivec3 );\r\naddMethodChaining( 'toUVec3', uvec3 );\r\naddMethodChaining( 'toBVec3', bvec3 );\r\naddMethodChaining( 'toVec4', vec4 );\r\naddMethodChaining( 'toIVec4', ivec4 );\r\naddMethodChaining( 'toUVec4', uvec4 );\r\naddMethodChaining( 'toBVec4', bvec4 );\r\naddMethodChaining( 'toMat2', mat2 );\r\naddMethodChaining( 'toMat3', mat3 );\r\naddMethodChaining( 'toMat4', mat4 );\r\n\r\n// basic nodes\r\n\r\nexport const element = /*@__PURE__*/ nodeProxy( ArrayElementNode ).setParameterLength( 2 );\r\nexport const convert = ( node, types ) => nodeObject( new ConvertNode( nodeObject( node ), types ) );\r\nexport const split = ( node, channels ) => nodeObject( new SplitNode( nodeObject( node ), channels ) );\r\n\r\naddMethodChaining( 'element', element );\r\naddMethodChaining( 'convert', convert );\r\n\r\n// deprecated\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r176. Use {@link Stack} instead.\r\n *\r\n * @param {Node} node - The node to add.\r\n * @returns {Function}\r\n */\r\nexport const append = ( node ) => { // @deprecated, r176\r\n\r\n\tconsole.warn( 'THREE.TSL: append() has been renamed to Stack().' );\r\n\treturn Stack( node );\r\n\r\n};\r\n\r\naddMethodChaining( 'append', ( node ) => { // @deprecated, r176\r\n\r\n\tconsole.warn( 'THREE.TSL: .append() has been renamed to .toStack().' );\r\n\treturn Stack( node );\r\n\r\n} );\r\n\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\nimport { vectorComponents } from '../core/constants.js';\r\n\r\n/**\r\n * These node represents an assign operation. Meaning a node is assigned\r\n * to another node.\r\n *\r\n * @augments TempNode\r\n */\r\nclass AssignNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AssignNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new assign node.\r\n\t *\r\n\t * @param {Node} targetNode - The target node.\r\n\t * @param {Node} sourceNode - The source type.\r\n\t */\r\n\tconstructor( targetNode, sourceNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The target node.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.targetNode = targetNode;\r\n\r\n\t\t/**\r\n\t\t * The source node.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.sourceNode = sourceNode;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isAssignNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Whether this node is used more than once in context of other nodes. This method\r\n\t * is overwritten since it always returns `false` (assigns are unique).\r\n\t *\r\n\t * @return {boolean} A flag that indicates if there is more than one dependency to other nodes. Always `false`.\r\n\t */\r\n\thasDependencies() {\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder, output ) {\r\n\r\n\t\treturn output !== 'void' ? this.targetNode.getNodeType( builder ) : 'void';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Whether a split is required when assigning source to target. This can happen when the component length of\r\n\t * target and source data type does not match.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {boolean} Whether a split is required when assigning source to target.\r\n\t */\r\n\tneedsSplitAssign( builder ) {\r\n\r\n\t\tconst { targetNode } = this;\r\n\r\n\t\tif ( builder.isAvailable( 'swizzleAssign' ) === false && targetNode.isSplitNode && targetNode.components.length > 1 ) {\r\n\r\n\t\t\tconst targetLength = builder.getTypeLength( targetNode.node.getNodeType( builder ) );\r\n\t\t\tconst assignDifferentVector = vectorComponents.join( '' ).slice( 0, targetLength ) !== targetNode.components;\r\n\r\n\t\t\treturn assignDifferentVector;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { targetNode, sourceNode } = this;\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.sourceNode = sourceNode;\r\n\t\tproperties.targetNode = targetNode.context( { assign: true } );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { targetNode, sourceNode } = builder.getNodeProperties( this );\r\n\r\n\t\tconst needsSplitAssign = this.needsSplitAssign( builder );\r\n\r\n\t\tconst targetType = targetNode.getNodeType( builder );\r\n\r\n\t\tconst target = targetNode.build( builder );\r\n\t\tconst source = sourceNode.build( builder, targetType );\r\n\r\n\t\tconst sourceType = sourceNode.getNodeType( builder );\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t//\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tif ( nodeData.initialized === true ) {\r\n\r\n\t\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\t\tsnippet = target;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( needsSplitAssign ) {\r\n\r\n\t\t\tconst sourceVar = builder.getVarFromNode( this, null, targetType );\r\n\t\t\tconst sourceProperty = builder.getPropertyName( sourceVar );\r\n\r\n\t\t\tbuilder.addLineFlowCode( `${ sourceProperty } = ${ source }`, this );\r\n\r\n\t\t\tconst splitNode = targetNode.node;\r\n\t\t\tconst splitTargetNode = splitNode.node.context( { assign: true } );\r\n\r\n\t\t\tconst targetRoot = splitTargetNode.build( builder );\r\n\r\n\t\t\tfor ( let i = 0; i < splitNode.components.length; i ++ ) {\r\n\r\n\t\t\t\tconst component = splitNode.components[ i ];\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${ targetRoot }.${ component } = ${ sourceProperty }[ ${ i } ]`, this );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\t\tsnippet = target;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = `${ target } = ${ source }`;\r\n\r\n\t\t\tif ( output === 'void' || sourceType === 'void' ) {\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( snippet, this );\r\n\r\n\t\t\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\t\t\tsnippet = target;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tnodeData.initialized = true;\r\n\r\n\t\treturn builder.format( snippet, targetType, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AssignNode;\r\n\r\n/**\r\n * TSL function for creating an assign node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} targetNode - The target node.\r\n * @param {Node} sourceNode - The source type.\r\n * @returns {AssignNode}\r\n */\r\nexport const assign = /*@__PURE__*/ nodeProxy( AssignNode ).setParameterLength( 2 );\r\n\r\naddMethodChaining( 'assign', assign );\r\n", "import TempNode from './TempNode.js';\r\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * ArrayNode represents a collection of nodes, typically created using the {@link array} function.\r\n * ```js\r\n * const colors = array( [\r\n * \tvec3( 1, 0, 0 ),\r\n * \tvec3( 0, 1, 0 ),\r\n * \tvec3( 0, 0, 1 )\r\n * ] );\r\n *\r\n * const redColor = tintColors.element( 0 );\r\n *\r\n * @augments TempNode\r\n */\r\nclass ArrayNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ArrayNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new array node.\r\n\t *\r\n\t * @param {?string} nodeType - The data type of the elements.\r\n\t * @param {number} count - Size of the array.\r\n\t * @param {?Array<Node>} [values=null] - Array default values.\r\n\t */\r\n\tconstructor( nodeType, count, values = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\t/**\r\n\t\t * Array size.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.count = count;\r\n\r\n\t\t/**\r\n\t\t * Array default values.\r\n\t\t *\r\n\t\t * @type {?Array<Node>}\r\n\t\t */\r\n\t\tthis.values = values;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isArrayNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the node's type.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The type of the node.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.nodeType === null ) {\r\n\r\n\t\t\tthis.nodeType = this.values[ 0 ].getNodeType( builder );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the node's type.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The type of the node.\r\n\t */\r\n\tgetElementType( builder ) {\r\n\r\n\t\treturn this.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method builds the output node and returns the resulting array as a shader string.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The generated shader string.\r\n\t */\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\treturn builder.generateArray( type, this.count, this.values );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ArrayNode;\r\n\r\n/**\r\n * TSL function for creating an array node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string|Array<Node>} nodeTypeOrValues - A string representing the element type (e.g., 'vec3')\r\n * or an array containing the default values (e.g., [ vec3() ]).\r\n * @param {?number} [count] - Size of the array.\r\n * @returns {ArrayNode}\r\n */\r\nexport const array = ( ...params ) => {\r\n\r\n\tlet node;\r\n\r\n\tif ( params.length === 1 ) {\r\n\r\n\t\tconst values = params[ 0 ];\r\n\r\n\t\tnode = new ArrayNode( null, values.length, values );\r\n\r\n\t} else {\r\n\r\n\t\tconst nodeType = params[ 0 ];\r\n\t\tconst count = params[ 1 ];\r\n\r\n\t\tnode = new ArrayNode( nodeType, count );\r\n\r\n\t}\r\n\r\n\treturn nodeObject( node );\r\n\r\n};\r\n\r\naddMethodChaining( 'toArray', ( node, count ) => array( Array( count ).fill( node ) ) );\r\n", "import Node from './Node.js';\r\n\r\n/**\r\n * This node can be used to group single instances of {@link UniformNode}\r\n * and manage them as a uniform buffer.\r\n *\r\n * In most cases, the predefined nodes `objectGroup`, `renderGroup` and `frameGroup`\r\n * will be used when defining the {@link UniformNode#groupNode} property.\r\n *\r\n * - `objectGroup`: Uniform buffer per object.\r\n * - `renderGroup`: Shared uniform buffer, updated once per render call.\r\n * - `frameGroup`: Shared uniform buffer, updated once per frame.\r\n *\r\n * @augments Node\r\n */\r\nclass UniformGroupNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'UniformGroupNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new uniform group node.\r\n\t *\r\n\t * @param {string} name - The name of the uniform group node.\r\n\t * @param {boolean} [shared=false] - Whether this uniform group node is shared or not.\r\n\t * @param {number} [order=1] - Influences the internal sorting.\r\n\t */\r\n\tconstructor( name, shared = false, order = 1 ) {\r\n\r\n\t\tsuper( 'string' );\r\n\r\n\t\t/**\r\n\t\t * The name of the uniform group node.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.name = name;\r\n\r\n\t\t/**\r\n\t\t * Whether this uniform group node is shared or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.shared = shared;\r\n\r\n\t\t/**\r\n\t\t * Influences the internal sorting.\r\n\t\t * TODO: Add details when this property should be changed.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.order = order;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isUniformGroup = true;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.name = this.name;\r\n\t\tdata.version = this.version;\r\n\t\tdata.shared = this.shared;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.name = data.name;\r\n\t\tthis.version = data.version;\r\n\t\tthis.shared = data.shared;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default UniformGroupNode;\r\n\r\n/**\r\n * TSL function for creating a uniform group node with the given name.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The name of the uniform group node.\r\n * @returns {UniformGroupNode}\r\n */\r\nexport const uniformGroup = ( name ) => new UniformGroupNode( name );\r\n\r\n/**\r\n * TSL function for creating a shared uniform group node with the given name and order.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The name of the uniform group node.\r\n * @param {number} [order=0] - Influences the internal sorting.\r\n * @returns {UniformGroupNode}\r\n */\r\nexport const sharedUniformGroup = ( name, order = 0 ) => new UniformGroupNode( name, true, order );\r\n\r\n/**\r\n * TSL object that represents a shared uniform group node which is updated once per frame.\r\n *\r\n * @tsl\r\n * @type {UniformGroupNode}\r\n */\r\nexport const frameGroup = /*@__PURE__*/ sharedUniformGroup( 'frame' );\r\n\r\n/**\r\n * TSL object that represents a shared uniform group node which is updated once per render.\r\n *\r\n * @tsl\r\n * @type {UniformGroupNode}\r\n */\r\nexport const renderGroup = /*@__PURE__*/ sharedUniformGroup( 'render' );\r\n\r\n/**\r\n * TSL object that represents a uniform group node which is updated once per object.\r\n *\r\n * @tsl\r\n * @type {UniformGroupNode}\r\n */\r\nexport const objectGroup = /*@__PURE__*/ uniformGroup( 'object' );\r\n", "import InputNode from './InputNode.js';\r\nimport { objectGroup } from './UniformGroupNode.js';\r\nimport { nodeObject, getConstNodeType } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * Class for representing a uniform.\r\n *\r\n * @augments InputNode\r\n */\r\nclass UniformNode extends InputNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'UniformNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new uniform node.\r\n\t *\r\n\t * @param {any} value - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color, texture).\r\n\t * @param {?string} nodeType - The node type. If no explicit type is defined, the node tries to derive the type from its value.\r\n\t */\r\n\tconstructor( value, nodeType = null ) {\r\n\r\n\t\tsuper( value, nodeType );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isUniformNode = true;\r\n\r\n\t\t/**\r\n\t\t * The name or label of the uniform.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default ''\r\n\t\t */\r\n\t\tthis.name = '';\r\n\r\n\t\t/**\r\n\t\t * The uniform group of this uniform. By default, uniforms are\r\n\t\t * managed per object but they might belong to a shared group\r\n\t\t * which is updated per frame or render call.\r\n\t\t *\r\n\t\t * @type {UniformGroupNode}\r\n\t\t */\r\n\t\tthis.groupNode = objectGroup;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the {@link UniformNode#name} property.\r\n\t *\r\n\t * @param {string} name - The name of the uniform.\r\n\t * @return {UniformNode} A reference to this node.\r\n\t */\r\n\tlabel( name ) {\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the {@link UniformNode#groupNode} property.\r\n\t *\r\n\t * @param {UniformGroupNode} group - The uniform group.\r\n\t * @return {UniformNode} A reference to this node.\r\n\t */\r\n\tsetGroup( group ) {\r\n\r\n\t\tthis.groupNode = group;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the {@link UniformNode#groupNode}.\r\n\t *\r\n\t * @return {UniformGroupNode} The uniform group.\r\n\t */\r\n\tgetGroup() {\r\n\r\n\t\treturn this.groupNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * By default, this method returns the result of {@link Node#getHash} but derived\r\n\t * classes might overwrite this method with a different implementation.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The uniform hash.\r\n\t */\r\n\tgetUniformHash( builder ) {\r\n\r\n\t\treturn this.getHash( builder );\r\n\r\n\t}\r\n\r\n\tonUpdate( callback, updateType ) {\r\n\r\n\t\tconst self = this.getSelf();\r\n\r\n\t\tcallback = callback.bind( self );\r\n\r\n\t\treturn super.onUpdate( ( frame ) => {\r\n\r\n\t\t\tconst value = callback( frame, self );\r\n\r\n\t\t\tif ( value !== undefined ) {\r\n\r\n\t\t\t\tthis.value = value;\r\n\r\n\t\t\t}\r\n\r\n\t \t}, updateType );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tconst hash = this.getUniformHash( builder );\r\n\r\n\t\tlet sharedNode = builder.getNodeFromHash( hash );\r\n\r\n\t\tif ( sharedNode === undefined ) {\r\n\r\n\t\t\tbuilder.setHashNode( this, hash );\r\n\r\n\t\t\tsharedNode = this;\r\n\r\n\t\t}\r\n\r\n\t\tconst sharedNodeType = sharedNode.getInputType( builder );\r\n\r\n\t\tconst nodeUniform = builder.getUniformFromNode( sharedNode, sharedNodeType, builder.shaderStage, this.name || builder.context.label );\r\n\t\tconst propertyName = builder.getPropertyName( nodeUniform );\r\n\r\n\t\tif ( builder.context.label !== undefined ) delete builder.context.label;\r\n\r\n\t\treturn builder.format( propertyName, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default UniformNode;\r\n\r\n/**\r\n * TSL function for creating a uniform node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {any} arg1 - The value of this node. Usually a JS primitive or three.js object (vector, matrix, color, texture).\r\n * @param {string} [arg2] - The node type. If no explicit type is defined, the node tries to derive the type from its value.\r\n * @returns {UniformNode}\r\n */\r\nexport const uniform = ( arg1, arg2 ) => {\r\n\r\n\tconst nodeType = getConstNodeType( arg2 || arg1 );\r\n\r\n\t// @TODO: get ConstNode from .traverse() in the future\r\n\tconst value = ( arg1 && arg1.isNode === true ) ? ( arg1.node && arg1.node.value ) || arg1.value : arg1;\r\n\r\n\treturn nodeObject( new UniformNode( value, nodeType ) );\r\n\r\n};\r\n", "import Node from './Node.js';\r\nimport { nodeImmutable, nodeObject } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * This class represents a shader property. It can be used\r\n * to explicitly define a property and assign a value to it.\r\n *\r\n * ```js\r\n * const threshold = property( 'float', 'threshold' ).assign( THRESHOLD );\r\n *```\r\n * `PropertyNode` is used by the engine to predefined common material properties\r\n * for TSL code.\r\n *\r\n * @augments Node\r\n */\r\nclass PropertyNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PropertyNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new property node.\r\n\t *\r\n\t * @param {string} nodeType - The type of the node.\r\n\t * @param {?string} [name=null] - The name of the property in the shader.\r\n\t * @param {boolean} [varying=false] - Whether this property is a varying or not.\r\n\t */\r\n\tconstructor( nodeType, name = null, varying = false ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\t/**\r\n\t\t * The name of the property in the shader. If no name is defined,\r\n\t\t * the node system auto-generates one.\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.name = name;\r\n\r\n\t\t/**\r\n\t\t * Whether this property is a varying or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.varying = varying;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isPropertyNode = true;\r\n\r\n\t\t/**\r\n\t\t * This flag is used for global cache.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.global = true;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.name || super.getHash( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tlet nodeVar;\r\n\r\n\t\tif ( this.varying === true ) {\r\n\r\n\t\t\tnodeVar = builder.getVaryingFromNode( this, this.name );\r\n\t\t\tnodeVar.needsInterpolation = true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnodeVar = builder.getVarFromNode( this, this.name );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getPropertyName( nodeVar );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PropertyNode;\r\n\r\n/**\r\n * TSL function for creating a property node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} type - The type of the node.\r\n * @param {?string} [name=null] - The name of the property in the shader.\r\n * @returns {PropertyNode}\r\n */\r\nexport const property = ( type, name ) => nodeObject( new PropertyNode( type, name ) );\r\n\r\n/**\r\n * TSL function for creating a varying property node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} type - The type of the node.\r\n * @param {?string} [name=null] - The name of the varying in the shader.\r\n * @returns {PropertyNode}\r\n */\r\nexport const varyingProperty = ( type, name ) => nodeObject( new PropertyNode( type, name, true ) );\r\n\r\n/**\r\n * TSL object that represents the shader variable `DiffuseColor`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<vec4>}\r\n */\r\nexport const diffuseColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec4', 'DiffuseColor' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `EmissiveColor`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<vec3>}\r\n */\r\nexport const emissive = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'EmissiveColor' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Roughness`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const roughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Roughness' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Metalness`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const metalness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Metalness' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Clearcoat`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const clearcoat = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Clearcoat' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `ClearcoatRoughness`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const clearcoatRoughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'ClearcoatRoughness' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Sheen`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<vec3>}\r\n */\r\nexport const sheen = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'Sheen' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `SheenRoughness`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const sheenRoughness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'SheenRoughness' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Iridescence`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const iridescence = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Iridescence' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `IridescenceIOR`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const iridescenceIOR = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IridescenceIOR' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `IridescenceThickness`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const iridescenceThickness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IridescenceThickness' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `AlphaT`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const alphaT = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'AlphaT' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Anisotropy`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const anisotropy = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Anisotropy' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `AnisotropyT`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<vec3>}\r\n */\r\nexport const anisotropyT = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'AnisotropyT' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `AnisotropyB`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<vec3>}\r\n */\r\nexport const anisotropyB = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec3', 'AnisotropyB' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `SpecularColor`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<color>}\r\n */\r\nexport const specularColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'color', 'SpecularColor' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `SpecularF90`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const specularF90 = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'SpecularF90' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Shininess`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const shininess = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Shininess' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Output`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<vec4>}\r\n */\r\nexport const output = /*@__PURE__*/ nodeImmutable( PropertyNode, 'vec4', 'Output' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `dashSize`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const dashSize = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'dashSize' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `gapSize`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const gapSize = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'gapSize' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `pointWidth`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const pointWidth = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'pointWidth' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `IOR`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const ior = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'IOR' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Transmission`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const transmission = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Transmission' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Thickness`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const thickness = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Thickness' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `AttenuationDistance`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const attenuationDistance = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'AttenuationDistance' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `AttenuationColor`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<color>}\r\n */\r\nexport const attenuationColor = /*@__PURE__*/ nodeImmutable( PropertyNode, 'color', 'AttenuationColor' );\r\n\r\n/**\r\n * TSL object that represents the shader variable `Dispersion`.\r\n *\r\n * @tsl\r\n * @type {PropertyNode<float>}\r\n */\r\nexport const dispersion = /*@__PURE__*/ nodeImmutable( PropertyNode, 'float', 'Dispersion' );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeArray, nodeObject, nodeObjects, float } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * This module represents the call of a {@link FunctionNode}. Developers are usually not confronted\r\n * with this module since they use the predefined TSL syntax `wgslFn` and `glslFn` which encapsulate\r\n * this logic.\r\n *\r\n * @augments TempNode\r\n */\r\nclass FunctionCallNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FunctionCallNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new function call node.\r\n\t *\r\n\t * @param {?FunctionNode} functionNode - The function node.\r\n\t * @param {Object<string, Node>} [parameters={}] - The parameters for the function call.\r\n\t */\r\n\tconstructor( functionNode = null, parameters = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The function node.\r\n\t\t *\r\n\t\t * @type {?FunctionNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.functionNode = functionNode;\r\n\r\n\t\t/**\r\n\t\t * The parameters of the function call.\r\n\t\t *\r\n\t\t * @type {Object<string, Node>}\r\n\t\t * @default {}\r\n\t\t */\r\n\t\tthis.parameters = parameters;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the parameters of the function call node.\r\n\t *\r\n\t * @param {Object<string, Node>} parameters - The parameters to set.\r\n\t * @return {FunctionCallNode} A reference to this node.\r\n\t */\r\n\tsetParameters( parameters ) {\r\n\r\n\t\tthis.parameters = parameters;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the parameters of the function call node.\r\n\t *\r\n\t * @return {Object<string, Node>} The parameters of this node.\r\n\t */\r\n\tgetParameters() {\r\n\r\n\t\treturn this.parameters;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.functionNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst params = [];\r\n\r\n\t\tconst functionNode = this.functionNode;\r\n\r\n\t\tconst inputs = functionNode.getInputs( builder );\r\n\t\tconst parameters = this.parameters;\r\n\r\n\t\tconst generateInput = ( node, inputNode ) => {\r\n\r\n\t\t\tconst type = inputNode.type;\r\n\t\t\tconst pointer = type === 'pointer';\r\n\r\n\t\t\tlet output;\r\n\r\n\t\t\tif ( pointer ) output = '&' + node.build( builder );\r\n\t\t\telse output = node.build( builder, type );\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t};\r\n\r\n\t\tif ( Array.isArray( parameters ) ) {\r\n\r\n\t\t\tif ( parameters.length > inputs.length ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.TSL: The number of provided parameters exceeds the expected number of inputs in \\'Fn()\\'.' );\r\n\r\n\t\t\t\tparameters.length = inputs.length;\r\n\r\n\t\t\t} else if ( parameters.length < inputs.length ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.TSL: The number of provided parameters is less than the expected number of inputs in \\'Fn()\\'.' );\r\n\r\n\t\t\t\twhile ( parameters.length < inputs.length ) {\r\n\r\n\t\t\t\t\tparameters.push( float( 0 ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let i = 0; i < parameters.length; i ++ ) {\r\n\r\n\t\t\t\tparams.push( generateInput( parameters[ i ], inputs[ i ] ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( const inputNode of inputs ) {\r\n\r\n\t\t\t\tconst node = parameters[ inputNode.name ];\r\n\r\n\t\t\t\tif ( node !== undefined ) {\r\n\r\n\t\t\t\t\tparams.push( generateInput( node, inputNode ) );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tconsole.error( `THREE.TSL: Input '${ inputNode.name }' not found in \\'Fn()\\'.` );\r\n\r\n\t\t\t\t\tparams.push( generateInput( float( 0 ), inputNode ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst functionName = functionNode.build( builder, 'property' );\r\n\r\n\t\treturn `${ functionName }( ${ params.join( ', ' ) } )`;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FunctionCallNode;\r\n\r\nexport const call = ( func, ...params ) => {\r\n\r\n\tparams = params.length > 1 || ( params[ 0 ] && params[ 0 ].isNode === true ) ? nodeArray( params ) : nodeObjects( params[ 0 ] );\r\n\r\n\treturn nodeObject( new FunctionCallNode( nodeObject( func ), params ) );\r\n\r\n};\r\n\r\naddMethodChaining( 'call', call );\r\n", "import { WebGLCoordinateSystem } from '../../constants.js';\r\nimport TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, Fn, int, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\nconst _vectorOperators = {\r\n\t'==': 'equal',\r\n\t'!=': 'notEqual',\r\n\t'<': 'lessThan',\r\n\t'>': 'greaterThan',\r\n\t'<=': 'lessThanEqual',\r\n\t'>=': 'greaterThanEqual',\r\n\t'%': 'mod'\r\n};\r\n\r\n/**\r\n * This node represents basic mathematical and logical operations like addition,\r\n * subtraction or comparisons (e.g. `equal()`).\r\n *\r\n * @augments TempNode\r\n */\r\nclass OperatorNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'OperatorNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new operator node.\r\n\t *\r\n\t * @param {string} op - The operator.\r\n\t * @param {Node} aNode - The first input.\r\n\t * @param {Node} bNode - The second input.\r\n\t * @param {...Node} params - Additional input parameters.\r\n\t */\r\n\tconstructor( op, aNode, bNode, ...params ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tif ( params.length > 0 ) {\r\n\r\n\t\t\tlet finalOp = new OperatorNode( op, aNode, bNode );\r\n\r\n\t\t\tfor ( let i = 0; i < params.length - 1; i ++ ) {\r\n\r\n\t\t\t\tfinalOp = new OperatorNode( op, finalOp, params[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\taNode = finalOp;\r\n\t\t\tbNode = params[ params.length - 1 ];\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * The operator.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.op = op;\r\n\r\n\t\t/**\r\n\t\t * The first input.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.aNode = aNode;\r\n\r\n\t\t/**\r\n\t\t * The second input.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.bNode = bNode;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isOperatorNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the operator method name.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {string} output - The output type.\r\n\t * @returns {string} The operator method name.\r\n\t */\r\n\tgetOperatorMethod( builder, output ) {\r\n\r\n\t\treturn builder.getMethod( _vectorOperators[ this.op ], output );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from the operator\r\n\t * and the input node types.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst op = this.op;\r\n\r\n\t\tconst aNode = this.aNode;\r\n\t\tconst bNode = this.bNode;\r\n\r\n\t\tconst typeA = aNode.getNodeType( builder );\r\n\t\tconst typeB = bNode ? bNode.getNodeType( builder ) : null;\r\n\r\n\t\tif ( typeA === 'void' || typeB === 'void' ) {\r\n\r\n\t\t\treturn 'void';\r\n\r\n\t\t} else if ( op === '%' ) {\r\n\r\n\t\t\treturn typeA;\r\n\r\n\t\t} else if ( op === '~' || op === '&' || op === '|' || op === '^' || op === '>>' || op === '<<' ) {\r\n\r\n\t\t\treturn builder.getIntegerType( typeA );\r\n\r\n\t\t} else if ( op === '!' || op === '&&' || op === '||' || op === '^^' ) {\r\n\r\n\t\t\treturn 'bool';\r\n\r\n\t\t} else if ( op === '==' || op === '!=' || op === '<' || op === '>' || op === '<=' || op === '>=' ) {\r\n\r\n\t\t\tconst typeLength = Math.max( builder.getTypeLength( typeA ), builder.getTypeLength( typeB ) );\r\n\r\n\t\t\treturn typeLength > 1 ? `bvec${ typeLength }` : 'bool';\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Handle matrix operations\r\n\r\n\t\t\tif ( builder.isMatrix( typeA ) ) {\r\n\r\n\t\t\t\tif ( typeB === 'float' ) {\r\n\r\n\t\t\t\t\treturn typeA; // matrix * scalar = matrix\r\n\r\n\t\t\t\t} else if ( builder.isVector( typeB ) ) {\r\n\r\n\t\t\t\t\treturn builder.getVectorFromMatrix( typeA ); // matrix * vector\r\n\r\n\t\t\t\t} else if ( builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\t\treturn typeA; // matrix * matrix\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\tif ( typeA === 'float' ) {\r\n\r\n\t\t\t\t\treturn typeB; // scalar * matrix = matrix\r\n\r\n\t\t\t\t} else if ( builder.isVector( typeA ) ) {\r\n\r\n\t\t\t\t\treturn builder.getVectorFromMatrix( typeB ); // vector * matrix\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Handle non-matrix cases\r\n\r\n\t\t\tif ( builder.getTypeLength( typeB ) > builder.getTypeLength( typeA ) ) {\r\n\r\n\t\t\t\t// anytype x anytype: use the greater length vector\r\n\r\n\t\t\t\treturn typeB;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn typeA;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst op = this.op;\r\n\r\n\t\tconst { aNode, bNode } = this;\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tlet typeA = null;\r\n\t\tlet typeB = null;\r\n\r\n\t\tif ( type !== 'void' ) {\r\n\r\n\t\t\ttypeA = aNode.getNodeType( builder );\r\n\t\t\ttypeB = bNode ? bNode.getNodeType( builder ) : null;\r\n\r\n\t\t\tif ( op === '<' || op === '>' || op === '<=' || op === '>=' || op === '==' || op === '!=' ) {\r\n\r\n\t\t\t\tif ( builder.isVector( typeA ) ) {\r\n\r\n\t\t\t\t\ttypeB = typeA;\r\n\r\n\t\t\t\t} else if ( builder.isVector( typeB ) ) {\r\n\r\n\t\t\t\t\ttypeA = typeB;\r\n\r\n\t\t\t\t} else if ( typeA !== typeB ) {\r\n\r\n\t\t\t\t\ttypeA = typeB = 'float';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( op === '>>' || op === '<<' ) {\r\n\r\n\t\t\t\ttypeA = type;\r\n\t\t\t\ttypeB = builder.changeComponentType( typeB, 'uint' );\r\n\r\n\t\t\t} else if ( op === '%' ) {\r\n\r\n\t\t\t\ttypeA = type;\r\n\t\t\t\ttypeB = builder.isInteger( typeA ) && builder.isInteger( typeB ) ? typeB : typeA;\r\n\r\n\t\t\t} else if ( builder.isMatrix( typeA ) ) {\r\n\r\n\t\t\t\tif ( typeB === 'float' ) {\r\n\r\n\t\t\t\t\t// Keep matrix type for typeA, but ensure typeB stays float\r\n\r\n\t\t\t\t\ttypeB = 'float';\r\n\r\n\t\t\t\t} else if ( builder.isVector( typeB ) ) {\r\n\r\n\t\t\t\t\t// matrix x vector\r\n\t\t\t\t\ttypeB = builder.getVectorFromMatrix( typeA );\r\n\r\n\t\t\t\t} else if ( builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\t\t// matrix x matrix - keep both types\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttypeA = typeB = type;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\tif ( typeA === 'float' ) {\r\n\r\n\t\t\t\t\t// Keep matrix type for typeB, but ensure typeA stays float\r\n\r\n\t\t\t\t\ttypeA = 'float';\r\n\r\n\t\t\t\t} else if ( builder.isVector( typeA ) ) {\r\n\r\n\t\t\t\t\t// vector x matrix\r\n\r\n\t\t\t\t\ttypeA = builder.getVectorFromMatrix( typeB );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttypeA = typeB = type;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// anytype x anytype\r\n\r\n\t\t\t\ttypeA = typeB = type;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttypeA = typeB = type;\r\n\r\n\t\t}\r\n\r\n\t\tconst a = aNode.build( builder, typeA );\r\n\t\tconst b = bNode ? bNode.build( builder, typeB ) : null;\r\n\r\n\t\tconst fnOpSnippet = builder.getFunctionOperator( op );\r\n\r\n\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\tconst isGLSL = builder.renderer.coordinateSystem === WebGLCoordinateSystem;\r\n\r\n\t\t\tif ( op === '==' || op === '!=' || op === '<' || op === '>' || op === '<=' || op === '>=' ) {\r\n\r\n\t\t\t\tif ( isGLSL ) {\r\n\r\n\t\t\t\t\tif ( builder.isVector( typeA ) ) {\r\n\r\n\t\t\t\t\t\treturn builder.format( `${ this.getOperatorMethod( builder, output ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\treturn builder.format( `( ${ a } ${ op } ${ b } )`, type, output );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// WGSL\r\n\r\n\t\t\t\t\treturn builder.format( `( ${ a } ${ op } ${ b } )`, type, output );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( op === '%' ) {\r\n\r\n\t\t\t\tif ( builder.isInteger( typeB ) ) {\r\n\r\n\t\t\t\t\treturn builder.format( `( ${ a } % ${ b } )`, type, output );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn builder.format( `${ this.getOperatorMethod( builder, type ) }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( op === '!' || op === '~' ) {\r\n\r\n\t\t\t\treturn builder.format( `(${op}${a})`, typeA, output );\r\n\r\n\t\t\t} else if ( fnOpSnippet ) {\r\n\r\n\t\t\t\treturn builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// Handle matrix operations\r\n\r\n\t\t\t\tif ( builder.isMatrix( typeA ) && typeB === 'float' ) {\r\n\r\n\t\t\t\t\treturn builder.format( `( ${ b } ${ op } ${ a } )`, type, output );\r\n\r\n\t\t\t\t} else if ( typeA === 'float' && builder.isMatrix( typeB ) ) {\r\n\r\n\t\t\t\t\treturn builder.format( `${ a } ${ op } ${ b }`, type, output );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tlet snippet = `( ${ a } ${ op } ${ b } )`;\r\n\r\n\t\t\t\t\tif ( ! isGLSL && type === 'bool' && builder.isVector( typeA ) && builder.isVector( typeB ) ) {\r\n\r\n\t\t\t\t\t\tsnippet = `all${ snippet }`;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\treturn builder.format( snippet, type, output );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( typeA !== 'void' ) {\r\n\r\n\t\t\tif ( fnOpSnippet ) {\r\n\r\n\t\t\t\treturn builder.format( `${ fnOpSnippet }( ${ a }, ${ b } )`, type, output );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( builder.isMatrix( typeA ) && typeB === 'float' ) {\r\n\r\n\t\t\t\t\treturn builder.format( `${ b } ${ op } ${ a }`, type, output );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\treturn builder.format( `${ a } ${ op } ${ b }`, type, output );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.op = this.op;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.op = data.op;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default OperatorNode;\r\n\r\n/**\r\n * Returns the addition of two or more value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @param {...Node} params - Additional input parameters.\r\n * @returns {OperatorNode}\r\n */\r\nexport const add = /*@__PURE__*/ nodeProxy( OperatorNode, '+' ).setParameterLength( 2, Infinity ).setName( 'add' );\r\n\r\n/**\r\n * Returns the subtraction of two or more value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @param {...Node} params - Additional input parameters.\r\n * @returns {OperatorNode}\r\n */\r\nexport const sub = /*@__PURE__*/ nodeProxy( OperatorNode, '-' ).setParameterLength( 2, Infinity ).setName( 'sub' );\r\n\r\n/**\r\n * Returns the multiplication of two or more value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @param {...Node} params - Additional input parameters.\r\n * @returns {OperatorNode}\r\n */\r\nexport const mul = /*@__PURE__*/ nodeProxy( OperatorNode, '*' ).setParameterLength( 2, Infinity ).setName( 'mul' );\r\n\r\n/**\r\n * Returns the division of two or more value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @param {...Node} params - Additional input parameters.\r\n * @returns {OperatorNode}\r\n */\r\nexport const div = /*@__PURE__*/ nodeProxy( OperatorNode, '/' ).setParameterLength( 2, Infinity ).setName( 'div' );\r\n\r\n/**\r\n * Computes the remainder of dividing the first node by the second one.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const mod = /*@__PURE__*/ nodeProxy( OperatorNode, '%' ).setParameterLength( 2 ).setName( 'mod' );\r\n\r\n/**\r\n * Checks if two nodes are equal.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const equal = /*@__PURE__*/ nodeProxy( OperatorNode, '==' ).setParameterLength( 2 ).setName( 'equal' );\r\n\r\n/**\r\n * Checks if two nodes are not equal.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const notEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '!=' ).setParameterLength( 2 ).setName( 'notEqual' );\r\n\r\n/**\r\n * Checks if the first node is less than the second.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const lessThan = /*@__PURE__*/ nodeProxy( OperatorNode, '<' ).setParameterLength( 2 ).setName( 'lessThan' );\r\n\r\n/**\r\n * Checks if the first node is greater than the second.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const greaterThan = /*@__PURE__*/ nodeProxy( OperatorNode, '>' ).setParameterLength( 2 ).setName( 'greaterThan' );\r\n\r\n/**\r\n * Checks if the first node is less than or equal to the second.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const lessThanEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '<=' ).setParameterLength( 2 ).setName( 'lessThanEqual' );\r\n\r\n/**\r\n * Checks if the first node is greater than or equal to the second.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const greaterThanEqual = /*@__PURE__*/ nodeProxy( OperatorNode, '>=' ).setParameterLength( 2 ).setName( 'greaterThanEqual' );\r\n\r\n/**\r\n * Performs a logical AND operation on multiple nodes.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {...Node} nodes - The input nodes to be combined using AND.\r\n * @returns {OperatorNode}\r\n */\r\nexport const and = /*@__PURE__*/ nodeProxy( OperatorNode, '&&' ).setParameterLength( 2, Infinity ).setName( 'and' );\r\n\r\n/**\r\n * Performs a logical OR operation on multiple nodes.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {...Node} nodes - The input nodes to be combined using OR.\r\n * @returns {OperatorNode}\r\n */\r\nexport const or = /*@__PURE__*/ nodeProxy( OperatorNode, '||' ).setParameterLength( 2, Infinity ).setName( 'or' );\r\n\r\n/**\r\n * Performs logical NOT on a node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} value - The value.\r\n * @returns {OperatorNode}\r\n */\r\nexport const not = /*@__PURE__*/ nodeProxy( OperatorNode, '!' ).setParameterLength( 1 ).setName( 'not' );\r\n\r\n/**\r\n * Performs logical XOR on two nodes.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const xor = /*@__PURE__*/ nodeProxy( OperatorNode, '^^' ).setParameterLength( 2 ).setName( 'xor' );\r\n\r\n/**\r\n * Performs bitwise AND on two nodes.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const bitAnd = /*@__PURE__*/ nodeProxy( OperatorNode, '&' ).setParameterLength( 2 ).setName( 'bitAnd' );\r\n\r\n/**\r\n * Performs bitwise NOT on a node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const bitNot = /*@__PURE__*/ nodeProxy( OperatorNode, '~' ).setParameterLength( 2 ).setName( 'bitNot' );\r\n\r\n/**\r\n * Performs bitwise OR on two nodes.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const bitOr = /*@__PURE__*/ nodeProxy( OperatorNode, '|' ).setParameterLength( 2 ).setName( 'bitOr' );\r\n\r\n/**\r\n * Performs bitwise XOR on two nodes.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const bitXor = /*@__PURE__*/ nodeProxy( OperatorNode, '^' ).setParameterLength( 2 ).setName( 'bitXor' );\r\n\r\n/**\r\n * Shifts a node to the left.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The node to shift.\r\n * @param {Node} b - The value to shift.\r\n * @returns {OperatorNode}\r\n */\r\nexport const shiftLeft = /*@__PURE__*/ nodeProxy( OperatorNode, '<<' ).setParameterLength( 2 ).setName( 'shiftLeft' );\r\n\r\n/**\r\n * Shifts a node to the right.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The node to shift.\r\n * @param {Node} b - The value to shift.\r\n * @returns {OperatorNode}\r\n */\r\nexport const shiftRight = /*@__PURE__*/ nodeProxy( OperatorNode, '>>' ).setParameterLength( 2 ).setName( 'shiftRight' );\r\n\r\n/**\r\n * Increments a node by 1.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The node to increment.\r\n * @returns {OperatorNode}\r\n */\r\nexport const incrementBefore = Fn( ( [ a ] ) => {\r\n\r\n\ta.addAssign( 1 );\r\n\treturn a;\r\n\r\n} );\r\n\r\n/**\r\n * Decrements a node by 1.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The node to decrement.\r\n * @returns {OperatorNode}\r\n */\r\nexport const decrementBefore = Fn( ( [ a ] ) => {\r\n\r\n\ta.subAssign( 1 );\r\n\treturn a;\r\n\r\n} );\r\n\r\n/**\r\n * Increments a node by 1 and returns the previous value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The node to increment.\r\n * @returns {OperatorNode}\r\n */\r\nexport const increment = /*@__PURE__*/ Fn( ( [ a ] ) => {\r\n\r\n\tconst temp = int( a ).toConst();\r\n\ta.addAssign( 1 );\r\n\treturn temp;\r\n\r\n} );\r\n\r\n/**\r\n * Decrements a node by 1 and returns the previous value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} a - The node to decrement.\r\n * @returns {OperatorNode}\r\n */\r\nexport const decrement = /*@__PURE__*/ Fn( ( [ a ] ) => {\r\n\r\n\tconst temp = int( a ).toConst();\r\n\ta.subAssign( 1 );\r\n\treturn temp;\r\n\r\n} );\r\n\r\naddMethodChaining( 'add', add );\r\naddMethodChaining( 'sub', sub );\r\naddMethodChaining( 'mul', mul );\r\naddMethodChaining( 'div', div );\r\naddMethodChaining( 'mod', mod );\r\naddMethodChaining( 'equal', equal );\r\naddMethodChaining( 'notEqual', notEqual );\r\naddMethodChaining( 'lessThan', lessThan );\r\naddMethodChaining( 'greaterThan', greaterThan );\r\naddMethodChaining( 'lessThanEqual', lessThanEqual );\r\naddMethodChaining( 'greaterThanEqual', greaterThanEqual );\r\naddMethodChaining( 'and', and );\r\naddMethodChaining( 'or', or );\r\naddMethodChaining( 'not', not );\r\naddMethodChaining( 'xor', xor );\r\naddMethodChaining( 'bitAnd', bitAnd );\r\naddMethodChaining( 'bitNot', bitNot );\r\naddMethodChaining( 'bitOr', bitOr );\r\naddMethodChaining( 'bitXor', bitXor );\r\naddMethodChaining( 'shiftLeft', shiftLeft );\r\naddMethodChaining( 'shiftRight', shiftRight );\r\n\r\naddMethodChaining( 'incrementBefore', incrementBefore );\r\naddMethodChaining( 'decrementBefore', decrementBefore );\r\naddMethodChaining( 'increment', increment );\r\naddMethodChaining( 'decrement', decrement );\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r175. Use {@link mod} instead.\r\n *\r\n * @param {Node} a - The first input.\r\n * @param {Node} b - The second input.\r\n * @returns {OperatorNode}\r\n */\r\nexport const modInt = ( a, b ) => { // @deprecated, r175\r\n\r\n\tconsole.warn( 'THREE.TSL: \"modInt()\" is deprecated. Use \"mod( int( ... ) )\" instead.' );\r\n\treturn mod( int( a ), int( b ) );\r\n\r\n};\r\n\r\naddMethodChaining( 'modInt', modInt );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { sub, mul, div, mod, equal } from './OperatorNode.js';\r\nimport { addMethodChaining, nodeObject, nodeProxy, float, vec2, vec3, vec4, Fn } from '../tsl/TSLCore.js';\r\nimport { WebGLCoordinateSystem, WebGPUCoordinateSystem } from '../../constants.js';\r\n\r\n/**\r\n * This node represents a variety of mathematical methods available in shaders.\r\n * They are divided into three categories:\r\n *\r\n * - Methods with one input like `sin`, `cos` or `normalize`.\r\n * - Methods with two inputs like `dot`, `cross` or `pow`.\r\n * - Methods with three inputs like `mix`, `clamp` or `smoothstep`.\r\n *\r\n * @augments TempNode\r\n */\r\nclass MathNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MathNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new math node.\r\n\t *\r\n\t * @param {string} method - The method name.\r\n\t * @param {Node} aNode - The first input.\r\n\t * @param {?Node} [bNode=null] - The second input.\r\n\t * @param {?Node} [cNode=null] - The third input.\r\n\t */\r\n\tconstructor( method, aNode, bNode = null, cNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t// Allow the max() and min() functions to take an arbitrary number of arguments.\r\n\r\n\t\tif ( ( method === MathNode.MAX || method === MathNode.MIN ) && arguments.length > 3 ) {\r\n\r\n\t\t\tlet finalOp = new MathNode( method, aNode, bNode );\r\n\r\n\t\t\tfor ( let i = 2; i < arguments.length - 1; i ++ ) {\r\n\r\n\t\t\t\tfinalOp = new MathNode( method, finalOp, arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\taNode = finalOp;\r\n\t\t\tbNode = arguments[ arguments.length - 1 ];\r\n\t\t\tcNode = null;\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * The method name.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.method = method;\r\n\r\n\t\t/**\r\n\t\t * The first input.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.aNode = aNode;\r\n\r\n\t\t/**\r\n\t\t * The second input.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.bNode = bNode;\r\n\r\n\t\t/**\r\n\t\t * The third input.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.cNode = cNode;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isMathNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The input type is inferred from the node types of the input nodes.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The input type.\r\n\t */\r\n\tgetInputType( builder ) {\r\n\r\n\t\tconst aType = this.aNode.getNodeType( builder );\r\n\t\tconst bType = this.bNode ? this.bNode.getNodeType( builder ) : null;\r\n\t\tconst cType = this.cNode ? this.cNode.getNodeType( builder ) : null;\r\n\r\n\t\tconst aLen = builder.isMatrix( aType ) ? 0 : builder.getTypeLength( aType );\r\n\t\tconst bLen = builder.isMatrix( bType ) ? 0 : builder.getTypeLength( bType );\r\n\t\tconst cLen = builder.isMatrix( cType ) ? 0 : builder.getTypeLength( cType );\r\n\r\n\t\tif ( aLen > bLen && aLen > cLen ) {\r\n\r\n\t\t\treturn aType;\r\n\r\n\t\t} else if ( bLen > cLen ) {\r\n\r\n\t\t\treturn bType;\r\n\r\n\t\t} else if ( cLen > aLen ) {\r\n\r\n\t\t\treturn cType;\r\n\r\n\t\t}\r\n\r\n\t\treturn aType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The selected method as well as the input type determine the node type of this node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst method = this.method;\r\n\r\n\t\tif ( method === MathNode.LENGTH || method === MathNode.DISTANCE || method === MathNode.DOT ) {\r\n\r\n\t\t\treturn 'float';\r\n\r\n\t\t} else if ( method === MathNode.CROSS ) {\r\n\r\n\t\t\treturn 'vec3';\r\n\r\n\t\t} else if ( method === MathNode.ALL || method === MathNode.ANY ) {\r\n\r\n\t\t\treturn 'bool';\r\n\r\n\t\t} else if ( method === MathNode.EQUALS ) {\r\n\r\n\t\t\treturn builder.changeComponentType( this.aNode.getNodeType( builder ), 'bool' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn this.getInputType( builder );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { aNode, bNode, method } = this;\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tif ( method === MathNode.ONE_MINUS ) {\r\n\r\n\t\t\toutputNode = sub( 1.0, aNode );\r\n\r\n\t\t} else if ( method === MathNode.RECIPROCAL ) {\r\n\r\n\t\t\toutputNode = div( 1.0, aNode );\r\n\r\n\t\t} else if ( method === MathNode.DIFFERENCE ) {\r\n\r\n\t\t\toutputNode = abs( sub( aNode, bNode ) );\r\n\r\n\t\t} else if ( method === MathNode.TRANSFORM_DIRECTION ) {\r\n\r\n\t\t\t// dir can be either a direction vector or a normal vector\r\n\t\t\t// upper-left 3x3 of matrix is assumed to be orthogonal\r\n\r\n\t\t\tlet tA = aNode;\r\n\t\t\tlet tB = bNode;\r\n\r\n\t\t\tif ( builder.isMatrix( tA.getNodeType( builder ) ) ) {\r\n\r\n\t\t\t\ttB = vec4( vec3( tB ), 0.0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttA = vec4( vec3( tA ), 0.0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst mulNode = mul( tA, tB ).xyz;\r\n\r\n\t\t\toutputNode = normalize( mulNode );\r\n\r\n\t\t}\r\n\r\n\t\tif ( outputNode !== null ) {\r\n\r\n\t\t\treturn outputNode;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn super.setup( builder );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( properties.outputNode ) {\r\n\r\n\t\t\treturn super.generate( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\tlet method = this.method;\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst inputType = this.getInputType( builder );\r\n\r\n\t\tconst a = this.aNode;\r\n\t\tconst b = this.bNode;\r\n\t\tconst c = this.cNode;\r\n\r\n\t\tconst coordinateSystem = builder.renderer.coordinateSystem;\r\n\r\n\t\tif ( method === MathNode.NEGATE ) {\r\n\r\n\t\t\treturn builder.format( '( - ' + a.build( builder, inputType ) + ' )', type, output );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst params = [];\r\n\r\n\t\t\tif ( method === MathNode.CROSS ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, type ),\r\n\t\t\t\t\tb.build( builder, type )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( coordinateSystem === WebGLCoordinateSystem && method === MathNode.STEP ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, builder.getTypeLength( a.getNodeType( builder ) ) === 1 ? 'float' : inputType ),\r\n\t\t\t\t\tb.build( builder, inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( coordinateSystem === WebGLCoordinateSystem && ( method === MathNode.MIN || method === MathNode.MAX ) ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, builder.getTypeLength( b.getNodeType( builder ) ) === 1 ? 'float' : inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( method === MathNode.REFRACT ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, inputType ),\r\n\t\t\t\t\tc.build( builder, 'float' )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else if ( method === MathNode.MIX ) {\r\n\r\n\t\t\t\tparams.push(\r\n\t\t\t\t\ta.build( builder, inputType ),\r\n\t\t\t\t\tb.build( builder, inputType ),\r\n\t\t\t\t\tc.build( builder, builder.getTypeLength( c.getNodeType( builder ) ) === 1 ? 'float' : inputType )\r\n\t\t\t\t);\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( coordinateSystem === WebGPUCoordinateSystem && method === MathNode.ATAN && b !== null ) {\r\n\r\n\t\t\t\t\tmethod = 'atan2';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( builder.shaderStage !== 'fragment' && ( method === MathNode.DFDX || method === MathNode.DFDY ) ) {\r\n\r\n\t\t\t\t\tconsole.warn( `THREE.TSL: '${ method }' is not supported in the ${ builder.shaderStage } stage.` );\r\n\r\n\t\t\t\t\tmethod = '/*' + method + '*/';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tparams.push( a.build( builder, inputType ) );\r\n\t\t\t\tif ( b !== null ) params.push( b.build( builder, inputType ) );\r\n\t\t\t\tif ( c !== null ) params.push( c.build( builder, inputType ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn builder.format( `${ builder.getMethod( method, type ) }( ${params.join( ', ' )} )`, type, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.method = this.method;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.method = data.method;\r\n\r\n\t}\r\n\r\n}\r\n\r\n// 1 input\r\n\r\nMathNode.ALL = 'all';\r\nMathNode.ANY = 'any';\r\n\r\nMathNode.RADIANS = 'radians';\r\nMathNode.DEGREES = 'degrees';\r\nMathNode.EXP = 'exp';\r\nMathNode.EXP2 = 'exp2';\r\nMathNode.LOG = 'log';\r\nMathNode.LOG2 = 'log2';\r\nMathNode.SQRT = 'sqrt';\r\nMathNode.INVERSE_SQRT = 'inversesqrt';\r\nMathNode.FLOOR = 'floor';\r\nMathNode.CEIL = 'ceil';\r\nMathNode.NORMALIZE = 'normalize';\r\nMathNode.FRACT = 'fract';\r\nMathNode.SIN = 'sin';\r\nMathNode.COS = 'cos';\r\nMathNode.TAN = 'tan';\r\nMathNode.ASIN = 'asin';\r\nMathNode.ACOS = 'acos';\r\nMathNode.ATAN = 'atan';\r\nMathNode.ABS = 'abs';\r\nMathNode.SIGN = 'sign';\r\nMathNode.LENGTH = 'length';\r\nMathNode.NEGATE = 'negate';\r\nMathNode.ONE_MINUS = 'oneMinus';\r\nMathNode.DFDX = 'dFdx';\r\nMathNode.DFDY = 'dFdy';\r\nMathNode.ROUND = 'round';\r\nMathNode.RECIPROCAL = 'reciprocal';\r\nMathNode.TRUNC = 'trunc';\r\nMathNode.FWIDTH = 'fwidth';\r\nMathNode.TRANSPOSE = 'transpose';\r\n\r\n// 2 inputs\r\n\r\nMathNode.BITCAST = 'bitcast';\r\nMathNode.EQUALS = 'equals';\r\nMathNode.MIN = 'min';\r\nMathNode.MAX = 'max';\r\nMathNode.STEP = 'step';\r\nMathNode.REFLECT = 'reflect';\r\nMathNode.DISTANCE = 'distance';\r\nMathNode.DIFFERENCE = 'difference';\r\nMathNode.DOT = 'dot';\r\nMathNode.CROSS = 'cross';\r\nMathNode.POW = 'pow';\r\nMathNode.TRANSFORM_DIRECTION = 'transformDirection';\r\n\r\n// 3 inputs\r\n\r\nMathNode.MIX = 'mix';\r\nMathNode.CLAMP = 'clamp';\r\nMathNode.REFRACT = 'refract';\r\nMathNode.SMOOTHSTEP = 'smoothstep';\r\nMathNode.FACEFORWARD = 'faceforward';\r\n\r\nexport default MathNode;\r\n\r\n// 1 inputs\r\n\r\n/**\r\n * A small value used to handle floating-point precision errors.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const EPSILON = /*@__PURE__*/ float( 1e-6 );\r\n\r\n/**\r\n * Represents infinity.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const INFINITY = /*@__PURE__*/ float( 1e6 );\r\n\r\n/**\r\n * Represents PI.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const PI = /*@__PURE__*/ float( Math.PI );\r\n\r\n/**\r\n * Represents PI * 2.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const PI2 = /*@__PURE__*/ float( Math.PI * 2 );\r\n\r\n/**\r\n * Returns `true` if all components of `x` are `true`.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node<bool>}\r\n */\r\nexport const all = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ALL ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns `true` if any components of `x` are `true`.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node<bool>}\r\n */\r\nexport const any = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ANY ).setParameterLength( 1 );\r\n\r\n/**\r\n * Converts a quantity in degrees to radians.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The input in degrees.\r\n * @returns {Node}\r\n */\r\nexport const radians = /*@__PURE__*/ nodeProxy( MathNode, MathNode.RADIANS ).setParameterLength( 1 );\r\n\r\n/**\r\n * Convert a quantity in radians to degrees.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The input in radians.\r\n * @returns {Node}\r\n */\r\nexport const degrees = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DEGREES ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the natural exponentiation of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const exp = /*@__PURE__*/ nodeProxy( MathNode, MathNode.EXP ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns 2 raised to the power of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const exp2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.EXP2 ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the natural logarithm of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const log = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LOG ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the base 2 logarithm of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const log2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LOG2 ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the square root of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const sqrt = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SQRT ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the inverse of the square root of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const inverseSqrt = /*@__PURE__*/ nodeProxy( MathNode, MathNode.INVERSE_SQRT ).setParameterLength( 1 );\r\n\r\n/**\r\n * Finds the nearest integer less than or equal to the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const floor = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FLOOR ).setParameterLength( 1 );\r\n\r\n/**\r\n * Finds the nearest integer that is greater than or equal to the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const ceil = /*@__PURE__*/ nodeProxy( MathNode, MathNode.CEIL ).setParameterLength( 1 );\r\n\r\n/**\r\n * Calculates the unit vector in the same direction as the original vector.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} x - The input vector.\r\n * @returns {Node}\r\n */\r\nexport const normalize = /*@__PURE__*/ nodeProxy( MathNode, MathNode.NORMALIZE ).setParameterLength( 1 );\r\n\r\n/**\r\n * Computes the fractional part of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const fract = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FRACT ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the sine of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const sin = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SIN ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the cosine of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const cos = /*@__PURE__*/ nodeProxy( MathNode, MathNode.COS ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the tangent of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const tan = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TAN ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the arcsine of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const asin = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ASIN ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the arccosine of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const acos = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ACOS ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the arc-tangent of the parameter.\r\n * If two parameters are provided, the result is `atan2(y/x)`.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} y - The y parameter.\r\n * @param {?(Node | number)} x - The x parameter.\r\n * @returns {Node}\r\n */\r\nexport const atan = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ATAN ).setParameterLength( 1, 2 );\r\n\r\n/**\r\n * Returns the absolute value of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const abs = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ABS ).setParameterLength( 1 );\r\n\r\n/**\r\n * Extracts the sign of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const sign = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SIGN ).setParameterLength( 1 );\r\n\r\n/**\r\n * Calculates the length of a vector.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} x - The parameter.\r\n * @returns {Node<float>}\r\n */\r\nexport const length = /*@__PURE__*/ nodeProxy( MathNode, MathNode.LENGTH ).setParameterLength( 1 );\r\n\r\n/**\r\n * Negates the value of the parameter (-x).\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const negate = /*@__PURE__*/ nodeProxy( MathNode, MathNode.NEGATE ).setParameterLength( 1 );\r\n\r\n/**\r\n * Return `1` minus the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const oneMinus = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ONE_MINUS ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the partial derivative of the parameter with respect to x.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const dFdx = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DFDX ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the partial derivative of the parameter with respect to y.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const dFdy = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DFDY ).setParameterLength( 1 );\r\n\r\n/**\r\n * Rounds the parameter to the nearest integer.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const round = /*@__PURE__*/ nodeProxy( MathNode, MathNode.ROUND ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the reciprocal of the parameter `(1/x)`.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const reciprocal = /*@__PURE__*/ nodeProxy( MathNode, MathNode.RECIPROCAL ).setParameterLength( 1 );\r\n\r\n/**\r\n * Truncates the parameter, removing the fractional part.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const trunc = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRUNC ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the sum of the absolute derivatives in x and y.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const fwidth = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FWIDTH ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the transpose of a matrix.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<mat2|mat3|mat4>} x - The parameter.\r\n * @returns {Node}\r\n */\r\nexport const transpose = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRANSPOSE ).setParameterLength( 1 );\r\n\r\n// 2 inputs\r\n\r\n/**\r\n * Reinterpret the bit representation of a value in one type as a value in another type.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The parameter.\r\n * @param {string} y - The new type.\r\n * @returns {Node}\r\n */\r\nexport const bitcast = /*@__PURE__*/ nodeProxy( MathNode, MathNode.BITCAST ).setParameterLength( 2 );\r\n\r\n/**\r\n * Returns `true` if `x` equals `y`.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The first parameter.\r\n * @param {Node | number} y - The second parameter.\r\n * @deprecated since r175. Use {@link equal} instead.\r\n * @returns {Node<bool>}\r\n */\r\nexport const equals = ( x, y ) => { // @deprecated, r172\r\n\r\n\tconsole.warn( 'THREE.TSL: \"equals\" is deprecated. Use \"equal\" inside a vector instead, like: \"bvec*( equal( ... ) )\"' );\r\n\treturn equal( x, y );\r\n\r\n};\r\n\r\n/**\r\n * Returns the least of the given values.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {...(Node | number)} values - The values to compare.\r\n * @returns {Node}\r\n */\r\nexport const min = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MIN ).setParameterLength( 2, Infinity );\r\n\r\n/**\r\n * Returns the greatest of the given values.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {...(Node | number)} values - The values to compare.\r\n * @returns {Node}\r\n */\r\nexport const max = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MAX ).setParameterLength( 2, Infinity );\r\n\r\n/**\r\n * Generate a step function by comparing two values.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The y parameter.\r\n * @param {Node | number} y - The x parameter.\r\n * @returns {Node}\r\n */\r\nexport const step = /*@__PURE__*/ nodeProxy( MathNode, MathNode.STEP ).setParameterLength( 2 );\r\n\r\n/**\r\n * Calculates the reflection direction for an incident vector.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2|vec3|vec4>} I - The incident vector.\r\n * @param {Node<vec2|vec3|vec4>} N - The normal vector.\r\n * @returns {Node<vec2|vec3|vec4>}\r\n */\r\nexport const reflect = /*@__PURE__*/ nodeProxy( MathNode, MathNode.REFLECT ).setParameterLength( 2 );\r\n\r\n/**\r\n * Calculates the distance between two points.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2|vec3|vec4>} x - The first point.\r\n * @param {Node<vec2|vec3|vec4>} y - The second point.\r\n * @returns {Node<float>}\r\n */\r\nexport const distance = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DISTANCE ).setParameterLength( 2 );\r\n\r\n/**\r\n * Calculates the absolute difference between two values.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The first parameter.\r\n * @param {Node | number} y - The second parameter.\r\n * @returns {Node}\r\n */\r\nexport const difference = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DIFFERENCE ).setParameterLength( 2 );\r\n\r\n/**\r\n * Calculates the dot product of two vectors.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2|vec3|vec4>} x - The first vector.\r\n * @param {Node<vec2|vec3|vec4>} y - The second vector.\r\n * @returns {Node<float>}\r\n */\r\nexport const dot = /*@__PURE__*/ nodeProxy( MathNode, MathNode.DOT ).setParameterLength( 2 );\r\n\r\n/**\r\n * Calculates the cross product of two vectors.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2|vec3|vec4>} x - The first vector.\r\n * @param {Node<vec2|vec3|vec4>} y - The second vector.\r\n * @returns {Node<vec2|vec3|vec4>}\r\n */\r\nexport const cross = /*@__PURE__*/ nodeProxy( MathNode, MathNode.CROSS ).setParameterLength( 2 );\r\n\r\n/**\r\n * Return the value of the first parameter raised to the power of the second one.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The first parameter.\r\n * @param {Node | number} y - The second parameter.\r\n * @returns {Node}\r\n */\r\nexport const pow = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW ).setParameterLength( 2 );\r\n\r\n/**\r\n * Returns the square of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The first parameter.\r\n * @returns {Node}\r\n */\r\nexport const pow2 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 2 ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the cube of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The first parameter.\r\n * @returns {Node}\r\n */\r\nexport const pow3 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 3 ).setParameterLength( 1 );\r\n\r\n/**\r\n * Returns the fourth power of the parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The first parameter.\r\n * @returns {Node}\r\n */\r\nexport const pow4 = /*@__PURE__*/ nodeProxy( MathNode, MathNode.POW, 4 ).setParameterLength( 1 );\r\n\r\n/**\r\n * Transforms the direction of a vector by a matrix and then normalizes the result.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2|vec3|vec4>} direction - The direction vector.\r\n * @param {Node<mat2|mat3|mat4>} matrix - The transformation matrix.\r\n * @returns {Node}\r\n */\r\nexport const transformDirection = /*@__PURE__*/ nodeProxy( MathNode, MathNode.TRANSFORM_DIRECTION ).setParameterLength( 2 );\r\n\r\n/**\r\n * Returns the cube root of a number.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} a - The first parameter.\r\n * @returns {Node}\r\n */\r\nexport const cbrt = ( a ) => mul( sign( a ), pow( abs( a ), 1.0 / 3.0 ) );\r\n\r\n/**\r\n * Calculate the squared length of a vector.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2|vec3|vec4>} a - The vector.\r\n * @returns {Node<float>}\r\n */\r\nexport const lengthSq = ( a ) => dot( a, a );\r\n\r\n/**\r\n * Linearly interpolates between two values.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} a - The first parameter.\r\n * @param {Node | number} b - The second parameter.\r\n * @param {Node | number} t - The interpolation value.\r\n * @returns {Node}\r\n */\r\nexport const mix = /*@__PURE__*/ nodeProxy( MathNode, MathNode.MIX ).setParameterLength( 3 );\r\n\r\n/**\r\n * Constrains a value to lie between two further values.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} value - The value to constrain.\r\n * @param {Node | number} [low=0] - The lower bound.\r\n * @param {Node | number} [high=1] - The upper bound.\r\n * @returns {Node}\r\n */\r\nexport const clamp = ( value, low = 0, high = 1 ) => nodeObject( new MathNode( MathNode.CLAMP, nodeObject( value ), nodeObject( low ), nodeObject( high ) ) );\r\n\r\n/**\r\n * Constrains a value between `0` and `1`.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} value - The value to constrain.\r\n * @returns {Node}\r\n */\r\nexport const saturate = ( value ) => clamp( value );\r\n\r\n/**\r\n * Calculates the refraction direction for an incident vector.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2|vec3|vec4>} I - The incident vector.\r\n * @param {Node<vec2|vec3|vec4>} N - The normal vector.\r\n * @param {Node<float>} eta - The ratio of indices of refraction.\r\n * @returns {Node<vec2|vec3|vec4>}\r\n */\r\nexport const refract = /*@__PURE__*/ nodeProxy( MathNode, MathNode.REFRACT ).setParameterLength( 3 );\r\n\r\n/**\r\n * Performs a Hermite interpolation between two values.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} low - The value of the lower edge of the Hermite function.\r\n * @param {Node | number} high - The value of the upper edge of the Hermite function.\r\n * @param {Node | number} x - The source value for interpolation.\r\n * @returns {Node}\r\n */\r\nexport const smoothstep = /*@__PURE__*/ nodeProxy( MathNode, MathNode.SMOOTHSTEP ).setParameterLength( 3 );\r\n\r\n/**\r\n * Returns a vector pointing in the same direction as another.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2|vec3|vec4>} N - The vector to orient.\r\n * @param {Node<vec2|vec3|vec4>} I - The incident vector.\r\n * @param {Node<vec2|vec3|vec4>} Nref - The reference vector.\r\n * @returns {Node<vec2|vec3|vec4>}\r\n */\r\nexport const faceForward = /*@__PURE__*/ nodeProxy( MathNode, MathNode.FACEFORWARD ).setParameterLength( 3 );\r\n\r\n/**\r\n * Returns a random value for the given uv.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2>} uv - The uv node.\r\n * @returns {Node<float>}\r\n */\r\nexport const rand = /*@__PURE__*/ Fn( ( [ uv ] ) => {\r\n\r\n\tconst a = 12.9898, b = 78.233, c = 43758.5453;\r\n\tconst dt = dot( uv.xy, vec2( a, b ) ), sn = mod( dt, PI );\r\n\r\n\treturn fract( sin( sn ).mul( c ) );\r\n\r\n} );\r\n\r\n/**\r\n * Alias for `mix()` with a different parameter order.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} t - The interpolation value.\r\n * @param {Node | number} e1 - The first parameter.\r\n * @param {Node | number} e2 - The second parameter.\r\n * @returns {Node}\r\n */\r\nexport const mixElement = ( t, e1, e2 ) => mix( e1, e2, t );\r\n\r\n/**\r\n * Alias for `smoothstep()` with a different parameter order.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The source value for interpolation.\r\n * @param {Node | number} low - The value of the lower edge of the Hermite function.\r\n * @param {Node | number} high - The value of the upper edge of the Hermite function.\r\n * @returns {Node}\r\n */\r\nexport const smoothstepElement = ( x, low, high ) => smoothstep( low, high, x );\r\n\r\n/**\r\n * Alias for `step()` with a different parameter order.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node | number} x - The source value for interpolation.\r\n * @param {Node | number} edge - The edge value.\r\n * @returns {Node}\r\n */\r\nexport const stepElement = ( x, edge ) => step( edge, x );\r\n\r\n/**\r\n * Returns the arc-tangent of the quotient of its parameters.\r\n *\r\n * @tsl\r\n * @function\r\n * @deprecated since r172. Use {@link atan} instead.\r\n *\r\n * @param {Node | number} y - The y parameter.\r\n * @param {Node | number} x - The x parameter.\r\n * @returns {Node}\r\n */\r\nexport const atan2 = ( y, x ) => { // @deprecated, r172\r\n\r\n\tconsole.warn( 'THREE.TSL: \"atan2\" is overloaded. Use \"atan\" instead.' );\r\n\treturn atan( y, x );\r\n\r\n};\r\n\r\n// GLSL alias function\r\n\r\nexport const faceforward = faceForward;\r\nexport const inversesqrt = inverseSqrt;\r\n\r\n// Method chaining\r\n\r\naddMethodChaining( 'all', all );\r\naddMethodChaining( 'any', any );\r\naddMethodChaining( 'equals', equals );\r\n\r\naddMethodChaining( 'radians', radians );\r\naddMethodChaining( 'degrees', degrees );\r\naddMethodChaining( 'exp', exp );\r\naddMethodChaining( 'exp2', exp2 );\r\naddMethodChaining( 'log', log );\r\naddMethodChaining( 'log2', log2 );\r\naddMethodChaining( 'sqrt', sqrt );\r\naddMethodChaining( 'inverseSqrt', inverseSqrt );\r\naddMethodChaining( 'floor', floor );\r\naddMethodChaining( 'ceil', ceil );\r\naddMethodChaining( 'normalize', normalize );\r\naddMethodChaining( 'fract', fract );\r\naddMethodChaining( 'sin', sin );\r\naddMethodChaining( 'cos', cos );\r\naddMethodChaining( 'tan', tan );\r\naddMethodChaining( 'asin', asin );\r\naddMethodChaining( 'acos', acos );\r\naddMethodChaining( 'atan', atan );\r\naddMethodChaining( 'abs', abs );\r\naddMethodChaining( 'sign', sign );\r\naddMethodChaining( 'length', length );\r\naddMethodChaining( 'lengthSq', lengthSq );\r\naddMethodChaining( 'negate', negate );\r\naddMethodChaining( 'oneMinus', oneMinus );\r\naddMethodChaining( 'dFdx', dFdx );\r\naddMethodChaining( 'dFdy', dFdy );\r\naddMethodChaining( 'round', round );\r\naddMethodChaining( 'reciprocal', reciprocal );\r\naddMethodChaining( 'trunc', trunc );\r\naddMethodChaining( 'fwidth', fwidth );\r\naddMethodChaining( 'atan2', atan2 );\r\naddMethodChaining( 'min', min );\r\naddMethodChaining( 'max', max );\r\naddMethodChaining( 'step', stepElement );\r\naddMethodChaining( 'reflect', reflect );\r\naddMethodChaining( 'distance', distance );\r\naddMethodChaining( 'dot', dot );\r\naddMethodChaining( 'cross', cross );\r\naddMethodChaining( 'pow', pow );\r\naddMethodChaining( 'pow2', pow2 );\r\naddMethodChaining( 'pow3', pow3 );\r\naddMethodChaining( 'pow4', pow4 );\r\naddMethodChaining( 'transformDirection', transformDirection );\r\naddMethodChaining( 'mix', mixElement );\r\naddMethodChaining( 'clamp', clamp );\r\naddMethodChaining( 'refract', refract );\r\naddMethodChaining( 'smoothstep', smoothstepElement );\r\naddMethodChaining( 'faceForward', faceForward );\r\naddMethodChaining( 'difference', difference );\r\naddMethodChaining( 'saturate', saturate );\r\naddMethodChaining( 'cbrt', cbrt );\r\naddMethodChaining( 'transpose', transpose );\r\naddMethodChaining( 'rand', rand );\r\n", "import Node from '../core/Node.js';\r\nimport { property } from '../core/PropertyNode.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * Represents a logical `if/else` statement. Can be used as an alternative\r\n * to the `If()`/`Else()` syntax.\r\n *\r\n * The corresponding TSL `select()` looks like so:\r\n * ```js\r\n * velocity = position.greaterThanEqual( limit ).select( velocity.negate(), velocity );\r\n * ```\r\n * The `select()` method is called in a chaining fashion on a condition. The parameter nodes of `select()`\r\n * determine the outcome of the entire statement.\r\n *\r\n * @augments Node\r\n */\r\nclass ConditionalNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ConditionalNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new conditional node.\r\n\t *\r\n\t * @param {Node} condNode - The node that defines the condition.\r\n\t * @param {Node} ifNode - The node that is evaluate when the condition ends up `true`.\r\n\t * @param {?Node} [elseNode=null] - The node that is evaluate when the condition ends up `false`.\r\n\t */\r\n\tconstructor( condNode, ifNode, elseNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node that defines the condition.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.condNode = condNode;\r\n\r\n\t\t/**\r\n\t\t * The node that is evaluate when the condition ends up `true`.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.ifNode = ifNode;\r\n\r\n\t\t/**\r\n\t\t * The node that is evaluate when the condition ends up `false`.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.elseNode = elseNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from the if/else\r\n\t * nodes.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst { ifNode, elseNode } = builder.getNodeProperties( this );\r\n\r\n\t\tif ( ifNode === undefined ) {\r\n\r\n\t\t\t// fallback setup\r\n\r\n\t\t\tthis.setup( builder );\r\n\r\n\t\t\treturn this.getNodeType( builder );\r\n\r\n\t\t}\r\n\r\n\t\tconst ifType = ifNode.getNodeType( builder );\r\n\r\n\t\tif ( elseNode !== null ) {\r\n\r\n\t\t\tconst elseType = elseNode.getNodeType( builder );\r\n\r\n\t\t\tif ( builder.getTypeLength( elseType ) > builder.getTypeLength( ifType ) ) {\r\n\r\n\t\t\t\treturn elseType;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn ifType;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst condNode = this.condNode.cache();\r\n\t\tconst ifNode = this.ifNode.cache();\r\n\t\tconst elseNode = this.elseNode ? this.elseNode.cache() : null;\r\n\r\n\t\t//\r\n\r\n\t\tconst currentNodeBlock = builder.context.nodeBlock;\r\n\r\n\t\tbuilder.getDataFromNode( ifNode ).parentNodeBlock = currentNodeBlock;\r\n\t\tif ( elseNode !== null ) builder.getDataFromNode( elseNode ).parentNodeBlock = currentNodeBlock;\r\n\r\n\t\t//\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.condNode = condNode;\r\n\t\tproperties.ifNode = ifNode.context( { nodeBlock: ifNode } );\r\n\t\tproperties.elseNode = elseNode ? elseNode.context( { nodeBlock: elseNode } ) : null;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\tif ( nodeData.nodeProperty !== undefined ) {\r\n\r\n\t\t\treturn nodeData.nodeProperty;\r\n\r\n\t\t}\r\n\r\n\t\tconst { condNode, ifNode, elseNode } = builder.getNodeProperties( this );\r\n\r\n\t\tconst functionNode = builder.currentFunctionNode;\r\n\t\tconst needsOutput = output !== 'void';\r\n\t\tconst nodeProperty = needsOutput ? property( type ).build( builder ) : '';\r\n\r\n\t\tnodeData.nodeProperty = nodeProperty;\r\n\r\n\t\tconst nodeSnippet = condNode.build( builder, 'bool' );\r\n\r\n\t\tbuilder.addFlowCode( `\\n${ builder.tab }if ( ${ nodeSnippet } ) {\\n\\n` ).addFlowTab();\r\n\r\n\t\tlet ifSnippet = ifNode.build( builder, type );\r\n\r\n\t\tif ( ifSnippet ) {\r\n\r\n\t\t\tif ( needsOutput ) {\r\n\r\n\t\t\t\tifSnippet = nodeProperty + ' = ' + ifSnippet + ';';\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tifSnippet = 'return ' + ifSnippet + ';';\r\n\r\n\t\t\t\tif ( functionNode === null ) {\r\n\r\n\t\t\t\t\tconsole.warn( 'THREE.TSL: Return statement used in an inline \\'Fn()\\'. Define a layout struct to allow return values.' );\r\n\r\n\t\t\t\t\tifSnippet = '// ' + ifSnippet;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.removeFlowTab().addFlowCode( builder.tab + '\\t' + ifSnippet + '\\n\\n' + builder.tab + '}' );\r\n\r\n\t\tif ( elseNode !== null ) {\r\n\r\n\t\t\tbuilder.addFlowCode( ' else {\\n\\n' ).addFlowTab();\r\n\r\n\t\t\tlet elseSnippet = elseNode.build( builder, type );\r\n\r\n\t\t\tif ( elseSnippet ) {\r\n\r\n\t\t\t\tif ( needsOutput ) {\r\n\r\n\t\t\t\t\telseSnippet = nodeProperty + ' = ' + elseSnippet + ';';\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\telseSnippet = 'return ' + elseSnippet + ';';\r\n\r\n\t\t\t\t\tif ( functionNode === null ) {\r\n\r\n\t\t\t\t\t\tconsole.warn( 'THREE.TSL: Return statement used in an inline \\'Fn()\\'. Define a layout struct to allow return values.' );\r\n\r\n\t\t\t\t\t\telseSnippet = '// ' + elseSnippet;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbuilder.removeFlowTab().addFlowCode( builder.tab + '\\t' + elseSnippet + '\\n\\n' + builder.tab + '}\\n\\n' );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbuilder.addFlowCode( '\\n\\n' );\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.format( nodeProperty, type, output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ConditionalNode;\r\n\r\n/**\r\n * TSL function for creating a conditional node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} condNode - The node that defines the condition.\r\n * @param {Node} ifNode - The node that is evaluate when the condition ends up `true`.\r\n * @param {?Node} [elseNode=null] - The node that is evaluate when the condition ends up `false`.\r\n * @returns {ConditionalNode}\r\n */\r\nexport const select = /*@__PURE__*/ nodeProxy( ConditionalNode ).setParameterLength( 2, 3 );\r\n\r\naddMethodChaining( 'select', select );\r\n", "import Node from './Node.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * This node can be used as a context management component for another node.\r\n * {@link NodeBuilder} performs its node building process in a specific context and\r\n * this node allows the modify the context. A typical use case is to overwrite `getUV()` e.g.:\r\n *\r\n * ```js\r\n *node.context( { getUV: () => customCoord } );\r\n *```\r\n * @augments Node\r\n */\r\nclass ContextNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ContextNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new context node.\r\n\t *\r\n\t * @param {Node} node - The node whose context should be modified.\r\n\t * @param {Object} [value={}] - The modified context data.\r\n\t */\r\n\tconstructor( node, value = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isContextNode = true;\r\n\r\n\t\t/**\r\n\t\t * The node whose context should be modified.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * The modified context data.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t * @default {}\r\n\t\t */\r\n\t\tthis.value = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten to ensure it returns the reference to {@link ContextNode#node}.\r\n\t *\r\n\t * @return {Node} A reference to {@link ContextNode#node}.\r\n\t */\r\n\tgetScope() {\r\n\r\n\t\treturn this.node.getScope();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten to ensure it returns the type of {@link ContextNode#node}.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tconst previousContext = builder.getContext();\r\n\r\n\t\tbuilder.setContext( { ...builder.context, ...this.value } );\r\n\r\n\t\tthis.node.build( builder );\r\n\r\n\t\tbuilder.setContext( previousContext );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst previousContext = builder.getContext();\r\n\r\n\t\tbuilder.setContext( { ...builder.context, ...this.value } );\r\n\r\n\t\tthis.node.build( builder );\r\n\r\n\t\tbuilder.setContext( previousContext );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst previousContext = builder.getContext();\r\n\r\n\t\tbuilder.setContext( { ...builder.context, ...this.value } );\r\n\r\n\t\tconst snippet = this.node.build( builder, output );\r\n\r\n\t\tbuilder.setContext( previousContext );\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ContextNode;\r\n\r\n/**\r\n * TSL function for creating a context node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node whose context should be modified.\r\n * @param {Object} [value={}] - The modified context data.\r\n * @returns {ContextNode}\r\n */\r\nexport const context = /*@__PURE__*/ nodeProxy( ContextNode ).setParameterLength( 1, 2 );\r\n\r\n/**\r\n * TSL function for defining a label context value for a given node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node whose context should be modified.\r\n * @param {string} name - The name/label to set.\r\n * @returns {ContextNode}\r\n */\r\nexport const label = ( node, name ) => context( node, { label: name } );\r\n\r\naddMethodChaining( 'context', context );\r\naddMethodChaining( 'label', label );\r\n", "import Node from './Node.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * Class for representing shader variables as nodes. Variables are created from\r\n * existing nodes like the following:\r\n *\r\n * ```js\r\n * const depth = sampleDepth( uvNode ).toVar( 'depth' );\r\n * ```\r\n *\r\n * @augments Node\r\n */\r\nclass VarNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'VarNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new variable node.\r\n\t *\r\n\t * @param {Node} node - The node for which a variable should be created.\r\n\t * @param {?string} [name=null] - The name of the variable in the shader.\r\n\t * @param {boolean} [readOnly=false] - The read-only flag.\r\n\t */\r\n\tconstructor( node, name = null, readOnly = false ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node for which a variable should be created.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * The name of the variable in the shader. If no name is defined,\r\n\t\t * the node system auto-generates one.\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.name = name;\r\n\r\n\t\t/**\r\n\t\t * `VarNode` sets this property to `true` by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.global = true;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isVarNode = true;\r\n\r\n\t\t/**\r\n\t\t *\r\n\t\t * The read-only flag.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.readOnly = readOnly;\r\n\r\n\t\t/**\r\n\t\t *\r\n\t\t * Add this flag to the node system to indicate that this node require parents.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.parents = true;\r\n\r\n\t}\r\n\r\n\tgetMemberType( builder, name ) {\r\n\r\n\t\treturn this.node.getMemberType( builder, name );\r\n\r\n\t}\r\n\r\n\tgetElementType( builder ) {\r\n\r\n\t\treturn this.node.getElementType( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { node, name, readOnly } = this;\r\n\t\tconst { renderer } = builder;\r\n\r\n\t\tconst isWebGPUBackend = renderer.backend.isWebGPUBackend === true;\r\n\r\n\t\tlet isDeterministic = false;\r\n\t\tlet shouldTreatAsReadOnly = false;\r\n\r\n\t\tif ( readOnly ) {\r\n\r\n\t\t\tisDeterministic = builder.isDeterministic( node );\r\n\r\n\t\t\tshouldTreatAsReadOnly = isWebGPUBackend ? readOnly : isDeterministic;\r\n\r\n\t\t}\r\n\r\n\t\tconst vectorType = builder.getVectorType( this.getNodeType( builder ) );\r\n\t\tconst snippet = node.build( builder, vectorType );\r\n\r\n\t\tconst nodeVar = builder.getVarFromNode( this, name, vectorType, undefined, shouldTreatAsReadOnly );\r\n\r\n\t\tconst propertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\tlet declarationPrefix = propertyName;\r\n\r\n\t\tif ( shouldTreatAsReadOnly ) {\r\n\r\n\t\t\tif ( isWebGPUBackend ) {\r\n\r\n\t\t\t\tdeclarationPrefix = isDeterministic\r\n\t\t\t\t\t? `const ${ propertyName }`\r\n\t\t\t\t\t: `let ${ propertyName }`;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst count = builder.getArrayCount( node );\r\n\r\n\t\t\t\tdeclarationPrefix = `const ${ builder.getVar( nodeVar.type, propertyName, count ) }`;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.addLineFlowCode( `${ declarationPrefix } = ${ snippet }`, this );\r\n\r\n\t\treturn propertyName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VarNode;\r\n\r\n/**\r\n * TSL function for creating a var node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node for which a variable should be created.\r\n * @param {?string} name - The name of the variable in the shader.\r\n * @returns {VarNode}\r\n */\r\nconst createVar = /*@__PURE__*/ nodeProxy( VarNode );\r\n\r\n/**\r\n * TSL function for creating a var node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node for which a variable should be created.\r\n * @param {?string} name - The name of the variable in the shader.\r\n * @returns {VarNode}\r\n */\r\nexport const Var = ( node, name = null ) => createVar( node, name ).toStack();\r\n\r\n/**\r\n * TSL function for creating a const node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node for which a constant should be created.\r\n * @param {?string} name - The name of the constant in the shader.\r\n * @returns {VarNode}\r\n */\r\nexport const Const = ( node, name = null ) => createVar( node, name, true ).toStack();\r\n\r\n// Method chaining\r\n\r\naddMethodChaining( 'toVar', Var );\r\naddMethodChaining( 'toConst', Const );\r\n\r\n// Deprecated\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r170. Use `Var( node )` or `node.toVar()` instead.\r\n *\r\n * @param {any} node\r\n * @returns {VarNode}\r\n */\r\nexport const temp = ( node ) => { // @deprecated, r170\r\n\r\n\tconsole.warn( 'TSL: \"temp( node )\" is deprecated. Use \"Var( node )\" or \"node.toVar()\" instead.' );\r\n\r\n\treturn createVar( node );\r\n\r\n};\r\n\r\naddMethodChaining( 'temp', temp );\r\n\r\n", "import Node from './Node.js';\r\nimport { nodeObject } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * This node is used to build a sub-build in the node system.\r\n *\r\n * @augments Node\r\n * @param {Node} node - The node to be built in the sub-build.\r\n * @param {string} name - The name of the sub-build.\r\n * @param {string|null} [nodeType=null] - The type of the node, if known.\r\n */\r\nclass SubBuildNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SubBuild';\r\n\r\n\t}\r\n\r\n\tconstructor( node, name, nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\t/**\r\n\t\t * The node to be built in the sub-build.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * The name of the sub-build.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.name = name;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isSubBuildNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.nodeType !== null ) return this.nodeType;\r\n\r\n\t\tbuilder.addSubBuild( this.name );\r\n\r\n\t\tconst nodeType = this.node.getNodeType( builder );\r\n\r\n\t\tbuilder.removeSubBuild();\r\n\r\n\t\treturn nodeType;\r\n\r\n\t}\r\n\r\n\tbuild( builder, ...params ) {\r\n\r\n\t\tbuilder.addSubBuild( this.name );\r\n\r\n\t\tconst data = this.node.build( builder, ...params );\r\n\r\n\t\tbuilder.removeSubBuild();\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SubBuildNode;\r\n\r\n/**\r\n * Creates a new sub-build node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node to be built in the sub-build.\r\n * @param {string} name - The name of the sub-build.\r\n * @param {string|null} [type=null] - The type of the node, if known.\r\n * @returns {Node} A node object wrapping the SubBuildNode instance.\r\n */\r\nexport const subBuild = ( node, name, type = null ) => nodeObject( new SubBuildNode( nodeObject( node ), name, type ) );\r\n", "import Node from './Node.js';\r\nimport { NodeShaderStage } from './constants.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\nimport { subBuild } from './SubBuildNode.js';\r\n\r\n/**\r\n * Class for representing shader varyings as nodes. Varyings are create from\r\n * existing nodes like the following:\r\n *\r\n * ```js\r\n * const positionLocal = positionGeometry.toVarying( 'vPositionLocal' );\r\n * ```\r\n *\r\n * @augments Node\r\n */\r\nclass VaryingNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'VaryingNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new varying node.\r\n\t *\r\n\t * @param {Node} node - The node for which a varying should be created.\r\n\t * @param {?string} name - The name of the varying in the shader.\r\n\t */\r\n\tconstructor( node, name = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node for which a varying should be created.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * The name of the varying in the shader. If no name is defined,\r\n\t\t * the node system auto-generates one.\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.name = name;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isVaryingNode = true;\r\n\r\n\t\t/**\r\n\t\t * The interpolation type of the varying data.\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.interpolationType = null;\r\n\r\n\t\t/**\r\n\t\t * The interpolation sampling type of varying data.\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.interpolationSampling = null;\r\n\r\n\t\t/**\r\n\t\t * This flag is used for global cache.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.global = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the interpolation type of the varying.\r\n\t *\r\n\t * @param {string} type - The interpolation type.\r\n\t * @param {?string} sampling - The interpolation sampling type\r\n\t * @return {VaryingNode} A reference to this node.\r\n\t */\r\n\tsetInterpolation( type, sampling = null ) {\r\n\r\n\t\tthis.interpolationType = type;\r\n\t\tthis.interpolationSampling = sampling;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.name || super.getHash( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\t// VaryingNode is auto type\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method performs the setup of a varying node with the current node builder.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {NodeVarying} The node varying from the node builder.\r\n\t */\r\n\tsetupVarying( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tlet varying = properties.varying;\r\n\r\n\t\tif ( varying === undefined ) {\r\n\r\n\t\t\tconst name = this.name;\r\n\t\t\tconst type = this.getNodeType( builder );\r\n\t\t\tconst interpolationType = this.interpolationType;\r\n\t\t\tconst interpolationSampling = this.interpolationSampling;\r\n\r\n\t\t\tproperties.varying = varying = builder.getVaryingFromNode( this, name, type, interpolationType, interpolationSampling );\r\n\t\t\tproperties.node = subBuild( this.node, 'VERTEX' );\r\n\r\n\t\t}\r\n\r\n\t\t// this property can be used to check if the varying can be optimized for a variable\r\n\t\tvarying.needsInterpolation || ( varying.needsInterpolation = ( builder.shaderStage === 'fragment' ) );\r\n\r\n\t\treturn varying;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.setupVarying( builder );\r\n\r\n\t\tbuilder.flowNodeFromShaderStage( NodeShaderStage.VERTEX, this.node );\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\tthis.setupVarying( builder );\r\n\r\n\t\tbuilder.flowNodeFromShaderStage( NodeShaderStage.VERTEX, this.node );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst propertyKey = builder.getSubBuildProperty( 'property', builder.currentStack );\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tconst varying = this.setupVarying( builder );\r\n\r\n\t\tif ( properties[ propertyKey ] === undefined ) {\r\n\r\n\t\t\tconst type = this.getNodeType( builder );\r\n\t\t\tconst propertyName = builder.getPropertyName( varying, NodeShaderStage.VERTEX );\r\n\r\n\t\t\t// force node run in vertex stage\r\n\t\t\tbuilder.flowNodeFromShaderStage( NodeShaderStage.VERTEX, properties.node, type, propertyName );\r\n\r\n\t\t\tproperties[ propertyKey ] = propertyName;\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getPropertyName( varying );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VaryingNode;\r\n\r\n/**\r\n * TSL function for creating a varying node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node for which a varying should be created.\r\n * @param {?string} name - The name of the varying in the shader.\r\n * @returns {VaryingNode}\r\n */\r\nexport const varying = /*@__PURE__*/ nodeProxy( VaryingNode ).setParameterLength( 1, 2 );\r\n\r\n/**\r\n * Computes a node in the vertex stage.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node which should be executed in the vertex stage.\r\n * @returns {VaryingNode}\r\n */\r\nexport const vertexStage = ( node ) => varying( node );\r\n\r\naddMethodChaining( 'toVarying', varying );\r\naddMethodChaining( 'toVertexStage', vertexStage );\r\n\r\n// Deprecated\r\n\r\naddMethodChaining( 'varying', ( ...params ) => { // @deprecated, r173\r\n\r\n\tconsole.warn( 'THREE.TSL: .varying() has been renamed to .toVarying().' );\r\n\treturn varying( ...params );\r\n\r\n} );\r\n\r\naddMethodChaining( 'vertexStage', ( ...params ) => { // @deprecated, r173\r\n\r\n\tconsole.warn( 'THREE.TSL: .vertexStage() has been renamed to .toVertexStage().' );\r\n\treturn varying( ...params );\r\n\r\n} );\r\n", "import { mix } from '../math/MathNode.js';\r\nimport { Fn } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * Converts the given color value from sRGB to linear-sRGB color space.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The sRGB color.\r\n * @return {Node<vec3>} The linear-sRGB color.\r\n */\r\nexport const sRGBTransferEOTF = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\tconst a = color.mul( 0.9478672986 ).add( 0.0521327014 ).pow( 2.4 );\r\n\tconst b = color.mul( 0.0773993808 );\r\n\tconst factor = color.lessThanEqual( 0.04045 );\r\n\r\n\tconst rgbResult = mix( a, b, factor );\r\n\r\n\treturn rgbResult;\r\n\r\n} ).setLayout( {\r\n\tname: 'sRGBTransferEOTF',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n/**\r\n * Converts the given color value from linear-sRGB to sRGB color space.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The linear-sRGB color.\r\n * @return {Node<vec3>} The sRGB color.\r\n */\r\nexport const sRGBTransferOETF = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\tconst a = color.pow( 0.41666 ).mul( 1.055 ).sub( 0.055 );\r\n\tconst b = color.mul( 12.92 );\r\n\tconst factor = color.lessThanEqual( 0.0031308 );\r\n\r\n\tconst rgbResult = mix( a, b, factor );\r\n\r\n\treturn rgbResult;\r\n\r\n} ).setLayout( {\r\n\tname: 'sRGBTransferOETF',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' }\r\n\t]\r\n} );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, mat3, nodeObject, vec4 } from '../tsl/TSLCore.js';\r\n\r\nimport { SRGBTransfer } from '../../constants.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\nimport { sRGBTransferEOTF, sRGBTransferOETF } from './ColorSpaceFunctions.js';\r\nimport { Matrix3 } from '../../math/Matrix3.js';\r\n\r\nconst WORKING_COLOR_SPACE = 'WorkingColorSpace';\r\nconst OUTPUT_COLOR_SPACE = 'OutputColorSpace';\r\n\r\n/**\r\n * This node represents a color space conversion. Meaning it converts\r\n * a color value from a source to a target color space.\r\n *\r\n * @augments TempNode\r\n */\r\nclass ColorSpaceNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ColorSpaceNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new color space node.\r\n\t *\r\n\t * @param {Node} colorNode - Represents the color to convert.\r\n\t * @param {string} source - The source color space.\r\n\t * @param {string} target - The target color space.\r\n\t */\r\n\tconstructor( colorNode, source, target ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\t/**\r\n\t\t * Represents the color to convert.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.colorNode = colorNode;\r\n\r\n\t\t/**\r\n\t\t * The source color space.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.source = source;\r\n\r\n\t\t/**\r\n\t\t * The target color space.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.target = target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method resolves the constants `WORKING_COLOR_SPACE` and\r\n\t * `OUTPUT_COLOR_SPACE` based on the current configuration of the\r\n\t * color management and renderer.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {string} colorSpace - The color space to resolve.\r\n\t * @return {string} The resolved color space.\r\n\t */\r\n\tresolveColorSpace( builder, colorSpace ) {\r\n\r\n\t\tif ( colorSpace === WORKING_COLOR_SPACE ) {\r\n\r\n\t\t\treturn ColorManagement.workingColorSpace;\r\n\r\n\t\t} else if ( colorSpace === OUTPUT_COLOR_SPACE ) {\r\n\r\n\t\t\treturn builder.context.outputColorSpace || builder.renderer.outputColorSpace;\r\n\r\n\t\t}\r\n\r\n\t\treturn colorSpace;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { colorNode } = this;\r\n\r\n\t\tconst source = this.resolveColorSpace( builder, this.source );\r\n\t\tconst target = this.resolveColorSpace( builder, this.target );\r\n\r\n\t\tlet outputNode = colorNode;\r\n\r\n\t\tif ( ColorManagement.enabled === false || source === target || ! source || ! target ) {\r\n\r\n\t\t\treturn outputNode;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ColorManagement.getTransfer( source ) === SRGBTransfer ) {\r\n\r\n\t\t\toutputNode = vec4( sRGBTransferEOTF( outputNode.rgb ), outputNode.a );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ColorManagement.getPrimaries( source ) !== ColorManagement.getPrimaries( target ) ) {\r\n\r\n\t\t\toutputNode = vec4(\r\n\t\t\t\tmat3( ColorManagement._getMatrix( new Matrix3(), source, target ) ).mul( outputNode.rgb ),\r\n\t\t\t\toutputNode.a\r\n\t\t\t);\r\n\r\n\t\t}\r\n\r\n\t\tif ( ColorManagement.getTransfer( target ) === SRGBTransfer ) {\r\n\r\n\t\t\toutputNode = vec4( sRGBTransferOETF( outputNode.rgb ), outputNode.a );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ColorSpaceNode;\r\n\r\n/**\r\n * TSL function for converting a given color node from the current working color space to the given color space.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - Represents the node to convert.\r\n * @param {string} targetColorSpace - The target color space.\r\n * @returns {ColorSpaceNode}\r\n */\r\nexport const workingToColorSpace = ( node, targetColorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), WORKING_COLOR_SPACE, targetColorSpace ) );\r\n\r\n/**\r\n * TSL function for converting a given color node from the given color space to the current working color space.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - Represents the node to convert.\r\n * @param {string} sourceColorSpace - The source color space.\r\n * @returns {ColorSpaceNode}\r\n */\r\nexport const colorSpaceToWorking = ( node, sourceColorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), sourceColorSpace, WORKING_COLOR_SPACE ) );\r\n\r\n/**\r\n * TSL function for converting a given color node from one color space to another one.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - Represents the node to convert.\r\n * @param {string} sourceColorSpace - The source color space.\r\n * @param {string} targetColorSpace - The target color space.\r\n * @returns {ColorSpaceNode}\r\n */\r\nexport const convertColorSpace = ( node, sourceColorSpace, targetColorSpace ) => nodeObject( new ColorSpaceNode( nodeObject( node ), sourceColorSpace, targetColorSpace ) );\r\n\r\naddMethodChaining( 'workingToColorSpace', workingToColorSpace );\r\naddMethodChaining( 'colorSpaceToWorking', colorSpaceToWorking );\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { nodeObject } from '../tsl/TSLCore.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\n\r\n// TODO: Avoid duplicated code and ues only ReferenceBaseNode or ReferenceNode\r\n\r\n/**\r\n * This class is only relevant if the referenced property is array-like.\r\n * In this case, `ReferenceElementNode` allows to refer to a specific\r\n * element inside the data structure via an index.\r\n *\r\n * @augments ArrayElementNode\r\n */\r\nclass ReferenceElementNode extends ArrayElementNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReferenceElementNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new reference element node.\r\n\t *\r\n\t * @param {ReferenceBaseNode} referenceNode - The reference node.\r\n\t * @param {Node} indexNode - The index node that defines the element access.\r\n\t */\r\n\tconstructor( referenceNode, indexNode ) {\r\n\r\n\t\tsuper( referenceNode, indexNode );\r\n\r\n\t\t/**\r\n\t\t * Similar to {@link ReferenceBaseNode#reference}, an additional\r\n\t\t * property references to the current node.\r\n\t\t *\r\n\t\t * @type {?ReferenceBaseNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.referenceNode = referenceNode;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isReferenceElementNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from\r\n\t * the uniform type of the reference node.\r\n\t *\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType() {\r\n\r\n\t\treturn this.referenceNode.uniformType;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = super.generate( builder );\r\n\t\tconst arrayType = this.referenceNode.getNodeType();\r\n\t\tconst elementType = this.getNodeType();\r\n\r\n\t\treturn builder.format( snippet, arrayType, elementType );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Base class for nodes which establishes a reference to a property of another object.\r\n * In this way, the value of the node is automatically linked to the value of\r\n * referenced object. Reference nodes internally represent the linked value\r\n * as a uniform.\r\n *\r\n * @augments Node\r\n */\r\nclass ReferenceBaseNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReferenceBaseNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new reference base node.\r\n\t *\r\n\t * @param {string} property - The name of the property the node refers to.\r\n\t * @param {string} uniformType - The uniform type that should be used to represent the property value.\r\n\t * @param {?Object} [object=null] - The object the property belongs to.\r\n\t * @param {?number} [count=null] - When the linked property is an array-like, this parameter defines its length.\r\n\t */\r\n\tconstructor( property, uniformType, object = null, count = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The name of the property the node refers to.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.property = property;\r\n\r\n\t\t/**\r\n\t\t * The uniform type that should be used to represent the property value.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.uniformType = uniformType;\r\n\r\n\t\t/**\r\n\t\t * The object the property belongs to.\r\n\t\t *\r\n\t\t * @type {?Object}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.object = object;\r\n\r\n\t\t/**\r\n\t\t * When the linked property is an array, this parameter defines its length.\r\n\t\t *\r\n\t\t * @type {?number}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.count = count;\r\n\r\n\t\t/**\r\n\t\t * The property name might have dots so nested properties can be referred.\r\n\t\t * The hierarchy of the names is stored inside this array.\r\n\t\t *\r\n\t\t * @type {Array<string>}\r\n\t\t */\r\n\t\tthis.properties = property.split( '.' );\r\n\r\n\t\t/**\r\n\t\t * Points to the current referred object. This property exists next to {@link ReferenceNode#object}\r\n\t\t * since the final reference might be updated from calling code.\r\n\t\t *\r\n\t\t * @type {?Object}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.reference = object;\r\n\r\n\t\t/**\r\n\t\t * The uniform node that holds the value of the reference node.\r\n\t\t *\r\n\t\t * @type {UniformNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.node = null;\r\n\r\n\t\t/**\r\n\t\t * The uniform group of the internal uniform.\r\n\t\t *\r\n\t\t * @type {UniformGroupNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.group = null;\r\n\r\n\t\t/**\r\n\t\t * Overwritten since reference nodes are updated per object.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'object'\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the uniform group for this reference node.\r\n\t *\r\n\t * @param {UniformGroupNode} group - The uniform group to set.\r\n\t * @return {ReferenceBaseNode} A reference to this node.\r\n\t */\r\n\tsetGroup( group ) {\r\n\r\n\t\tthis.group = group;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * When the referred property is array-like, this method can be used\r\n\t * to access elements via an index node.\r\n\t *\r\n\t * @param {IndexNode} indexNode - indexNode.\r\n\t * @return {ReferenceElementNode} A reference to an element.\r\n\t */\r\n\telement( indexNode ) {\r\n\r\n\t\treturn nodeObject( new ReferenceElementNode( this, nodeObject( indexNode ) ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the node type which automatically defines the internal\r\n\t * uniform type.\r\n\t *\r\n\t * @param {string} uniformType - The type to set.\r\n\t */\r\n\tsetNodeType( uniformType ) {\r\n\r\n\t\tconst node = uniform( null, uniformType ).getSelf();\r\n\r\n\t\tif ( this.group !== null ) {\r\n\r\n\t\t\tnode.setGroup( this.group );\r\n\r\n\t\t}\r\n\r\n\t\tthis.node = node;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from\r\n\t * the type of the reference node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.node === null ) {\r\n\r\n\t\t\tthis.updateReference( builder );\r\n\t\t\tthis.updateValue();\r\n\r\n\t\t}\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the property value from the given referred object.\r\n\t *\r\n\t * @param {Object} [object=this.reference] - The object to retrieve the property value from.\r\n\t * @return {any} The value.\r\n\t */\r\n\tgetValueFromReference( object = this.reference ) {\r\n\r\n\t\tconst { properties } = this;\r\n\r\n\t\tlet value = object[ properties[ 0 ] ];\r\n\r\n\t\tfor ( let i = 1; i < properties.length; i ++ ) {\r\n\r\n\t\t\tvalue = value[ properties[ i ] ];\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Allows to update the reference based on the given state. The state is only\r\n\t * evaluated {@link ReferenceBaseNode#object} is not set.\r\n\t *\r\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state.\r\n\t * @return {Object} The updated reference.\r\n\t */\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.object !== null ? this.object : state.object;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The output of the reference node is the internal uniform node.\r\n\t *\r\n\t * @return {UniformNode} The output node.\r\n\t */\r\n\tsetup() {\r\n\r\n\t\tthis.updateValue();\r\n\r\n\t\treturn this.node;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten to update the internal uniform value.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tthis.updateValue();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the value from the referred object property and uses it\r\n\t * to updated the internal uniform.\r\n\t */\r\n\tupdateValue() {\r\n\r\n\t\tif ( this.node === null ) this.setNodeType( this.uniformType );\r\n\r\n\t\tconst value = this.getValueFromReference();\r\n\r\n\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\tthis.node.array = value;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.node.value = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ReferenceBaseNode;\r\n\r\n/**\r\n * TSL function for creating a reference base node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The name of the property the node refers to.\r\n * @param {string} type - The uniform type that should be used to represent the property value.\r\n * @param {Object} object - The object the property belongs to.\r\n * @returns {ReferenceBaseNode}\r\n */\r\nexport const reference = ( name, type, object ) => nodeObject( new ReferenceBaseNode( name, type, object ) );\r\n\r\n/**\r\n * TSL function for creating a reference base node. Use this function if you want need a reference\r\n * to an array-like property that should be represented as a uniform buffer.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The name of the property the node refers to.\r\n * @param {string} type - The uniform type that should be used to represent the property value.\r\n * @param {number} count - The number of value inside the array-like object.\r\n * @param {Object} [object] - An array-like object the property belongs to.\r\n * @returns {ReferenceBaseNode}\r\n */\r\nexport const referenceBuffer = ( name, type, count, object ) => nodeObject( new ReferenceBaseNode( name, type, object, count ) );\r\n", "import ReferenceBaseNode from './ReferenceBaseNode.js';\r\nimport { nodeObject } from '../tsl/TSLCore.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\n\r\n/**\r\n * This node is a special type of reference node which is intended\r\n * for linking renderer properties with node values.\r\n * ```js\r\n * const exposureNode = rendererReference( 'toneMappingExposure', 'float', renderer );\r\n * ```\r\n * When changing `renderer.toneMappingExposure`, the node value of `exposureNode` will\r\n * automatically be updated.\r\n *\r\n * @augments ReferenceBaseNode\r\n */\r\nclass RendererReferenceNode extends ReferenceBaseNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RendererReferenceNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new renderer reference node.\r\n\t *\r\n\t * @param {string} property - The name of the property the node refers to.\r\n\t * @param {string} inputType - The uniform type that should be used to represent the property value.\r\n\t * @param {?Renderer} [renderer=null] - The renderer the property belongs to. When no renderer is set,\r\n\t * the node refers to the renderer of the current state.\r\n\t */\r\n\tconstructor( property, inputType, renderer = null ) {\r\n\r\n\t\tsuper( property, inputType, renderer );\r\n\r\n\t\t/**\r\n\t\t * The renderer the property belongs to. When no renderer is set,\r\n\t\t * the node refers to the renderer of the current state.\r\n\t\t *\r\n\t\t * @type {?Renderer}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.renderer = renderer;\r\n\r\n\t\tthis.setGroup( renderGroup );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the reference based on the given state. The state is only evaluated\r\n\t * {@link RendererReferenceNode#renderer} is not set.\r\n\t *\r\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state.\r\n\t * @return {Object} The updated reference.\r\n\t */\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.renderer !== null ? this.renderer : state.renderer;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RendererReferenceNode;\r\n\r\n/**\r\n * TSL function for creating a renderer reference node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The name of the property the node refers to.\r\n * @param {string} type - The uniform type that should be used to represent the property value.\r\n * @param {?Renderer} [renderer=null] - The renderer the property belongs to. When no renderer is set,\r\n * the node refers to the renderer of the current state.\r\n * @returns {RendererReferenceNode}\r\n */\r\nexport const rendererReference = ( name, type, renderer = null ) => nodeObject( new RendererReferenceNode( name, type, renderer ) );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeObject, vec4 } from '../tsl/TSLCore.js';\r\nimport { rendererReference } from '../accessors/RendererReferenceNode.js';\r\n\r\nimport { NoToneMapping } from '../../constants.js';\r\nimport { hash } from '../core/NodeUtils.js';\r\n\r\n/**\r\n * This node represents a tone mapping operation.\r\n *\r\n * @augments TempNode\r\n */\r\nclass ToneMappingNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ToneMappingNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new tone mapping node.\r\n\t *\r\n\t * @param {number} toneMapping - The tone mapping type.\r\n\t * @param {Node} exposureNode - The tone mapping exposure.\r\n\t * @param {Node} [colorNode=null] - The color node to process.\r\n\t */\r\n\tconstructor( toneMapping, exposureNode = toneMappingExposure, colorNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\t/**\r\n\t\t * The tone mapping type.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.toneMapping = toneMapping;\r\n\r\n\t\t/**\r\n\t\t * The tone mapping exposure.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.exposureNode = exposureNode;\r\n\r\n\t\t/**\r\n\t\t * Represents the color to process.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.colorNode = colorNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default `customCacheKey()` implementation by including the tone\r\n\t * mapping type into the cache key.\r\n\t *\r\n\t * @return {number} The hash.\r\n\t */\r\n\tcustomCacheKey() {\r\n\r\n\t\treturn hash( this.toneMapping );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst colorNode = this.colorNode || builder.context.color;\r\n\t\tconst toneMapping = this.toneMapping;\r\n\r\n\t\tif ( toneMapping === NoToneMapping ) return colorNode;\r\n\r\n\t\tlet outputNode = null;\r\n\r\n\t\tconst toneMappingFn = builder.renderer.library.getToneMappingFunction( toneMapping );\r\n\r\n\t\tif ( toneMappingFn !== null ) {\r\n\r\n\t\t\toutputNode = vec4( toneMappingFn( colorNode.rgb, this.exposureNode ), colorNode.a );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'ToneMappingNode: Unsupported Tone Mapping configuration.', toneMapping );\r\n\r\n\t\t\toutputNode = colorNode;\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ToneMappingNode;\r\n\r\n/**\r\n * TSL function for creating a tone mapping node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {number} mapping - The tone mapping type.\r\n * @param {Node<float> | number} exposure - The tone mapping exposure.\r\n * @param {Node<vec3> | Color} color - The color node to process.\r\n * @returns {ToneMappingNode<vec3>}\r\n */\r\nexport const toneMapping = ( mapping, exposure, color ) => nodeObject( new ToneMappingNode( mapping, nodeObject( exposure ), nodeObject( color ) ) );\r\n\r\n/**\r\n * TSL object that represents the global tone mapping exposure of the renderer.\r\n *\r\n * @tsl\r\n * @type {RendererReferenceNode<vec3>}\r\n */\r\nexport const toneMappingExposure = /*@__PURE__*/ rendererReference( 'toneMappingExposure', 'float' );\r\n\r\naddMethodChaining( 'toneMapping', ( color, mapping, exposure ) => toneMapping( mapping, exposure, color ) );\r\n", "import { clamp } from '../math/MathUtils.js';\r\n\r\n// Fast Half Float Conversions, http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\r\n\r\nconst _tables = /*@__PURE__*/ _generateTables();\r\n\r\nfunction _generateTables() {\r\n\r\n\t// float32 to float16 helpers\r\n\r\n\tconst buffer = new ArrayBuffer( 4 );\r\n\tconst floatView = new Float32Array( buffer );\r\n\tconst uint32View = new Uint32Array( buffer );\r\n\r\n\tconst baseTable = new Uint32Array( 512 );\r\n\tconst shiftTable = new Uint32Array( 512 );\r\n\r\n\tfor ( let i = 0; i < 256; ++ i ) {\r\n\r\n\t\tconst e = i - 127;\r\n\r\n\t\t// very small number (0, -0)\r\n\r\n\t\tif ( e < - 27 ) {\r\n\r\n\t\t\tbaseTable[ i ] = 0x0000;\r\n\t\t\tbaseTable[ i | 0x100 ] = 0x8000;\r\n\t\t\tshiftTable[ i ] = 24;\r\n\t\t\tshiftTable[ i | 0x100 ] = 24;\r\n\r\n\t\t\t// small number (denorm)\r\n\r\n\t\t} else if ( e < - 14 ) {\r\n\r\n\t\t\tbaseTable[ i ] = 0x0400 >> ( - e - 14 );\r\n\t\t\tbaseTable[ i | 0x100 ] = ( 0x0400 >> ( - e - 14 ) ) | 0x8000;\r\n\t\t\tshiftTable[ i ] = - e - 1;\r\n\t\t\tshiftTable[ i | 0x100 ] = - e - 1;\r\n\r\n\t\t\t// normal number\r\n\r\n\t\t} else if ( e <= 15 ) {\r\n\r\n\t\t\tbaseTable[ i ] = ( e + 15 ) << 10;\r\n\t\t\tbaseTable[ i | 0x100 ] = ( ( e + 15 ) << 10 ) | 0x8000;\r\n\t\t\tshiftTable[ i ] = 13;\r\n\t\t\tshiftTable[ i | 0x100 ] = 13;\r\n\r\n\t\t\t// large number (Infinity, -Infinity)\r\n\r\n\t\t} else if ( e < 128 ) {\r\n\r\n\t\t\tbaseTable[ i ] = 0x7c00;\r\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\r\n\t\t\tshiftTable[ i ] = 24;\r\n\t\t\tshiftTable[ i | 0x100 ] = 24;\r\n\r\n\t\t\t// stay (NaN, Infinity, -Infinity)\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbaseTable[ i ] = 0x7c00;\r\n\t\t\tbaseTable[ i | 0x100 ] = 0xfc00;\r\n\t\t\tshiftTable[ i ] = 13;\r\n\t\t\tshiftTable[ i | 0x100 ] = 13;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// float16 to float32 helpers\r\n\r\n\tconst mantissaTable = new Uint32Array( 2048 );\r\n\tconst exponentTable = new Uint32Array( 64 );\r\n\tconst offsetTable = new Uint32Array( 64 );\r\n\r\n\tfor ( let i = 1; i < 1024; ++ i ) {\r\n\r\n\t\tlet m = i << 13; // zero pad mantissa bits\r\n\t\tlet e = 0; // zero exponent\r\n\r\n\t\t// normalized\r\n\t\twhile ( ( m & 0x00800000 ) === 0 ) {\r\n\r\n\t\t\tm <<= 1;\r\n\t\t\te -= 0x00800000; // decrement exponent\r\n\r\n\t\t}\r\n\r\n\t\tm &= ~ 0x00800000; // clear leading 1 bit\r\n\t\te += 0x38800000; // adjust bias\r\n\r\n\t\tmantissaTable[ i ] = m | e;\r\n\r\n\t}\r\n\r\n\tfor ( let i = 1024; i < 2048; ++ i ) {\r\n\r\n\t\tmantissaTable[ i ] = 0x38000000 + ( ( i - 1024 ) << 13 );\r\n\r\n\t}\r\n\r\n\tfor ( let i = 1; i < 31; ++ i ) {\r\n\r\n\t\texponentTable[ i ] = i << 23;\r\n\r\n\t}\r\n\r\n\texponentTable[ 31 ] = 0x47800000;\r\n\texponentTable[ 32 ] = 0x80000000;\r\n\r\n\tfor ( let i = 33; i < 63; ++ i ) {\r\n\r\n\t\texponentTable[ i ] = 0x80000000 + ( ( i - 32 ) << 23 );\r\n\r\n\t}\r\n\r\n\texponentTable[ 63 ] = 0xc7800000;\r\n\r\n\tfor ( let i = 1; i < 64; ++ i ) {\r\n\r\n\t\tif ( i !== 32 ) {\r\n\r\n\t\t\toffsetTable[ i ] = 1024;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn {\r\n\t\tfloatView: floatView,\r\n\t\tuint32View: uint32View,\r\n\t\tbaseTable: baseTable,\r\n\t\tshiftTable: shiftTable,\r\n\t\tmantissaTable: mantissaTable,\r\n\t\texponentTable: exponentTable,\r\n\t\toffsetTable: offsetTable\r\n\t};\r\n\r\n}\r\n\r\n/**\r\n * Returns a half precision floating point value (FP16) from the given single\r\n * precision floating point value (FP32).\r\n *\r\n * @param {number} val - A single precision floating point value.\r\n * @return {number} The FP16 value.\r\n */\r\nfunction toHalfFloat( val ) {\r\n\r\n\tif ( Math.abs( val ) > 65504 ) console.warn( 'THREE.DataUtils.toHalfFloat(): Value out of range.' );\r\n\r\n\tval = clamp( val, - 65504, 65504 );\r\n\r\n\t_tables.floatView[ 0 ] = val;\r\n\tconst f = _tables.uint32View[ 0 ];\r\n\tconst e = ( f >> 23 ) & 0x1ff;\r\n\treturn _tables.baseTable[ e ] + ( ( f & 0x007fffff ) >> _tables.shiftTable[ e ] );\r\n\r\n}\r\n\r\n/**\r\n * Returns a single precision floating point value (FP32) from the given half\r\n * precision floating point value (FP16).\r\n *\r\n * @param {number} val - A half precision floating point value.\r\n * @return {number} The FP32 value.\r\n */\r\nfunction fromHalfFloat( val ) {\r\n\r\n\tconst m = val >> 10;\r\n\t_tables.uint32View[ 0 ] = _tables.mantissaTable[ _tables.offsetTable[ m ] + ( val & 0x3ff ) ] + _tables.exponentTable[ m ];\r\n\treturn _tables.floatView[ 0 ];\r\n\r\n}\r\n\r\n/**\r\n * A class containing utility functions for data.\r\n *\r\n * @hideconstructor\r\n */\r\nclass DataUtils {\r\n\r\n\t/**\r\n\t * Returns a half precision floating point value (FP16) from the given single\r\n\t * precision floating point value (FP32).\r\n\t *\r\n\t * @param {number} val - A single precision floating point value.\r\n\t * @return {number} The FP16 value.\r\n\t */\r\n\tstatic toHalfFloat( val ) {\r\n\r\n\t\treturn toHalfFloat( val );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a single precision floating point value (FP32) from the given half\r\n\t * precision floating point value (FP16).\r\n\t *\r\n\t * @param {number} val - A half precision floating point value.\r\n\t * @return {number} The FP32 value.\r\n\t */\r\n\tstatic fromHalfFloat( val ) {\r\n\r\n\t\treturn fromHalfFloat( val );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport {\r\n\ttoHalfFloat,\r\n\tfromHalfFloat,\r\n\tDataUtils\r\n};\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { denormalize, normalize } from '../math/MathUtils.js';\r\nimport { StaticDrawUsage, FloatType } from '../constants.js';\r\nimport { fromHalfFloat, toHalfFloat } from '../extras/DataUtils.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _vector2 = /*@__PURE__*/ new Vector2();\r\n\r\nlet _id = 0;\r\n\r\n/**\r\n * This class stores data for an attribute (such as vertex positions, face\r\n * indices, normals, colors, UVs, and any custom attributes ) associated with\r\n * a geometry, which allows for more efficient passing of data to the GPU.\r\n *\r\n * When working with vector-like data, the `fromBufferAttribute( attribute, index )`\r\n * helper methods on vector and color class might be helpful. E.g. {@link Vector3#fromBufferAttribute}.\r\n */\r\nclass BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute.\r\n\t *\r\n\t * @param {TypedArray} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( array, itemSize, normalized = false ) {\r\n\r\n\t\tif ( Array.isArray( array ) ) {\r\n\r\n\t\t\tthrow new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );\r\n\r\n\t\t}\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isBufferAttribute = true;\r\n\r\n\t\t/**\r\n\t\t * The ID of the buffer attribute.\r\n\t\t *\r\n\t\t * @name BufferAttribute#id\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\r\n\r\n\t\t/**\r\n\t\t * The name of the buffer attribute.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.name = '';\r\n\r\n\t\t/**\r\n\t\t * The array holding the attribute data. It should have `itemSize * numVertices`\r\n\t\t * elements, where `numVertices` is the number of vertices in the associated geometry.\r\n\t\t *\r\n\t\t * @type {TypedArray}\r\n\t\t */\r\n\t\tthis.array = array;\r\n\r\n\t\t/**\r\n\t\t * The number of values of the array that should be associated with a particular vertex.\r\n\t\t * For instance, if this attribute is storing a 3-component vector (such as a position,\r\n\t\t * normal, or color), then the value should be `3`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.itemSize = itemSize;\r\n\r\n\t\t/**\r\n\t\t * Represents the number of items this buffer attribute stores. It is internally computed\r\n\t\t * by dividing the `array` length by the `itemSize`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.count = array !== undefined ? array.length / itemSize : 0;\r\n\r\n\t\t/**\r\n\t\t * Applies to integer data only. Indicates how the underlying data in the buffer maps to\r\n\t\t * the values in the GLSL code. For instance, if `array` is an instance of `UInt16Array`,\r\n\t\t * and `normalized` is `true`, the values `0 - +65535` in the array data will be mapped to\r\n\t\t * `0.0f - +1.0f` in the GLSL attribute. If `normalized` is `false`, the values will be converted\r\n\t\t * to floats unmodified, i.e. `65535` becomes `65535.0f`.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.normalized = normalized;\r\n\r\n\t\t/**\r\n\t\t * Defines the intended usage pattern of the data store for optimization purposes.\r\n\t\t *\r\n\t\t * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\r\n\t\t * instantiate a new one and set the desired usage before the next render.\r\n\t\t *\r\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\r\n\t\t * @default StaticDrawUsage\r\n\t\t */\r\n\t\tthis.usage = StaticDrawUsage;\r\n\r\n\t\t/**\r\n\t\t * This can be used to only update some components of stored vectors (for example, just the\r\n\t\t * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\r\n\t\t *\r\n\t\t * @type {Array<Object>}\r\n\t\t */\r\n\t\tthis.updateRanges = [];\r\n\r\n\t\t/**\r\n\t\t * Configures the bound GPU type for use in shaders.\r\n\t\t *\r\n\t\t * Note: this only has an effect for integer arrays and is not configurable for float arrays.\r\n\t\t * For lower precision float types, use `Float16BufferAttribute`.\r\n\t\t *\r\n\t\t * @type {(FloatType|IntType)}\r\n\t\t * @default FloatType\r\n\t\t */\r\n\t\tthis.gpuType = FloatType;\r\n\r\n\t\t/**\r\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A callback function that is executed after the renderer has transferred the attribute\r\n\t * array data to the GPU.\r\n\t */\r\n\tonUploadCallback() {}\r\n\r\n\t/**\r\n\t * Flag to indicate that this attribute has changed and should be re-sent to\r\n\t * the GPU. Set this to `true` when you modify the value of the array.\r\n\t *\r\n\t * @type {number}\r\n\t * @default false\r\n\t * @param {boolean} value\r\n\t */\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the usage of this buffer attribute.\r\n\t *\r\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\r\n\t * @return {BufferAttribute} A reference to this buffer attribute.\r\n\t */\r\n\tsetUsage( value ) {\r\n\r\n\t\tthis.usage = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a range of data in the data array to be updated on the GPU.\r\n\t *\r\n\t * @param {number} start - Position at which to start update.\r\n\t * @param {number} count - The number of components to update.\r\n\t */\r\n\taddUpdateRange( start, count ) {\r\n\r\n\t\tthis.updateRanges.push( { start, count } );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the update ranges.\r\n\t */\r\n\tclearUpdateRanges() {\r\n\r\n\t\tthis.updateRanges.length = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given buffer attribute to this instance.\r\n\t *\r\n\t * @param {BufferAttribute} source - The buffer attribute to copy.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.itemSize = source.itemSize;\r\n\t\tthis.count = source.count;\r\n\t\tthis.normalized = source.normalized;\r\n\r\n\t\tthis.usage = source.usage;\r\n\t\tthis.gpuType = source.gpuType;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies a vector from the given buffer attribute to this one. The start\r\n\t * and destination position in the attribute buffers are represented by the\r\n\t * given indices.\r\n\t *\r\n\t * @param {number} index1 - The destination index into this buffer attribute.\r\n\t * @param {BufferAttribute} attribute - The buffer attribute to copy from.\r\n\t * @param {number} index2 - The source index into the given buffer attribute.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tcopyAt( index1, attribute, index2 ) {\r\n\r\n\t\tindex1 *= this.itemSize;\r\n\t\tindex2 *= attribute.itemSize;\r\n\r\n\t\tfor ( let i = 0, l = this.itemSize; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = attribute.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the given array data into this buffer attribute.\r\n\t *\r\n\t * @param {(TypedArray|Array)} array - The array to copy.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tcopyArray( array ) {\r\n\r\n\t\tthis.array.set( array );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given 3x3 matrix to the given attribute. Works with\r\n\t * item size `2` and `3`.\r\n\t *\r\n\t * @param {Matrix3} m - The matrix to apply.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tapplyMatrix3( m ) {\r\n\r\n\t\tif ( this.itemSize === 2 ) {\r\n\r\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vector2.fromBufferAttribute( this, i );\r\n\t\t\t\t_vector2.applyMatrix3( m );\r\n\r\n\t\t\t\tthis.setXY( i, _vector2.x, _vector2.y );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.itemSize === 3 ) {\r\n\r\n\t\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t_vector.fromBufferAttribute( this, i );\r\n\t\t\t\t_vector.applyMatrix3( m );\r\n\r\n\t\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\r\n\t * item size `3`.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix to apply.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyMatrix4( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given 3x3 normal matrix to the given attribute. Only works with\r\n\t * item size `3`.\r\n\t *\r\n\t * @param {Matrix3} m - The normal matrix to apply.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyNormalMatrix( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\r\n\t * item size `3` and with direction vectors.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix to apply.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\ttransformDirection( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.transformDirection( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given array data in the buffer attribute.\r\n\t *\r\n\t * @param {(TypedArray|Array)} value - The array data to set.\r\n\t * @param {number} [offset=0] - The offset in this buffer attribute's array.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tset( value, offset = 0 ) {\r\n\r\n\t\t// Matching BufferAttribute constructor, do not normalize the array.\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the given component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} component - The component index.\r\n\t * @return {number} The returned value.\r\n\t */\r\n\tgetComponent( index, component ) {\r\n\r\n\t\tlet value = this.array[ index * this.itemSize + component ];\r\n\r\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given value to the given component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} component - The component index.\r\n\t * @param {number} value - The value to set.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetComponent( index, component, value ) {\r\n\r\n\t\tif ( this.normalized ) value = normalize( value, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + component ] = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the x component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @return {number} The x component.\r\n\t */\r\n\tgetX( index ) {\r\n\r\n\t\tlet x = this.array[ index * this.itemSize ];\r\n\r\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\r\n\r\n\t\treturn x;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the x component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} x - The value to set.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetX( index, x ) {\r\n\r\n\t\tif ( this.normalized ) x = normalize( x, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the y component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @return {number} The y component.\r\n\t */\r\n\tgetY( index ) {\r\n\r\n\t\tlet y = this.array[ index * this.itemSize + 1 ];\r\n\r\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\r\n\r\n\t\treturn y;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the y component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} y - The value to set.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetY( index, y ) {\r\n\r\n\t\tif ( this.normalized ) y = normalize( y, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the z component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @return {number} The z component.\r\n\t */\r\n\tgetZ( index ) {\r\n\r\n\t\tlet z = this.array[ index * this.itemSize + 2 ];\r\n\r\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\r\n\r\n\t\treturn z;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the z component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} z - The value to set.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetZ( index, z ) {\r\n\r\n\t\tif ( this.normalized ) z = normalize( z, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the w component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @return {number} The w component.\r\n\t */\r\n\tgetW( index ) {\r\n\r\n\t\tlet w = this.array[ index * this.itemSize + 3 ];\r\n\r\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\r\n\r\n\t\treturn w;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the w component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} w - The value to set.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetW( index, w ) {\r\n\r\n\t\tif ( this.normalized ) w = normalize( w, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the x and y component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} x - The value for the x component to set.\r\n\t * @param {number} y - The value for the y component to set.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetXY( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the x, y and z component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} x - The value for the x component to set.\r\n\t * @param {number} y - The value for the y component to set.\r\n\t * @param {number} z - The value for the z component to set.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetXYZ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the x, y, z and w component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} x - The value for the x component to set.\r\n\t * @param {number} y - The value for the y component to set.\r\n\t * @param {number} z - The value for the z component to set.\r\n\t * @param {number} w - The value for the w component to set.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetXYZW( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\t\t\tw = normalize( w, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = x;\r\n\t\tthis.array[ index + 1 ] = y;\r\n\t\tthis.array[ index + 2 ] = z;\r\n\t\tthis.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given callback function that is executed after the Renderer has transferred\r\n\t * the attribute array data to the GPU. Can be used to perform clean-up operations after\r\n\t * the upload when attribute data are not needed anymore on the CPU side.\r\n\t *\r\n\t * @param {Function} callback - The `onUpload()` callback.\r\n\t * @return {BufferAttribute} A reference to this instance.\r\n\t */\r\n\tonUpload( callback ) {\r\n\r\n\t\tthis.onUploadCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new buffer attribute with copied values from this instance.\r\n\t *\r\n\t * @return {BufferAttribute} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.array, this.itemSize ).copy( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes the buffer attribute into JSON.\r\n\t *\r\n\t * @return {Object} A JSON object representing the serialized buffer attribute.\r\n\t */\r\n\ttoJSON() {\r\n\r\n\t\tconst data = {\r\n\t\t\titemSize: this.itemSize,\r\n\t\t\ttype: this.array.constructor.name,\r\n\t\t\tarray: Array.from( this.array ),\r\n\t\t\tnormalized: this.normalized\r\n\t\t};\r\n\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\tif ( this.usage !== StaticDrawUsage ) data.usage = this.usage;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Convenient class that can be used when creating a `Int8` buffer attribute with\r\n * a plain `Array` instance.\r\n *\r\n * @augments BufferAttribute\r\n */\r\nclass Int8BufferAttribute extends BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute.\r\n\t *\r\n\t * @param {(Array<number>|Int8Array)} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Int8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Convenient class that can be used when creating a `UInt8` buffer attribute with\r\n * a plain `Array` instance.\r\n *\r\n * @augments BufferAttribute\r\n */\r\nclass Uint8BufferAttribute extends BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute.\r\n\t *\r\n\t * @param {(Array<number>|Uint8Array)} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint8Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Convenient class that can be used when creating a `UInt8Clamped` buffer attribute with\r\n * a plain `Array` instance.\r\n *\r\n * @augments BufferAttribute\r\n */\r\nclass Uint8ClampedBufferAttribute extends BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute.\r\n\t *\r\n\t * @param {(Array<number>|Uint8ClampedArray)} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint8ClampedArray( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Convenient class that can be used when creating a `Int16` buffer attribute with\r\n * a plain `Array` instance.\r\n *\r\n * @augments BufferAttribute\r\n */\r\nclass Int16BufferAttribute extends BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute.\r\n\t *\r\n\t * @param {(Array<number>|Int16Array)} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Int16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Convenient class that can be used when creating a `UInt16` buffer attribute with\r\n * a plain `Array` instance.\r\n *\r\n * @augments BufferAttribute\r\n */\r\nclass Uint16BufferAttribute extends BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute.\r\n\t *\r\n\t * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Convenient class that can be used when creating a `Int32` buffer attribute with\r\n * a plain `Array` instance.\r\n *\r\n * @augments BufferAttribute\r\n */\r\nclass Int32BufferAttribute extends BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute.\r\n\t *\r\n\t * @param {(Array<number>|Int32Array)} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Int32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Convenient class that can be used when creating a `UInt32` buffer attribute with\r\n * a plain `Array` instance.\r\n *\r\n * @augments BufferAttribute\r\n */\r\nclass Uint32BufferAttribute extends BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute.\r\n\t *\r\n\t * @param {(Array<number>|Uint32Array)} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Convenient class that can be used when creating a `Float16` buffer attribute with\r\n * a plain `Array` instance.\r\n *\r\n * This class automatically converts to and from FP16 via `Uint16Array` since `Float16Array`\r\n * browser support is still problematic.\r\n *\r\n * @augments BufferAttribute\r\n */\r\nclass Float16BufferAttribute extends BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute.\r\n\t *\r\n\t * @param {(Array<number>|Uint16Array)} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Uint16Array( array ), itemSize, normalized );\r\n\r\n\t\tthis.isFloat16BufferAttribute = true;\r\n\r\n\t}\r\n\r\n\tgetX( index ) {\r\n\r\n\t\tlet x = fromHalfFloat( this.array[ index * this.itemSize ] );\r\n\r\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\r\n\r\n\t\treturn x;\r\n\r\n\t}\r\n\r\n\tsetX( index, x ) {\r\n\r\n\t\tif ( this.normalized ) x = normalize( x, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize ] = toHalfFloat( x );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetY( index ) {\r\n\r\n\t\tlet y = fromHalfFloat( this.array[ index * this.itemSize + 1 ] );\r\n\r\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\r\n\r\n\t\treturn y;\r\n\r\n\t}\r\n\r\n\tsetY( index, y ) {\r\n\r\n\t\tif ( this.normalized ) y = normalize( y, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 1 ] = toHalfFloat( y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetZ( index ) {\r\n\r\n\t\tlet z = fromHalfFloat( this.array[ index * this.itemSize + 2 ] );\r\n\r\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\r\n\r\n\t\treturn z;\r\n\r\n\t}\r\n\r\n\tsetZ( index, z ) {\r\n\r\n\t\tif ( this.normalized ) z = normalize( z, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 2 ] = toHalfFloat( z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetW( index ) {\r\n\r\n\t\tlet w = fromHalfFloat( this.array[ index * this.itemSize + 3 ] );\r\n\r\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\r\n\r\n\t\treturn w;\r\n\r\n\t}\r\n\r\n\tsetW( index, w ) {\r\n\r\n\t\tif ( this.normalized ) w = normalize( w, this.array );\r\n\r\n\t\tthis.array[ index * this.itemSize + 3 ] = toHalfFloat( w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXY( index, x, y ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\r\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZ( index, x, y, z ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\r\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\r\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tsetXYZW( index, x, y, z, w ) {\r\n\r\n\t\tindex *= this.itemSize;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\t\t\tw = normalize( w, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.array[ index + 0 ] = toHalfFloat( x );\r\n\t\tthis.array[ index + 1 ] = toHalfFloat( y );\r\n\t\tthis.array[ index + 2 ] = toHalfFloat( z );\r\n\t\tthis.array[ index + 3 ] = toHalfFloat( w );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Convenient class that can be used when creating a `Float32` buffer attribute with\r\n * a plain `Array` instance.\r\n *\r\n * @augments BufferAttribute\r\n */\r\nclass Float32BufferAttribute extends BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute.\r\n\t *\r\n\t * @param {(Array<number>|Float32Array)} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( array, itemSize, normalized ) {\r\n\r\n\t\tsuper( new Float32Array( array ), itemSize, normalized );\r\n\r\n\t}\r\n\r\n}\r\n\r\n//\r\n\r\nexport {\r\n\tFloat32BufferAttribute,\r\n\tFloat16BufferAttribute,\r\n\tUint32BufferAttribute,\r\n\tInt32BufferAttribute,\r\n\tUint16BufferAttribute,\r\n\tInt16BufferAttribute,\r\n\tUint8ClampedBufferAttribute,\r\n\tUint8BufferAttribute,\r\n\tInt8BufferAttribute,\r\n\tBufferAttribute\r\n};\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { BufferAttribute } from './BufferAttribute.js';\r\nimport { denormalize, normalize } from '../math/MathUtils.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\n/**\r\n * An alternative version of a buffer attribute with interleaved data. Interleaved\r\n * attributes share a common interleaved data storage ({@link InterleavedBuffer}) and refer with\r\n * different offsets into the buffer.\r\n */\r\nclass InterleavedBufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new interleaved buffer attribute.\r\n\t *\r\n\t * @param {InterleavedBuffer} interleavedBuffer - The buffer holding the interleaved data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {number} offset - The attribute offset into the buffer.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t */\r\n\tconstructor( interleavedBuffer, itemSize, offset, normalized = false ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isInterleavedBufferAttribute = true;\r\n\r\n\t\t/**\r\n\t\t * The name of the buffer attribute.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.name = '';\r\n\r\n\t\t/**\r\n\t\t * The buffer holding the interleaved data.\r\n\t\t *\r\n\t\t * @type {InterleavedBuffer}\r\n\t\t */\r\n\t\tthis.data = interleavedBuffer;\r\n\r\n\t\t/**\r\n\t\t * The item size, see {@link BufferAttribute#itemSize}.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.itemSize = itemSize;\r\n\r\n\t\t/**\r\n\t\t * The attribute offset into the buffer.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.offset = offset;\r\n\r\n\t\t/**\r\n\t\t * Whether the data are normalized or not, see {@link BufferAttribute#normalized}\r\n\t\t *\r\n\t\t * @type {InterleavedBuffer}\r\n\t\t */\r\n\t\tthis.normalized = normalized;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The item count of this buffer attribute.\r\n\t *\r\n\t * @type {number}\r\n\t * @readonly\r\n\t */\r\n\tget count() {\r\n\r\n\t\treturn this.data.count;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The array holding the interleaved buffer attribute data.\r\n\t *\r\n\t * @type {TypedArray}\r\n\t */\r\n\tget array() {\r\n\r\n\t\treturn this.data.array;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Flag to indicate that this attribute has changed and should be re-sent to\r\n\t * the GPU. Set this to `true` when you modify the value of the array.\r\n\t *\r\n\t * @type {number}\r\n\t * @default false\r\n\t * @param {boolean} value\r\n\t */\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tthis.data.needsUpdate = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\r\n\t * item size `3`.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix to apply.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\tapplyMatrix4( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.data.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyMatrix4( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given 3x3 normal matrix to the given attribute. Only works with\r\n\t * item size `3`.\r\n\t *\r\n\t * @param {Matrix3} m - The normal matrix to apply.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\tapplyNormalMatrix( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.applyNormalMatrix( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given 4x4 matrix to the given attribute. Only works with\r\n\t * item size `3` and with direction vectors.\r\n\t *\r\n\t * @param {Matrix4} m - The matrix to apply.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\ttransformDirection( m ) {\r\n\r\n\t\tfor ( let i = 0, l = this.count; i < l; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( this, i );\r\n\r\n\t\t\t_vector.transformDirection( m );\r\n\r\n\t\t\tthis.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the given component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} component - The component index.\r\n\t * @return {number} The returned value.\r\n\t */\r\n\tgetComponent( index, component ) {\r\n\r\n\t\tlet value = this.array[ index * this.data.stride + this.offset + component ];\r\n\r\n\t\tif ( this.normalized ) value = denormalize( value, this.array );\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given value to the given component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} component - The component index.\r\n\t * @param {number} value - The value to set.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetComponent( index, component, value ) {\r\n\r\n\t\tif ( this.normalized ) value = normalize( value, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + component ] = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the x component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} x - The value to set.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetX( index, x ) {\r\n\r\n\t\tif ( this.normalized ) x = normalize( x, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset ] = x;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the y component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} y - The value to set.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetY( index, y ) {\r\n\r\n\t\tif ( this.normalized ) y = normalize( y, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the z component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} z - The value to set.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetZ( index, z ) {\r\n\r\n\t\tif ( this.normalized ) z = normalize( z, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the w component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} w - The value to set.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetW( index, w ) {\r\n\r\n\t\tif ( this.normalized ) w = normalize( w, this.array );\r\n\r\n\t\tthis.data.array[ index * this.data.stride + this.offset + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the x component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @return {number} The x component.\r\n\t */\r\n\tgetX( index ) {\r\n\r\n\t\tlet x = this.data.array[ index * this.data.stride + this.offset ];\r\n\r\n\t\tif ( this.normalized ) x = denormalize( x, this.array );\r\n\r\n\t\treturn x;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the y component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @return {number} The y component.\r\n\t */\r\n\tgetY( index ) {\r\n\r\n\t\tlet y = this.data.array[ index * this.data.stride + this.offset + 1 ];\r\n\r\n\t\tif ( this.normalized ) y = denormalize( y, this.array );\r\n\r\n\t\treturn y;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the z component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @return {number} The z component.\r\n\t */\r\n\tgetZ( index ) {\r\n\r\n\t\tlet z = this.data.array[ index * this.data.stride + this.offset + 2 ];\r\n\r\n\t\tif ( this.normalized ) z = denormalize( z, this.array );\r\n\r\n\t\treturn z;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the w component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @return {number} The w component.\r\n\t */\r\n\tgetW( index ) {\r\n\r\n\t\tlet w = this.data.array[ index * this.data.stride + this.offset + 3 ];\r\n\r\n\t\tif ( this.normalized ) w = denormalize( w, this.array );\r\n\r\n\t\treturn w;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the x and y component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} x - The value for the x component to set.\r\n\t * @param {number} y - The value for the y component to set.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetXY( index, x, y ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the x, y and z component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} x - The value for the x component to set.\r\n\t * @param {number} y - The value for the y component to set.\r\n\t * @param {number} z - The value for the z component to set.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetXYZ( index, x, y, z ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the x, y, z and w component of the vector at the given index.\r\n\t *\r\n\t * @param {number} index - The index into the buffer attribute.\r\n\t * @param {number} x - The value for the x component to set.\r\n\t * @param {number} y - The value for the y component to set.\r\n\t * @param {number} z - The value for the z component to set.\r\n\t * @param {number} w - The value for the w component to set.\r\n\t * @return {InterleavedBufferAttribute} A reference to this instance.\r\n\t */\r\n\tsetXYZW( index, x, y, z, w ) {\r\n\r\n\t\tindex = index * this.data.stride + this.offset;\r\n\r\n\t\tif ( this.normalized ) {\r\n\r\n\t\t\tx = normalize( x, this.array );\r\n\t\t\ty = normalize( y, this.array );\r\n\t\t\tz = normalize( z, this.array );\r\n\t\t\tw = normalize( w, this.array );\r\n\r\n\t\t}\r\n\r\n\t\tthis.data.array[ index + 0 ] = x;\r\n\t\tthis.data.array[ index + 1 ] = y;\r\n\t\tthis.data.array[ index + 2 ] = z;\r\n\t\tthis.data.array[ index + 3 ] = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new buffer attribute with copied values from this instance.\r\n\t *\r\n\t * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\r\n\t *\r\n\t * @param {Object} [data] - An object with interleaved buffers that allows to retain the interleaved property.\r\n\t * @return {BufferAttribute|InterleavedBufferAttribute} A clone of this instance.\r\n\t */\r\n\tclone( data ) {\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.clone(): Cloning an interleaved buffer attribute will de-interleave buffer data.' );\r\n\r\n\t\t\tconst array = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * this.data.stride + this.offset;\r\n\r\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new BufferAttribute( new this.array.constructor( array ), this.itemSize, this.normalized );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( data.interleavedBuffers === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers = {};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.clone( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new InterleavedBufferAttribute( data.interleavedBuffers[ this.data.uuid ], this.itemSize, this.offset, this.normalized );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes the buffer attribute into JSON.\r\n\t *\r\n\t * If no parameter is provided, cloning an interleaved buffer attribute will de-interleave buffer data.\r\n\t *\r\n\t * @param {Object} [data] - An optional value holding meta information about the serialization.\r\n\t * @return {Object} A JSON object representing the serialized buffer attribute.\r\n\t */\r\n\ttoJSON( data ) {\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tconsole.log( 'THREE.InterleavedBufferAttribute.toJSON(): Serializing an interleaved buffer attribute will de-interleave buffer data.' );\r\n\r\n\t\t\tconst array = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.count; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * this.data.stride + this.offset;\r\n\r\n\t\t\t\tfor ( let j = 0; j < this.itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray.push( this.data.array[ index + j ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// de-interleave data and save it as an ordinary buffer attribute for now\r\n\r\n\t\t\treturn {\r\n\t\t\t\titemSize: this.itemSize,\r\n\t\t\t\ttype: this.array.constructor.name,\r\n\t\t\t\tarray: array,\r\n\t\t\t\tnormalized: this.normalized\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// save as true interleaved attribute\r\n\r\n\t\t\tif ( data.interleavedBuffers === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers = {};\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.interleavedBuffers[ this.data.uuid ] === undefined ) {\r\n\r\n\t\t\t\tdata.interleavedBuffers[ this.data.uuid ] = this.data.toJSON( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tisInterleavedBufferAttribute: true,\r\n\t\t\t\titemSize: this.itemSize,\r\n\t\t\t\tdata: this.data.uuid,\r\n\t\t\t\toffset: this.offset,\r\n\t\t\t\tnormalized: this.normalized\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { InterleavedBufferAttribute };\r\n", "import { generateUUID } from '../math/MathUtils.js';\r\nimport { StaticDrawUsage } from '../constants.js';\r\n\r\n/**\r\n * \"Interleaved\" means that multiple attributes, possibly of different types,\r\n * (e.g., position, normal, uv, color) are packed into a single array buffer.\r\n *\r\n * An introduction into interleaved arrays can be found here: [Interleaved array basics]{@link https://blog.tojicode.com/2011/05/interleaved-array-basics.html}\r\n */\r\nclass InterleavedBuffer {\r\n\r\n\t/**\r\n\t * Constructs a new interleaved buffer.\r\n\t *\r\n\t * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\r\n\t * @param {number} stride - The number of typed-array elements per vertex.\r\n\t */\r\n\tconstructor( array, stride ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isInterleavedBuffer = true;\r\n\r\n\t\t/**\r\n\t\t * A typed array with a shared buffer storing attribute data.\r\n\t\t *\r\n\t\t * @type {TypedArray}\r\n\t\t */\r\n\t\tthis.array = array;\r\n\r\n\t\t/**\r\n\t\t * The number of typed-array elements per vertex.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.stride = stride;\r\n\r\n\t\t/**\r\n\t\t * The total number of elements in the array\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.count = array !== undefined ? array.length / stride : 0;\r\n\r\n\t\t/**\r\n\t\t * Defines the intended usage pattern of the data store for optimization purposes.\r\n\t\t *\r\n\t\t * Note: After the initial use of a buffer, its usage cannot be changed. Instead,\r\n\t\t * instantiate a new one and set the desired usage before the next render.\r\n\t\t *\r\n\t\t * @type {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)}\r\n\t\t * @default StaticDrawUsage\r\n\t\t */\r\n\t\tthis.usage = StaticDrawUsage;\r\n\r\n\t\t/**\r\n\t\t * This can be used to only update some components of stored vectors (for example, just the\r\n\t\t * component related to color). Use the `addUpdateRange()` function to add ranges to this array.\r\n\t\t *\r\n\t\t * @type {Array<Object>}\r\n\t\t */\r\n\t\tthis.updateRanges = [];\r\n\r\n\t\t/**\r\n\t\t * A version number, incremented every time the `needsUpdate` is set to `true`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.version = 0;\r\n\r\n\t\t/**\r\n\t\t * The UUID of the interleaved buffer.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.uuid = generateUUID();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A callback function that is executed after the renderer has transferred the attribute array\r\n\t * data to the GPU.\r\n\t */\r\n\tonUploadCallback() {}\r\n\r\n\t/**\r\n\t * Flag to indicate that this attribute has changed and should be re-sent to\r\n\t * the GPU. Set this to `true` when you modify the value of the array.\r\n\t *\r\n\t * @type {number}\r\n\t * @default false\r\n\t * @param {boolean} value\r\n\t */\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the usage of this interleaved buffer.\r\n\t *\r\n\t * @param {(StaticDrawUsage|DynamicDrawUsage|StreamDrawUsage|StaticReadUsage|DynamicReadUsage|StreamReadUsage|StaticCopyUsage|DynamicCopyUsage|StreamCopyUsage)} value - The usage to set.\r\n\t * @return {InterleavedBuffer} A reference to this interleaved buffer.\r\n\t */\r\n\tsetUsage( value ) {\r\n\r\n\t\tthis.usage = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a range of data in the data array to be updated on the GPU.\r\n\t *\r\n\t * @param {number} start - Position at which to start update.\r\n\t * @param {number} count - The number of components to update.\r\n\t */\r\n\taddUpdateRange( start, count ) {\r\n\r\n\t\tthis.updateRanges.push( { start, count } );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the update ranges.\r\n\t */\r\n\tclearUpdateRanges() {\r\n\r\n\t\tthis.updateRanges.length = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given interleaved buffer to this instance.\r\n\t *\r\n\t * @param {InterleavedBuffer} source - The interleaved buffer to copy.\r\n\t * @return {InterleavedBuffer} A reference to this instance.\r\n\t */\r\n\tcopy( source ) {\r\n\r\n\t\tthis.array = new source.array.constructor( source.array );\r\n\t\tthis.count = source.count;\r\n\t\tthis.stride = source.stride;\r\n\t\tthis.usage = source.usage;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies a vector from the given interleaved buffer to this one. The start\r\n\t * and destination position in the attribute buffers are represented by the\r\n\t * given indices.\r\n\t *\r\n\t * @param {number} index1 - The destination index into this interleaved buffer.\r\n\t * @param {InterleavedBuffer} interleavedBuffer - The interleaved buffer to copy from.\r\n\t * @param {number} index2 - The source index into the given interleaved buffer.\r\n\t * @return {InterleavedBuffer} A reference to this instance.\r\n\t */\r\n\tcopyAt( index1, interleavedBuffer, index2 ) {\r\n\r\n\t\tindex1 *= this.stride;\r\n\t\tindex2 *= interleavedBuffer.stride;\r\n\r\n\t\tfor ( let i = 0, l = this.stride; i < l; i ++ ) {\r\n\r\n\t\t\tthis.array[ index1 + i ] = interleavedBuffer.array[ index2 + i ];\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given array data in the interleaved buffer.\r\n\t *\r\n\t * @param {(TypedArray|Array)} value - The array data to set.\r\n\t * @param {number} [offset=0] - The offset in this interleaved buffer's array.\r\n\t * @return {InterleavedBuffer} A reference to this instance.\r\n\t */\r\n\tset( value, offset = 0 ) {\r\n\r\n\t\tthis.array.set( value, offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new interleaved buffer with copied values from this instance.\r\n\t *\r\n\t * @param {Object} [data] - An object with shared array buffers that allows to retain shared structures.\r\n\t * @return {InterleavedBuffer} A clone of this instance.\r\n\t */\r\n\tclone( data ) {\r\n\r\n\t\tif ( data.arrayBuffers === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers = {};\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.array.buffer._uuid === undefined ) {\r\n\r\n\t\t\tthis.array.buffer._uuid = generateUUID();\r\n\r\n\t\t}\r\n\r\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = this.array.slice( 0 ).buffer;\r\n\r\n\t\t}\r\n\r\n\t\tconst array = new this.array.constructor( data.arrayBuffers[ this.array.buffer._uuid ] );\r\n\r\n\t\tconst ib = new this.constructor( array, this.stride );\r\n\t\tib.setUsage( this.usage );\r\n\r\n\t\treturn ib;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given callback function that is executed after the Renderer has transferred\r\n\t * the array data to the GPU. Can be used to perform clean-up operations after\r\n\t * the upload when data are not needed anymore on the CPU side.\r\n\t *\r\n\t * @param {Function} callback - The `onUpload()` callback.\r\n\t * @return {InterleavedBuffer} A reference to this instance.\r\n\t */\r\n\tonUpload( callback ) {\r\n\r\n\t\tthis.onUploadCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes the interleaved buffer into JSON.\r\n\t *\r\n\t * @param {Object} [data] - An optional value holding meta information about the serialization.\r\n\t * @return {Object} A JSON object representing the serialized interleaved buffer.\r\n\t */\r\n\ttoJSON( data ) {\r\n\r\n\t\tif ( data.arrayBuffers === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers = {};\r\n\r\n\t\t}\r\n\r\n\t\t// generate UUID for array buffer if necessary\r\n\r\n\t\tif ( this.array.buffer._uuid === undefined ) {\r\n\r\n\t\t\tthis.array.buffer._uuid = generateUUID();\r\n\r\n\t\t}\r\n\r\n\t\tif ( data.arrayBuffers[ this.array.buffer._uuid ] === undefined ) {\r\n\r\n\t\t\tdata.arrayBuffers[ this.array.buffer._uuid ] = Array.from( new Uint32Array( this.array.buffer ) );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\treturn {\r\n\t\t\tuuid: this.uuid,\r\n\t\t\tbuffer: this.array.buffer._uuid,\r\n\t\t\ttype: this.array.constructor.name,\r\n\t\t\tstride: this.stride\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InterleavedBuffer };\r\n", "import InputNode from '../core/InputNode.js';\r\nimport { nodeObject, addMethodChaining } from '../tsl/TSLCore.js';\r\nimport { varying } from '../core/VaryingNode.js';\r\n\r\nimport { InterleavedBufferAttribute } from '../../core/InterleavedBufferAttribute.js';\r\nimport { InterleavedBuffer } from '../../core/InterleavedBuffer.js';\r\nimport { StaticDrawUsage, DynamicDrawUsage } from '../../constants.js';\r\n\r\n/**\r\n * In earlier `three.js` versions it was only possible to define attribute data\r\n * on geometry level. With `BufferAttributeNode`, it is also possible to do this\r\n * on the node level.\r\n * ```js\r\n * const geometry = new THREE.PlaneGeometry();\r\n * const positionAttribute = geometry.getAttribute( 'position' );\r\n *\r\n * const colors = [];\r\n * for ( let i = 0; i < position.count; i ++ ) {\r\n * \tcolors.push( 1, 0, 0 );\r\n * }\r\n *\r\n * material.colorNode = bufferAttribute( new THREE.Float32BufferAttribute( colors, 3 ) );\r\n * ```\r\n * This new approach is especially interesting when geometry data are generated via\r\n * compute shaders. The below line converts a storage buffer into an attribute node.\r\n * ```js\r\n * material.positionNode = positionBuffer.toAttribute();\r\n * ```\r\n * @augments InputNode\r\n */\r\nclass BufferAttributeNode extends InputNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BufferAttributeNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new buffer attribute node.\r\n\t *\r\n\t * @param {BufferAttribute|InterleavedBuffer|TypedArray} value - The attribute data.\r\n\t * @param {?string} [bufferType=null] - The buffer type (e.g. `'vec3'`).\r\n\t * @param {number} [bufferStride=0] - The buffer stride.\r\n\t * @param {number} [bufferOffset=0] - The buffer offset.\r\n\t */\r\n\tconstructor( value, bufferType = null, bufferStride = 0, bufferOffset = 0 ) {\r\n\r\n\t\tsuper( value, bufferType );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isBufferNode = true;\r\n\r\n\t\t/**\r\n\t\t * The buffer type (e.g. `'vec3'`).\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.bufferType = bufferType;\r\n\r\n\t\t/**\r\n\t\t * The buffer stride.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.bufferStride = bufferStride;\r\n\r\n\t\t/**\r\n\t\t * The buffer offset.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.bufferOffset = bufferOffset;\r\n\r\n\t\t/**\r\n\t\t * The usage property. Set this to `THREE.DynamicDrawUsage` via `.setUsage()`,\r\n\t\t * if you are planning to update the attribute data per frame.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default StaticDrawUsage\r\n\t\t */\r\n\t\tthis.usage = StaticDrawUsage;\r\n\r\n\t\t/**\r\n\t\t * Whether the attribute is instanced or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.instanced = false;\r\n\r\n\t\t/**\r\n\t\t * A reference to the buffer attribute.\r\n\t\t *\r\n\t\t * @type {?BufferAttribute}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.attribute = null;\r\n\r\n\t\t/**\r\n\t\t * `BufferAttributeNode` sets this property to `true` by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.global = true;\r\n\r\n\t\tif ( value && value.isBufferAttribute === true ) {\r\n\r\n\t\t\tthis.attribute = value;\r\n\t\t\tthis.usage = value.usage;\r\n\t\t\tthis.instanced = value.isInstancedBufferAttribute;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the attribute data might be shared\r\n\t * and thus the hash should be shared as well.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The hash.\r\n\t */\r\n\tgetHash( builder ) {\r\n\r\n\t\tif ( this.bufferStride === 0 && this.bufferOffset === 0 ) {\r\n\r\n\t\t\tlet bufferData = builder.globalCache.getData( this.value );\r\n\r\n\t\t\tif ( bufferData === undefined ) {\r\n\r\n\t\t\t\tbufferData = {\r\n\t\t\t\t\tnode: this\r\n\t\t\t\t};\r\n\r\n\t\t\t\tbuilder.globalCache.setData( this.value, bufferData );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn bufferData.node.uuid;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.uuid;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from\r\n\t * the buffer attribute.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.bufferType === null ) {\r\n\r\n\t\t\tthis.bufferType = builder.getTypeFromAttribute( this.attribute );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.bufferType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depending on which value was passed to the node, `setup()` behaves\r\n\t * differently. If no instance of `BufferAttribute` was passed, the method\r\n\t * creates an internal attribute and configures it respectively.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( this.attribute !== null ) return;\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst array = this.value;\r\n\t\tconst itemSize = builder.getTypeLength( type );\r\n\t\tconst stride = this.bufferStride || itemSize;\r\n\t\tconst offset = this.bufferOffset;\r\n\r\n\t\tconst buffer = array.isInterleavedBuffer === true ? array : new InterleavedBuffer( array, stride );\r\n\t\tconst bufferAttribute = new InterleavedBufferAttribute( buffer, itemSize, offset );\r\n\r\n\t\tbuffer.setUsage( this.usage );\r\n\r\n\t\tthis.attribute = bufferAttribute;\r\n\t\tthis.attribute.isInstancedBufferAttribute = this.instanced; // @TODO: Add a possible: InstancedInterleavedBufferAttribute\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the code snippet of the buffer attribute node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The generated code snippet.\r\n\t */\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tconst nodeAttribute = builder.getBufferAttributeFromNode( this, nodeType );\r\n\t\tconst propertyName = builder.getPropertyName( nodeAttribute );\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {\r\n\r\n\t\t\tthis.name = propertyName;\r\n\r\n\t\t\toutput = propertyName;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeVarying = varying( this );\r\n\r\n\t\t\toutput = nodeVarying.build( builder, nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation to return a fixed value `'bufferAttribute'`.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The input type.\r\n\t */\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'bufferAttribute';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the `usage` property to the given value.\r\n\t *\r\n\t * @param {number} value - The usage to set.\r\n\t * @return {BufferAttributeNode} A reference to this node.\r\n\t */\r\n\tsetUsage( value ) {\r\n\r\n\t\tthis.usage = value;\r\n\r\n\t\tif ( this.attribute && this.attribute.isBufferAttribute === true ) {\r\n\r\n\t\t\tthis.attribute.usage = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the `instanced` property to the given value.\r\n\t *\r\n\t * @param {boolean} value - The value to set.\r\n\t * @return {BufferAttributeNode} A reference to this node.\r\n\t */\r\n\tsetInstanced( value ) {\r\n\r\n\t\tthis.instanced = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BufferAttributeNode;\r\n\r\n/**\r\n * TSL function for creating a buffer attribute node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\r\n * @param {?string} [type=null] - The buffer type (e.g. `'vec3'`).\r\n * @param {number} [stride=0] - The buffer stride.\r\n * @param {number} [offset=0] - The buffer offset.\r\n * @returns {BufferAttributeNode}\r\n */\r\nexport const bufferAttribute = ( array, type = null, stride = 0, offset = 0 ) => nodeObject( new BufferAttributeNode( array, type, stride, offset ) );\r\n\r\n/**\r\n * TSL function for creating a buffer attribute node but with dynamic draw usage.\r\n * Use this function if attribute data are updated per frame.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\r\n * @param {?string} [type=null] - The buffer type (e.g. `'vec3'`).\r\n * @param {number} [stride=0] - The buffer stride.\r\n * @param {number} [offset=0] - The buffer offset.\r\n * @returns {BufferAttributeNode}\r\n */\r\nexport const dynamicBufferAttribute = ( array, type = null, stride = 0, offset = 0 ) => bufferAttribute( array, type, stride, offset ).setUsage( DynamicDrawUsage );\r\n\r\n/**\r\n * TSL function for creating a buffer attribute node but with enabled instancing\r\n *\r\n * @tsl\r\n * @function\r\n * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\r\n * @param {?string} [type=null] - The buffer type (e.g. `'vec3'`).\r\n * @param {number} [stride=0] - The buffer stride.\r\n * @param {number} [offset=0] - The buffer offset.\r\n * @returns {BufferAttributeNode}\r\n */\r\nexport const instancedBufferAttribute = ( array, type = null, stride = 0, offset = 0 ) => bufferAttribute( array, type, stride, offset ).setInstanced( true );\r\n\r\n/**\r\n * TSL function for creating a buffer attribute node but with dynamic draw usage and enabled instancing\r\n *\r\n * @tsl\r\n * @function\r\n * @param {BufferAttribute|InterleavedBuffer|TypedArray} array - The attribute data.\r\n * @param {?string} [type=null] - The buffer type (e.g. `'vec3'`).\r\n * @param {number} [stride=0] - The buffer stride.\r\n * @param {number} [offset=0] - The buffer offset.\r\n * @returns {BufferAttributeNode}\r\n */\r\nexport const instancedDynamicBufferAttribute = ( array, type = null, stride = 0, offset = 0 ) => dynamicBufferAttribute( array, type, stride, offset ).setInstanced( true );\r\n\r\naddMethodChaining( 'toAttribute', ( bufferNode ) => bufferAttribute( bufferNode.value ) );\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * TODO\r\n *\r\n * @augments Node\r\n */\r\nclass ComputeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ComputeNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new compute node.\r\n\t *\r\n\t * @param {Node} computeNode - TODO\r\n\t * @param {number} count - TODO.\r\n\t * @param {Array<number>} [workgroupSize=[64]] - TODO.\r\n\t */\r\n\tconstructor( computeNode, count, workgroupSize = [ 64 ] ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isComputeNode = true;\r\n\r\n\t\t/**\r\n\t\t * TODO\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.computeNode = computeNode;\r\n\r\n\t\t/**\r\n\t\t * TODO\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.count = count;\r\n\r\n\t\t/**\r\n\t\t * TODO\r\n\t\t *\r\n\t\t * @type {Array<number>}\r\n\t\t * @default [64]\r\n\t\t */\r\n\t\tthis.workgroupSize = workgroupSize;\r\n\r\n\t\t/**\r\n\t\t * TODO\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.dispatchCount = 0;\r\n\r\n\t\t/**\r\n\t\t * TODO\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.version = 1;\r\n\r\n\t\t/**\r\n\t\t * The name or label of the uniform.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default ''\r\n\t\t */\r\n\t\tthis.name = '';\r\n\r\n\t\t/**\r\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.OBJECT` since {@link ComputeNode#updateBefore}\r\n\t\t * is executed once per object by default.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'object'\r\n\t\t */\r\n\t\tthis.updateBeforeType = NodeUpdateType.OBJECT;\r\n\r\n\t\t/**\r\n\t\t * TODO\r\n\t\t *\r\n\t\t * @type {?Function}\r\n\t\t */\r\n\t\tthis.onInitFunction = null;\r\n\r\n\t\tthis.updateDispatchCount();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Executes the `dispose` event for this node.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the {@link ComputeNode#name} property.\r\n\t *\r\n\t * @param {string} name - The name of the uniform.\r\n\t * @return {ComputeNode} A reference to this node.\r\n\t */\r\n\tlabel( name ) {\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * TODO\r\n\t */\r\n\tupdateDispatchCount() {\r\n\r\n\t\tconst { count, workgroupSize } = this;\r\n\r\n\t\tlet size = workgroupSize[ 0 ];\r\n\r\n\t\tfor ( let i = 1; i < workgroupSize.length; i ++ )\r\n\t\t\tsize *= workgroupSize[ i ];\r\n\r\n\t\tthis.dispatchCount = Math.ceil( count / size );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * TODO\r\n\t *\r\n\t * @param {Function} callback - TODO.\r\n\t * @return {ComputeNode} A reference to this node.\r\n\t */\r\n\tonInit( callback ) {\r\n\r\n\t\tthis.onInitFunction = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The method execute the compute for this node.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\tupdateBefore( { renderer } ) {\r\n\r\n\t\trenderer.compute( this );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst result = this.computeNode.build( builder );\r\n\r\n\t\tif ( result ) {\r\n\r\n\t\t\tconst properties = builder.getNodeProperties( this );\r\n\t\t\tproperties.outputComputeNode = result.outputNode;\r\n\r\n\t\t\tresult.outputNode = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst { shaderStage } = builder;\r\n\r\n\t\tif ( shaderStage === 'compute' ) {\r\n\r\n\t\t\tconst snippet = this.computeNode.build( builder, 'void' );\r\n\r\n\t\t\tif ( snippet !== '' ) {\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( snippet, this );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst properties = builder.getNodeProperties( this );\r\n\t\t\tconst outputComputeNode = properties.outputComputeNode;\r\n\r\n\t\t\tif ( outputComputeNode ) {\r\n\r\n\t\t\t\treturn outputComputeNode.build( builder, output );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ComputeNode;\r\n\r\n/**\r\n * TSL function for creating a compute node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - TODO\r\n * @param {number} count - TODO.\r\n * @param {Array<number>} [workgroupSize=[64]] - TODO.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const compute = ( node, count, workgroupSize ) => nodeObject( new ComputeNode( nodeObject( node ), count, workgroupSize ) );\r\n\r\naddMethodChaining( 'compute', compute );\r\n", "import Node from './Node.js';\r\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * This node can be used as a cache management component for another node.\r\n * Caching is in general used by default in {@link NodeBuilder} but this node\r\n * allows the usage of a shared parent cache during the build process.\r\n *\r\n * @augments Node\r\n */\r\nclass CacheNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'CacheNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new cache node.\r\n\t *\r\n\t * @param {Node} node - The node that should be cached.\r\n\t * @param {boolean} [parent=true] - Whether this node refers to a shared parent cache or not.\r\n\t */\r\n\tconstructor( node, parent = true ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node that should be cached.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * Whether this node refers to a shared parent cache or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.parent = parent;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isCacheNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst previousCache = builder.getCache();\r\n\t\tconst cache = builder.getCacheFromNode( this, this.parent );\r\n\r\n\t\tbuilder.setCache( cache );\r\n\r\n\t\tconst nodeType = this.node.getNodeType( builder );\r\n\r\n\t\tbuilder.setCache( previousCache );\r\n\r\n\t\treturn nodeType;\r\n\r\n\t}\r\n\r\n\tbuild( builder, ...params ) {\r\n\r\n\t\tconst previousCache = builder.getCache();\r\n\t\tconst cache = builder.getCacheFromNode( this, this.parent );\r\n\r\n\t\tbuilder.setCache( cache );\r\n\r\n\t\tconst data = this.node.build( builder, ...params );\r\n\r\n\t\tbuilder.setCache( previousCache );\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CacheNode;\r\n\r\n/**\r\n * TSL function for creating a cache node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node that should be cached.\r\n * @param {boolean} [parent] - Whether this node refers to a shared parent cache or not.\r\n * @returns {CacheNode}\r\n */\r\nexport const cache = ( node, parent ) => nodeObject( new CacheNode( nodeObject( node ), parent ) );\r\n\r\naddMethodChaining( 'cache', cache );\r\n", "import Node from './Node.js';\r\nimport { addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * The class generates the code of a given node but returns another node in the output.\r\n * This can be used to call a method or node that does not return a value, i.e.\r\n * type `void` on an input where returning a value is required. Example:\r\n *\r\n * ```js\r\n * material.colorNode = myColor.bypass( runVoidFn() )\r\n *```\r\n *\r\n * @augments Node\r\n */\r\nclass BypassNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BypassNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new bypass node.\r\n\t *\r\n\t * @param {Node} outputNode - The output node.\r\n\t * @param {Node} callNode - The call node.\r\n\t */\r\n\tconstructor( outputNode, callNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isBypassNode = true;\r\n\r\n\t\t/**\r\n\t\t * The output node.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.outputNode = outputNode;\r\n\r\n\t\t/**\r\n\t\t * The call node.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.callNode = callNode;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.outputNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = this.callNode.build( builder, 'void' );\r\n\r\n\t\tif ( snippet !== '' ) {\r\n\r\n\t\t\tbuilder.addLineFlowCode( snippet, this );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.outputNode.build( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BypassNode;\r\n\r\n/**\r\n * TSL function for creating a bypass node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} outputNode - The output node.\r\n * @param {Node} callNode - The call node.\r\n * @returns {BypassNode}\r\n */\r\nexport const bypass = /*@__PURE__*/ nodeProxy( BypassNode ).setParameterLength( 2 );\r\n\r\naddMethodChaining( 'bypass', bypass );\r\n", "import Node from '../core/Node.js';\r\nimport { float, addMethodChaining, nodeProxy } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * This node allows to remap a node value from one range into another. E.g a value of\r\n * `0.4` in the range `[ 0.3, 0.5 ]` should be remapped into the normalized range `[ 0, 1 ]`.\r\n * `RemapNode` takes care of that and converts the original value of `0.4` to `0.5`.\r\n *\r\n * @augments Node\r\n */\r\nclass RemapNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RemapNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new remap node.\r\n\t *\r\n\t * @param {Node} node - The node that should be remapped.\r\n\t * @param {Node} inLowNode - The source or current lower bound of the range.\r\n\t * @param {Node} inHighNode - The source or current upper bound of the range.\r\n\t * @param {Node} [outLowNode=float(0)] - The target lower bound of the range.\r\n\t * @param {Node} [outHighNode=float(1)] - The target upper bound of the range.\r\n\t */\r\n\tconstructor( node, inLowNode, inHighNode, outLowNode = float( 0 ), outHighNode = float( 1 ) ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node that should be remapped.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * The source or current lower bound of the range.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.inLowNode = inLowNode;\r\n\r\n\t\t/**\r\n\t\t * The source or current upper bound of the range.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.inHighNode = inHighNode;\r\n\r\n\t\t/**\r\n\t\t * The target lower bound of the range.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t * @default float(0)\r\n\t\t */\r\n\t\tthis.outLowNode = outLowNode;\r\n\r\n\t\t/**\r\n\t\t * The target upper bound of the range.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t * @default float(1)\r\n\t\t */\r\n\t\tthis.outHighNode = outHighNode;\r\n\r\n\t\t/**\r\n\t\t * Whether the node value should be clamped before\r\n\t\t * remapping it to the target range.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.doClamp = true;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { node, inLowNode, inHighNode, outLowNode, outHighNode, doClamp } = this;\r\n\r\n\t\tlet t = node.sub( inLowNode ).div( inHighNode.sub( inLowNode ) );\r\n\r\n\t\tif ( doClamp === true ) t = t.clamp();\r\n\r\n\t\treturn t.mul( outHighNode.sub( outLowNode ) ).add( outLowNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RemapNode;\r\n\r\n/**\r\n * TSL function for creating a remap node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node that should be remapped.\r\n * @param {Node} inLowNode - The source or current lower bound of the range.\r\n * @param {Node} inHighNode - The source or current upper bound of the range.\r\n * @param {?Node} [outLowNode=float(0)] - The target lower bound of the range.\r\n * @param {?Node} [outHighNode=float(1)] - The target upper bound of the range.\r\n * @returns {RemapNode}\r\n */\r\nexport const remap = /*@__PURE__*/ nodeProxy( RemapNode, null, null, { doClamp: false } ).setParameterLength( 3, 5 );\r\n\r\n/**\r\n * TSL function for creating a remap node, but with enabled clamping.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node that should be remapped.\r\n * @param {Node} inLowNode - The source or current lower bound of the range.\r\n * @param {Node} inHighNode - The source or current upper bound of the range.\r\n * @param {?Node} [outLowNode=float(0)] - The target lower bound of the range.\r\n * @param {?Node} [outHighNode=float(1)] - The target upper bound of the range.\r\n * @returns {RemapNode}\r\n */\r\nexport const remapClamp = /*@__PURE__*/ nodeProxy( RemapNode ).setParameterLength( 3, 5 );\r\n\r\naddMethodChaining( 'remap', remap );\r\naddMethodChaining( 'remapClamp', remapClamp );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * This class can be used to implement basic expressions in shader code.\r\n * Basic examples for that are `return`, `continue` or `discard` statements.\r\n *\r\n * @augments Node\r\n */\r\nclass ExpressionNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ExpressionNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new expression node.\r\n\t *\r\n\t * @param {string} [snippet=''] - The native code snippet.\r\n\t * @param {string} [nodeType='void'] - The node type.\r\n\t */\r\n\tconstructor( snippet = '', nodeType = 'void' ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\t/**\r\n\t\t * The native code snippet.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default ''\r\n\t\t */\r\n\t\tthis.snippet = snippet;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst snippet = this.snippet;\r\n\r\n\t\tif ( type === 'void' ) {\r\n\r\n\t\t\tbuilder.addLineFlowCode( snippet, this );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn builder.format( snippet, type, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ExpressionNode;\r\n\r\n/**\r\n * TSL function for creating an expression node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} [snippet] - The native code snippet.\r\n * @param {?string} [nodeType='void'] - The node type.\r\n * @returns {ExpressionNode}\r\n */\r\nexport const expression = /*@__PURE__*/ nodeProxy( ExpressionNode ).setParameterLength( 1, 2 );\r\n", "import { select } from '../math/ConditionalNode.js';\r\nimport { expression } from '../code/ExpressionNode.js';\r\nimport { addMethodChaining } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * Represents a `discard` shader operation in TSL.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?ConditionalNode} conditional - An optional conditional node. It allows to decide whether the discard should be executed or not.\r\n * @return {Node} The `discard` expression.\r\n */\r\nexport const Discard = ( conditional ) => ( conditional ? select( conditional, expression( 'discard' ) ) : expression( 'discard' ) ).toStack();\r\n\r\n/**\r\n * Represents a `return` shader operation in TSL.\r\n *\r\n * @tsl\r\n * @function\r\n * @return {ExpressionNode} The `return` expression.\r\n */\r\nexport const Return = () => expression( 'return' ).toStack();\r\n\r\naddMethodChaining( 'discard', Discard );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\r\n\r\nimport { NoColorSpace, NoToneMapping } from '../../constants.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\n\r\n/**\r\n * Normally, tone mapping and color conversion happens automatically\r\n * before outputting pixel too the default (screen) framebuffer. In certain\r\n * post processing setups this happens to late because certain effects\r\n * require e.g. sRGB input. For such scenarios, `RenderOutputNode` can be used\r\n * to apply tone mapping and color space conversion at an arbitrary point\r\n * in the effect chain.\r\n *\r\n * When applying tone mapping and color space conversion manually with this node,\r\n * you have to set {@link PostProcessing#outputColorTransform} to `false`.\r\n *\r\n * ```js\r\n * const postProcessing = new PostProcessing( renderer );\r\n * postProcessing.outputColorTransform = false;\r\n *\r\n * const scenePass = pass( scene, camera );\r\n * const outputPass = renderOutput( scenePass );\r\n *\r\n * postProcessing.outputNode = outputPass;\r\n * ```\r\n *\r\n * @augments TempNode\r\n */\r\nclass RenderOutputNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RenderOutputNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new render output node.\r\n\t *\r\n\t * @param {Node} colorNode - The color node to process.\r\n\t * @param {?number} toneMapping - The tone mapping type.\r\n\t * @param {?string} outputColorSpace - The output color space.\r\n\t */\r\n\tconstructor( colorNode, toneMapping, outputColorSpace ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\t/**\r\n\t\t * The color node to process.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.colorNode = colorNode;\r\n\r\n\t\t/**\r\n\t\t * The tone mapping type.\r\n\t\t *\r\n\t\t * @type {?number}\r\n\t\t */\r\n\t\tthis.toneMapping = toneMapping;\r\n\r\n\t\t/**\r\n\t\t * The output color space.\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t */\r\n\t\tthis.outputColorSpace = outputColorSpace;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isRenderOutputNode = true;\r\n\r\n\t}\r\n\r\n\tsetup( { context } ) {\r\n\r\n\t\tlet outputNode = this.colorNode || context.color;\r\n\r\n\t\t// tone mapping\r\n\r\n\t\tconst toneMapping = ( this.toneMapping !== null ? this.toneMapping : context.toneMapping ) || NoToneMapping;\r\n\t\tconst outputColorSpace = ( this.outputColorSpace !== null ? this.outputColorSpace : context.outputColorSpace ) || NoColorSpace;\r\n\r\n\t\tif ( toneMapping !== NoToneMapping ) {\r\n\r\n\t\t\toutputNode = outputNode.toneMapping( toneMapping );\r\n\r\n\t\t}\r\n\r\n\t\t// working to output color space\r\n\r\n\t\tif ( outputColorSpace !== NoColorSpace && outputColorSpace !== ColorManagement.workingColorSpace ) {\r\n\r\n\t\t\toutputNode = outputNode.workingToColorSpace( outputColorSpace );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RenderOutputNode;\r\n\r\n/**\r\n * TSL function for creating a posterize node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} color - The color node to process.\r\n * @param {?number} [toneMapping=null] - The tone mapping type.\r\n * @param {?string} [outputColorSpace=null] - The output color space.\r\n * @returns {RenderOutputNode}\r\n */\r\nexport const renderOutput = ( color, toneMapping = null, outputColorSpace = null ) => nodeObject( new RenderOutputNode( nodeObject( color ), toneMapping, outputColorSpace ) );\r\n\r\naddMethodChaining( 'renderOutput', renderOutput );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { addMethodChaining, nodeObject } from '../tsl/TSLCore.js';\r\n\r\nclass DebugNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'DebugNode';\r\n\r\n\t}\r\n\r\n\tconstructor( node, callback = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.node = node;\r\n\t\tthis.callback = callback;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\treturn this.node.build( builder );\r\n\r\n\t}\r\n\r\n\tanalyze( builder ) {\r\n\r\n\t\treturn this.node.build( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst callback = this.callback;\r\n\t\tconst snippet = this.node.build( builder );\r\n\r\n\t\tconst title = '--- TSL debug - ' + builder.shaderStage + ' shader ---';\r\n\t\tconst border = '-'.repeat( title.length );\r\n\r\n\t\tlet code = '';\r\n\t\tcode += '// #' + title + '#\\n';\r\n\t\tcode += builder.flow.code.replace( /^\\t/mg, '' ) + '\\n';\r\n\t\tcode += '/* ... */ ' + snippet + ' /* ... */\\n';\r\n\t\tcode += '// #' + border + '#\\n';\r\n\r\n\t\tif ( callback !== null ) {\r\n\r\n\t\t\tcallback( builder, code );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.log( code );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default DebugNode;\r\n\r\n/**\r\n * TSL function for creating a debug node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node to debug.\r\n * @param {?Function} [callback=null] - Optional callback function to handle the debug output.\r\n * @returns {DebugNode}\r\n */\r\nexport const debug = ( node, callback = null ) => nodeObject( new DebugNode( nodeObject( node ), callback ) );\r\n\r\naddMethodChaining( 'debug', debug );\r\n", "import Node from './Node.js';\r\nimport { nodeObject, varying } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * Base class for representing shader attributes as nodes.\r\n *\r\n * @augments Node\r\n */\r\nclass AttributeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AttributeNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new attribute node.\r\n\t *\r\n\t * @param {string} attributeName - The name of the attribute.\r\n\t * @param {?string} nodeType - The node type.\r\n\t */\r\n\tconstructor( attributeName, nodeType = null ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\t/**\r\n\t\t * `AttributeNode` sets this property to `true` by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.global = true;\r\n\r\n\t\tthis._attributeName = attributeName;\r\n\r\n\t}\r\n\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.getAttributeName( builder );\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tlet nodeType = this.nodeType;\r\n\r\n\t\tif ( nodeType === null ) {\r\n\r\n\t\t\tconst attributeName = this.getAttributeName( builder );\r\n\r\n\t\t\tif ( builder.hasGeometryAttribute( attributeName ) ) {\r\n\r\n\t\t\t\tconst attribute = builder.geometry.getAttribute( attributeName );\r\n\r\n\t\t\t\tnodeType = builder.getTypeFromAttribute( attribute );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnodeType = 'float';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the attribute name to the given value. The method can be\r\n\t * overwritten in derived classes if the final name must be computed\r\n\t * analytically.\r\n\t *\r\n\t * @param {string} attributeName - The name of the attribute.\r\n\t * @return {AttributeNode} A reference to this node.\r\n\t */\r\n\tsetAttributeName( attributeName ) {\r\n\r\n\t\tthis._attributeName = attributeName;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the attribute name of this node. The method can be\r\n\t * overwritten in derived classes if the final name must be computed\r\n\t * analytically.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The attribute name.\r\n\t */\r\n\tgetAttributeName( /*builder*/ ) {\r\n\r\n\t\treturn this._attributeName;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst attributeName = this.getAttributeName( builder );\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\t\tconst geometryAttribute = builder.hasGeometryAttribute( attributeName );\r\n\r\n\t\tif ( geometryAttribute === true ) {\r\n\r\n\t\t\tconst attribute = builder.geometry.getAttribute( attributeName );\r\n\t\t\tconst attributeType = builder.getTypeFromAttribute( attribute );\r\n\r\n\t\t\tconst nodeAttribute = builder.getAttribute( attributeName, attributeType );\r\n\r\n\t\t\tif ( builder.shaderStage === 'vertex' ) {\r\n\r\n\t\t\t\treturn builder.format( nodeAttribute.name, attributeType, nodeType );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst nodeVarying = varying( this );\r\n\r\n\t\t\t\treturn nodeVarying.build( builder, nodeType );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( `AttributeNode: Vertex attribute \"${ attributeName }\" not found on geometry.` );\r\n\r\n\t\t\treturn builder.generateConst( nodeType );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.global = this.global;\r\n\t\tdata._attributeName = this._attributeName;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.global = data.global;\r\n\t\tthis._attributeName = data._attributeName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AttributeNode;\r\n\r\n/**\r\n * TSL function for creating an attribute node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The name of the attribute.\r\n * @param {?string} [nodeType=null] - The node type.\r\n * @returns {AttributeNode}\r\n */\r\nexport const attribute = ( name, nodeType = null ) => nodeObject( new AttributeNode( name, nodeType ) );\r\n", "import Node from './Node.js';\r\nimport { nodeImmutable, varying } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * This class represents shader indices of different types. The following predefined node\r\n * objects cover frequent use cases:\r\n *\r\n * - `vertexIndex`: The index of a vertex within a mesh.\r\n * - `instanceIndex`: The index of either a mesh instance or an invocation of a compute shader.\r\n * - `drawIndex`: The index of a draw call.\r\n * - `invocationLocalIndex`: The index of a compute invocation within the scope of a workgroup load.\r\n * - `invocationSubgroupIndex`: The index of a compute invocation within the scope of a subgroup.\r\n * - `subgroupIndex`: The index of the subgroup the current compute invocation belongs to.\r\n *\r\n * @augments Node\r\n */\r\nclass IndexNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'IndexNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new index node.\r\n\t *\r\n\t * @param {('vertex'|'instance'|'subgroup'|'invocationLocal'|'invocationSubgroup'|'draw')} scope - The scope of the index node.\r\n\t */\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper( 'uint' );\r\n\r\n\t\t/**\r\n\t\t * The scope of the index node.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.scope = scope;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isIndexNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet propertyName;\r\n\r\n\t\tif ( scope === IndexNode.VERTEX ) {\r\n\r\n\t\t\tpropertyName = builder.getVertexIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.INSTANCE ) {\r\n\r\n\t\t\tpropertyName = builder.getInstanceIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.DRAW ) {\r\n\r\n\t\t\tpropertyName = builder.getDrawIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.INVOCATION_LOCAL ) {\r\n\r\n\t\t\tpropertyName = builder.getInvocationLocalIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.INVOCATION_SUBGROUP ) {\r\n\r\n\t\t\tpropertyName = builder.getInvocationSubgroupIndex();\r\n\r\n\t\t} else if ( scope === IndexNode.SUBGROUP ) {\r\n\r\n\t\t\tpropertyName = builder.getSubgroupIndex();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'THREE.IndexNode: Unknown scope: ' + scope );\r\n\r\n\t\t}\r\n\r\n\t\tlet output;\r\n\r\n\t\tif ( builder.shaderStage === 'vertex' || builder.shaderStage === 'compute' ) {\r\n\r\n\t\t\toutput = propertyName;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeVarying = varying( this );\r\n\r\n\t\t\toutput = nodeVarying.build( builder, nodeType );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nIndexNode.VERTEX = 'vertex';\r\nIndexNode.INSTANCE = 'instance';\r\nIndexNode.SUBGROUP = 'subgroup';\r\nIndexNode.INVOCATION_LOCAL = 'invocationLocal';\r\nIndexNode.INVOCATION_SUBGROUP = 'invocationSubgroup';\r\nIndexNode.DRAW = 'draw';\r\n\r\nexport default IndexNode;\r\n\r\n/**\r\n * TSL object that represents the index of a vertex within a mesh.\r\n *\r\n * @tsl\r\n * @type {IndexNode}\r\n */\r\nexport const vertexIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.VERTEX );\r\n\r\n/**\r\n * TSL object that represents the index of either a mesh instance or an invocation of a compute shader.\r\n *\r\n * @tsl\r\n * @type {IndexNode}\r\n */\r\nexport const instanceIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INSTANCE );\r\n\r\n/**\r\n * TSL object that represents the index of the subgroup the current compute invocation belongs to.\r\n *\r\n * @tsl\r\n * @type {IndexNode}\r\n */\r\nexport const subgroupIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.SUBGROUP );\r\n\r\n/**\r\n * TSL object that represents the index of a compute invocation within the scope of a subgroup.\r\n *\r\n * @tsl\r\n * @type {IndexNode}\r\n */\r\nexport const invocationSubgroupIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INVOCATION_SUBGROUP );\r\n\r\n/**\r\n * TSL object that represents the index of a compute invocation within the scope of a workgroup load.\r\n *\r\n * @tsl\r\n * @type {IndexNode}\r\n */\r\nexport const invocationLocalIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.INVOCATION_LOCAL );\r\n\r\n/**\r\n * TSL object that represents the index of a draw call.\r\n *\r\n * @tsl\r\n * @type {IndexNode}\r\n */\r\nexport const drawIndex = /*@__PURE__*/ nodeImmutable( IndexNode, IndexNode.DRAW );\r\n", "import Node from './Node.js';\r\nimport { select } from '../math/ConditionalNode.js';\r\nimport { ShaderNode, nodeProxy, getCurrentStack, setCurrentStack, nodeObject } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * Stack is a helper for Nodes that need to produce stack-based code instead of continuous flow.\r\n * They are usually needed in cases like `If`, `Else`.\r\n *\r\n * @augments Node\r\n */\r\nclass StackNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'StackNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new stack node.\r\n\t *\r\n\t * @param {?StackNode} [parent=null] - The parent stack node.\r\n\t */\r\n\tconstructor( parent = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * List of nodes.\r\n\t\t *\r\n\t\t * @type {Array<Node>}\r\n\t\t */\r\n\t\tthis.nodes = [];\r\n\r\n\t\t/**\r\n\t\t * The output node.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.outputNode = null;\r\n\r\n\t\t/**\r\n\t\t * The parent stack node.\r\n\t\t *\r\n\t\t * @type {?StackNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.parent = parent;\r\n\r\n\t\t/**\r\n\t\t * The current conditional node.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {ConditionalNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._currentCond = null;\r\n\r\n\t\t/**\r\n\t\t * The expression node. Only\r\n\t\t * relevant for Switch/Case.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._expressionNode = null;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isStackNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.outputNode ? this.outputNode.getNodeType( builder ) : 'void';\r\n\r\n\t}\r\n\r\n\tgetMemberType( builder, name ) {\r\n\r\n\t\treturn this.outputNode ? this.outputNode.getMemberType( builder, name ) : 'void';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a node to this stack.\r\n\t *\r\n\t * @param {Node} node - The node to add.\r\n\t * @return {StackNode} A reference to this stack node.\r\n\t */\r\n\tadd( node ) {\r\n\r\n\t\tthis.nodes.push( node );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Represent an `if` statement in TSL.\r\n\t *\r\n\t * @param {Node} boolNode - Represents the condition.\r\n\t * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.\r\n\t * @return {StackNode} A reference to this stack node.\r\n\t */\r\n\tIf( boolNode, method ) {\r\n\r\n\t\tconst methodNode = new ShaderNode( method );\r\n\t\tthis._currentCond = select( boolNode, methodNode );\r\n\r\n\t\treturn this.add( this._currentCond );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Represent an `elseif` statement in TSL.\r\n\t *\r\n\t * @param {Node} boolNode - Represents the condition.\r\n\t * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.\r\n\t * @return {StackNode} A reference to this stack node.\r\n\t */\r\n\tElseIf( boolNode, method ) {\r\n\r\n\t\tconst methodNode = new ShaderNode( method );\r\n\t\tconst ifNode = select( boolNode, methodNode );\r\n\r\n\t\tthis._currentCond.elseNode = ifNode;\r\n\t\tthis._currentCond = ifNode;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Represent an `else` statement in TSL.\r\n\t *\r\n\t * @param {Function} method - TSL code which is executed in the `else` case.\r\n\t * @return {StackNode} A reference to this stack node.\r\n\t */\r\n\tElse( method ) {\r\n\r\n\t\tthis._currentCond.elseNode = new ShaderNode( method );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Represents a `switch` statement in TSL.\r\n\t *\r\n\t * @param {any} expression - Represents the expression.\r\n\t * @param {Function} method - TSL code which is executed if the condition evaluates to `true`.\r\n\t * @return {StackNode} A reference to this stack node.\r\n\t */\r\n\tSwitch( expression ) {\r\n\r\n\t\tthis._expressionNode = nodeObject( expression );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Represents a `case` statement in TSL. The TSL version accepts an arbitrary numbers of values.\r\n\t * The last parameter must be the callback method that should be executed in the `true` case.\r\n\t *\r\n\t * @param {...any} params - The values of the `Case()` statement as well as the callback method.\r\n\t * @return {StackNode} A reference to this stack node.\r\n\t */\r\n\tCase( ...params ) {\r\n\r\n\t\tconst caseNodes = [];\r\n\r\n\t\t// extract case nodes from the parameter list\r\n\r\n\t\tif ( params.length >= 2 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < params.length - 1; i ++ ) {\r\n\r\n\t\t\t\tcaseNodes.push( this._expressionNode.equal( nodeObject( params[ i ] ) ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthrow new Error( 'TSL: Invalid parameter length. Case() requires at least two parameters.' );\r\n\r\n\t\t}\r\n\r\n\t\t// extract method\r\n\r\n\t\tconst method = params[ params.length - 1 ];\r\n\t\tconst methodNode = new ShaderNode( method );\r\n\r\n\t\t// chain multiple cases when using Case( 1, 2, 3, () => {} )\r\n\r\n\t\tlet caseNode = caseNodes[ 0 ];\r\n\r\n\t\tfor ( let i = 1; i < caseNodes.length; i ++ ) {\r\n\r\n\t\t\tcaseNode = caseNode.or( caseNodes[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\t// build condition\r\n\r\n\t\tconst condNode = select( caseNode, methodNode );\r\n\r\n\t\tif ( this._currentCond === null ) {\r\n\r\n\t\t\tthis._currentCond = condNode;\r\n\r\n\t\t\treturn this.add( this._currentCond );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._currentCond.elseNode = condNode;\r\n\t\t\tthis._currentCond = condNode;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Represents the default code block of a Switch/Case statement.\r\n\t *\r\n\t * @param {Function} method - TSL code which is executed in the `else` case.\r\n\t * @return {StackNode} A reference to this stack node.\r\n\t */\r\n\tDefault( method ) {\r\n\r\n\t\tthis.Else( method );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tbuild( builder, ...params ) {\r\n\r\n\t\tconst previousBuildStack = builder.currentStack;\r\n\t\tconst previousStack = getCurrentStack();\r\n\r\n\t\tsetCurrentStack( this );\r\n\r\n\t\tbuilder.currentStack = this;\r\n\r\n\t\tconst buildStage = builder.buildStage;\r\n\r\n\t\tfor ( const node of this.nodes ) {\r\n\r\n\t\t\tif ( buildStage === 'setup' ) {\r\n\r\n\t\t\t\tnode.build( builder );\r\n\r\n\t\t\t} else if ( buildStage === 'analyze' ) {\r\n\r\n\t\t\t\tnode.build( builder, this );\r\n\r\n\t\t\t} else if ( buildStage === 'generate' ) {\r\n\r\n\t\t\t\tconst stages = builder.getDataFromNode( node, 'any' ).stages;\r\n\t\t\t\tconst parents = stages && stages[ builder.shaderStage ];\r\n\r\n\t\t\t\tif ( node.isVarNode && parents && parents.length === 1 && parents[ 0 ] && parents[ 0 ].isStackNode ) {\r\n\r\n\t\t\t\t\tcontinue; // skip var nodes that are only used in .toVarying()\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tnode.build( builder, 'void' );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst result = this.outputNode ? this.outputNode.build( builder, ...params ) : super.build( builder, ...params );\r\n\r\n\t\tsetCurrentStack( previousStack );\r\n\r\n\t\tbuilder.currentStack = previousBuildStack;\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StackNode;\r\n\r\n/**\r\n * TSL function for creating a stack node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?StackNode} [parent=null] - The parent stack node.\r\n * @returns {StackNode}\r\n */\r\nexport const stack = /*@__PURE__*/ nodeProxy( StackNode ).setParameterLength( 0, 1 );\r\n", "import Node from './Node.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * This node can be used to define multiple outputs in a shader programs.\r\n *\r\n * @augments Node\r\n */\r\nclass OutputStructNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'OutputStructNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new output struct node. The constructor can be invoked with an\r\n\t * arbitrary number of nodes representing the members.\r\n\t *\r\n\t * @param {...Node} members - A parameter list of nodes.\r\n\t */\r\n\tconstructor( ...members ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * An array of nodes which defines the output.\r\n\t\t *\r\n\t\t * @type {Array<Node>}\r\n\t\t */\r\n\t\tthis.members = members;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isOutputStructNode = true;\r\n\r\n\t}\r\n\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( properties.membersLayout === undefined ) {\r\n\r\n\t\t\tconst members = this.members;\r\n\t\t\tconst membersLayout = [];\r\n\r\n\t\t\tfor ( let i = 0; i < members.length; i ++ ) {\r\n\r\n\t\t\t\tconst name = 'm' + i;\r\n\t\t\t\tconst type = members[ i ].getNodeType( builder );\r\n\r\n\t\t\t\tmembersLayout.push( { name, type, index: i } );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tproperties.membersLayout = membersLayout;\r\n\t\t\tproperties.structType = builder.getOutputStructTypeFromNode( this, properties.membersLayout );\r\n\r\n\t\t}\r\n\r\n\t\treturn properties.structType.name;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst propertyName = builder.getOutputStructName();\r\n\t\tconst members = this.members;\r\n\r\n\t\tconst structPrefix = propertyName !== '' ? propertyName + '.' : '';\r\n\r\n\t\tfor ( let i = 0; i < members.length; i ++ ) {\r\n\r\n\t\t\tconst snippet = members[ i ].build( builder );\r\n\r\n\t\t\tbuilder.addLineFlowCode( `${ structPrefix }m${ i } = ${ snippet }`, this );\r\n\r\n\t\t}\r\n\r\n\t\treturn propertyName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default OutputStructNode;\r\n\r\n/**\r\n * TSL function for creating an output struct node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {...Node} members - A parameter list of nodes.\r\n * @returns {OutputStructNode}\r\n */\r\nexport const outputStruct = /*@__PURE__*/ nodeProxy( OutputStructNode );\r\n", "import OutputStructNode from './OutputStructNode.js';\r\nimport { nodeProxy, vec4 } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * Returns the MRT texture index for the given name.\r\n *\r\n * @param {Array<Texture>} textures - The textures of a MRT-configured render target.\r\n * @param {string} name - The name of the MRT texture which index is requested.\r\n * @return {number} The texture index.\r\n */\r\nexport function getTextureIndex( textures, name ) {\r\n\r\n\tfor ( let i = 0; i < textures.length; i ++ ) {\r\n\r\n\t\tif ( textures[ i ].name === name ) {\r\n\r\n\t\t\treturn i;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn - 1;\r\n\r\n}\r\n\r\n/**\r\n * This node can be used setup a MRT context for rendering. A typical MRT setup for\r\n * post-processing is shown below:\r\n * ```js\r\n * const mrtNode = mrt( {\r\n *   output: output,\r\n *   normal: normalView\r\n * } ) );\r\n * ```\r\n * The MRT output is defined as a dictionary.\r\n *\r\n * @augments OutputStructNode\r\n */\r\nclass MRTNode extends OutputStructNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MRTNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new output struct node.\r\n\t *\r\n\t * @param {Object<string, Node>} outputNodes - The MRT outputs.\r\n\t */\r\n\tconstructor( outputNodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * A dictionary representing the MRT outputs. The key\r\n\t\t * is the name of the output, the value the node which produces\r\n\t\t * the output result.\r\n\t\t *\r\n\t\t * @type {Object<string, Node>}\r\n\t\t */\r\n\t\tthis.outputNodes = outputNodes;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isMRTNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the MRT node has an output with the given name.\r\n\t *\r\n\t * @param {string} name - The name of the output.\r\n\t * @return {NodeBuilder} Whether the MRT node has an output for the given name or not.\r\n\t */\r\n\thas( name ) {\r\n\r\n\t\treturn this.outputNodes[ name ] !== undefined;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the output node for the given name.\r\n\t *\r\n\t * @param {string} name - The name of the output.\r\n\t * @return {Node} The output node.\r\n\t */\r\n\tget( name ) {\r\n\r\n\t\treturn this.outputNodes[ name ];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Merges the outputs of the given MRT node with the outputs of this node.\r\n\t *\r\n\t * @param {MRTNode} mrtNode - The MRT to merge.\r\n\t * @return {MRTNode} A new MRT node with merged outputs..\r\n\t */\r\n\tmerge( mrtNode ) {\r\n\r\n\t\tconst outputs = { ...this.outputNodes, ...mrtNode.outputNodes };\r\n\r\n\t\treturn mrt( outputs );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst outputNodes = this.outputNodes;\r\n\t\tconst mrt = builder.renderer.getRenderTarget();\r\n\r\n\t\tconst members = [];\r\n\r\n\t\tconst textures = mrt.textures;\r\n\r\n\t\tfor ( const name in outputNodes ) {\r\n\r\n\t\t\tconst index = getTextureIndex( textures, name );\r\n\r\n\t\t\tmembers[ index ] = vec4( outputNodes[ name ] );\r\n\r\n\t\t}\r\n\r\n\t\tthis.members = members;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MRTNode;\r\n\r\n/**\r\n * TSL function for creating a MRT node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Object<string, Node>} outputNodes - The MRT outputs.\r\n * @returns {MRTNode}\r\n */\r\nexport const mrt = /*@__PURE__*/ nodeProxy( MRTNode );\r\n", "import { Fn } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * Generates a hash value in the range `[0, 1]` from the given seed.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<float>} seed - The seed.\r\n * @return {Node<float>} The hash value.\r\n */\r\nexport const hash = /*@__PURE__*/ Fn( ( [ seed ] ) => {\r\n\r\n\t// Taken from https://www.shadertoy.com/view/XlGcRh, originally from pcg-random.org\r\n\r\n\tconst state = seed.toUint().mul( 747796405 ).add( 2891336453 );\r\n\tconst word = state.shiftRight( state.shiftRight( 28 ).add( 4 ) ).bitXor( state ).mul( 277803737 );\r\n\tconst result = word.shiftRight( 22 ).bitXor( word );\r\n\r\n\treturn result.toFloat().mul( 1 / 2 ** 32 ); // Convert to range [0, 1)\r\n\r\n} );\r\n", "import Node from '../core/Node.js';\r\nimport { expression } from '../code/ExpressionNode.js';\r\nimport { nodeObject, nodeArray, Fn } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * This module offers a variety of ways to implement loops in TSL. In it's basic form it's:\r\n * ```js\r\n * Loop( count, ( { i } ) => {\r\n *\r\n * } );\r\n * ```\r\n * However, it is also possible to define a start and end ranges, data types and loop conditions:\r\n * ```js\r\n * Loop( { start: int( 0 ), end: int( 10 ), type: 'int', condition: '<' }, ( { i } ) => {\r\n *\r\n * } );\r\n *```\r\n * Nested loops can be defined in a compacted form:\r\n * ```js\r\n * Loop( 10, 5, ( { i, j } ) => {\r\n *\r\n * } );\r\n * ```\r\n * Loops that should run backwards can be defined like so:\r\n * ```js\r\n * Loop( { start: 10 }, () => {} );\r\n * ```\r\n * It is possible to execute with boolean values, similar to the `while` syntax.\r\n * ```js\r\n * const value = float( 0 ).toVar();\r\n *\r\n * Loop( value.lessThan( 10 ), () => {\r\n *\r\n * \tvalue.addAssign( 1 );\r\n *\r\n * } );\r\n * ```\r\n * The module also provides `Break()` and `Continue()` TSL expression for loop control.\r\n * @augments Node\r\n */\r\nclass LoopNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'LoopNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new loop node.\r\n\t *\r\n\t * @param {Array<any>} params - Depending on the loop type, array holds different parameterization values for the loop.\r\n\t */\r\n\tconstructor( params = [] ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.params = params;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a loop variable name based on an index. The pattern is\r\n\t * `0` = `i`, `1`= `j`, `2`= `k` and so on.\r\n\t *\r\n\t * @param {number} index - The index.\r\n\t * @return {string} The loop variable name.\r\n\t */\r\n\tgetVarName( index ) {\r\n\r\n\t\treturn String.fromCharCode( 'i'.charCodeAt( 0 ) + index );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns properties about this node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Object} The node properties.\r\n\t */\r\n\tgetProperties( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tif ( properties.stackNode !== undefined ) return properties;\r\n\r\n\t\t//\r\n\r\n\t\tconst inputs = {};\r\n\r\n\t\tfor ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {\r\n\r\n\t\t\tconst param = this.params[ i ];\r\n\r\n\t\t\tconst name = ( param.isNode !== true && param.name ) || this.getVarName( i );\r\n\t\t\tconst type = ( param.isNode !== true && param.type ) || 'int';\r\n\r\n\t\t\tinputs[ name ] = expression( name, type );\r\n\r\n\t\t}\r\n\r\n\t\tconst stack = builder.addStack(); // TODO: cache() it\r\n\r\n\t\tproperties.returnsNode = this.params[ this.params.length - 1 ]( inputs, builder );\r\n\t\tproperties.stackNode = stack;\r\n\r\n\t\tconst baseParam = this.params[ 0 ];\r\n\r\n\t\tif ( baseParam.isNode !== true && typeof baseParam.update === 'function' ) {\r\n\r\n\t\t\tproperties.updateNode = Fn( this.params[ 0 ].update )( inputs );\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.removeStack();\r\n\r\n\t\treturn properties;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred based on the loop configuration.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tconst { returnsNode } = this.getProperties( builder );\r\n\r\n\t\treturn returnsNode ? returnsNode.getNodeType( builder ) : 'void';\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// setup properties\r\n\r\n\t\tthis.getProperties( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst properties = this.getProperties( builder );\r\n\r\n\t\tconst params = this.params;\r\n\t\tconst stackNode = properties.stackNode;\r\n\r\n\t\tfor ( let i = 0, l = params.length - 1; i < l; i ++ ) {\r\n\r\n\t\t\tconst param = params[ i ];\r\n\r\n\t\t\tlet isWhile = false, start = null, end = null, name = null, type = null, condition = null, update = null;\r\n\r\n\t\t\tif ( param.isNode ) {\r\n\r\n\t\t\t\tif ( param.getNodeType( builder ) === 'bool' ) {\r\n\r\n\t\t\t\t\tisWhile = true;\r\n\t\t\t\t\ttype = 'bool';\r\n\t\t\t\t\tend = param.build( builder, type );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\ttype = 'int';\r\n\t\t\t\t\tname = this.getVarName( i );\r\n\t\t\t\t\tstart = '0';\r\n\t\t\t\t\tend = param.build( builder, type );\r\n\t\t\t\t\tcondition = '<';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\ttype = param.type || 'int';\r\n\t\t\t\tname = param.name || this.getVarName( i );\r\n\t\t\t\tstart = param.start;\r\n\t\t\t\tend = param.end;\r\n\t\t\t\tcondition = param.condition;\r\n\t\t\t\tupdate = param.update;\r\n\r\n\t\t\t\tif ( typeof start === 'number' ) start = builder.generateConst( type, start );\r\n\t\t\t\telse if ( start && start.isNode ) start = start.build( builder, type );\r\n\r\n\t\t\t\tif ( typeof end === 'number' ) end = builder.generateConst( type, end );\r\n\t\t\t\telse if ( end && end.isNode ) end = end.build( builder, type );\r\n\r\n\t\t\t\tif ( start !== undefined && end === undefined ) {\r\n\r\n\t\t\t\t\tstart = start + ' - 1';\r\n\t\t\t\t\tend = '0';\r\n\t\t\t\t\tcondition = '>=';\r\n\r\n\t\t\t\t} else if ( end !== undefined && start === undefined ) {\r\n\r\n\t\t\t\t\tstart = '0';\r\n\t\t\t\t\tcondition = '<';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( condition === undefined ) {\r\n\r\n\t\t\t\t\tif ( Number( start ) > Number( end ) ) {\r\n\r\n\t\t\t\t\t\tcondition = '>=';\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tcondition = '<';\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet loopSnippet;\r\n\r\n\t\t\tif ( isWhile ) {\r\n\r\n\t\t\t\tloopSnippet = `while ( ${ end } )`;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst internalParam = { start, end, condition };\r\n\r\n\t\t\t\t//\r\n\r\n\t\t\t\tconst startSnippet = internalParam.start;\r\n\t\t\t\tconst endSnippet = internalParam.end;\r\n\r\n\t\t\t\tlet updateSnippet;\r\n\r\n\t\t\t\tconst deltaOperator = () => condition.includes( '<' ) ? '+=' : '-=';\r\n\r\n\t\t\t\tif ( update !== undefined && update !== null ) {\r\n\r\n\t\t\t\t\tswitch ( typeof update ) {\r\n\r\n\t\t\t\t\t\tcase 'function':\r\n\r\n\t\t\t\t\t\t\tconst flow = builder.flowStagesNode( properties.updateNode, 'void' );\r\n\t\t\t\t\t\t\tconst snippet = flow.code.replace( /\\t|;/g, '' );\r\n\r\n\t\t\t\t\t\t\tupdateSnippet = snippet;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'number':\r\n\r\n\t\t\t\t\t\t\tupdateSnippet = name + ' ' + deltaOperator() + ' ' + builder.generateConst( type, update );\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tcase 'string':\r\n\r\n\t\t\t\t\t\t\tupdateSnippet = name + ' ' + update;\r\n\r\n\t\t\t\t\t\t\tbreak;\r\n\r\n\t\t\t\t\t\tdefault:\r\n\r\n\t\t\t\t\t\t\tif ( update.isNode ) {\r\n\r\n\t\t\t\t\t\t\t\tupdateSnippet = name + ' ' + deltaOperator() + ' ' + update.build( builder );\r\n\r\n\t\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\t\tconsole.error( 'THREE.TSL: \\'Loop( { update: ... } )\\' is not a function, string or number.' );\r\n\r\n\t\t\t\t\t\t\t\tupdateSnippet = 'break /* invalid update */';\r\n\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tif ( type === 'int' || type === 'uint' ) {\r\n\r\n\t\t\t\t\t\tupdate = condition.includes( '<' ) ? '++' : '--';\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tupdate = deltaOperator() + ' 1.';\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tupdateSnippet = name + ' ' + update;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst declarationSnippet = builder.getVar( type, name ) + ' = ' + startSnippet;\r\n\t\t\t\tconst conditionalSnippet = name + ' ' + condition + ' ' + endSnippet;\r\n\r\n\t\t\t\tloopSnippet = `for ( ${ declarationSnippet }; ${ conditionalSnippet }; ${ updateSnippet } )`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tbuilder.addFlowCode( ( i === 0 ? '\\n' : '' ) + builder.tab + loopSnippet + ' {\\n\\n' ).addFlowTab();\r\n\r\n\t\t}\r\n\r\n\t\tconst stackSnippet = stackNode.build( builder, 'void' );\r\n\r\n\t\tconst returnsSnippet = properties.returnsNode ? properties.returnsNode.build( builder ) : '';\r\n\r\n\t\tbuilder.removeFlowTab().addFlowCode( '\\n' + builder.tab + stackSnippet );\r\n\r\n\t\tfor ( let i = 0, l = this.params.length - 1; i < l; i ++ ) {\r\n\r\n\t\t\tbuilder.addFlowCode( ( i === 0 ? '' : builder.tab ) + '}\\n\\n' ).removeFlowTab();\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.addFlowTab();\r\n\r\n\t\treturn returnsSnippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LoopNode;\r\n\r\n/**\r\n * TSL function for creating a loop node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {...any} params - A list of parameters.\r\n * @returns {LoopNode}\r\n */\r\nexport const Loop = ( ...params ) => nodeObject( new LoopNode( nodeArray( params, 'int' ) ) ).toStack();\r\n\r\n/**\r\n * TSL function for creating a `Continue()` expression.\r\n *\r\n * @tsl\r\n * @function\r\n * @returns {ExpressionNode}\r\n */\r\nexport const Continue = () => expression( 'continue' ).toStack();\r\n\r\n/**\r\n * TSL function for creating a `Break()` expression.\r\n *\r\n * @tsl\r\n * @function\r\n * @returns {ExpressionNode}\r\n */\r\nexport const Break = () => expression( 'break' ).toStack();\r\n", "// https://github.com/cabbibo/glsl-tri-noise-3d\r\n\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { float, vec3, Fn } from '../tsl/TSLBase.js';\r\n\r\nconst tri = /*@__PURE__*/ Fn( ( [ x ] ) => {\r\n\r\n\treturn x.fract().sub( .5 ).abs();\r\n\r\n} ).setLayout( {\r\n\tname: 'tri',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst tri3 = /*@__PURE__*/ Fn( ( [ p ] ) => {\r\n\r\n\treturn vec3( tri( p.z.add( tri( p.y.mul( 1. ) ) ) ), tri( p.z.add( tri( p.x.mul( 1. ) ) ) ), tri( p.y.add( tri( p.x.mul( 1. ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'tri3',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n/**\r\n * Generates a noise value from the given position, speed and time parameters.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} position - The position.\r\n * @param {Node<float>} speed - The speed.\r\n * @param {Node<float>} time - The time.\r\n * @return {Node<float>} The generated noise.\r\n */\r\nexport const triNoise3D = /*@__PURE__*/ Fn( ( [ position, speed, time ] ) => {\r\n\r\n\tconst p = vec3( position ).toVar();\r\n\tconst z = float( 1.4 ).toVar();\r\n\tconst rz = float( 0.0 ).toVar();\r\n\tconst bp = vec3( p ).toVar();\r\n\r\n\tLoop( { start: float( 0.0 ), end: float( 3.0 ), type: 'float', condition: '<=' }, () => {\r\n\r\n\t\tconst dg = vec3( tri3( bp.mul( 2.0 ) ) ).toVar();\r\n\t\tp.addAssign( dg.add( time.mul( float( 0.1 ).mul( speed ) ) ) );\r\n\t\tbp.mulAssign( 1.8 );\r\n\t\tz.mulAssign( 1.5 );\r\n\t\tp.mulAssign( 1.2 );\r\n\r\n\t\tconst t = float( tri( p.z.add( tri( p.x.add( tri( p.y ) ) ) ) ) ).toVar();\r\n\t\trz.addAssign( t.div( z ) );\r\n\t\tbp.addAssign( 0.14 );\r\n\r\n\t} );\r\n\r\n\treturn rz;\r\n\r\n} ).setLayout( {\r\n\tname: 'triNoise3D',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'position', type: 'vec3' },\r\n\t\t{ name: 'speed', type: 'float' },\r\n\t\t{ name: 'time', type: 'float' }\r\n\t]\r\n} );\r\n", "import { Vector3 } from './Vector3.js';\r\n\r\n/**\r\n * Represents an axis-aligned bounding box (AABB) in 3D space.\r\n */\r\nclass Box3 {\r\n\r\n\t/**\r\n\t * Constructs a new bounding box.\r\n\t *\r\n\t * @param {Vector3} [min=(Infinity,Infinity,Infinity)] - A vector representing the lower boundary of the box.\r\n\t * @param {Vector3} [max=(-Infinity,-Infinity,-Infinity)] - A vector representing the upper boundary of the box.\r\n\t */\r\n\tconstructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isBox3 = true;\r\n\r\n\t\t/**\r\n\t\t * The lower boundary of the box.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.min = min;\r\n\r\n\t\t/**\r\n\t\t * The upper boundary of the box.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.max = max;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the lower and upper boundaries of this box.\r\n\t * Please note that this method only copies the values from the given objects.\r\n\t *\r\n\t * @param {Vector3} min - The lower boundary of the box.\r\n\t * @param {Vector3} max - The upper boundary of the box.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tset( min, max ) {\r\n\r\n\t\tthis.min.copy( min );\r\n\t\tthis.max.copy( max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the upper and lower bounds of this box so it encloses the position data\r\n\t * in the given array.\r\n\t *\r\n\t * @param {Array<number>} array - An array holding 3D position data.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tsetFromArray( array ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = array.length; i < il; i += 3 ) {\r\n\r\n\t\t\tthis.expandByPoint( _vector.fromArray( array, i ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the upper and lower bounds of this box so it encloses the position data\r\n\t * in the given buffer attribute.\r\n\t *\r\n\t * @param {BufferAttribute} attribute - A buffer attribute holding 3D position data.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tsetFromBufferAttribute( attribute ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = attribute.count; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( _vector.fromBufferAttribute( attribute, i ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the upper and lower bounds of this box so it encloses the position data\r\n\t * in the given array.\r\n\t *\r\n\t * @param {Array<Vector3>} points - An array holding 3D position data as instances of {@link Vector3}.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.expandByPoint( points[ i ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Centers this box on the given center vector and sets this box's width, height and\r\n\t * depth to the given size values.\r\n\t *\r\n\t * @param {Vector3} center - The center of the box.\r\n\t * @param {Vector3} size - The x, y and z dimensions of the box.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tsetFromCenterAndSize( center, size ) {\r\n\r\n\t\tconst halfSize = _vector.copy( size ).multiplyScalar( 0.5 );\r\n\r\n\t\tthis.min.copy( center ).sub( halfSize );\r\n\t\tthis.max.copy( center ).add( halfSize );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the world-axis-aligned bounding box for the given 3D object\r\n\t * (including its children), accounting for the object's, and children's,\r\n\t * world transforms. The function may result in a larger box than strictly necessary.\r\n\t *\r\n\t * @param {Object3D} object - The 3D object to compute the bounding box for.\r\n\t * @param {boolean} [precise=false] - If set to `true`, the method computes the smallest\r\n\t * world-axis-aligned bounding box at the expense of more computation.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tsetFromObject( object, precise = false ) {\r\n\r\n\t\tthis.makeEmpty();\r\n\r\n\t\treturn this.expandByObject( object, precise );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new box with copied values from this instance.\r\n\t *\r\n\t * @return {Box3} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given box to this instance.\r\n\t *\r\n\t * @param {Box3} box - The box to copy.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tcopy( box ) {\r\n\r\n\t\tthis.min.copy( box.min );\r\n\t\tthis.max.copy( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Makes this box empty which means in encloses a zero space in 3D.\r\n\t *\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.min.x = this.min.y = this.min.z = + Infinity;\r\n\t\tthis.max.x = this.max.y = this.max.z = - Infinity;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns true if this box includes zero points within its bounds.\r\n\t * Note that a box with equal lower and upper bounds still includes one\r\n\t * point, the one both bounds share.\r\n\t *\r\n\t * @return {boolean} Whether this box is empty or not.\r\n\t */\r\n\tisEmpty() {\r\n\r\n\t\t// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\r\n\r\n\t\treturn ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the center point of this box.\r\n\t *\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The center point.\r\n\t */\r\n\tgetCenter( target ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the dimensions of this box.\r\n\t *\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The size.\r\n\t */\r\n\tgetSize( target ) {\r\n\r\n\t\treturn this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Expands the boundaries of this box to include the given point.\r\n\t *\r\n\t * @param {Vector3} point - The point that should be included by the bounding box.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\texpandByPoint( point ) {\r\n\r\n\t\tthis.min.min( point );\r\n\t\tthis.max.max( point );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Expands this box equilaterally by the given vector. The width of this\r\n\t * box will be expanded by the x component of the vector in both\r\n\t * directions. The height of this box will be expanded by the y component of\r\n\t * the vector in both directions. The depth of this box will be\r\n\t * expanded by the z component of the vector in both directions.\r\n\t *\r\n\t * @param {Vector3} vector - The vector that should expand the bounding box.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\texpandByVector( vector ) {\r\n\r\n\t\tthis.min.sub( vector );\r\n\t\tthis.max.add( vector );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Expands each dimension of the box by the given scalar. If negative, the\r\n\t * dimensions of the box will be contracted.\r\n\t *\r\n\t * @param {number} scalar - The scalar value that should expand the bounding box.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\texpandByScalar( scalar ) {\r\n\r\n\t\tthis.min.addScalar( - scalar );\r\n\t\tthis.max.addScalar( scalar );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Expands the boundaries of this box to include the given 3D object and\r\n\t * its children, accounting for the object's, and children's, world\r\n\t * transforms. The function may result in a larger box than strictly\r\n\t * necessary (unless the precise parameter is set to true).\r\n\t *\r\n\t * @param {Object3D} object - The 3D object that should expand the bounding box.\r\n\t * @param {boolean} precise - If set to `true`, the method expands the bounding box\r\n\t * as little as necessary at the expense of more computation.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\texpandByObject( object, precise = false ) {\r\n\r\n\t\t// Computes the world-axis-aligned bounding box of an object (including its children),\r\n\t\t// accounting for both the object's, and children's, world transforms\r\n\r\n\t\tobject.updateWorldMatrix( false, false );\r\n\r\n\t\tconst geometry = object.geometry;\r\n\r\n\t\tif ( geometry !== undefined ) {\r\n\r\n\t\t\tconst positionAttribute = geometry.getAttribute( 'position' );\r\n\r\n\t\t\t// precise AABB computation based on vertex data requires at least a position attribute.\r\n\t\t\t// instancing isn't supported so far and uses the normal (conservative) code path.\r\n\r\n\t\t\tif ( precise === true && positionAttribute !== undefined && object.isInstancedMesh !== true ) {\r\n\r\n\t\t\t\tfor ( let i = 0, l = positionAttribute.count; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( object.isMesh === true ) {\r\n\r\n\t\t\t\t\t\tobject.getVertexPosition( i, _vector );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_vector.fromBufferAttribute( positionAttribute, i );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_vector.applyMatrix4( object.matrixWorld );\r\n\t\t\t\t\tthis.expandByPoint( _vector );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( object.boundingBox !== undefined ) {\r\n\r\n\t\t\t\t\t// object-level bounding box\r\n\r\n\t\t\t\t\tif ( object.boundingBox === null ) {\r\n\r\n\t\t\t\t\t\tobject.computeBoundingBox();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_box.copy( object.boundingBox );\r\n\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// geometry-level bounding box\r\n\r\n\t\t\t\t\tif ( geometry.boundingBox === null ) {\r\n\r\n\t\t\t\t\t\tgeometry.computeBoundingBox();\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_box.copy( geometry.boundingBox );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\t_box.applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\t\tthis.union( _box );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst children = object.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tthis.expandByObject( children[ i ], precise );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given point lies within or on the boundaries of this box.\r\n\t *\r\n\t * @param {Vector3} point - The point to test.\r\n\t * @return {boolean} Whether the bounding box contains the given point or not.\r\n\t */\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn point.x >= this.min.x && point.x <= this.max.x &&\r\n\t\t\tpoint.y >= this.min.y && point.y <= this.max.y &&\r\n\t\t\tpoint.z >= this.min.z && point.z <= this.max.z;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this bounding box includes the entirety of the given bounding box.\r\n\t * If this box and the given one are identical, this function also returns `true`.\r\n\t *\r\n\t * @param {Box3} box - The bounding box to test.\r\n\t * @return {boolean} Whether the bounding box contains the given bounding box or not.\r\n\t */\r\n\tcontainsBox( box ) {\r\n\r\n\t\treturn this.min.x <= box.min.x && box.max.x <= this.max.x &&\r\n\t\t\tthis.min.y <= box.min.y && box.max.y <= this.max.y &&\r\n\t\t\tthis.min.z <= box.min.z && box.max.z <= this.max.z;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a point as a proportion of this box's width, height and depth.\r\n\t *\r\n\t * @param {Vector3} point - A point in 3D space.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} A point as a proportion of this box's width, height and depth.\r\n\t */\r\n\tgetParameter( point, target ) {\r\n\r\n\t\t// This can potentially have a divide by zero if the box\r\n\t\t// has a size dimension of 0.\r\n\r\n\t\treturn target.set(\r\n\t\t\t( point.x - this.min.x ) / ( this.max.x - this.min.x ),\r\n\t\t\t( point.y - this.min.y ) / ( this.max.y - this.min.y ),\r\n\t\t\t( point.z - this.min.z ) / ( this.max.z - this.min.z )\r\n\t\t);\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given bounding box intersects with this bounding box.\r\n\t *\r\n\t * @param {Box3} box - The bounding box to test.\r\n\t * @return {boolean} Whether the given bounding box intersects with this bounding box.\r\n\t */\r\n\tintersectsBox( box ) {\r\n\r\n\t\t// using 6 splitting planes to rule out intersections.\r\n\t\treturn box.max.x >= this.min.x && box.min.x <= this.max.x &&\r\n\t\t\tbox.max.y >= this.min.y && box.min.y <= this.max.y &&\r\n\t\t\tbox.max.z >= this.min.z && box.min.z <= this.max.z;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given bounding sphere intersects with this bounding box.\r\n\t *\r\n\t * @param {Sphere} sphere - The bounding sphere to test.\r\n\t * @return {boolean} Whether the given bounding sphere intersects with this bounding box.\r\n\t */\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\t// Find the point on the AABB closest to the sphere center.\r\n\t\tthis.clampPoint( sphere.center, _vector );\r\n\r\n\t\t// If that point is inside the sphere, the AABB and sphere intersect.\r\n\t\treturn _vector.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given plane intersects with this bounding box.\r\n\t *\r\n\t * @param {Plane} plane - The plane to test.\r\n\t * @return {boolean} Whether the given plane intersects with this bounding box.\r\n\t */\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\t// We compute the minimum and maximum dot product values. If those values\r\n\t\t// are on the same side (back or front) of the plane, then there is no intersection.\r\n\r\n\t\tlet min, max;\r\n\r\n\t\tif ( plane.normal.x > 0 ) {\r\n\r\n\t\t\tmin = plane.normal.x * this.min.x;\r\n\t\t\tmax = plane.normal.x * this.max.x;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin = plane.normal.x * this.max.x;\r\n\t\t\tmax = plane.normal.x * this.min.x;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.y > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.y * this.min.y;\r\n\t\t\tmax += plane.normal.y * this.max.y;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.y * this.max.y;\r\n\t\t\tmax += plane.normal.y * this.min.y;\r\n\r\n\t\t}\r\n\r\n\t\tif ( plane.normal.z > 0 ) {\r\n\r\n\t\t\tmin += plane.normal.z * this.min.z;\r\n\t\t\tmax += plane.normal.z * this.max.z;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmin += plane.normal.z * this.max.z;\r\n\t\t\tmax += plane.normal.z * this.min.z;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( min <= - plane.constant && max >= - plane.constant );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given triangle intersects with this bounding box.\r\n\t *\r\n\t * @param {Triangle} triangle - The triangle to test.\r\n\t * @return {boolean} Whether the given triangle intersects with this bounding box.\r\n\t */\r\n\tintersectsTriangle( triangle ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// compute box center and extents\r\n\t\tthis.getCenter( _center );\r\n\t\t_extents.subVectors( this.max, _center );\r\n\r\n\t\t// translate triangle to aabb origin\r\n\t\t_v0.subVectors( triangle.a, _center );\r\n\t\t_v1.subVectors( triangle.b, _center );\r\n\t\t_v2.subVectors( triangle.c, _center );\r\n\r\n\t\t// compute edge vectors for triangle\r\n\t\t_f0.subVectors( _v1, _v0 );\r\n\t\t_f1.subVectors( _v2, _v1 );\r\n\t\t_f2.subVectors( _v0, _v2 );\r\n\r\n\t\t// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb\r\n\t\t// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation\r\n\t\t// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)\r\n\t\tlet axes = [\r\n\t\t\t0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,\r\n\t\t\t_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,\r\n\t\t\t- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0\r\n\t\t];\r\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// test 3 face normals from the aabb\r\n\t\taxes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];\r\n\t\tif ( ! satForAxes( axes, _v0, _v1, _v2, _extents ) ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// finally testing the face normal of the triangle\r\n\t\t// use already existing triangle edge vectors here\r\n\t\t_triangleNormal.crossVectors( _f0, _f1 );\r\n\t\taxes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];\r\n\r\n\t\treturn satForAxes( axes, _v0, _v1, _v2, _extents );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clamps the given point within the bounds of this box.\r\n\t *\r\n\t * @param {Vector3} point - The point to clamp.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The clamped point.\r\n\t */\r\n\tclampPoint( point, target ) {\r\n\r\n\t\treturn target.copy( point ).clamp( this.min, this.max );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the euclidean distance from any edge of this box to the specified point. If\r\n\t * the given point lies inside of this box, the distance will be `0`.\r\n\t *\r\n\t * @param {Vector3} point - The point to compute the distance to.\r\n\t * @return {number} The euclidean distance.\r\n\t */\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn this.clampPoint( point, _vector ).distanceTo( point );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a bounding sphere that encloses this bounding box.\r\n\t *\r\n\t * @param {Sphere} target - The target sphere that is used to store the method's result.\r\n\t * @return {Sphere} The bounding sphere that encloses this bounding box.\r\n\t */\r\n\tgetBoundingSphere( target ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\ttarget.makeEmpty();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.getCenter( target.center );\r\n\r\n\t\t\ttarget.radius = this.getSize( _vector ).length() * 0.5;\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the intersection of this bounding box and the given one, setting the upper\r\n\t * bound of this box to the lesser of the two boxes' upper bounds and the\r\n\t * lower bound of this box to the greater of the two boxes' lower bounds. If\r\n\t * there's no overlap, makes this box empty.\r\n\t *\r\n\t * @param {Box3} box - The bounding box to intersect with.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tintersect( box ) {\r\n\r\n\t\tthis.min.max( box.min );\r\n\t\tthis.max.min( box.max );\r\n\r\n\t\t// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.\r\n\t\tif ( this.isEmpty() ) this.makeEmpty();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the union of this box and another and the given one, setting the upper\r\n\t * bound of this box to the greater of the two boxes' upper bounds and the\r\n\t * lower bound of this box to the lesser of the two boxes' lower bounds.\r\n\t *\r\n\t * @param {Box3} box - The bounding box that will be unioned with this instance.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tunion( box ) {\r\n\r\n\t\tthis.min.min( box.min );\r\n\t\tthis.max.max( box.max );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms this bounding box by the given 4x4 transformation matrix.\r\n\t *\r\n\t * @param {Matrix4} matrix - The transformation matrix.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\t// transform of empty box is an empty box.\r\n\t\tif ( this.isEmpty() ) return this;\r\n\r\n\t\t// NOTE: I am using a binary pattern to specify all 2^3 combinations below\r\n\t\t_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000\r\n\t\t_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001\r\n\t\t_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010\r\n\t\t_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011\r\n\t\t_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100\r\n\t\t_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101\r\n\t\t_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110\r\n\t\t_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111\r\n\r\n\t\tthis.setFromPoints( _points );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given offset to both the upper and lower bounds of this bounding box,\r\n\t * effectively moving it in 3D space.\r\n\t *\r\n\t * @param {Vector3} offset - The offset that should be used to translate the bounding box.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.min.add( offset );\r\n\t\tthis.max.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this bounding box is equal with the given one.\r\n\t *\r\n\t * @param {Box3} box - The box to test for equality.\r\n\t * @return {boolean} Whether this bounding box is equal with the given one.\r\n\t */\r\n\tequals( box ) {\r\n\r\n\t\treturn box.min.equals( this.min ) && box.max.equals( this.max );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a serialized structure of the bounding box.\r\n\t *\r\n\t * @return {Object} Serialized structure with fields representing the object state.\r\n\t */\r\n\ttoJSON() {\r\n\r\n\t\treturn {\r\n\t\t\tmin: this.min.toArray(),\r\n\t\t\tmax: this.max.toArray()\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a serialized structure of the bounding box.\r\n\t *\r\n\t * @param {Object} json - The serialized json to set the box from.\r\n\t * @return {Box3} A reference to this bounding box.\r\n\t */\r\n\tfromJSON( json ) {\r\n\r\n\t\tthis.min.fromArray( json.min );\r\n\t\tthis.max.fromArray( json.max );\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _points = [\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3(),\r\n\t/*@__PURE__*/ new Vector3()\r\n];\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\nconst _box = /*@__PURE__*/ new Box3();\r\n\r\n// triangle centered vertices\r\n\r\nconst _v0 = /*@__PURE__*/ new Vector3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\n\r\n// triangle edge vectors\r\n\r\nconst _f0 = /*@__PURE__*/ new Vector3();\r\nconst _f1 = /*@__PURE__*/ new Vector3();\r\nconst _f2 = /*@__PURE__*/ new Vector3();\r\n\r\nconst _center = /*@__PURE__*/ new Vector3();\r\nconst _extents = /*@__PURE__*/ new Vector3();\r\nconst _triangleNormal = /*@__PURE__*/ new Vector3();\r\nconst _testAxis = /*@__PURE__*/ new Vector3();\r\n\r\nfunction satForAxes( axes, v0, v1, v2, extents ) {\r\n\r\n\tfor ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {\r\n\r\n\t\t_testAxis.fromArray( axes, i );\r\n\t\t// project the aabb onto the separating axis\r\n\t\tconst r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );\r\n\t\t// project all 3 vertices of the triangle onto the separating axis\r\n\t\tconst p0 = v0.dot( _testAxis );\r\n\t\tconst p1 = v1.dot( _testAxis );\r\n\t\tconst p2 = v2.dot( _testAxis );\r\n\t\t// actual test, basically see if either of the most extreme of the triangle points intersects r\r\n\t\tif ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {\r\n\r\n\t\t\t// points of the projected triangle are outside the projected half-length of the aabb\r\n\t\t\t// the axis is separating and we can exit\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn true;\r\n\r\n}\r\n\r\nexport { Box3 };\r\n", "import { Box3 } from './Box3.js';\r\nimport { Vector3 } from './Vector3.js';\r\n\r\nconst _box = /*@__PURE__*/ new Box3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\n\r\n/**\r\n * An analytical 3D sphere defined by a center and radius. This class is mainly\r\n * used as a Bounding Sphere for 3D objects.\r\n */\r\nclass Sphere {\r\n\r\n\t/**\r\n\t * Constructs a new sphere.\r\n\t *\r\n\t * @param {Vector3} [center=(0,0,0)] - The center of the sphere\r\n\t * @param {number} [radius=-1] - The radius of the sphere.\r\n\t */\r\n\tconstructor( center = new Vector3(), radius = - 1 ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isSphere = true;\r\n\r\n\t\t/**\r\n\t\t * The center of the sphere\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.center = center;\r\n\r\n\t\t/**\r\n\t\t * The radius of the sphere.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.radius = radius;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the sphere's components by copying the given values.\r\n\t *\r\n\t * @param {Vector3} center - The center.\r\n\t * @param {number} radius - The radius.\r\n\t * @return {Sphere} A reference to this sphere.\r\n\t */\r\n\tset( center, radius ) {\r\n\r\n\t\tthis.center.copy( center );\r\n\t\tthis.radius = radius;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the minimum bounding sphere for list of points.\r\n\t * If the optional center point is given, it is used as the sphere's\r\n\t * center. Otherwise, the center of the axis-aligned bounding box\r\n\t * encompassing the points is calculated.\r\n\t *\r\n\t * @param {Array<Vector3>} points - A list of points in 3D space.\r\n\t * @param {Vector3} [optionalCenter] - The center of the sphere.\r\n\t * @return {Sphere} A reference to this sphere.\r\n\t */\r\n\tsetFromPoints( points, optionalCenter ) {\r\n\r\n\t\tconst center = this.center;\r\n\r\n\t\tif ( optionalCenter !== undefined ) {\r\n\r\n\t\t\tcenter.copy( optionalCenter );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_box.setFromPoints( points ).getCenter( center );\r\n\r\n\t\t}\r\n\r\n\t\tlet maxRadiusSq = 0;\r\n\r\n\t\tfor ( let i = 0, il = points.length; i < il; i ++ ) {\r\n\r\n\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );\r\n\r\n\t\t}\r\n\r\n\t\tthis.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given sphere to this instance.\r\n\t *\r\n\t * @param {Sphere} sphere - The sphere to copy.\r\n\t * @return {Sphere} A reference to this sphere.\r\n\t */\r\n\tcopy( sphere ) {\r\n\r\n\t\tthis.center.copy( sphere.center );\r\n\t\tthis.radius = sphere.radius;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the sphere is empty (the radius set to a negative number).\r\n\t *\r\n\t * Spheres with a radius of `0` contain only their center point and are not\r\n\t * considered to be empty.\r\n\t *\r\n\t * @return {boolean} Whether this sphere is empty or not.\r\n\t */\r\n\tisEmpty() {\r\n\r\n\t\treturn ( this.radius < 0 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Makes this sphere empty which means in encloses a zero space in 3D.\r\n\t *\r\n\t * @return {Sphere} A reference to this sphere.\r\n\t */\r\n\tmakeEmpty() {\r\n\r\n\t\tthis.center.set( 0, 0, 0 );\r\n\t\tthis.radius = - 1;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this sphere contains the given point inclusive of\r\n\t * the surface of the sphere.\r\n\t *\r\n\t * @param {Vector3} point - The point to check.\r\n\t * @return {boolean} Whether this sphere contains the given point or not.\r\n\t */\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the closest distance from the boundary of the sphere to the\r\n\t * given point. If the sphere contains the point, the distance will\r\n\t * be negative.\r\n\t *\r\n\t * @param {Vector3} point - The point to compute the distance to.\r\n\t * @return {number} The distance to the point.\r\n\t */\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn ( point.distanceTo( this.center ) - this.radius );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this sphere intersects with the given one.\r\n\t *\r\n\t * @param {Sphere} sphere - The sphere to test.\r\n\t * @return {boolean} Whether this sphere intersects with the given one or not.\r\n\t */\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\tconst radiusSum = this.radius + sphere.radius;\r\n\r\n\t\treturn sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this sphere intersects with the given box.\r\n\t *\r\n\t * @param {Box3} box - The box to test.\r\n\t * @return {boolean} Whether this sphere intersects with the given box or not.\r\n\t */\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsSphere( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this sphere intersects with the given plane.\r\n\t *\r\n\t * @param {Plane} plane - The plane to test.\r\n\t * @return {boolean} Whether this sphere intersects with the given plane or not.\r\n\t */\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\treturn Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clamps a point within the sphere. If the point is outside the sphere, it\r\n\t * will clamp it to the closest point on the edge of the sphere. Points\r\n\t * already inside the sphere will not be affected.\r\n\t *\r\n\t * @param {Vector3} point - The plane to clamp.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The clamped point.\r\n\t */\r\n\tclampPoint( point, target ) {\r\n\r\n\t\tconst deltaLengthSq = this.center.distanceToSquared( point );\r\n\r\n\t\ttarget.copy( point );\r\n\r\n\t\tif ( deltaLengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\ttarget.sub( this.center ).normalize();\r\n\t\t\ttarget.multiplyScalar( this.radius ).add( this.center );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a bounding box that encloses this sphere.\r\n\t *\r\n\t * @param {Box3} target - The target box that is used to store the method's result.\r\n\t * @return {Box3} The bounding box that encloses this sphere.\r\n\t */\r\n\tgetBoundingBox( target ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\t// Empty sphere produces empty bounding box\r\n\t\t\ttarget.makeEmpty();\r\n\t\t\treturn target;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.set( this.center, this.center );\r\n\t\ttarget.expandByScalar( this.radius );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms this sphere with the given 4x4 transformation matrix.\r\n\t *\r\n\t * @param {Matrix4} matrix - The transformation matrix.\r\n\t * @return {Sphere} A reference to this sphere.\r\n\t */\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tthis.center.applyMatrix4( matrix );\r\n\t\tthis.radius = this.radius * matrix.getMaxScaleOnAxis();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Translates the sphere's center by the given offset.\r\n\t *\r\n\t * @param {Vector3} offset - The offset.\r\n\t * @return {Sphere} A reference to this sphere.\r\n\t */\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.center.add( offset );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Expands the boundaries of this sphere to include the given point.\r\n\t *\r\n\t * @param {Vector3} point - The point to include.\r\n\t * @return {Sphere} A reference to this sphere.\r\n\t */\r\n\texpandByPoint( point ) {\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\tthis.center.copy( point );\r\n\r\n\t\t\tthis.radius = 0;\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\t_v1.subVectors( point, this.center );\r\n\r\n\t\tconst lengthSq = _v1.lengthSq();\r\n\r\n\t\tif ( lengthSq > ( this.radius * this.radius ) ) {\r\n\r\n\t\t\t// calculate the minimal sphere\r\n\r\n\t\t\tconst length = Math.sqrt( lengthSq );\r\n\r\n\t\t\tconst delta = ( length - this.radius ) * 0.5;\r\n\r\n\t\t\tthis.center.addScaledVector( _v1, delta / length );\r\n\r\n\t\t\tthis.radius += delta;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Expands this sphere to enclose both the original sphere and the given sphere.\r\n\t *\r\n\t * @param {Sphere} sphere - The sphere to include.\r\n\t * @return {Sphere} A reference to this sphere.\r\n\t */\r\n\tunion( sphere ) {\r\n\r\n\t\tif ( sphere.isEmpty() ) {\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isEmpty() ) {\r\n\r\n\t\t\tthis.copy( sphere );\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.center.equals( sphere.center ) === true ) {\r\n\r\n\t\t\t this.radius = Math.max( this.radius, sphere.radius );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_v2.subVectors( sphere.center, this.center ).setLength( sphere.radius );\r\n\r\n\t\t\tthis.expandByPoint( _v1.copy( sphere.center ).add( _v2 ) );\r\n\r\n\t\t\tthis.expandByPoint( _v1.copy( sphere.center ).sub( _v2 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this sphere is equal with the given one.\r\n\t *\r\n\t * @param {Sphere} sphere - The sphere to test for equality.\r\n\t * @return {boolean} Whether this bounding sphere is equal with the given one.\r\n\t */\r\n\tequals( sphere ) {\r\n\r\n\t\treturn sphere.center.equals( this.center ) && ( sphere.radius === this.radius );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new sphere with copied values from this instance.\r\n\t *\r\n\t * @return {Sphere} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a serialized structure of the bounding sphere.\r\n\t *\r\n\t * @return {Object} Serialized structure with fields representing the object state.\r\n\t */\r\n\ttoJSON() {\r\n\r\n\t\treturn {\r\n\t\t\tradius: this.radius,\r\n\t\t\tcenter: this.center.toArray()\r\n\t\t};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a serialized structure of the bounding sphere.\r\n\t *\r\n\t * @param {Object} json - The serialized json to set the sphere from.\r\n\t * @return {Box3} A reference to this bounding sphere.\r\n\t */\r\n\tfromJSON( json ) {\r\n\r\n\t\tthis.radius = json.radius;\r\n\t\tthis.center.fromArray( json.center );\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Sphere };\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport UniformNode from '../core/UniformNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Sphere } from '../../math/Sphere.js';\r\n\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\n\r\n/**\r\n * This node can be used to access transformation related metrics of 3D objects.\r\n * Depending on the selected scope, a different metric is represented as a uniform\r\n * in the shader. The following scopes are supported:\r\n *\r\n * - `POSITION`: The object's position in world space.\r\n * - `VIEW_POSITION`: The object's position in view/camera space.\r\n * - `DIRECTION`: The object's direction in world space.\r\n * - `SCALE`: The object's scale in world space.\r\n * - `WORLD_MATRIX`: The object's matrix in world space.\r\n *\r\n * @augments Node\r\n */\r\nclass Object3DNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'Object3DNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new object 3D node.\r\n\t *\r\n\t * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.\r\n\t * @param {?Object3D} [object3d=null] - The 3D object.\r\n\t */\r\n\tconstructor( scope, object3d = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node reports a different type of transformation depending on the scope.\r\n\t\t *\r\n\t\t * @type {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')}\r\n\t\t */\r\n\t\tthis.scope = scope;\r\n\r\n\t\t/**\r\n\t\t * The 3D object.\r\n\t\t *\r\n\t\t * @type {?Object3D}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.object3d = object3d;\r\n\r\n\t\t/**\r\n\t\t * Overwritten since this type of node is updated per object.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'object'\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t\t/**\r\n\t\t * Holds the value of the node as a uniform.\r\n\t\t *\r\n\t\t * @type {UniformNode}\r\n\t\t */\r\n\t\tthis.uniformNode = new UniformNode( null );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten since the node type is inferred from the scope.\r\n\t *\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType() {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\r\n\r\n\t\t\treturn 'mat4';\r\n\r\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {\r\n\r\n\t\t\treturn 'vec3';\r\n\r\n\t\t} else if ( scope === Object3DNode.RADIUS ) {\r\n\r\n\t\t\treturn 'float';\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the uniform value depending on the scope.\r\n\t *\r\n\t * @param {NodeFrame} frame - The current node frame.\r\n\t */\r\n\tupdate( frame ) {\r\n\r\n\t\tconst object = this.object3d;\r\n\t\tconst uniformNode = this.uniformNode;\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\r\n\r\n\t\t\tuniformNode.value = object.matrixWorld;\r\n\r\n\t\t} else if ( scope === Object3DNode.POSITION ) {\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\r\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\r\n\r\n\t\t} else if ( scope === Object3DNode.SCALE ) {\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\r\n\t\t\tuniformNode.value.setFromMatrixScale( object.matrixWorld );\r\n\r\n\t\t} else if ( scope === Object3DNode.DIRECTION ) {\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\r\n\t\t\tobject.getWorldDirection( uniformNode.value );\r\n\r\n\t\t} else if ( scope === Object3DNode.VIEW_POSITION ) {\r\n\r\n\t\t\tconst camera = frame.camera;\r\n\r\n\t\t\tuniformNode.value = uniformNode.value || new Vector3();\r\n\t\t\tuniformNode.value.setFromMatrixPosition( object.matrixWorld );\r\n\r\n\t\t\tuniformNode.value.applyMatrix4( camera.matrixWorldInverse );\r\n\r\n\t\t} else if ( scope === Object3DNode.RADIUS ) {\r\n\r\n\t\t\tconst geometry = frame.object.geometry;\r\n\r\n\t\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t\t_sphere.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );\r\n\r\n\t\t\tuniformNode.value = _sphere.radius;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the code snippet of the uniform node. The node type of the uniform\r\n\t * node also depends on the selected scope.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The generated code snippet.\r\n\t */\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tif ( scope === Object3DNode.WORLD_MATRIX ) {\r\n\r\n\t\t\tthis.uniformNode.nodeType = 'mat4';\r\n\r\n\t\t} else if ( scope === Object3DNode.POSITION || scope === Object3DNode.VIEW_POSITION || scope === Object3DNode.DIRECTION || scope === Object3DNode.SCALE ) {\r\n\r\n\t\t\tthis.uniformNode.nodeType = 'vec3';\r\n\r\n\t\t} else if ( scope === Object3DNode.RADIUS ) {\r\n\r\n\t\t\tthis.uniformNode.nodeType = 'float';\r\n\r\n\t\t}\r\n\r\n\t\treturn this.uniformNode.build( builder );\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.scope = this.scope;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.scope = data.scope;\r\n\r\n\t}\r\n\r\n}\r\n\r\nObject3DNode.WORLD_MATRIX = 'worldMatrix';\r\nObject3DNode.POSITION = 'position';\r\nObject3DNode.SCALE = 'scale';\r\nObject3DNode.VIEW_POSITION = 'viewPosition';\r\nObject3DNode.DIRECTION = 'direction';\r\nObject3DNode.RADIUS = 'radius';\r\n\r\nexport default Object3DNode;\r\n\r\n/**\r\n * TSL function for creating an object 3D node that represents the object's direction in world space.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Object3D} [object3d] - The 3D object.\r\n * @returns {Object3DNode<vec3>}\r\n */\r\nexport const objectDirection = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.DIRECTION ).setParameterLength( 1 );\r\n\r\n/**\r\n * TSL function for creating an object 3D node that represents the object's world matrix.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Object3D} [object3d] - The 3D object.\r\n * @returns {Object3DNode<mat4>}\r\n */\r\nexport const objectWorldMatrix = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.WORLD_MATRIX ).setParameterLength( 1 );\r\n\r\n/**\r\n * TSL function for creating an object 3D node that represents the object's position in world space.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Object3D} [object3d] - The 3D object.\r\n * @returns {Object3DNode<vec3>}\r\n */\r\nexport const objectPosition = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.POSITION ).setParameterLength( 1 );\r\n\r\n/**\r\n * TSL function for creating an object 3D node that represents the object's scale in world space.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Object3D} [object3d] - The 3D object.\r\n * @returns {Object3DNode<vec3>}\r\n */\r\nexport const objectScale = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.SCALE ).setParameterLength( 1 );\r\n\r\n/**\r\n * TSL function for creating an object 3D node that represents the object's position in view/camera space.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Object3D} [object3d] - The 3D object.\r\n * @returns {Object3DNode<vec3>}\r\n */\r\nexport const objectViewPosition = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.VIEW_POSITION ).setParameterLength( 1 );\r\n\r\n/**\r\n * TSL function for creating an object 3D node that represents the object's radius.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Object3D} [object3d] - The 3D object.\r\n * @returns {Object3DNode<float>}\r\n */\r\nexport const objectRadius = /*@__PURE__*/ nodeProxy( Object3DNode, Object3DNode.RADIUS ).setParameterLength( 1 );\r\n", "import UniformNode from '../core/UniformNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * A special type of uniform node which represents array-like data\r\n * as uniform buffers. The access usually happens via `element()`\r\n * which returns an instance of {@link ArrayElementNode}. For example:\r\n *\r\n * ```js\r\n * const bufferNode = buffer( array, 'mat4', count );\r\n * const matrixNode = bufferNode.element( index ); // access a matrix from the buffer\r\n * ```\r\n * In general, it is recommended to use the more managed {@link UniformArrayNode}\r\n * since it handles more input types and automatically cares about buffer paddings.\r\n *\r\n * @augments UniformNode\r\n */\r\nclass BufferNode extends UniformNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BufferNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new buffer node.\r\n\t *\r\n\t * @param {Array<number>} value - Array-like buffer data.\r\n\t * @param {string} bufferType - The data type of the buffer.\r\n\t * @param {number} [bufferCount=0] - The count of buffer elements.\r\n\t */\r\n\tconstructor( value, bufferType, bufferCount = 0 ) {\r\n\r\n\t\tsuper( value, bufferType );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isBufferNode = true;\r\n\r\n\t\t/**\r\n\t\t * The data type of the buffer.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.bufferType = bufferType;\r\n\r\n\t\t/**\r\n\t\t * The uniform node that holds the value of the reference node.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.bufferCount = bufferCount;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The data type of the buffer elements.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The element type.\r\n\t */\r\n\tgetElementType( builder ) {\r\n\r\n\t\treturn this.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation to return a fixed value `'buffer'`.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The input type.\r\n\t */\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'buffer';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BufferNode;\r\n\r\n/**\r\n * TSL function for creating a buffer node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Array} value - Array-like buffer data.\r\n * @param {string} type - The data type of a buffer element.\r\n * @param {number} count - The count of buffer elements.\r\n * @returns {BufferNode}\r\n */\r\nexport const buffer = ( value, type, count ) => nodeObject( new BufferNode( value, type, count ) );\r\n", "import { nodeObject } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { getValueType } from '../core/NodeUtils.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\nimport BufferNode from './BufferNode.js';\r\n\r\n/**\r\n * Represents the element access on uniform array nodes.\r\n *\r\n * @augments ArrayElementNode\r\n */\r\nclass UniformArrayElementNode extends ArrayElementNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'UniformArrayElementNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new buffer node.\r\n\t *\r\n\t * @param {UniformArrayNode} uniformArrayNode - The uniform array node to access.\r\n\t * @param {IndexNode} indexNode - The index data that define the position of the accessed element in the array.\r\n\t */\r\n\tconstructor( uniformArrayNode, indexNode ) {\r\n\r\n\t\tsuper( uniformArrayNode, indexNode );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isArrayBufferElementNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = super.generate( builder );\r\n\t\tconst type = this.getNodeType();\r\n\t\tconst paddedType = this.node.getPaddedType();\r\n\r\n\t\treturn builder.format( snippet, paddedType, type );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Similar to {@link BufferNode} this module represents array-like data as\r\n * uniform buffers. Unlike {@link BufferNode}, it can handle more common\r\n * data types in the array (e.g `three.js` primitives) and automatically\r\n * manage buffer padding. It should be the first choice when working with\r\n * uniforms buffers.\r\n * ```js\r\n * const tintColors = uniformArray( [\r\n * \tnew Color( 1, 0, 0 ),\r\n * \tnew Color( 0, 1, 0 ),\r\n * \tnew Color( 0, 0, 1 )\r\n * ], 'color' );\r\n *\r\n * const redColor = tintColors.element( 0 );\r\n *\r\n * @augments BufferNode\r\n */\r\nclass UniformArrayNode extends BufferNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'UniformArrayNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new uniform array node.\r\n\t *\r\n\t * @param {Array<any>} value - Array holding the buffer data.\r\n\t * @param {?string} [elementType=null] - The data type of a buffer element.\r\n\t */\r\n\tconstructor( value, elementType = null ) {\r\n\r\n\t\tsuper( null );\r\n\r\n\t\t/**\r\n\t\t * Array holding the buffer data. Unlike {@link BufferNode}, the array can\r\n\t\t * hold number primitives as well as three.js objects like vectors, matrices\r\n\t\t * or colors.\r\n\t\t *\r\n\t\t * @type {Array<any>}\r\n\t\t */\r\n\t\tthis.array = value;\r\n\r\n\t\t/**\r\n\t\t * The data type of an array element.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.elementType = elementType === null ? getValueType( value[ 0 ] ) : elementType;\r\n\r\n\t\t/**\r\n\t\t * The padded type. Uniform buffers must conform to a certain buffer layout\r\n\t\t * so a separate type is computed to ensure correct buffer size.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.paddedType = this.getPaddedType();\r\n\r\n\t\t/**\r\n\t\t * Overwritten since uniform array nodes are updated per render.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'render'\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.RENDER;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isArrayBufferNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from the\r\n\t * {@link UniformArrayNode#paddedType}.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\treturn this.paddedType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The data type of the array elements.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The element type.\r\n\t */\r\n\tgetElementType() {\r\n\r\n\t\treturn this.elementType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the padded type based on the element type.\r\n\t *\r\n\t * @return {string} The padded type.\r\n\t */\r\n\tgetPaddedType() {\r\n\r\n\t\tconst elementType = this.elementType;\r\n\r\n\t\tlet paddedType = 'vec4';\r\n\r\n\t\tif ( elementType === 'mat2' ) {\r\n\r\n\t\t\tpaddedType = 'mat2';\r\n\r\n\t\t} else if ( /mat/.test( elementType ) === true ) {\r\n\r\n\t\t\tpaddedType = 'mat4';\r\n\r\n\t\t} else if ( elementType.charAt( 0 ) === 'i' ) {\r\n\r\n\t\t\tpaddedType = 'ivec4';\r\n\r\n\t\t} else if ( elementType.charAt( 0 ) === 'u' ) {\r\n\r\n\t\t\tpaddedType = 'uvec4';\r\n\r\n\t\t}\r\n\r\n\t\treturn paddedType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The update makes sure to correctly transfer the data from the (complex) objects\r\n\t * in the array to the internal, correctly padded value buffer.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconst { array, value } = this;\r\n\r\n\t\tconst elementType = this.elementType;\r\n\r\n\t\tif ( elementType === 'float' || elementType === 'int' || elementType === 'uint' ) {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 4;\r\n\r\n\t\t\t\tvalue[ index ] = array[ i ];\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( elementType === 'color' ) {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 4;\r\n\t\t\t\tconst vector = array[ i ];\r\n\r\n\t\t\t\tvalue[ index ] = vector.r;\r\n\t\t\t\tvalue[ index + 1 ] = vector.g;\r\n\t\t\t\tvalue[ index + 2 ] = vector.b || 0;\r\n\t\t\t\t//value[ index + 3 ] = vector.a || 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( elementType === 'mat2' ) {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 4;\r\n\t\t\t\tconst matrix = array[ i ];\r\n\r\n\t\t\t\tvalue[ index ] = matrix.elements[ 0 ];\r\n\t\t\t\tvalue[ index + 1 ] = matrix.elements[ 1 ];\r\n\t\t\t\tvalue[ index + 2 ] = matrix.elements[ 2 ];\r\n\t\t\t\tvalue[ index + 3 ] = matrix.elements[ 3 ];\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( elementType === 'mat3' ) {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 16;\r\n\t\t\t\tconst matrix = array[ i ];\r\n\r\n\t\t\t\tvalue[ index ] = matrix.elements[ 0 ];\r\n\t\t\t\tvalue[ index + 1 ] = matrix.elements[ 1 ];\r\n\t\t\t\tvalue[ index + 2 ] = matrix.elements[ 2 ];\r\n\r\n\t\t\t\tvalue[ index + 4 ] = matrix.elements[ 3 ];\r\n\t\t\t\tvalue[ index + 5 ] = matrix.elements[ 4 ];\r\n\t\t\t\tvalue[ index + 6 ] = matrix.elements[ 5 ];\r\n\r\n\t\t\t\tvalue[ index + 8 ] = matrix.elements[ 6 ];\r\n\t\t\t\tvalue[ index + 9 ] = matrix.elements[ 7 ];\r\n\t\t\t\tvalue[ index + 10 ] = matrix.elements[ 8 ];\r\n\r\n\t\t\t\tvalue[ index + 15 ] = 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( elementType === 'mat4' ) {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 16;\r\n\t\t\t\tconst matrix = array[ i ];\r\n\r\n\t\t\t\tfor ( let i = 0; i < matrix.elements.length; i ++ ) {\r\n\r\n\t\t\t\t\tvalue[ index + i ] = matrix.elements[ i ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tfor ( let i = 0; i < array.length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i * 4;\r\n\t\t\t\tconst vector = array[ i ];\r\n\r\n\t\t\t\tvalue[ index ] = vector.x;\r\n\t\t\t\tvalue[ index + 1 ] = vector.y;\r\n\t\t\t\tvalue[ index + 2 ] = vector.z || 0;\r\n\t\t\t\tvalue[ index + 3 ] = vector.w || 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Implement the value buffer creation based on the array data.\r\n\t *\r\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\r\n\t * @return {null}\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tconst length = this.array.length;\r\n\t\tconst elementType = this.elementType;\r\n\r\n\t\tlet arrayType = Float32Array;\r\n\r\n\t\tconst paddedType = this.paddedType;\r\n\t\tconst paddedElementLength = builder.getTypeLength( paddedType );\r\n\r\n\t\tif ( elementType.charAt( 0 ) === 'i' ) arrayType = Int32Array;\r\n\t\tif ( elementType.charAt( 0 ) === 'u' ) arrayType = Uint32Array;\r\n\r\n\t\tthis.value = new arrayType( length * paddedElementLength );\r\n\t\tthis.bufferCount = length;\r\n\t\tthis.bufferType = paddedType;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default `element()` method to provide element access\r\n\t * based on {@link UniformArrayNode}.\r\n\t *\r\n\t * @param {IndexNode} indexNode - The index node.\r\n\t * @return {UniformArrayElementNode}\r\n\t */\r\n\telement( indexNode ) {\r\n\r\n\t\treturn nodeObject( new UniformArrayElementNode( this, nodeObject( indexNode ) ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default UniformArrayNode;\r\n\r\n/**\r\n * TSL function for creating an uniform array node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Array<any>} values - Array-like data.\r\n * @param {?string} [nodeType] - The data type of the array elements.\r\n * @returns {UniformArrayNode}\r\n */\r\nexport const uniformArray = ( values, nodeType ) => nodeObject( new UniformArrayNode( values, nodeType ) );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * The node allows to set values for built-in shader variables. That is\r\n * required for features like hardware-accelerated vertex clipping.\r\n *\r\n * @augments Node\r\n */\r\nclass BuiltinNode extends Node {\r\n\r\n\t/**\r\n\t * Constructs a new builtin node.\r\n\t *\r\n\t * @param {string} name - The name of the built-in shader variable.\r\n\t */\r\n\tconstructor( name ) {\r\n\r\n\t\tsuper( 'float' );\r\n\r\n\t\t/**\r\n\t\t * The name of the built-in shader variable.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.name = name;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isBuiltinNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the code snippet of the builtin node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The generated code snippet.\r\n\t */\r\n\tgenerate( /* builder */ ) {\r\n\r\n\t\treturn this.name;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BuiltinNode;\r\n\r\n/**\r\n * TSL function for creating a builtin node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The name of the built-in shader variable.\r\n * @returns {BuiltinNode}\r\n */\r\nexport const builtin = nodeProxy( BuiltinNode ).setParameterLength( 1 );\r\n", "import { uniform } from '../core/UniformNode.js';\r\nimport { renderGroup, sharedUniformGroup } from '../core/UniformGroupNode.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Fn } from '../tsl/TSLBase.js';\r\nimport { uniformArray } from './UniformArrayNode.js';\r\nimport { builtin } from './BuiltinNode.js';\r\n\r\n/**\r\n * TSL object that represents the current `index` value of the camera if used ArrayCamera.\r\n *\r\n * @tsl\r\n * @type {UniformNode<uint>}\r\n */\r\nexport const cameraIndex = /*@__PURE__*/ uniform( 0, 'uint' ).label( 'u_cameraIndex' ).setGroup( sharedUniformGroup( 'cameraIndex' ) ).toVarying( 'v_cameraIndex' );\r\n\r\n/**\r\n * TSL object that represents the `near` value of the camera used for the current render.\r\n *\r\n * @tsl\r\n * @type {UniformNode<float>}\r\n */\r\nexport const cameraNear = /*@__PURE__*/ uniform( 'float' ).label( 'cameraNear' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.near );\r\n\r\n/**\r\n * TSL object that represents the `far` value of the camera used for the current render.\r\n *\r\n * @tsl\r\n * @type {UniformNode<float>}\r\n */\r\nexport const cameraFar = /*@__PURE__*/ uniform( 'float' ).label( 'cameraFar' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.far );\r\n\r\n/**\r\n * TSL object that represents the projection matrix of the camera used for the current render.\r\n *\r\n * @tsl\r\n * @type {UniformNode<mat4>}\r\n */\r\nexport const cameraProjectionMatrix = /*@__PURE__*/ ( Fn( ( { camera } ) => {\r\n\r\n\tlet cameraProjectionMatrix;\r\n\r\n\tif ( camera.isArrayCamera && camera.cameras.length > 0 ) {\r\n\r\n\t\tconst matrices = [];\r\n\r\n\t\tfor ( const subCamera of camera.cameras ) {\r\n\r\n\t\t\tmatrices.push( subCamera.projectionMatrix );\r\n\r\n\t\t}\r\n\r\n\t\tconst cameraProjectionMatrices = uniformArray( matrices ).setGroup( renderGroup ).label( 'cameraProjectionMatrices' );\r\n\r\n\t\tcameraProjectionMatrix = cameraProjectionMatrices.element( camera.isMultiViewCamera ? builtin( 'gl_ViewID_OVR' ) : cameraIndex ).toVar( 'cameraProjectionMatrix' );\r\n\r\n\t} else {\r\n\r\n\t\tcameraProjectionMatrix = uniform( 'mat4' ).label( 'cameraProjectionMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.projectionMatrix );\r\n\r\n\t}\r\n\r\n\treturn cameraProjectionMatrix;\r\n\r\n} ).once() )();\r\n\r\n/**\r\n * TSL object that represents the inverse projection matrix of the camera used for the current render.\r\n *\r\n * @tsl\r\n * @type {UniformNode<mat4>}\r\n */\r\nexport const cameraProjectionMatrixInverse = /*@__PURE__*/ ( Fn( ( { camera } ) => {\r\n\r\n\tlet cameraProjectionMatrixInverse;\r\n\r\n\tif ( camera.isArrayCamera && camera.cameras.length > 0 ) {\r\n\r\n\t\tconst matrices = [];\r\n\r\n\t\tfor ( const subCamera of camera.cameras ) {\r\n\r\n\t\t\tmatrices.push( subCamera.projectionMatrixInverse );\r\n\r\n\t\t}\r\n\r\n\t\tconst cameraProjectionMatricesInverse = uniformArray( matrices ).setGroup( renderGroup ).label( 'cameraProjectionMatricesInverse' );\r\n\r\n\t\tcameraProjectionMatrixInverse = cameraProjectionMatricesInverse.element( camera.isMultiViewCamera ? builtin( 'gl_ViewID_OVR' ) : cameraIndex ).toVar( 'cameraProjectionMatrixInverse' );\r\n\r\n\t} else {\r\n\r\n\t\tcameraProjectionMatrixInverse = uniform( 'mat4' ).label( 'cameraProjectionMatrixInverse' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.projectionMatrixInverse );\r\n\r\n\t}\r\n\r\n\treturn cameraProjectionMatrixInverse;\r\n\r\n} ).once() )();\r\n\r\n/**\r\n * TSL object that represents the view matrix of the camera used for the current render.\r\n *\r\n * @tsl\r\n * @type {UniformNode<mat4>}\r\n */\r\nexport const cameraViewMatrix = /*@__PURE__*/ ( Fn( ( { camera } ) => {\r\n\r\n\tlet cameraViewMatrix;\r\n\r\n\tif ( camera.isArrayCamera && camera.cameras.length > 0 ) {\r\n\r\n\t\tconst matrices = [];\r\n\r\n\t\tfor ( const subCamera of camera.cameras ) {\r\n\r\n\t\t\tmatrices.push( subCamera.matrixWorldInverse );\r\n\r\n\t\t}\r\n\r\n\t\tconst cameraViewMatrices = uniformArray( matrices ).setGroup( renderGroup ).label( 'cameraViewMatrices' );\r\n\r\n\t\tcameraViewMatrix = cameraViewMatrices.element( camera.isMultiViewCamera ? builtin( 'gl_ViewID_OVR' ) : cameraIndex ).toVar( 'cameraViewMatrix' );\r\n\r\n\t} else {\r\n\r\n\t\tcameraViewMatrix = uniform( 'mat4' ).label( 'cameraViewMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.matrixWorldInverse );\r\n\r\n\t}\r\n\r\n\treturn cameraViewMatrix;\r\n\r\n} ).once() )();\r\n\r\n/**\r\n * TSL object that represents the world matrix of the camera used for the current render.\r\n *\r\n * @tsl\r\n * @type {UniformNode<mat4>}\r\n */\r\nexport const cameraWorldMatrix = /*@__PURE__*/ uniform( 'mat4' ).label( 'cameraWorldMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.matrixWorld );\r\n\r\n/**\r\n * TSL object that represents the normal matrix of the camera used for the current render.\r\n *\r\n * @tsl\r\n * @type {UniformNode<mat3>}\r\n */\r\nexport const cameraNormalMatrix = /*@__PURE__*/ uniform( 'mat3' ).label( 'cameraNormalMatrix' ).setGroup( renderGroup ).onRenderUpdate( ( { camera } ) => camera.normalMatrix );\r\n\r\n/**\r\n * TSL object that represents the position in world space of the camera used for the current render.\r\n *\r\n * @tsl\r\n * @type {UniformNode<vec3>}\r\n */\r\nexport const cameraPosition = /*@__PURE__*/ uniform( new Vector3() ).label( 'cameraPosition' ).setGroup( renderGroup ).onRenderUpdate( ( { camera }, self ) => self.value.setFromMatrixPosition( camera.matrixWorld ) );\r\n", "import Object3DNode from './Object3DNode.js';\r\nimport { Fn, nodeImmutable } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\n\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { cameraViewMatrix } from './Camera.js';\r\nimport { Matrix3 } from '../../math/Matrix3.js';\r\n\r\n/**\r\n * This type of node is a specialized version of `Object3DNode`\r\n * with larger set of model related metrics. Unlike `Object3DNode`,\r\n * `ModelNode` extracts the reference to the 3D object from the\r\n * current node frame state.\r\n *\r\n * @augments Object3DNode\r\n */\r\nclass ModelNode extends Object3DNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ModelNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new object model node.\r\n\t *\r\n\t * @param {('position'|'viewPosition'|'direction'|'scale'|'worldMatrix')} scope - The node represents a different type of transformation depending on the scope.\r\n\t */\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper( scope );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Extracts the model reference from the frame state and then\r\n\t * updates the uniform value depending on the scope.\r\n\t *\r\n\t * @param {NodeFrame} frame - The current node frame.\r\n\t */\r\n\tupdate( frame ) {\r\n\r\n\t\tthis.object3d = frame.object;\r\n\r\n\t\tsuper.update( frame );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ModelNode;\r\n\r\n/**\r\n * TSL object that represents the object's direction in world space.\r\n *\r\n * @tsl\r\n * @type {ModelNode<vec3>}\r\n */\r\nexport const modelDirection = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.DIRECTION );\r\n\r\n/**\r\n * TSL object that represents the object's world matrix.\r\n *\r\n * @tsl\r\n * @type {ModelNode<mat4>}\r\n */\r\nexport const modelWorldMatrix = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.WORLD_MATRIX );\r\n\r\n/**\r\n * TSL object that represents the object's position in world space.\r\n *\r\n * @tsl\r\n * @type {ModelNode<vec3>}\r\n */\r\nexport const modelPosition = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.POSITION );\r\n\r\n/**\r\n * TSL object that represents the object's scale in world space.\r\n *\r\n * @tsl\r\n * @type {ModelNode<vec3>}\r\n */\r\nexport const modelScale = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.SCALE );\r\n\r\n/**\r\n * TSL object that represents the object's position in view/camera space.\r\n *\r\n * @tsl\r\n * @type {ModelNode<vec3>}\r\n */\r\nexport const modelViewPosition = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.VIEW_POSITION );\r\n\r\n/**\r\n * TSL object that represents the object's radius.\r\n *\r\n * @tsl\r\n * @type {ModelNode<float>}\r\n */\r\nexport const modelRadius = /*@__PURE__*/ nodeImmutable( ModelNode, ModelNode.RADIUS );\r\n\r\n/**\r\n * TSL object that represents the object's normal matrix.\r\n *\r\n * @tsl\r\n * @type {UniformNode<mat3>}\r\n */\r\nexport const modelNormalMatrix = /*@__PURE__*/ uniform( new Matrix3() ).onObjectUpdate( ( { object }, self ) => self.value.getNormalMatrix( object.matrixWorld ) );\r\n\r\n/**\r\n * TSL object that represents the object's inverse world matrix.\r\n *\r\n * @tsl\r\n * @type {UniformNode<mat4>}\r\n */\r\nexport const modelWorldMatrixInverse = /*@__PURE__*/ uniform( new Matrix4() ).onObjectUpdate( ( { object }, self ) => self.value.copy( object.matrixWorld ).invert() );\r\n\r\n/**\r\n * TSL object that represents the object's model view matrix.\r\n *\r\n * @tsl\r\n * @type {Node<mat4>}\r\n */\r\nexport const modelViewMatrix = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\treturn builder.renderer.overrideNodes.modelViewMatrix || mediumpModelViewMatrix;\r\n\r\n} ).once() )().toVar( 'modelViewMatrix' );\r\n\r\n// GPU Precision\r\n\r\n/**\r\n * TSL object that represents the object's model view in `mediump` precision.\r\n *\r\n * @tsl\r\n * @type {Node<mat4>}\r\n */\r\nexport const mediumpModelViewMatrix = /*@__PURE__*/ cameraViewMatrix.mul( modelWorldMatrix );\r\n\r\n// CPU Precision\r\n\r\n/**\r\n * TSL object that represents the object's model view in `highp` precision\r\n * which is achieved by computing the matrix in JS and not in the shader.\r\n *\r\n * @tsl\r\n * @type {Node<mat4>}\r\n */\r\nexport const highpModelViewMatrix = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\tbuilder.context.isHighPrecisionModelViewMatrix = true;\r\n\r\n\treturn uniform( 'mat4' ).onObjectUpdate( ( { object, camera } ) => {\r\n\r\n\t\treturn object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t} );\r\n\r\n} ).once() )().toVar( 'highpModelViewMatrix' );\r\n\r\n/**\r\n * TSL object that represents the object's model normal view in `highp` precision\r\n * which is achieved by computing the matrix in JS and not in the shader.\r\n *\r\n * @tsl\r\n * @type {Node<mat3>}\r\n */\r\nexport const highpModelNormalViewMatrix = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\tconst isHighPrecisionModelViewMatrix = builder.context.isHighPrecisionModelViewMatrix;\r\n\r\n\treturn uniform( 'mat3' ).onObjectUpdate( ( { object, camera } ) => {\r\n\r\n\t\tif ( isHighPrecisionModelViewMatrix !== true ) {\r\n\r\n\t\t\tobject.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\treturn object.normalMatrix.getNormalMatrix( object.modelViewMatrix );\r\n\r\n\t} );\r\n\r\n} ).once() )().toVar( 'highpModelNormalViewMatrix' );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\nimport { Fn } from '../tsl/TSLCore.js';\r\nimport { modelWorldMatrix } from './ModelNode.js';\r\n\r\n/**\r\n * TSL object that represents the position attribute of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {AttributeNode<vec3>}\r\n */\r\nexport const positionGeometry = /*@__PURE__*/ attribute( 'position', 'vec3' );\r\n\r\n/**\r\n * TSL object that represents the vertex position in local space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {AttributeNode<vec3>}\r\n */\r\nexport const positionLocal = /*@__PURE__*/ positionGeometry.toVarying( 'positionLocal' );\r\n\r\n/**\r\n * TSL object that represents the previous vertex position in local space of the current rendered object.\r\n * Used in context of {@link VelocityNode} for rendering motion vectors.\r\n *\r\n * @tsl\r\n * @type {AttributeNode<vec3>}\r\n */\r\nexport const positionPrevious = /*@__PURE__*/ positionGeometry.toVarying( 'positionPrevious' );\r\n\r\n/**\r\n * TSL object that represents the vertex position in world space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {VaryingNode<vec3>}\r\n */\r\nexport const positionWorld = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\treturn modelWorldMatrix.mul( positionLocal ).xyz.toVarying( builder.getSubBuildProperty( 'v_positionWorld' ) );\r\n\r\n}, 'vec3' ).once( [ 'POSITION' ] ) )();\r\n\r\n/**\r\n * TSL object that represents the position world direction of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const positionWorldDirection = /*@__PURE__*/ ( Fn( () => {\r\n\r\n\tconst vertexPWD = positionLocal.transformDirection( modelWorldMatrix ).toVarying( 'v_positionWorldDirection' );\r\n\r\n\treturn vertexPWD.normalize().toVar( 'positionWorldDirection' );\r\n\r\n}, 'vec3' ).once( [ 'POSITION' ] ) )();\r\n\r\n/**\r\n * TSL object that represents the vertex position in view space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {VaryingNode<vec3>}\r\n */\r\nexport const positionView = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\treturn builder.context.setupPositionView().toVarying( 'v_positionView' );\r\n\r\n}, 'vec3' ).once( [ 'POSITION' ] ) )();\r\n\r\n/**\r\n * TSL object that represents the position view direction of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {VaryingNode<vec3>}\r\n */\r\nexport const positionViewDirection = /*@__PURE__*/ positionView.negate().toVarying( 'v_positionViewDirection' ).normalize().toVar( 'positionViewDirection' );\r\n", "import { positionWorldDirection } from '../accessors/Position.js';\r\nimport { Fn, vec2 } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * TSL function for creating an equirect uv node.\r\n *\r\n * Can be used to compute texture coordinates for projecting an\r\n * equirectangular texture onto a mesh for using it as the scene's\r\n * background.\r\n *\r\n * ```js\r\n * scene.backgroundNode = texture( equirectTexture, equirectUV() );\r\n * ```\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Node<vec3>} [dirNode=positionWorldDirection] - A direction vector for sampling which is by default `positionWorldDirection`.\r\n * @returns {Node<vec2>}\r\n */\r\nexport const equirectUV = /*@__PURE__*/ Fn( ( [ dir = positionWorldDirection ] ) => {\r\n\r\n\tconst u = dir.z.atan( dir.x ).mul( 1 / ( Math.PI * 2 ) ).add( 0.5 );\r\n\tconst v = dir.y.clamp( - 1.0, 1.0 ).asin().mul( 1 / Math.PI ).add( 0.5 );\r\n\r\n\treturn vec2( u, v );\r\n\r\n} );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * This class allows to define multiple overloaded versions\r\n * of the same function. Depending on the parameters of the function\r\n * call, the node picks the best-fit overloaded version.\r\n *\r\n * @augments Node\r\n */\r\nclass FunctionOverloadingNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FunctionOverloadingNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new function overloading node.\r\n\t *\r\n\t * @param {Array<Function>} functionNodes - Array of `Fn` function definitions.\r\n\t * @param {...Node} parametersNodes - A list of parameter nodes.\r\n\t */\r\n\tconstructor( functionNodes = [], ...parametersNodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * Array of `Fn` function definitions.\r\n\t\t *\r\n\t\t * @type {Array<Function>}\r\n\t\t */\r\n\t\tthis.functionNodes = functionNodes;\r\n\r\n\t\t/**\r\n\t\t * A list of parameter nodes.\r\n\t\t *\r\n\t\t * @type {Array<Node>}\r\n\t\t */\r\n\t\tthis.parametersNodes = parametersNodes;\r\n\r\n\t\t/**\r\n\t\t * The selected overloaded function call.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {ShaderCallNodeInternal}\r\n\t\t */\r\n\t\tthis._candidateFnCall = null;\r\n\r\n\t\t/**\r\n\t\t * This node is marked as global.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.global = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from\r\n\t * the function's return type.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType() {\r\n\r\n\t\treturn this.functionNodes[ 0 ].shaderNode.layout.type;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst params = this.parametersNodes;\r\n\r\n\t\tlet candidateFnCall = this._candidateFnCall;\r\n\r\n\t\tif ( candidateFnCall === null ) {\r\n\r\n\t\t\tlet candidateFn = null;\r\n\t\t\tlet candidateScore = - 1;\r\n\r\n\t\t\tfor ( const functionNode of this.functionNodes ) {\r\n\r\n\t\t\t\tconst shaderNode = functionNode.shaderNode;\r\n\t\t\t\tconst layout = shaderNode.layout;\r\n\r\n\t\t\t\tif ( layout === null ) {\r\n\r\n\t\t\t\t\tthrow new Error( 'FunctionOverloadingNode: FunctionNode must be a layout.' );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst inputs = layout.inputs;\r\n\r\n\t\t\t\tif ( params.length === inputs.length ) {\r\n\r\n\t\t\t\t\tlet score = 0;\r\n\r\n\t\t\t\t\tfor ( let i = 0; i < params.length; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst param = params[ i ];\r\n\t\t\t\t\t\tconst input = inputs[ i ];\r\n\r\n\t\t\t\t\t\tif ( param.getNodeType( builder ) === input.type ) {\r\n\r\n\t\t\t\t\t\t\tscore ++;\r\n\r\n\t\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t\tscore = 0;\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( score > candidateScore ) {\r\n\r\n\t\t\t\t\t\tcandidateFn = functionNode;\r\n\t\t\t\t\t\tcandidateScore = score;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._candidateFnCall = candidateFnCall = candidateFn( ...params );\r\n\r\n\t\t}\r\n\r\n\t\treturn candidateFnCall;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FunctionOverloadingNode;\r\n\r\nconst overloadingBaseFn = /*@__PURE__*/ nodeProxy( FunctionOverloadingNode );\r\n\r\n/**\r\n * TSL function for creating a function overloading node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Array<Function>} functionNodes - Array of `Fn` function definitions.\r\n * @returns {FunctionOverloadingNode}\r\n */\r\nexport const overloadingFn = ( functionNodes ) => ( ...params ) => overloadingBaseFn( functionNodes, ...params );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeImmutable, float, Fn } from '../tsl/TSLBase.js';\r\n\r\nimport { BackSide, DoubleSide, WebGLCoordinateSystem } from '../../constants.js';\r\n\r\n/**\r\n * This node can be used to evaluate whether a primitive is front or back facing.\r\n *\r\n * @augments Node\r\n */\r\nclass FrontFacingNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'FrontFacingNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new front facing node.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'bool' );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isFrontFacingNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tif ( builder.shaderStage !== 'fragment' ) return 'true';\r\n\r\n\t\t//\r\n\r\n\t\tconst { renderer, material } = builder;\r\n\r\n\t\tif ( renderer.coordinateSystem === WebGLCoordinateSystem ) {\r\n\r\n\t\t\tif ( material.side === BackSide ) {\r\n\r\n\t\t\t\treturn 'false';\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn builder.getFrontFacing();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default FrontFacingNode;\r\n\r\n/**\r\n * TSL object that represents whether a primitive is front or back facing\r\n *\r\n * @tsl\r\n * @type {FrontFacingNode<bool>}\r\n */\r\nexport const frontFacing = /*@__PURE__*/ nodeImmutable( FrontFacingNode );\r\n\r\n/**\r\n * TSL object that represents the front facing status as a number instead of a bool.\r\n * `1` means front facing, `-1` means back facing.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const faceDirection = /*@__PURE__*/ float( frontFacing ).mul( 2.0 ).sub( 1.0 );\r\n\r\n/**\r\n * Converts a direction vector to a face direction vector based on the material's side.\r\n *\r\n * If the material is set to `BackSide`, the direction is inverted.\r\n * If the material is set to `DoubleSide`, the direction is multiplied by `faceDirection`.\r\n *\r\n * @tsl\r\n * @param {Node<vec3>} direction - The direction vector to convert.\r\n * @returns {Node<vec3>} The converted direction vector.\r\n */\r\nexport const directionToFaceDirection = /*@__PURE__*/ Fn( ( [ direction ], { material } ) => {\r\n\r\n\tconst side = material.side;\r\n\r\n\tif ( side === BackSide ) {\r\n\r\n\t\tdirection = direction.mul( - 1.0 );\r\n\r\n\t} else if ( side === DoubleSide ) {\r\n\r\n\t\tdirection = direction.mul( faceDirection );\r\n\r\n\t}\r\n\r\n\treturn direction;\r\n\r\n} );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\nimport { cameraViewMatrix } from './Camera.js';\r\nimport { modelNormalMatrix, modelWorldMatrix } from './ModelNode.js';\r\nimport { mat3, vec3, Fn } from '../tsl/TSLBase.js';\r\nimport { positionView } from './Position.js';\r\nimport { directionToFaceDirection } from '../display/FrontFacingNode.js';\r\n\r\n/**\r\n * TSL object that represents the normal attribute of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const normalGeometry = /*@__PURE__*/ attribute( 'normal', 'vec3' );\r\n\r\n/**\r\n * TSL object that represents the vertex normal in local space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const normalLocal = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\tif ( builder.geometry.hasAttribute( 'normal' ) === false ) {\r\n\r\n\t\tconsole.warn( 'THREE.TSL: Vertex attribute \"normal\" not found on geometry.' );\r\n\r\n\t\treturn vec3( 0, 1, 0 );\r\n\r\n\t}\r\n\r\n\treturn normalGeometry;\r\n\r\n}, 'vec3' ).once() )().toVar( 'normalLocal' );\r\n\r\n/**\r\n * TSL object that represents the flat vertex normal in view space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const normalFlat = /*@__PURE__*/ positionView.dFdx().cross( positionView.dFdy() ).normalize().toVar( 'normalFlat' );\r\n\r\n/**\r\n * TSL object that represents the vertex normal in view space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const normalViewGeometry = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\tlet node;\r\n\r\n\tif ( builder.material.flatShading === true ) {\r\n\r\n\t\tnode = normalFlat;\r\n\r\n\t} else {\r\n\r\n\t\tnode = transformNormalToView( normalLocal ).toVarying( 'v_normalViewGeometry' ).normalize();\r\n\r\n\t}\r\n\r\n\treturn node;\r\n\r\n}, 'vec3' ).once() )().toVar( 'normalViewGeometry' );\r\n\r\n/**\r\n * TSL object that represents the vertex normal in world space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const normalWorldGeometry = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\tlet normal = normalViewGeometry.transformDirection( cameraViewMatrix );\r\n\r\n\tif ( builder.material.flatShading !== true ) {\r\n\r\n\t\tnormal = normal.toVarying( 'v_normalWorldGeometry' );\r\n\r\n\t}\r\n\r\n\treturn normal.normalize().toVar( 'normalWorldGeometry' );\r\n\r\n}, 'vec3' ).once() )();\r\n\r\n/**\r\n * TSL object that represents the transformed vertex normal in view space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const normalView = /*@__PURE__*/ ( Fn( ( { subBuildFn, material, context } ) => {\r\n\r\n\tlet node;\r\n\r\n\tif ( subBuildFn === 'NORMAL' || subBuildFn === 'VERTEX' ) {\r\n\r\n\t\tnode = normalViewGeometry;\r\n\r\n\t\tif ( material.flatShading !== true ) {\r\n\r\n\t\t\tnode = directionToFaceDirection( node );\r\n\r\n\t\t}\r\n\r\n\t} else {\r\n\r\n\t\t// Use getUV context to avoid side effects from nodes overwriting getUV in the context (e.g. EnvironmentNode)\r\n\r\n\t\tnode = context.setupNormal().context( { getUV: null } );\r\n\r\n\t}\r\n\r\n\treturn node;\r\n\r\n}, 'vec3' ).once( [ 'NORMAL', 'VERTEX' ] ) )().toVar( 'normalView' );\r\n\r\n/**\r\n * TSL object that represents the transformed vertex normal in world space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const normalWorld = /*@__PURE__*/ normalView.transformDirection( cameraViewMatrix ).toVar( 'normalWorld' );\r\n\r\n/**\r\n * TSL object that represents the transformed clearcoat vertex normal in view space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const clearcoatNormalView = /*@__PURE__*/ ( Fn( ( { subBuildFn, context } ) => {\r\n\r\n\tlet node;\r\n\r\n\tif ( subBuildFn === 'NORMAL' || subBuildFn === 'VERTEX' ) {\r\n\r\n\t\tnode = normalView;\r\n\r\n\t} else {\r\n\r\n\t\t// Use getUV context to avoid side effects from nodes overwriting getUV in the context (e.g. EnvironmentNode)\r\n\r\n\t\tnode = context.setupClearcoatNormal().context( { getUV: null } );\r\n\r\n\t}\r\n\r\n\treturn node;\r\n\r\n}, 'vec3' ).once( [ 'NORMAL', 'VERTEX' ] ) )().toVar( 'clearcoatNormalView' );\r\n\r\n/**\r\n * Transforms the normal with the given matrix.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} normal - The normal.\r\n * @param {Node<mat3>} [matrix=modelWorldMatrix] - The matrix.\r\n * @return {Node<vec3>} The transformed normal.\r\n */\r\nexport const transformNormal = /*@__PURE__*/ Fn( ( [ normal, matrix = modelWorldMatrix ] ) => {\r\n\r\n\tconst m = mat3( matrix );\r\n\r\n\tconst transformedNormal = normal.div( vec3( m[ 0 ].dot( m[ 0 ] ), m[ 1 ].dot( m[ 1 ] ), m[ 2 ].dot( m[ 2 ] ) ) );\r\n\r\n\treturn m.mul( transformedNormal ).xyz;\r\n\r\n} );\r\n\r\n/**\r\n * Transforms the given normal from local to view space.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} normal - The normal.\r\n * @param {NodeBuilder} builder - The current node builder.\r\n * @return {Node<vec3>} The transformed normal.\r\n */\r\nexport const transformNormalToView = /*@__PURE__*/ Fn( ( [ normal ], builder ) => {\r\n\r\n\tconst modelNormalViewMatrix = builder.renderer.overrideNodes.modelNormalViewMatrix;\r\n\r\n\tif ( modelNormalViewMatrix !== null ) {\r\n\r\n\t\treturn modelNormalViewMatrix.transformDirection( normal );\r\n\r\n\t}\r\n\r\n\t//\r\n\r\n\tconst transformedNormal = modelNormalMatrix.mul( normal );\r\n\r\n\treturn cameraViewMatrix.transformDirection( transformedNormal );\r\n\r\n} );\r\n\r\n// Deprecated\r\n\r\n/**\r\n * TSL object that represents the transformed vertex normal in view space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n * @deprecated since r178. Use `normalView` instead.\r\n */\r\nexport const transformedNormalView = ( Fn( () => { // @deprecated, r177\r\n\r\n\tconsole.warn( 'THREE.TSL: \"transformedNormalView\" is deprecated. Use \"normalView\" instead.' );\r\n\treturn normalView;\r\n\r\n} ).once( [ 'NORMAL', 'VERTEX' ] ) )();\r\n\r\n/**\r\n * TSL object that represents the transformed vertex normal in world space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n * @deprecated since r178. Use `normalWorld` instead.\r\n */\r\nexport const transformedNormalWorld = ( Fn( () => { // @deprecated, r177\r\n\r\n\tconsole.warn( 'THREE.TSL: \"transformedNormalWorld\" is deprecated. Use \"normalWorld\" instead.' );\r\n\treturn normalWorld;\r\n\r\n} ).once( [ 'NORMAL', 'VERTEX' ] ) )();\r\n\r\n/**\r\n * TSL object that represents the transformed clearcoat vertex normal in view space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n * @deprecated since r178. Use `clearcoatNormalView` instead.\r\n */\r\nexport const transformedClearcoatNormalView = ( Fn( () => { // @deprecated, r177\r\n\r\n\tconsole.warn( 'THREE.TSL: \"transformedClearcoatNormalView\" is deprecated. Use \"clearcoatNormalView\" instead.' );\r\n\treturn clearcoatNormalView;\r\n\r\n} ).once( [ 'NORMAL', 'VERTEX' ] ) )();\r\n", "import { normalView } from '../accessors/Normal.js';\r\nimport { positionViewDirection } from '../accessors/Position.js';\r\nimport { Fn, vec2, vec3 } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * TSL function for creating a matcap uv node.\r\n *\r\n * Can be used to compute texture coordinates for projecting a\r\n * matcap onto a mesh. Used by {@link MeshMatcapNodeMaterial}.\r\n *\r\n * @tsl\r\n * @function\r\n * @returns {Node<vec2>} The matcap UV coordinates.\r\n */\r\nexport const matcapUV = /*@__PURE__*/ Fn( () => {\r\n\r\n\tconst x = vec3( positionViewDirection.z, 0, positionViewDirection.x.negate() ).normalize();\r\n\tconst y = positionViewDirection.cross( x );\r\n\r\n\treturn vec2( x.dot( normalView ), y.dot( normalView ) ).mul( 0.495 ).add( 0.5 ); // 0.495 to remove artifacts caused by undersized matcap disks\r\n\r\n} ).once( [ 'NORMAL', 'VERTEX' ] )().toVar( 'matcapUV' );\r\n", "import UniformNode from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * A special type of uniform node that computes the\r\n * maximum mipmap level for a given texture node.\r\n *\r\n * ```js\r\n * const level = maxMipLevel( textureNode );\r\n * ```\r\n *\r\n * @augments UniformNode\r\n */\r\nclass MaxMipLevelNode extends UniformNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MaxMipLevelNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new max mip level node.\r\n\t *\r\n\t * @param {TextureNode} textureNode - The texture node to compute the max mip level for.\r\n\t */\r\n\tconstructor( textureNode ) {\r\n\r\n\t\tsuper( 0 );\r\n\r\n\t\t/**\r\n\t\t * The texture node to compute the max mip level for.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {TextureNode}\r\n\t\t */\r\n\t\tthis._textureNode = textureNode;\r\n\r\n\t\t/**\r\n\t\t * The `updateType` is set to `NodeUpdateType.FRAME` since the node updates\r\n\t\t * the texture once per frame in its {@link MaxMipLevelNode#update} method.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'frame'\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The texture node to compute the max mip level for.\r\n\t *\r\n\t * @readonly\r\n\t * @type {TextureNode}\r\n\t */\r\n\tget textureNode() {\r\n\r\n\t\treturn this._textureNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The texture.\r\n\t *\r\n\t * @readonly\r\n\t * @type {Texture}\r\n\t */\r\n\tget texture() {\r\n\r\n\t\treturn this._textureNode.value;\r\n\r\n\t}\r\n\r\n\tupdate() {\r\n\r\n\t\tconst texture = this.texture;\r\n\t\tconst images = texture.images;\r\n\t\tconst image = ( images && images.length > 0 ) ? ( ( images[ 0 ] && images[ 0 ].image ) || images[ 0 ] ) : texture.image;\r\n\r\n\t\tif ( image && image.width !== undefined ) {\r\n\r\n\t\t\tconst { width, height } = image;\r\n\r\n\t\t\tthis.value = Math.log2( Math.max( width, height ) );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MaxMipLevelNode;\r\n\r\n/**\r\n * TSL function for creating a max mip level node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {TextureNode} textureNode - The texture node to compute the max mip level for.\r\n * @returns {MaxMipLevelNode}\r\n */\r\nexport const maxMipLevel = /*@__PURE__*/ nodeProxy( MaxMipLevelNode ).setParameterLength( 1 );\r\n", "import { renderGroup } from '../core/UniformGroupNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\n\r\n/**\r\n * Represents the elapsed time in seconds.\r\n *\r\n * @tsl\r\n * @type {UniformNode<float>}\r\n */\r\nexport const time = /*@__PURE__*/ uniform( 0 ).setGroup( renderGroup ).onRenderUpdate( ( frame ) => frame.time );\r\n\r\n/**\r\n * Represents the delta time in seconds.\r\n *\r\n * @tsl\r\n * @type {UniformNode<float>}\r\n */\r\nexport const deltaTime = /*@__PURE__*/ uniform( 0 ).setGroup( renderGroup ).onRenderUpdate( ( frame ) => frame.deltaTime );\r\n\r\n/**\r\n * Represents the current frame ID.\r\n *\r\n * @tsl\r\n * @type {UniformNode<uint>}\r\n */\r\nexport const frameId = /*@__PURE__*/ uniform( 0, 'uint' ).setGroup( renderGroup ).onRenderUpdate( ( frame ) => frame.frameId );\r\n\r\n// Deprecated\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r170. Use {@link time} instead.\r\n *\r\n * @param {number} [timeScale=1] - The time scale.\r\n * @returns {UniformNode<float>}\r\n */\r\nexport const timerLocal = ( timeScale = 1 ) => { // @deprecated, r170\r\n\r\n\tconsole.warn( 'TSL: timerLocal() is deprecated. Use \"time\" instead.' );\r\n\treturn time.mul( timeScale );\r\n\r\n};\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r170. Use {@link time} instead.\r\n *\r\n * @param {number} [timeScale=1] - The time scale.\r\n * @returns {UniformNode<float>}\r\n */\r\nexport const timerGlobal = ( timeScale = 1 ) => { // @deprecated, r170\r\n\r\n\tconsole.warn( 'TSL: timerGlobal() is deprecated. Use \"time\" instead.' );\r\n\treturn time.mul( timeScale );\r\n\r\n};\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r170. Use {@link deltaTime} instead.\r\n *\r\n * @param {number} [timeScale=1] - The time scale.\r\n * @returns {UniformNode<float>}\r\n */\r\nexport const timerDelta = ( timeScale = 1 ) => { // @deprecated, r170\r\n\r\n\tconsole.warn( 'TSL: timerDelta() is deprecated. Use \"deltaTime\" instead.' );\r\n\treturn deltaTime.mul( timeScale );\r\n\r\n};\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeProxy, vec4, mat2, mat4 } from '../tsl/TSLBase.js';\r\nimport { cos, sin } from '../math/MathNode.js';\r\n\r\n/**\r\n * Applies a rotation to the given position node.\r\n *\r\n * @augments TempNode\r\n */\r\nclass RotateNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RotateNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new rotate node.\r\n\t *\r\n\t * @param {Node} positionNode - The position node.\r\n\t * @param {Node} rotationNode - Represents the rotation that is applied to the position node. Depending\r\n\t * on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\r\n\t */\r\n\tconstructor( positionNode, rotationNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The position node.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.positionNode = positionNode;\r\n\r\n\t\t/**\r\n\t\t *  Represents the rotation that is applied to the position node.\r\n\t\t *  Depending on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.rotationNode = rotationNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The type of the {@link RotateNode#positionNode} defines the node's type.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node's type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.positionNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { rotationNode, positionNode } = this;\r\n\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tif ( nodeType === 'vec2' ) {\r\n\r\n\t\t\tconst cosAngle = rotationNode.cos();\r\n\t\t\tconst sinAngle = rotationNode.sin();\r\n\r\n\t\t\tconst rotationMatrix = mat2(\r\n\t\t\t\tcosAngle, sinAngle,\r\n\t\t\t\tsinAngle.negate(), cosAngle\r\n\t\t\t);\r\n\r\n\t\t\treturn rotationMatrix.mul( positionNode );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst rotation = rotationNode;\r\n\t\t\tconst rotationXMatrix = mat4( vec4( 1.0, 0.0, 0.0, 0.0 ), vec4( 0.0, cos( rotation.x ), sin( rotation.x ).negate(), 0.0 ), vec4( 0.0, sin( rotation.x ), cos( rotation.x ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\r\n\t\t\tconst rotationYMatrix = mat4( vec4( cos( rotation.y ), 0.0, sin( rotation.y ), 0.0 ), vec4( 0.0, 1.0, 0.0, 0.0 ), vec4( sin( rotation.y ).negate(), 0.0, cos( rotation.y ), 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\r\n\t\t\tconst rotationZMatrix = mat4( vec4( cos( rotation.z ), sin( rotation.z ).negate(), 0.0, 0.0 ), vec4( sin( rotation.z ), cos( rotation.z ), 0.0, 0.0 ), vec4( 0.0, 0.0, 1.0, 0.0 ), vec4( 0.0, 0.0, 0.0, 1.0 ) );\r\n\r\n\t\t\treturn rotationXMatrix.mul( rotationYMatrix ).mul( rotationZMatrix ).mul( vec4( positionNode, 1.0 ) ).xyz;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RotateNode;\r\n\r\n/**\r\n * TSL function for creating a rotate node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} positionNode - The position node.\r\n * @param {Node} rotationNode - Represents the rotation that is applied to the position node. Depending\r\n * on whether the position data are 2D or 3D, the rotation is expressed a single float value or an Euler value.\r\n * @returns {RotateNode}\r\n */\r\nexport const rotate = /*@__PURE__*/ nodeProxy( RotateNode ).setParameterLength( 2 );\r\n", "import { Fn, vec2 } from '../tsl/TSLBase.js';\r\nimport { rotate } from './RotateNode.js';\r\n\r\n/**\r\n * Rotates the given uv coordinates around a center point\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2>} uv - The uv coordinates.\r\n * @param {Node<float>} rotation - The rotation defined in radians.\r\n * @param {Node<vec2>} center - The center of rotation\r\n * @return {Node<vec2>} The rotated uv coordinates.\r\n */\r\nexport const rotateUV = /*@__PURE__*/ Fn( ( [ uv, rotation, center = vec2( 0.5 ) ] ) => {\r\n\r\n\treturn rotate( uv.sub( center ), rotation ).add( center );\r\n\r\n} );\r\n\r\n/**\r\n * Applies a spherical warping effect to the given uv coordinates.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2>} uv - The uv coordinates.\r\n * @param {Node<float>} strength - The strength of the effect.\r\n * @param {Node<vec2>} center - The center point\r\n * @return {Node<vec2>} The updated uv coordinates.\r\n */\r\nexport const spherizeUV = /*@__PURE__*/ Fn( ( [ uv, strength, center = vec2( 0.5 ) ] ) => {\r\n\r\n\tconst delta = uv.sub( center );\r\n\tconst delta2 = delta.dot( delta );\r\n\tconst delta4 = delta2.mul( delta2 );\r\n\tconst deltaOffset = delta4.mul( strength );\r\n\r\n\treturn uv.add( delta.mul( deltaOffset ) );\r\n\r\n} );\r\n", "import { modelWorldMatrix } from '../accessors/ModelNode.js';\r\nimport { cameraViewMatrix, cameraProjectionMatrix } from '../accessors/Camera.js';\r\nimport { positionLocal } from '../accessors/Position.js';\r\nimport { Fn, defined } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * This can be used to achieve a billboarding behavior for flat meshes. That means they are\r\n * oriented always towards the camera.\r\n *\r\n * ```js\r\n * material.vertexNode = billboarding();\r\n * ```\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Object} config - The configuration object.\r\n * @param {?Node<vec3>} [config.position=null] - Can be used to define the vertex positions in world space.\r\n * @param {boolean} [config.horizontal=true] - Whether to follow the camera rotation horizontally or not.\r\n * @param {boolean} [config.vertical=false] - Whether to follow the camera rotation vertically or not.\r\n * @return {Node<vec3>} The updated vertex position in clip space.\r\n */\r\nexport const billboarding = /*@__PURE__*/ Fn( ( { position = null, horizontal = true, vertical = false } ) => {\r\n\r\n\tlet worldMatrix;\r\n\r\n\tif ( position !== null ) {\r\n\r\n\t\tworldMatrix = modelWorldMatrix.toVar();\r\n\t\tworldMatrix[ 3 ][ 0 ] = position.x;\r\n\t\tworldMatrix[ 3 ][ 1 ] = position.y;\r\n\t\tworldMatrix[ 3 ][ 2 ] = position.z;\r\n\r\n\t} else {\r\n\r\n\t\tworldMatrix = modelWorldMatrix;\r\n\r\n\t}\r\n\r\n\tconst modelViewMatrix = cameraViewMatrix.mul( worldMatrix );\r\n\r\n\tif ( defined( horizontal ) ) {\r\n\r\n\t\tmodelViewMatrix[ 0 ][ 0 ] = modelWorldMatrix[ 0 ].length();\r\n\t\tmodelViewMatrix[ 0 ][ 1 ] = 0;\r\n\t\tmodelViewMatrix[ 0 ][ 2 ] = 0;\r\n\r\n\t}\r\n\r\n\tif ( defined( vertical ) ) {\r\n\r\n\t\tmodelViewMatrix[ 1 ][ 0 ] = 0;\r\n\t\tmodelViewMatrix[ 1 ][ 1 ] = modelWorldMatrix[ 1 ].length();\r\n\t\tmodelViewMatrix[ 1 ][ 2 ] = 0;\r\n\r\n\t}\r\n\r\n\tmodelViewMatrix[ 2 ][ 0 ] = 0;\r\n\tmodelViewMatrix[ 2 ][ 1 ] = 0;\r\n\tmodelViewMatrix[ 2 ][ 2 ] = 1;\r\n\r\n\treturn cameraProjectionMatrix.mul( modelViewMatrix ).mul( positionLocal );\r\n\r\n} );\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { Fn, nodeImmutable, vec2 } from '../tsl/TSLBase.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\nlet screenSizeVec, viewportVec;\r\n\r\n/**\r\n * This node provides a collection of screen related metrics.\r\n * Depending on {@link ScreenNode#scope}, the nodes can represent\r\n * resolution or viewport data as well as fragment or uv coordinates.\r\n *\r\n * @augments Node\r\n */\r\nclass ScreenNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ScreenNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new screen node.\r\n\t *\r\n\t * @param {('coordinate'|'viewport'|'size'|'uv')} scope - The node's scope.\r\n\t */\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node represents different metric depending on which scope is selected.\r\n\t\t *\r\n\t\t * - `ScreenNode.COORDINATE`: Window-relative coordinates of the current fragment according to WebGPU standards.\r\n\t\t * - `ScreenNode.VIEWPORT`: The current viewport defined as a four-dimensional vector.\r\n\t\t * - `ScreenNode.SIZE`: The dimensions of the current bound framebuffer.\r\n\t\t * - `ScreenNode.UV`: Normalized coordinates.\r\n\t\t *\r\n\t\t * @type {('coordinate'|'viewport'|'size'|'uv')}\r\n\t\t */\r\n\t\tthis.scope = scope;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isViewportNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type depends on the selected scope.\r\n\t *\r\n\t * @return {('vec2'|'vec4')} The node type.\r\n\t */\r\n\tgetNodeType() {\r\n\r\n\t\tif ( this.scope === ScreenNode.VIEWPORT ) return 'vec4';\r\n\t\telse return 'vec2';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node's update type depends on the selected scope.\r\n\t *\r\n\t * @return {NodeUpdateType} The update type.\r\n\t */\r\n\tgetUpdateType() {\r\n\r\n\t\tlet updateType = NodeUpdateType.NONE;\r\n\r\n\t\tif ( this.scope === ScreenNode.SIZE || this.scope === ScreenNode.VIEWPORT ) {\r\n\r\n\t\t\tupdateType = NodeUpdateType.RENDER;\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateType = updateType;\r\n\r\n\t\treturn updateType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * `ScreenNode` implements {@link Node#update} to retrieve viewport and size information\r\n\t * from the current renderer.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\tupdate( { renderer } ) {\r\n\r\n\t\tconst renderTarget = renderer.getRenderTarget();\r\n\r\n\t\tif ( this.scope === ScreenNode.VIEWPORT ) {\r\n\r\n\t\t\tif ( renderTarget !== null ) {\r\n\r\n\t\t\t\tviewportVec.copy( renderTarget.viewport );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.getViewport( viewportVec );\r\n\r\n\t\t\t\tviewportVec.multiplyScalar( renderer.getPixelRatio() );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( renderTarget !== null ) {\r\n\r\n\t\t\t\tscreenSizeVec.width = renderTarget.width;\r\n\t\t\t\tscreenSizeVec.height = renderTarget.height;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\trenderer.getDrawingBufferSize( screenSizeVec );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( /*builder*/ ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( scope === ScreenNode.SIZE ) {\r\n\r\n\t\t\toutput = uniform( screenSizeVec || ( screenSizeVec = new Vector2() ) );\r\n\r\n\t\t} else if ( scope === ScreenNode.VIEWPORT ) {\r\n\r\n\t\t\toutput = uniform( viewportVec || ( viewportVec = new Vector4() ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutput = vec2( screenCoordinate.div( screenSize ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tif ( this.scope === ScreenNode.COORDINATE ) {\r\n\r\n\t\t\tlet coord = builder.getFragCoord();\r\n\r\n\t\t\tif ( builder.isFlipY() ) {\r\n\r\n\t\t\t\t// follow webgpu standards\r\n\r\n\t\t\t\tconst size = builder.getNodeProperties( screenSize ).outputNode.build( builder );\r\n\r\n\t\t\t\tcoord = `${ builder.getType( 'vec2' ) }( ${ coord }.x, ${ size }.y - ${ coord }.y )`;\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn coord;\r\n\r\n\t\t}\r\n\r\n\t\treturn super.generate( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nScreenNode.COORDINATE = 'coordinate';\r\nScreenNode.VIEWPORT = 'viewport';\r\nScreenNode.SIZE = 'size';\r\nScreenNode.UV = 'uv';\r\n\r\nexport default ScreenNode;\r\n\r\n// Screen\r\n\r\n/**\r\n * TSL object that represents normalized screen coordinates, unitless in `[0, 1]`.\r\n *\r\n * @tsl\r\n * @type {ScreenNode<vec2>}\r\n */\r\nexport const screenUV = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.UV );\r\n\r\n/**\r\n * TSL object that represents the screen resolution in physical pixel units.\r\n *\r\n * @tsl\r\n * @type {ScreenNode<vec2>}\r\n */\r\nexport const screenSize = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.SIZE );\r\n\r\n/**\r\n * TSL object that represents the current `x`/`y` pixel position on the screen in physical pixel units.\r\n *\r\n * @tsl\r\n * @type {ScreenNode<vec2>}\r\n */\r\nexport const screenCoordinate = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.COORDINATE );\r\n\r\n// Viewport\r\n\r\n/**\r\n * TSL object that represents the viewport rectangle as `x`, `y`, `width` and `height` in physical pixel units.\r\n *\r\n * @tsl\r\n * @type {ScreenNode<vec4>}\r\n */\r\nexport const viewport = /*@__PURE__*/ nodeImmutable( ScreenNode, ScreenNode.VIEWPORT );\r\n\r\n/**\r\n * TSL object that represents the viewport resolution in physical pixel units.\r\n *\r\n * @tsl\r\n * @type {ScreenNode<vec2>}\r\n */\r\nexport const viewportSize = viewport.zw;\r\n\r\n/**\r\n * TSL object that represents the current `x`/`y` pixel position on the viewport in physical pixel units.\r\n *\r\n * @tsl\r\n * @type {ScreenNode<vec2>}\r\n */\r\nexport const viewportCoordinate = /*@__PURE__*/ screenCoordinate.sub( viewport.xy );\r\n\r\n/**\r\n * TSL object that represents normalized viewport coordinates, unitless in `[0, 1]`.\r\n *\r\n * @tsl\r\n * @type {ScreenNode<vec2>}\r\n */\r\nexport const viewportUV = /*@__PURE__*/ viewportCoordinate.div( viewportSize );\r\n\r\n// Deprecated\r\n\r\n/**\r\n * @deprecated since r169. Use {@link screenSize} instead.\r\n */\r\nexport const viewportResolution = /*@__PURE__*/ ( Fn( () => { // @deprecated, r169\r\n\r\n\tconsole.warn( 'THREE.TSL: \"viewportResolution\" is deprecated. Use \"screenSize\" instead.' );\r\n\r\n\treturn screenSize;\r\n\r\n}, 'vec2' ).once() )();\r\n", "import { attribute } from '../core/AttributeNode.js';\r\n\r\n/**\r\n * TSL function for creating an uv attribute node with the given index.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {number} [index=0] - The uv index.\r\n * @return {AttributeNode<vec2>} The uv attribute node.\r\n */\r\nexport const uv = ( index = 0 ) => attribute( 'uv' + ( index > 0 ? index : '' ), 'vec2' );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * A node that represents the dimensions of a texture. The texture size is\r\n * retrieved in the shader via built-in shader functions like `textureDimensions()`\r\n * or `textureSize()`.\r\n *\r\n * @augments Node\r\n */\r\nclass TextureSizeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'TextureSizeNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new texture size node.\r\n\t *\r\n\t * @param {TextureNode} textureNode - A texture node which size should be retrieved.\r\n\t * @param {?Node<int>} [levelNode=null] - A level node which defines the requested mip.\r\n\t */\r\n\tconstructor( textureNode, levelNode = null ) {\r\n\r\n\t\tsuper( 'uvec2' );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isTextureSizeNode = true;\r\n\r\n\t\t/**\r\n\t\t * A texture node which size should be retrieved.\r\n\t\t *\r\n\t\t * @type {TextureNode}\r\n\t\t */\r\n\t\tthis.textureNode = textureNode;\r\n\r\n\t\t/**\r\n\t\t * A level node which defines the requested mip.\r\n\t\t *\r\n\t\t * @type {Node<int>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.levelNode = levelNode;\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst textureProperty = this.textureNode.build( builder, 'property' );\r\n\t\tconst level = this.levelNode === null ? '0' : this.levelNode.build( builder, 'int' );\r\n\r\n\t\treturn builder.format( `${ builder.getMethod( 'textureDimensions' ) }( ${ textureProperty }, ${ level } )`, this.getNodeType( builder ), output );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TextureSizeNode;\r\n\r\n/**\r\n * TSL function for creating a texture size node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {TextureNode} textureNode - A texture node which size should be retrieved.\r\n * @param {?Node<int>} [levelNode=null] - A level node which defines the requested mip.\r\n * @returns {TextureSizeNode}\r\n */\r\nexport const textureSize = /*@__PURE__*/ nodeProxy( TextureSizeNode ).setParameterLength( 1, 2 );\r\n", "import { createElementNS } from '../utils.js';\r\nimport { SRGBToLinear } from '../math/ColorManagement.js';\r\n\r\nlet _canvas;\r\n\r\n/**\r\n * A class containing utility functions for images.\r\n *\r\n * @hideconstructor\r\n */\r\nclass ImageUtils {\r\n\r\n\t/**\r\n\t * Returns a data URI containing a representation of the given image.\r\n\t *\r\n\t * @param {(HTMLImageElement|HTMLCanvasElement)} image - The image object.\r\n\t * @param {string} [type='image/png'] - Indicates the image format.\r\n\t * @return {string} The data URI.\r\n\t */\r\n\tstatic getDataURL( image, type = 'image/png' ) {\r\n\r\n\t\tif ( /^data:/i.test( image.src ) ) {\r\n\r\n\t\t\treturn image.src;\r\n\r\n\t\t}\r\n\r\n\t\tif ( typeof HTMLCanvasElement === 'undefined' ) {\r\n\r\n\t\t\treturn image.src;\r\n\r\n\t\t}\r\n\r\n\t\tlet canvas;\r\n\r\n\t\tif ( image instanceof HTMLCanvasElement ) {\r\n\r\n\t\t\tcanvas = image;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );\r\n\r\n\t\t\t_canvas.width = image.width;\r\n\t\t\t_canvas.height = image.height;\r\n\r\n\t\t\tconst context = _canvas.getContext( '2d' );\r\n\r\n\t\t\tif ( image instanceof ImageData ) {\r\n\r\n\t\t\t\tcontext.putImageData( image, 0, 0 );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcanvas = _canvas;\r\n\r\n\t\t}\r\n\r\n\t\treturn canvas.toDataURL( type );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the given sRGB image data to linear color space.\r\n\t *\r\n\t * @param {(HTMLImageElement|HTMLCanvasElement|ImageBitmap|Object)} image - The image object.\r\n\t * @return {HTMLCanvasElement|Object} The converted image.\r\n\t */\r\n\tstatic sRGBToLinear( image ) {\r\n\r\n\t\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t\tconst canvas = createElementNS( 'canvas' );\r\n\r\n\t\t\tcanvas.width = image.width;\r\n\t\t\tcanvas.height = image.height;\r\n\r\n\t\t\tconst context = canvas.getContext( '2d' );\r\n\t\t\tcontext.drawImage( image, 0, 0, image.width, image.height );\r\n\r\n\t\t\tconst imageData = context.getImageData( 0, 0, image.width, image.height );\r\n\t\t\tconst data = imageData.data;\r\n\r\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcontext.putImageData( imageData, 0, 0 );\r\n\r\n\t\t\treturn canvas;\r\n\r\n\t\t} else if ( image.data ) {\r\n\r\n\t\t\tconst data = image.data.slice( 0 );\r\n\r\n\t\t\tfor ( let i = 0; i < data.length; i ++ ) {\r\n\r\n\t\t\t\tif ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {\r\n\r\n\t\t\t\t\tdata[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// assuming float\r\n\r\n\t\t\t\t\tdata[ i ] = SRGBToLinear( data[ i ] );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: data,\r\n\t\t\t\twidth: image.width,\r\n\t\t\t\theight: image.height\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );\r\n\t\t\treturn image;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { ImageUtils };\r\n", "import { ImageUtils } from '../extras/ImageUtils.js';\r\nimport { generateUUID } from '../math/MathUtils.js';\r\n\r\nlet _sourceId = 0;\r\n\r\n/**\r\n * Represents the data source of a texture.\r\n *\r\n * The main purpose of this class is to decouple the data definition from the texture\r\n * definition so the same data can be used with multiple texture instances.\r\n */\r\nclass Source {\r\n\r\n\t/**\r\n\t * Constructs a new video texture.\r\n\t *\r\n\t * @param {any} [data=null] - The data definition of a texture.\r\n\t */\r\n\tconstructor( data = null ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isSource = true;\r\n\r\n\t\t/**\r\n\t\t * The ID of the source.\r\n\t\t *\r\n\t\t * @name Source#id\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tObject.defineProperty( this, 'id', { value: _sourceId ++ } );\r\n\r\n\t\t/**\r\n\t\t * The UUID of the source.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.uuid = generateUUID();\r\n\r\n\t\t/**\r\n\t\t * The data definition of a texture.\r\n\t\t *\r\n\t\t * @type {any}\r\n\t\t */\r\n\t\tthis.data = data;\r\n\r\n\t\t/**\r\n\t\t * This property is only relevant when {@link Source#needsUpdate} is set to `true` and\r\n\t\t * provides more control on how texture data should be processed. When `dataReady` is set\r\n\t\t * to `false`, the engine performs the memory allocation (if necessary) but does not transfer\r\n\t\t * the data into the GPU memory.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.dataReady = true;\r\n\r\n\t\t/**\r\n\t\t * This starts at `0` and counts how many times {@link Source#needsUpdate} is set to `true`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.version = 0;\r\n\r\n\t}\r\n\r\n\tgetSize( target ) {\r\n\r\n\t\tconst data = this.data;\r\n\r\n\t\tif ( data instanceof HTMLVideoElement ) {\r\n\r\n\t\t\ttarget.set( data.videoWidth, data.videoHeight );\r\n\r\n\t\t} else if ( data !== null ) {\r\n\r\n\t\t\ttarget.set( data.width, data.height, data.depth || 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttarget.set( 0, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * When the property is set to `true`, the engine allocates the memory\r\n\t * for the texture (if necessary) and triggers the actual texture upload\r\n\t * to the GPU next time the source is used.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default false\r\n\t * @param {boolean} value\r\n\t */\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes the source into JSON.\r\n\t *\r\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\r\n\t * @return {Object} A JSON object representing the serialized source.\r\n\t * @see {@link ObjectLoader#parse}\r\n\t */\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.images[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tconst output = {\r\n\t\t\tuuid: this.uuid,\r\n\t\t\turl: ''\r\n\t\t};\r\n\r\n\t\tconst data = this.data;\r\n\r\n\t\tif ( data !== null ) {\r\n\r\n\t\t\tlet url;\r\n\r\n\t\t\tif ( Array.isArray( data ) ) {\r\n\r\n\t\t\t\t// cube texture\r\n\r\n\t\t\t\turl = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = data.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tif ( data[ i ].isDataTexture ) {\r\n\r\n\t\t\t\t\t\turl.push( serializeImage( data[ i ].image ) );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\turl.push( serializeImage( data[ i ] ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// texture\r\n\r\n\t\t\t\turl = serializeImage( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\toutput.url = url;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\tmeta.images[ this.uuid ] = output;\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction serializeImage( image ) {\r\n\r\n\tif ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||\r\n\t\t( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||\r\n\t\t( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {\r\n\r\n\t\t// default images\r\n\r\n\t\treturn ImageUtils.getDataURL( image );\r\n\r\n\t} else {\r\n\r\n\t\tif ( image.data ) {\r\n\r\n\t\t\t// images of DataTexture\r\n\r\n\t\t\treturn {\r\n\t\t\t\tdata: Array.from( image.data ),\r\n\t\t\t\twidth: image.width,\r\n\t\t\t\theight: image.height,\r\n\t\t\t\ttype: image.data.constructor.name\r\n\t\t\t};\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( 'THREE.Texture: Unable to serialize Texture.' );\r\n\t\t\treturn {};\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Source };\r\n", "import { EventDispatcher } from '../core/EventDispatcher.js';\r\nimport {\r\n\tMirroredRepeatWrapping,\r\n\tClampToEdgeWrapping,\r\n\tRepeatWrapping,\r\n\tUnsignedByteType,\r\n\tRGBAFormat,\r\n\tLinearMipmapLinearFilter,\r\n\tLinearFilter,\r\n\tUVMapping,\r\n\tNoColorSpace,\r\n} from '../constants.js';\r\nimport { generateUUID } from '../math/MathUtils.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport { Source } from './Source.js';\r\n\r\nlet _textureId = 0;\r\n\r\nconst _tempVec3 = /*@__PURE__*/ new Vector3();\r\n\r\n/**\r\n * Base class for all textures.\r\n *\r\n * Note: After the initial use of a texture, its dimensions, format, and type\r\n * cannot be changed. Instead, call {@link Texture#dispose} on the texture and instantiate a new one.\r\n *\r\n * @augments EventDispatcher\r\n */\r\nclass Texture extends EventDispatcher {\r\n\r\n\t/**\r\n\t * Constructs a new texture.\r\n\t *\r\n\t * @param {?Object} [image=Texture.DEFAULT_IMAGE] - The image holding the texture data.\r\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\r\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\r\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\r\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\r\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\r\n\t * @param {number} [format=RGBAFormat] - The texture format.\r\n\t * @param {number} [type=UnsignedByteType] - The texture type.\r\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\r\n\t * @param {string} [colorSpace=NoColorSpace] - The color space.\r\n\t */\r\n\tconstructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isTexture = true;\r\n\r\n\t\t/**\r\n\t\t * The ID of the texture.\r\n\t\t *\r\n\t\t * @name Texture#id\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tObject.defineProperty( this, 'id', { value: _textureId ++ } );\r\n\r\n\t\t/**\r\n\t\t * The UUID of the material.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.uuid = generateUUID();\r\n\r\n\t\t/**\r\n\t\t * The name of the material.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.name = '';\r\n\r\n\t\t/**\r\n\t\t * The data definition of a texture. A reference to the data source can be\r\n\t\t * shared across textures. This is often useful in context of spritesheets\r\n\t\t * where multiple textures render the same data but with different texture\r\n\t\t * transformations.\r\n\t\t *\r\n\t\t * @type {Source}\r\n\t\t */\r\n\t\tthis.source = new Source( image );\r\n\r\n\t\t/**\r\n\t\t * An array holding user-defined mipmaps.\r\n\t\t *\r\n\t\t * @type {Array<Object>}\r\n\t\t */\r\n\t\tthis.mipmaps = [];\r\n\r\n\t\t/**\r\n\t\t * How the texture is applied to the object. The value `UVMapping`\r\n\t\t * is the default, where texture or uv coordinates are used to apply the map.\r\n\t\t *\r\n\t\t * @type {(UVMapping|CubeReflectionMapping|CubeRefractionMapping|EquirectangularReflectionMapping|EquirectangularRefractionMapping|CubeUVReflectionMapping)}\r\n\t\t * @default UVMapping\r\n\t\t*/\r\n\t\tthis.mapping = mapping;\r\n\r\n\t\t/**\r\n\t\t * Lets you select the uv attribute to map the texture to. `0` for `uv`,\r\n\t\t * `1` for `uv1`, `2` for `uv2` and `3` for `uv3`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.channel = 0;\r\n\r\n\t\t/**\r\n\t\t * This defines how the texture is wrapped horizontally and corresponds to\r\n\t\t * *U* in UV mapping.\r\n\t\t *\r\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\r\n\t\t * @default ClampToEdgeWrapping\r\n\t\t */\r\n\t\tthis.wrapS = wrapS;\r\n\r\n\t\t/**\r\n\t\t * This defines how the texture is wrapped horizontally and corresponds to\r\n\t\t * *V* in UV mapping.\r\n\t\t *\r\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\r\n\t\t * @default ClampToEdgeWrapping\r\n\t\t */\r\n\t\tthis.wrapT = wrapT;\r\n\r\n\t\t/**\r\n\t\t * How the texture is sampled when a texel covers more than one pixel.\r\n\t\t *\r\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\r\n\t\t * @default LinearFilter\r\n\t\t */\r\n\t\tthis.magFilter = magFilter;\r\n\r\n\t\t/**\r\n\t\t * How the texture is sampled when a texel covers less than one pixel.\r\n\t\t *\r\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\r\n\t\t * @default LinearMipmapLinearFilter\r\n\t\t */\r\n\t\tthis.minFilter = minFilter;\r\n\r\n\t\t/**\r\n\t\t * The number of samples taken along the axis through the pixel that has the\r\n\t\t * highest density of texels. By default, this value is `1`. A higher value\r\n\t\t * gives a less blurry result than a basic mipmap, at the cost of more\r\n\t\t * texture samples being used.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.anisotropy = anisotropy;\r\n\r\n\t\t/**\r\n\t\t * The format of the texture.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default RGBAFormat\r\n\t\t */\r\n\t\tthis.format = format;\r\n\r\n\t\t/**\r\n\t\t * The default internal format is derived from {@link Texture#format} and {@link Texture#type} and\r\n\t\t * defines how the texture data is going to be stored on the GPU.\r\n\t\t *\r\n\t\t * This property allows to overwrite the default format.\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.internalFormat = null;\r\n\r\n\t\t/**\r\n\t\t * The data type of the texture.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default UnsignedByteType\r\n\t\t */\r\n\t\tthis.type = type;\r\n\r\n\t\t/**\r\n\t\t * How much a single repetition of the texture is offset from the beginning,\r\n\t\t * in each direction U and V. Typical range is `0.0` to `1.0`.\r\n\t\t *\r\n\t\t * @type {Vector2}\r\n\t\t * @default (0,0)\r\n\t\t */\r\n\t\tthis.offset = new Vector2( 0, 0 );\r\n\r\n\t\t/**\r\n\t\t * How many times the texture is repeated across the surface, in each\r\n\t\t * direction U and V. If repeat is set greater than `1` in either direction,\r\n\t\t * the corresponding wrap parameter should also be set to `RepeatWrapping`\r\n\t\t * or `MirroredRepeatWrapping` to achieve the desired tiling effect.\r\n\t\t *\r\n\t\t * @type {Vector2}\r\n\t\t * @default (1,1)\r\n\t\t */\r\n\t\tthis.repeat = new Vector2( 1, 1 );\r\n\r\n\t\t/**\r\n\t\t * The point around which rotation occurs. A value of `(0.5, 0.5)` corresponds\r\n\t\t * to the center of the texture. Default is `(0, 0)`, the lower left.\r\n\t\t *\r\n\t\t * @type {Vector2}\r\n\t\t * @default (0,0)\r\n\t\t */\r\n\t\tthis.center = new Vector2( 0, 0 );\r\n\r\n\t\t/**\r\n\t\t * How much the texture is rotated around the center point, in radians.\r\n\t\t * Positive values are counter-clockwise.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.rotation = 0;\r\n\r\n\t\t/**\r\n\t\t * Whether to update the texture's uv-transformation {@link Texture#matrix}\r\n\t\t * from the properties {@link Texture#offset}, {@link Texture#repeat},\r\n\t\t * {@link Texture#rotation}, and {@link Texture#center}.\r\n\t\t *\r\n\t\t * Set this to `false` if you are specifying the uv-transform matrix directly.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.matrixAutoUpdate = true;\r\n\r\n\t\t/**\r\n\t\t * The uv-transformation matrix of the texture.\r\n\t\t *\r\n\t\t * @type {Matrix3}\r\n\t\t */\r\n\t\tthis.matrix = new Matrix3();\r\n\r\n\t\t/**\r\n\t\t * Whether to generate mipmaps (if possible) for a texture.\r\n\t\t *\r\n\t\t * Set this to `false` if you are creating mipmaps manually.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.generateMipmaps = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the alpha channel, if present, is multiplied into the\r\n\t\t * color channels when the texture is uploaded to the GPU.\r\n\t\t *\r\n\t\t * Note that this property has no effect when using `ImageBitmap`. You need to\r\n\t\t * configure premultiply alpha on bitmap creation instead.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.premultiplyAlpha = false;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\r\n\t\t * uploaded to the GPU.\r\n\t\t *\r\n\t\t * Note that this property has no effect when using `ImageBitmap`. You need to\r\n\t\t * configure the flip on bitmap creation instead.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.flipY = true;\r\n\r\n\t\t/**\r\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\r\n\t\t * The allowable values are `1` (byte-alignment), `2` (rows aligned to even-numbered bytes),\r\n\t\t * `4` (word-alignment), and `8` (rows start on double-word boundaries).\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 4\r\n\t\t */\r\n\t\tthis.unpackAlignment = 4;\t// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)\r\n\r\n\t\t/**\r\n\t\t * Textures containing color data should be annotated with `SRGBColorSpace` or `LinearSRGBColorSpace`.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default NoColorSpace\r\n\t\t */\r\n\t\tthis.colorSpace = colorSpace;\r\n\r\n\t\t/**\r\n\t\t * An object that can be used to store custom data about the texture. It\r\n\t\t * should not hold references to functions as these will not be cloned.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.userData = {};\r\n\r\n\t\t/**\r\n\t\t * This can be used to only update a subregion or specific rows of the texture (for example, just the\r\n\t\t * first 3 rows). Use the `addUpdateRange()` function to add ranges to this array.\r\n\t\t *\r\n\t\t * @type {Array<Object>}\r\n\t\t */\r\n\t\tthis.updateRanges = [];\r\n\r\n\t\t/**\r\n\t\t * This starts at `0` and counts how many times {@link Texture#needsUpdate} is set to `true`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.version = 0;\r\n\r\n\t\t/**\r\n\t\t * A callback function, called when the texture is updated (e.g., when\r\n\t\t * {@link Texture#needsUpdate} has been set to true and then the texture is used).\r\n\t\t *\r\n\t\t * @type {?Function}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.onUpdate = null;\r\n\r\n\t\t/**\r\n\t\t * An optional back reference to the textures render target.\r\n\t\t *\r\n\t\t * @type {?(RenderTarget|WebGLRenderTarget)}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.renderTarget = null;\r\n\r\n\t\t/**\r\n\t\t * Indicates whether a texture belongs to a render target or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.isRenderTargetTexture = false;\r\n\r\n\t\t/**\r\n\t\t * Indicates if a texture should be handled like a texture array.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.isArrayTexture = image && image.depth && image.depth > 1 ? true : false;\r\n\r\n\t\t/**\r\n\t\t * Indicates whether this texture should be processed by `PMREMGenerator` or not\r\n\t\t * (only relevant for render target textures).\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.pmremVersion = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The width of the texture in pixels.\r\n\t */\r\n\tget width() {\r\n\r\n\t\treturn this.source.getSize( _tempVec3 ).x;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The height of the texture in pixels.\r\n\t */\r\n\tget height() {\r\n\r\n\t\treturn this.source.getSize( _tempVec3 ).y;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The depth of the texture in pixels.\r\n\t */\r\n\tget depth() {\r\n\r\n\t\treturn this.source.getSize( _tempVec3 ).z;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The image object holding the texture data.\r\n\t *\r\n\t * @type {?Object}\r\n\t */\r\n\tget image() {\r\n\r\n\t\treturn this.source.data;\r\n\r\n\t}\r\n\r\n\tset image( value = null ) {\r\n\r\n\t\tthis.source.data = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the texture transformation matrix from the from the properties {@link Texture#offset},\r\n\t * {@link Texture#repeat}, {@link Texture#rotation}, and {@link Texture#center}.\r\n\t */\r\n\tupdateMatrix() {\r\n\r\n\t\tthis.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a range of data in the data texture to be updated on the GPU.\r\n\t *\r\n\t * @param {number} start - Position at which to start update.\r\n\t * @param {number} count - The number of components to update.\r\n\t */\r\n\taddUpdateRange( start, count ) {\r\n\r\n\t\tthis.updateRanges.push( { start, count } );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clears the update ranges.\r\n\t */\r\n\tclearUpdateRanges() {\r\n\r\n\t\tthis.updateRanges.length = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new texture with copied values from this instance.\r\n\t *\r\n\t * @return {Texture} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given texture to this instance.\r\n\t *\r\n\t * @param {Texture} source - The texture to copy.\r\n\t * @return {Texture} A reference to this instance.\r\n\t */\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.source = source.source;\r\n\t\tthis.mipmaps = source.mipmaps.slice( 0 );\r\n\r\n\t\tthis.mapping = source.mapping;\r\n\t\tthis.channel = source.channel;\r\n\r\n\t\tthis.wrapS = source.wrapS;\r\n\t\tthis.wrapT = source.wrapT;\r\n\r\n\t\tthis.magFilter = source.magFilter;\r\n\t\tthis.minFilter = source.minFilter;\r\n\r\n\t\tthis.anisotropy = source.anisotropy;\r\n\r\n\t\tthis.format = source.format;\r\n\t\tthis.internalFormat = source.internalFormat;\r\n\t\tthis.type = source.type;\r\n\r\n\t\tthis.offset.copy( source.offset );\r\n\t\tthis.repeat.copy( source.repeat );\r\n\t\tthis.center.copy( source.center );\r\n\t\tthis.rotation = source.rotation;\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\t\tthis.matrix.copy( source.matrix );\r\n\r\n\t\tthis.generateMipmaps = source.generateMipmaps;\r\n\t\tthis.premultiplyAlpha = source.premultiplyAlpha;\r\n\t\tthis.flipY = source.flipY;\r\n\t\tthis.unpackAlignment = source.unpackAlignment;\r\n\t\tthis.colorSpace = source.colorSpace;\r\n\r\n\t\tthis.renderTarget = source.renderTarget;\r\n\t\tthis.isRenderTargetTexture = source.isRenderTargetTexture;\r\n\t\tthis.isArrayTexture = source.isArrayTexture;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this texture's properties based on `values`.\r\n\t * @param {Object} values - A container with texture parameters.\r\n\t */\r\n\tsetValues( values ) {\r\n\r\n\t\tfor ( const key in values ) {\r\n\r\n\t\t\tconst newValue = values[ key ];\r\n\r\n\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( `THREE.Texture.setValues(): parameter '${ key }' has value of undefined.` );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( `THREE.Texture.setValues(): property '${ key }' does not exist.` );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( ( currentValue && newValue ) && ( currentValue.isVector2 && newValue.isVector2 ) ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else if ( ( currentValue && newValue ) && ( currentValue.isVector3 && newValue.isVector3 ) ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else if ( ( currentValue && newValue ) && ( currentValue.isMatrix3 && newValue.isMatrix3 ) ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes the texture into JSON.\r\n\t *\r\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\r\n\t * @return {Object} A JSON object representing the serialized texture.\r\n\t * @see {@link ObjectLoader#parse}\r\n\t */\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {\r\n\r\n\t\t\treturn meta.textures[ this.uuid ];\r\n\r\n\t\t}\r\n\r\n\t\tconst output = {\r\n\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.7,\r\n\t\t\t\ttype: 'Texture',\r\n\t\t\t\tgenerator: 'Texture.toJSON'\r\n\t\t\t},\r\n\r\n\t\t\tuuid: this.uuid,\r\n\t\t\tname: this.name,\r\n\r\n\t\t\timage: this.source.toJSON( meta ).uuid,\r\n\r\n\t\t\tmapping: this.mapping,\r\n\t\t\tchannel: this.channel,\r\n\r\n\t\t\trepeat: [ this.repeat.x, this.repeat.y ],\r\n\t\t\toffset: [ this.offset.x, this.offset.y ],\r\n\t\t\tcenter: [ this.center.x, this.center.y ],\r\n\t\t\trotation: this.rotation,\r\n\r\n\t\t\twrap: [ this.wrapS, this.wrapT ],\r\n\r\n\t\t\tformat: this.format,\r\n\t\t\tinternalFormat: this.internalFormat,\r\n\t\t\ttype: this.type,\r\n\t\t\tcolorSpace: this.colorSpace,\r\n\r\n\t\t\tminFilter: this.minFilter,\r\n\t\t\tmagFilter: this.magFilter,\r\n\t\t\tanisotropy: this.anisotropy,\r\n\r\n\t\t\tflipY: this.flipY,\r\n\r\n\t\t\tgenerateMipmaps: this.generateMipmaps,\r\n\t\t\tpremultiplyAlpha: this.premultiplyAlpha,\r\n\t\t\tunpackAlignment: this.unpackAlignment\r\n\r\n\t\t};\r\n\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;\r\n\r\n\t\tif ( ! isRootObject ) {\r\n\r\n\t\t\tmeta.textures[ this.uuid ] = output;\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever this instance is no longer used in your app.\r\n\t *\r\n\t * @fires Texture#dispose\r\n\t */\r\n\tdispose() {\r\n\r\n\t\t/**\r\n\t\t * Fires when the texture has been disposed of.\r\n\t\t *\r\n\t\t * @event Texture#dispose\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms the given uv vector with the textures uv transformation matrix.\r\n\t *\r\n\t * @param {Vector2} uv - The uv vector.\r\n\t * @return {Vector2} The transformed uv vector.\r\n\t */\r\n\ttransformUv( uv ) {\r\n\r\n\t\tif ( this.mapping !== UVMapping ) return uv;\r\n\r\n\t\tuv.applyMatrix3( this.matrix );\r\n\r\n\t\tif ( uv.x < 0 || uv.x > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapS ) {\r\n\r\n\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.x = uv.x < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.x = Math.ceil( uv.x ) - uv.x;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.x = uv.x - Math.floor( uv.x );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv.y < 0 || uv.y > 1 ) {\r\n\r\n\t\t\tswitch ( this.wrapT ) {\r\n\r\n\t\t\t\tcase RepeatWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase ClampToEdgeWrapping:\r\n\r\n\t\t\t\t\tuv.y = uv.y < 0 ? 0 : 1;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase MirroredRepeatWrapping:\r\n\r\n\t\t\t\t\tif ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {\r\n\r\n\t\t\t\t\t\tuv.y = Math.ceil( uv.y ) - uv.y;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tuv.y = uv.y - Math.floor( uv.y );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.flipY ) {\r\n\r\n\t\t\tuv.y = 1 - uv.y;\r\n\r\n\t\t}\r\n\r\n\t\treturn uv;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setting this property to `true` indicates the engine the texture\r\n\t * must be updated in the next render. This triggers a texture upload\r\n\t * to the GPU and ensures correct texture parameter configuration.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default false\r\n\t * @param {boolean} value\r\n\t */\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) {\r\n\r\n\t\t\tthis.version ++;\r\n\t\t\tthis.source.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setting this property to `true` indicates the engine the PMREM\r\n\t * must be regenerated.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default false\r\n\t * @param {boolean} value\r\n\t */\r\n\tset needsPMREMUpdate( value ) {\r\n\r\n\t\tif ( value === true ) {\r\n\r\n\t\t\tthis.pmremVersion ++;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The default image for all textures.\r\n *\r\n * @static\r\n * @type {?Image}\r\n * @default null\r\n */\r\nTexture.DEFAULT_IMAGE = null;\r\n\r\n/**\r\n * The default mapping for all textures.\r\n *\r\n * @static\r\n * @type {number}\r\n * @default UVMapping\r\n */\r\nTexture.DEFAULT_MAPPING = UVMapping;\r\n\r\n/**\r\n * The default anisotropy value for all textures.\r\n *\r\n * @static\r\n * @type {number}\r\n * @default 1\r\n */\r\nTexture.DEFAULT_ANISOTROPY = 1;\r\n\r\nexport { Texture };\r\n", "import UniformNode, { uniform } from '../core/UniformNode.js';\r\nimport { uv } from './UV.js';\r\nimport { textureSize } from './TextureSizeNode.js';\r\nimport { colorSpaceToWorking } from '../display/ColorSpaceNode.js';\r\nimport { expression } from '../code/ExpressionNode.js';\r\nimport { maxMipLevel } from '../utils/MaxMipLevelNode.js';\r\nimport { nodeProxy, vec3, nodeObject, int } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\n\r\nimport { IntType, NearestFilter, UnsignedIntType } from '../../constants.js';\r\n\r\nimport { Texture } from '../../textures/Texture.js';\r\n\r\nconst EmptyTexture = /*@__PURE__*/ new Texture();\r\n\r\n/**\r\n * This type of uniform node represents a 2D texture.\r\n *\r\n * @augments UniformNode\r\n */\r\nclass TextureNode extends UniformNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'TextureNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new texture node.\r\n\t *\r\n\t * @param {Texture} [value=EmptyTexture] - The texture.\r\n\t * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\r\n\t * @param {?Node<int>} [levelNode=null] - The level node.\r\n\t * @param {?Node<float>} [biasNode=null] - The bias node.\r\n\t */\r\n\tconstructor( value = EmptyTexture, uvNode = null, levelNode = null, biasNode = null ) {\r\n\r\n\t\tsuper( value );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isTextureNode = true;\r\n\r\n\t\t/**\r\n\t\t * Represents the texture coordinates.\r\n\t\t *\r\n\t\t * @type {?Node<vec2|vec3>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.uvNode = uvNode;\r\n\r\n\t\t/**\r\n\t\t * Represents the mip level that should be selected.\r\n\t\t *\r\n\t\t * @type {?Node<int>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.levelNode = levelNode;\r\n\r\n\t\t/**\r\n\t\t * Represents the bias to be applied during level-of-detail computation.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.biasNode = biasNode;\r\n\r\n\t\t/**\r\n\t\t * Represents a reference value a texture sample is compared to.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.compareNode = null;\r\n\r\n\t\t/**\r\n\t\t * When using texture arrays, the depth node defines the layer to select.\r\n\t\t *\r\n\t\t * @type {?Node<int>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.depthNode = null;\r\n\r\n\t\t/**\r\n\t\t * When defined, a texture is sampled using explicit gradients.\r\n\t\t *\r\n\t\t * @type {?Array<Node<vec2>>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.gradNode = null;\r\n\r\n\t\t/**\r\n\t\t * Whether texture values should be sampled or fetched.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.sampler = true;\r\n\r\n\t\t/**\r\n\t\t * Whether the uv transformation matrix should be\r\n\t\t * automatically updated or not. Use `setUpdateMatrix()`\r\n\t\t * if you want to change the value of the property.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.updateMatrix = false;\r\n\r\n\t\t/**\r\n\t\t * By default the `update()` method is not executed. `setUpdateMatrix()`\r\n\t\t * sets the value to `frame` when the uv transformation matrix should\r\n\t\t * automatically be updated.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'none'\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.NONE;\r\n\r\n\t\t/**\r\n\t\t * The reference node.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.referenceNode = null;\r\n\r\n\t\t/**\r\n\t\t * The texture value is stored in a private property.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Texture}\r\n\t\t */\r\n\t\tthis._value = value;\r\n\r\n\t\t/**\r\n\t\t * The uniform node that represents the uv transformation matrix.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {?UniformNode<mat3>}\r\n\t\t */\r\n\t\tthis._matrixUniform = null;\r\n\r\n\t\tthis.setUpdateMatrix( uvNode === null );\r\n\r\n\t}\r\n\r\n\tset value( value ) {\r\n\r\n\t\tif ( this.referenceNode ) {\r\n\r\n\t\t\tthis.referenceNode.value = value;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._value = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The texture value.\r\n\t *\r\n\t * @type {Texture}\r\n\t */\r\n\tget value() {\r\n\r\n\t\treturn this.referenceNode ? this.referenceNode.value : this._value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten since the uniform hash is defined by the texture's UUID.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The uniform hash.\r\n\t */\r\n\tgetUniformHash( /*builder*/ ) {\r\n\r\n\t\treturn this.value.uuid;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten since the node type is inferred from the texture type.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\tif ( this.value.isDepthTexture === true ) return 'float';\r\n\r\n\t\tif ( this.value.type === UnsignedIntType ) {\r\n\r\n\t\t\treturn 'uvec4';\r\n\r\n\t\t} else if ( this.value.type === IntType ) {\r\n\r\n\t\t\treturn 'ivec4';\r\n\r\n\t\t}\r\n\r\n\t\treturn 'vec4';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation to return a fixed value `'texture'`.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The input type.\r\n\t */\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'texture';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a default uvs based on the current texture's channel.\r\n\t *\r\n\t * @return {AttributeNode<vec2>} The default uvs.\r\n\t */\r\n\tgetDefaultUV() {\r\n\r\n\t\treturn uv( this.value.channel );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten to always return the texture reference of the node.\r\n\t *\r\n\t * @param {any} state - This method can be invocated in different contexts so `state` can refer to any object type.\r\n\t * @return {Texture} The texture reference.\r\n\t */\r\n\tupdateReference( /*state*/ ) {\r\n\r\n\t\treturn this.value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms the given uv node with the texture transformation matrix.\r\n\t *\r\n\t * @param {Node} uvNode - The uv node to transform.\r\n\t * @return {Node} The transformed uv node.\r\n\t */\r\n\tgetTransformedUV( uvNode ) {\r\n\r\n\t\tif ( this._matrixUniform === null ) this._matrixUniform = uniform( this.value.matrix );\r\n\r\n\t\treturn this._matrixUniform.mul( vec3( uvNode, 1 ) ).xy;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Defines whether the uv transformation matrix should automatically be updated or not.\r\n\t *\r\n\t * @param {boolean} value - The update toggle.\r\n\t * @return {TextureNode} A reference to this node.\r\n\t */\r\n\tsetUpdateMatrix( value ) {\r\n\r\n\t\tthis.updateMatrix = value;\r\n\t\tthis.updateType = value ? NodeUpdateType.OBJECT : NodeUpdateType.NONE;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the uv node. Depending on the backend as well as texture's image and type, it might be necessary\r\n\t * to modify the uv node for correct sampling.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {Node} uvNode - The uv node to setup.\r\n\t * @return {Node} The updated uv node.\r\n\t */\r\n\tsetupUV( builder, uvNode ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( builder.isFlipY() && ( ( texture.image instanceof ImageBitmap && texture.flipY === true ) || texture.isRenderTargetTexture === true || texture.isFramebufferTexture === true || texture.isDepthTexture === true ) ) {\r\n\r\n\t\t\tif ( this.sampler ) {\r\n\r\n\t\t\t\tuvNode = uvNode.flipY();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tuvNode = uvNode.setY( int( textureSize( this, this.levelNode ).y ).sub( uvNode.y ).sub( 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn uvNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups texture node by preparing the internal nodes for code generation.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.referenceNode = this.referenceNode;\r\n\r\n\t\t//\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( ! texture || texture.isTexture !== true ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().' );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tlet uvNode = this.uvNode;\r\n\r\n\t\tif ( ( uvNode === null || builder.context.forceUVContext === true ) && builder.context.getUV ) {\r\n\r\n\t\t\tuvNode = builder.context.getUV( this, builder );\r\n\r\n\t\t}\r\n\r\n\t\tif ( ! uvNode ) uvNode = this.getDefaultUV();\r\n\r\n\t\tif ( this.updateMatrix === true ) {\r\n\r\n\t\t\tuvNode = this.getTransformedUV( uvNode );\r\n\r\n\t\t}\r\n\r\n\t\tuvNode = this.setupUV( builder, uvNode );\r\n\r\n\t\t//\r\n\r\n\t\tlet levelNode = this.levelNode;\r\n\r\n\t\tif ( levelNode === null && builder.context.getTextureLevel ) {\r\n\r\n\t\t\tlevelNode = builder.context.getTextureLevel( this );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tproperties.uvNode = uvNode;\r\n\t\tproperties.levelNode = levelNode;\r\n\t\tproperties.biasNode = this.biasNode;\r\n\t\tproperties.compareNode = this.compareNode;\r\n\t\tproperties.gradNode = this.gradNode;\r\n\t\tproperties.depthNode = this.depthNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the uv code snippet.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {Node} uvNode - The uv node to generate code for.\r\n\t * @return {string} The generated code snippet.\r\n\t */\r\n\tgenerateUV( builder, uvNode ) {\r\n\r\n\t\treturn uvNode.build( builder, this.sampler === true ? 'vec2' : 'ivec2' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the snippet for the texture sampling.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {string} textureProperty - The texture property.\r\n\t * @param {string} uvSnippet - The uv snippet.\r\n\t * @param {?string} levelSnippet - The level snippet.\r\n\t * @param {?string} biasSnippet - The bias snippet.\r\n\t * @param {?string} depthSnippet - The depth snippet.\r\n\t * @param {?string} compareSnippet - The compare snippet.\r\n\t * @param {?Array<string>} gradSnippet - The grad snippet.\r\n\t * @return {string} The generated code snippet.\r\n\t */\r\n\tgenerateSnippet( builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tif ( levelSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureLevel( texture, textureProperty, uvSnippet, levelSnippet, depthSnippet );\r\n\r\n\t\t} else if ( biasSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureBias( texture, textureProperty, uvSnippet, biasSnippet, depthSnippet );\r\n\r\n\t\t} else if ( gradSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureGrad( texture, textureProperty, uvSnippet, gradSnippet, depthSnippet );\r\n\r\n\t\t} else if ( compareSnippet ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureCompare( texture, textureProperty, uvSnippet, compareSnippet, depthSnippet );\r\n\r\n\t\t} else if ( this.sampler === false ) {\r\n\r\n\t\t\tsnippet = builder.generateTextureLoad( texture, textureProperty, uvSnippet, depthSnippet );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = builder.generateTexture( texture, textureProperty, uvSnippet, depthSnippet );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the code snippet of the texture node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {string} output - The current output.\r\n\t * @return {string} The generated code snippet.\r\n\t */\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tconst textureProperty = super.generate( builder, 'property' );\r\n\r\n\t\tif ( /^sampler/.test( output ) ) {\r\n\r\n\t\t\treturn textureProperty + '_sampler';\r\n\r\n\t\t} else if ( builder.isReference( output ) ) {\r\n\r\n\t\t\treturn textureProperty;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst nodeData = builder.getDataFromNode( this );\r\n\r\n\t\t\tlet propertyName = nodeData.propertyName;\r\n\r\n\t\t\tif ( propertyName === undefined ) {\r\n\r\n\t\t\t\tconst { uvNode, levelNode, biasNode, compareNode, depthNode, gradNode } = properties;\r\n\r\n\t\t\t\tconst uvSnippet = this.generateUV( builder, uvNode );\r\n\t\t\t\tconst levelSnippet = levelNode ? levelNode.build( builder, 'float' ) : null;\r\n\t\t\t\tconst biasSnippet = biasNode ? biasNode.build( builder, 'float' ) : null;\r\n\t\t\t\tconst depthSnippet = depthNode ? depthNode.build( builder, 'int' ) : null;\r\n\t\t\t\tconst compareSnippet = compareNode ? compareNode.build( builder, 'float' ) : null;\r\n\t\t\t\tconst gradSnippet = gradNode ? [ gradNode[ 0 ].build( builder, 'vec2' ), gradNode[ 1 ].build( builder, 'vec2' ) ] : null;\r\n\r\n\t\t\t\tconst nodeVar = builder.getVarFromNode( this );\r\n\r\n\t\t\t\tpropertyName = builder.getPropertyName( nodeVar );\r\n\r\n\t\t\t\tconst snippet = this.generateSnippet( builder, textureProperty, uvSnippet, levelSnippet, biasSnippet, depthSnippet, compareSnippet, gradSnippet );\r\n\r\n\t\t\t\tbuilder.addLineFlowCode( `${propertyName} = ${snippet}`, this );\r\n\r\n\t\t\t\tnodeData.snippet = snippet;\r\n\t\t\t\tnodeData.propertyName = propertyName;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet snippet = propertyName;\r\n\t\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\t\tif ( builder.needsToWorkingColorSpace( texture ) ) {\r\n\r\n\t\t\t\tsnippet = colorSpaceToWorking( expression( snippet, nodeType ), texture.colorSpace ).setup( builder ).build( builder, nodeType );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn builder.format( snippet, nodeType, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the sampler value.\r\n\t *\r\n\t * @param {boolean} value - The sampler value to set.\r\n\t * @return {TextureNode} A reference to this texture node.\r\n\t */\r\n\tsetSampler( value ) {\r\n\r\n\t\tthis.sampler = value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the sampler value.\r\n\t *\r\n\t * @return {boolean} The sampler value.\r\n\t */\r\n\tgetSampler() {\r\n\r\n\t\treturn this.sampler;\r\n\r\n\t}\r\n\r\n\t// @TODO: Move to TSL\r\n\r\n\t/**\r\n\t * @function\r\n\t * @deprecated since r172. Use {@link TextureNode#sample} instead.\r\n\t *\r\n\t * @param {Node} uvNode - The uv node.\r\n\t * @return {TextureNode} A texture node representing the texture sample.\r\n\t */\r\n\tuv( uvNode ) { // @deprecated, r172\r\n\r\n\t\tconsole.warn( 'THREE.TextureNode: .uv() has been renamed. Use .sample() instead.' );\r\n\r\n\t\treturn this.sample( uvNode );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples the texture with the given uv node.\r\n\t *\r\n\t * @param {Node} uvNode - The uv node.\r\n\t * @return {TextureNode} A texture node representing the texture sample.\r\n\t */\r\n\tsample( uvNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.uvNode = nodeObject( uvNode );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples a blurred version of the texture by defining an internal bias.\r\n\t *\r\n\t * @param {Node<float>} amountNode - How blurred the texture should be.\r\n\t * @return {TextureNode} A texture node representing the texture sample.\r\n\t */\r\n\tblur( amountNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.biasNode = nodeObject( amountNode ).mul( maxMipLevel( textureNode ) );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\tconst map = textureNode.value;\r\n\r\n\t\tif ( textureNode.generateMipmaps === false && ( map && map.generateMipmaps === false || map.minFilter === NearestFilter || map.magFilter === NearestFilter ) ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.TSL: texture().blur() requires mipmaps and sampling. Use .generateMipmaps=true and .minFilter/.magFilter=THREE.LinearFilter in the Texture.' );\r\n\r\n\t\t\ttextureNode.biasNode = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples a specific mip of the texture.\r\n\t *\r\n\t * @param {Node<int>} levelNode - The mip level to sample.\r\n\t * @return {TextureNode} A texture node representing the texture sample.\r\n\t */\r\n\tlevel( levelNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.levelNode = nodeObject( levelNode );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the texture size of the requested level.\r\n\t *\r\n\t * @param {Node<int>} levelNode - The level to compute the size for.\r\n\t * @return {TextureSizeNode} The texture size.\r\n\t */\r\n\tsize( levelNode ) {\r\n\r\n\t\treturn textureSize( this, levelNode );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples the texture with the given bias.\r\n\t *\r\n\t * @param {Node<float>} biasNode - The bias node.\r\n\t * @return {TextureNode} A texture node representing the texture sample.\r\n\t */\r\n\tbias( biasNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.biasNode = nodeObject( biasNode );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples the texture by executing a compare operation.\r\n\t *\r\n\t * @param {Node<float>} compareNode - The node that defines the compare value.\r\n\t * @return {TextureNode} A texture node representing the texture sample.\r\n\t */\r\n\tcompare( compareNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.compareNode = nodeObject( compareNode );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples the texture using an explicit gradient.\r\n\t *\r\n\t * @param {Node<vec2>} gradNodeX - The gradX node.\r\n\t * @param {Node<vec2>} gradNodeY - The gradY node.\r\n\t * @return {TextureNode} A texture node representing the texture sample.\r\n\t */\r\n\tgrad( gradNodeX, gradNodeY ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.gradNode = [ nodeObject( gradNodeX ), nodeObject( gradNodeY ) ];\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Samples the texture by defining a depth node.\r\n\t *\r\n\t * @param {Node<int>} depthNode - The depth node.\r\n\t * @return {TextureNode} A texture node representing the texture sample.\r\n\t */\r\n\tdepth( depthNode ) {\r\n\r\n\t\tconst textureNode = this.clone();\r\n\t\ttextureNode.depthNode = nodeObject( depthNode );\r\n\t\ttextureNode.referenceNode = this.getSelf();\r\n\r\n\t\treturn nodeObject( textureNode );\r\n\r\n\t}\r\n\r\n\t// --\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.value = this.value.toJSON( data.meta ).uuid;\r\n\t\tdata.sampler = this.sampler;\r\n\t\tdata.updateMatrix = this.updateMatrix;\r\n\t\tdata.updateType = this.updateType;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.value = data.meta.textures[ data.value ];\r\n\t\tthis.sampler = data.sampler;\r\n\t\tthis.updateMatrix = data.updateMatrix;\r\n\t\tthis.updateType = data.updateType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The update is used to implement the update of the uv transformation matrix.\r\n\t */\r\n\tupdate() {\r\n\r\n\t\tconst texture = this.value;\r\n\t\tconst matrixUniform = this._matrixUniform;\r\n\r\n\t\tif ( matrixUniform !== null ) matrixUniform.value = texture.matrix;\r\n\r\n\t\tif ( texture.matrixAutoUpdate === true ) {\r\n\r\n\t\t\ttexture.updateMatrix();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clones the texture node.\r\n\t *\r\n\t * @return {TextureNode} The cloned texture node.\r\n\t */\r\n\tclone() {\r\n\r\n\t\tconst newNode = new this.constructor( this.value, this.uvNode, this.levelNode, this.biasNode );\r\n\t\tnewNode.sampler = this.sampler;\r\n\t\tnewNode.depthNode = this.depthNode;\r\n\t\tnewNode.compareNode = this.compareNode;\r\n\t\tnewNode.gradNode = this.gradNode;\r\n\r\n\t\treturn newNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default TextureNode;\r\n\r\n/**\r\n * TSL function for creating a texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Texture} value - The texture.\r\n * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\r\n * @param {?Node<int>} [levelNode=null] - The level node.\r\n * @param {?Node<float>} [biasNode=null] - The bias node.\r\n * @returns {TextureNode}\r\n */\r\nconst textureBase = /*@__PURE__*/ nodeProxy( TextureNode ).setParameterLength( 1, 4 ).setName( 'texture' );\r\n\r\n/**\r\n * TSL function for creating a texture node or sample a texture node already existing.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Texture|TextureNode} [value=EmptyTexture] - The texture.\r\n * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\r\n * @param {?Node<int>} [levelNode=null] - The level node.\r\n * @param {?Node<float>} [biasNode=null] - The bias node.\r\n * @returns {TextureNode}\r\n */\r\nexport const texture = ( value = EmptyTexture, uvNode = null, levelNode = null, biasNode = null ) => {\r\n\r\n\tlet textureNode;\r\n\r\n\tif ( value && value.isTextureNode === true ) {\r\n\r\n\t\ttextureNode = nodeObject( value.clone() );\r\n\t\ttextureNode.referenceNode = value.getSelf(); // Ensure the reference is set to the original node\r\n\r\n\t\tif ( uvNode !== null ) textureNode.uvNode = nodeObject( uvNode );\r\n\t\tif ( levelNode !== null ) textureNode.levelNode = nodeObject( levelNode );\r\n\t\tif ( biasNode !== null ) textureNode.biasNode = nodeObject( biasNode );\r\n\r\n\t} else {\r\n\r\n\t\ttextureNode = textureBase( value, uvNode, levelNode, biasNode );\r\n\r\n\t}\r\n\r\n\treturn textureNode;\r\n\r\n};\r\n\r\n/**\r\n * TSL function for creating a uniform texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Texture} value - The texture.\r\n * @returns {TextureNode}\r\n */\r\nexport const uniformTexture = ( value = EmptyTexture ) => texture( value );\r\n\r\n/**\r\n * TSL function for creating a texture node that fetches/loads texels without interpolation.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Texture|TextureNode} [value=EmptyTexture] - The texture.\r\n * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\r\n * @param {?Node<int>} [levelNode=null] - The level node.\r\n * @param {?Node<float>} [biasNode=null] - The bias node.\r\n * @returns {TextureNode}\r\n */\r\nexport const textureLoad = ( ...params ) => texture( ...params ).setSampler( false );\r\n\r\n//export const textureLevel = ( value, uv, level ) => texture( value, uv ).level( level );\r\n\r\n/**\r\n * Converts a texture or texture node to a sampler.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {TextureNode|Texture} value - The texture or texture node to convert.\r\n * @returns {Node}\r\n */\r\nexport const sampler = ( value ) => ( value.isNode === true ? value : texture( value ) ).convert( 'sampler' );\r\n\r\n/**\r\n * Converts a texture or texture node to a sampler comparison.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {TextureNode|Texture} value - The texture or texture node to convert.\r\n * @returns {Node}\r\n */\r\nexport const samplerComparison = ( value ) => ( value.isNode === true ? value : texture( value ) ).convert( 'samplerComparison' );\r\n", "import { Texture } from './Texture.js';\r\nimport { NearestFilter } from '../constants.js';\r\n\r\n/**\r\n * This class can only be used in combination with `copyFramebufferToTexture()` methods\r\n * of renderers. It extracts the contents of the current bound framebuffer and provides it\r\n * as a texture for further usage.\r\n *\r\n * ```js\r\n * const pixelRatio = window.devicePixelRatio;\r\n * const textureSize = 128 * pixelRatio;\r\n *\r\n * const frameTexture = new FramebufferTexture( textureSize, textureSize );\r\n *\r\n * // calculate start position for copying part of the frame data\r\n * const vector = new Vector2();\r\n * vector.x = ( window.innerWidth * pixelRatio / 2 ) - ( textureSize / 2 );\r\n * vector.y = ( window.innerHeight * pixelRatio / 2 ) - ( textureSize / 2 );\r\n *\r\n * renderer.render( scene, camera );\r\n *\r\n * // copy part of the rendered frame into the framebuffer texture\r\n * renderer.copyFramebufferToTexture( frameTexture, vector );\r\n * ```\r\n *\r\n * @augments Texture\r\n */\r\nclass FramebufferTexture extends Texture {\r\n\r\n\t/**\r\n\t * Constructs a new framebuffer texture.\r\n\t *\r\n\t * @param {number} width - The width of the texture.\r\n\t * @param {number} height - The height of the texture.\r\n\t */\r\n\tconstructor( width, height ) {\r\n\r\n\t\tsuper( { width, height } );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isFramebufferTexture = true;\r\n\r\n\t\t/**\r\n\t\t * How the texture is sampled when a texel covers more than one pixel.\r\n\t\t *\r\n\t\t * Overwritten and set to `NearestFilter` by default to disable filtering.\r\n\t\t *\r\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\r\n\t\t * @default NearestFilter\r\n\t\t */\r\n\t\tthis.magFilter = NearestFilter;\r\n\r\n\t\t/**\r\n\t\t * How the texture is sampled when a texel covers less than one pixel.\r\n\t\t *\r\n\t\t * Overwritten and set to `NearestFilter` by default to disable filtering.\r\n\t\t *\r\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\r\n\t\t * @default NearestFilter\r\n\t\t */\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\t/**\r\n\t\t * Whether to generate mipmaps (if possible) for a texture.\r\n\t\t *\r\n\t\t * Overwritten and set to `false` by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { FramebufferTexture };\r\n", "import TextureNode from '../accessors/TextureNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\nimport { screenUV } from './ScreenNode.js';\r\n\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { FramebufferTexture } from '../../textures/FramebufferTexture.js';\r\nimport { LinearMipmapLinearFilter } from '../../constants.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\n/**\r\n * A special type of texture node which represents the data of the current viewport\r\n * as a texture. The module extracts data from the current bound framebuffer with\r\n * a copy operation so no extra render pass is required to produce the texture data\r\n * (which is good for performance). `ViewportTextureNode` can be used as an input for a\r\n * variety of effects like refractive or transmissive materials.\r\n *\r\n * @augments TextureNode\r\n */\r\nclass ViewportTextureNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ViewportTextureNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new viewport texture node.\r\n\t *\r\n\t * @param {Node} [uvNode=screenUV] - The uv node.\r\n\t * @param {?Node} [levelNode=null] - The level node.\r\n\t * @param {?Texture} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.\r\n\t */\r\n\tconstructor( uvNode = screenUV, levelNode = null, framebufferTexture = null ) {\r\n\r\n\t\tif ( framebufferTexture === null ) {\r\n\r\n\t\t\tframebufferTexture = new FramebufferTexture();\r\n\t\t\tframebufferTexture.minFilter = LinearMipmapLinearFilter;\r\n\r\n\t\t}\r\n\r\n\t\tsuper( framebufferTexture, uvNode, levelNode );\r\n\r\n\t\t/**\r\n\t\t * Whether to generate mipmaps or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isOutputTextureNode = true;\r\n\r\n\t\t/**\r\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.FRAME` since the node renders the\r\n\t\t * scene once per frame in its {@link ViewportTextureNode#updateBefore} method.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'frame'\r\n\t\t */\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst renderer = frame.renderer;\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\t//\r\n\r\n\t\tconst framebufferTexture = this.value;\r\n\r\n\t\tif ( framebufferTexture.image.width !== _size.width || framebufferTexture.image.height !== _size.height ) {\r\n\r\n\t\t\tframebufferTexture.image.width = _size.width;\r\n\t\t\tframebufferTexture.image.height = _size.height;\r\n\t\t\tframebufferTexture.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst currentGenerateMipmaps = framebufferTexture.generateMipmaps;\r\n\t\tframebufferTexture.generateMipmaps = this.generateMipmaps;\r\n\r\n\t\trenderer.copyFramebufferToTexture( framebufferTexture );\r\n\r\n\t\tframebufferTexture.generateMipmaps = currentGenerateMipmaps;\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst viewportTextureNode = new this.constructor( this.uvNode, this.levelNode, this.value );\r\n\t\tviewportTextureNode.generateMipmaps = this.generateMipmaps;\r\n\r\n\t\treturn viewportTextureNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ViewportTextureNode;\r\n\r\n/**\r\n * TSL function for creating a viewport texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Node} [uvNode=screenUV] - The uv node.\r\n * @param {?Node} [levelNode=null] - The level node.\r\n * @param {?Texture} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.\r\n * @returns {ViewportTextureNode}\r\n */\r\nexport const viewportTexture = /*@__PURE__*/ nodeProxy( ViewportTextureNode ).setParameterLength( 0, 3 );\r\n\r\n/**\r\n * TSL function for creating a viewport texture node with enabled mipmap generation.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Node} [uvNode=screenUV] - The uv node.\r\n * @param {?Node} [levelNode=null] - The level node.\r\n * @param {?Texture} [framebufferTexture=null] - A framebuffer texture holding the viewport data. If not provided, a framebuffer texture is created automatically.\r\n * @returns {ViewportTextureNode}\r\n */\r\nexport const viewportMipTexture = /*@__PURE__*/ nodeProxy( ViewportTextureNode, null, null, { generateMipmaps: true } ).setParameterLength( 0, 3 );\r\n", "import { Source } from './Source.js';\r\nimport { Texture } from './Texture.js';\r\nimport { NearestFilter, UnsignedIntType, DepthFormat, DepthStencilFormat } from '../constants.js';\r\n\r\n/**\r\n * This class can be used to automatically save the depth information of a\r\n * rendering into a texture.\r\n *\r\n * @augments Texture\r\n */\r\nclass DepthTexture extends Texture {\r\n\r\n\t/**\r\n\t * Constructs a new depth texture.\r\n\t *\r\n\t * @param {number} width - The width of the texture.\r\n\t * @param {number} height - The height of the texture.\r\n\t * @param {number} [type=UnsignedIntType] - The texture type.\r\n\t * @param {number} [mapping=Texture.DEFAULT_MAPPING] - The texture mapping.\r\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\r\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\r\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\r\n\t * @param {number} [minFilter=LinearFilter] - The min filter value.\r\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\r\n\t * @param {number} [format=DepthFormat] - The texture format.\r\n\t * @param {number} [depth=1] - The depth of the texture.\r\n\t */\r\n\tconstructor( width, height, type = UnsignedIntType, mapping, wrapS, wrapT, magFilter = NearestFilter, minFilter = NearestFilter, anisotropy, format = DepthFormat, depth = 1 ) {\r\n\r\n\t\tif ( format !== DepthFormat && format !== DepthStencilFormat ) {\r\n\r\n\t\t\tthrow new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );\r\n\r\n\t\t}\r\n\r\n\t\tconst image = { width: width, height: height, depth: depth };\r\n\r\n\t\tsuper( image, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isDepthTexture = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\r\n\t\t * uploaded to the GPU.\r\n\t\t *\r\n\t\t * Overwritten and set to `false` by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.flipY = false;\r\n\r\n\t\t/**\r\n\t\t * Whether to generate mipmaps (if possible) for a texture.\r\n\t\t *\r\n\t\t * Overwritten and set to `false` by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\t/**\r\n\t\t * Code corresponding to the depth compare function.\r\n\t\t *\r\n\t\t * @type {?(NeverCompare|LessCompare|EqualCompare|LessEqualCompare|GreaterCompare|NotEqualCompare|GreaterEqualCompare|AlwaysCompare)}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.compareFunction = null;\r\n\r\n\t}\r\n\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.source = new Source( Object.assign( {}, source.image ) ); // see #30540\r\n\t\tthis.compareFunction = source.compareFunction;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tif ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DepthTexture };\r\n", "import ViewportTextureNode from './ViewportTextureNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\nimport { screenUV } from './ScreenNode.js';\r\n\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\n\r\nlet sharedDepthbuffer = null;\r\n\r\n/**\r\n * Represents the depth of the current viewport as a texture. This module\r\n * can be used in combination with viewport texture to achieve effects\r\n * that require depth evaluation.\r\n *\r\n * @augments ViewportTextureNode\r\n */\r\nclass ViewportDepthTextureNode extends ViewportTextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ViewportDepthTextureNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new viewport depth texture node.\r\n\t *\r\n\t * @param {Node} [uvNode=screenUV] - The uv node.\r\n\t * @param {?Node} [levelNode=null] - The level node.\r\n\t */\r\n\tconstructor( uvNode = screenUV, levelNode = null ) {\r\n\r\n\t\tif ( sharedDepthbuffer === null ) {\r\n\r\n\t\t\tsharedDepthbuffer = new DepthTexture();\r\n\r\n\t\t}\r\n\r\n\t\tsuper( uvNode, levelNode, sharedDepthbuffer );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ViewportDepthTextureNode;\r\n\r\n/**\r\n * TSL function for a viewport depth texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Node} [uvNode=screenUV] - The uv node.\r\n * @param {?Node} [levelNode=null] - The level node.\r\n * @returns {ViewportDepthTextureNode}\r\n */\r\nexport const viewportDepthTexture = /*@__PURE__*/ nodeProxy( ViewportDepthTextureNode ).setParameterLength( 0, 2 );\r\n", "import Node from '../core/Node.js';\r\nimport { float, log, log2, nodeImmutable, nodeProxy } from '../tsl/TSLBase.js';\r\nimport { cameraNear, cameraFar } from '../accessors/Camera.js';\r\nimport { positionView } from '../accessors/Position.js';\r\nimport { viewportDepthTexture } from './ViewportDepthTextureNode.js';\r\n\r\n/**\r\n * This node offers a collection of features in context of the depth logic in the fragment shader.\r\n * Depending on {@link ViewportDepthNode#scope}, it can be used to define a depth value for the current\r\n * fragment or for depth evaluation purposes.\r\n *\r\n * @augments Node\r\n */\r\nclass ViewportDepthNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ViewportDepthNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new viewport depth node.\r\n\t *\r\n\t * @param {('depth'|'depthBase'|'linearDepth')} scope - The node's scope.\r\n\t * @param {?Node} [valueNode=null] - The value node.\r\n\t */\r\n\tconstructor( scope, valueNode = null ) {\r\n\r\n\t\tsuper( 'float' );\r\n\r\n\t\t/**\r\n\t\t * The node behaves differently depending on which scope is selected.\r\n\t\t *\r\n\t\t * - `ViewportDepthNode.DEPTH_BASE`: Allows to define a value for the current fragment's depth.\r\n\t\t * - `ViewportDepthNode.DEPTH`: Represents the depth value for the current fragment (`valueNode` is ignored).\r\n\t\t * - `ViewportDepthNode.LINEAR_DEPTH`: Represents the linear (orthographic) depth value of the current fragment.\r\n\t\t * If a `valueNode` is set, the scope can be used to convert perspective depth data to linear data.\r\n\t\t *\r\n\t\t * @type {('depth'|'depthBase'|'linearDepth')}\r\n\t\t */\r\n\t\tthis.scope = scope;\r\n\r\n\t\t/**\r\n\t\t * Can be used to define a custom depth value.\r\n\t\t * The property is ignored in the `ViewportDepthNode.DEPTH` scope.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.valueNode = valueNode;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isViewportDepthNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { scope } = this;\r\n\r\n\t\tif ( scope === ViewportDepthNode.DEPTH_BASE ) {\r\n\r\n\t\t\treturn builder.getFragDepth();\r\n\r\n\t\t}\r\n\r\n\t\treturn super.generate( builder );\r\n\r\n\t}\r\n\r\n\tsetup( { camera } ) {\r\n\r\n\t\tconst { scope } = this;\r\n\t\tconst value = this.valueNode;\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( scope === ViewportDepthNode.DEPTH_BASE ) {\r\n\r\n\t\t\tif ( value !== null ) {\r\n\r\n \t\t\t\tnode = depthBase().assign( value );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === ViewportDepthNode.DEPTH ) {\r\n\r\n\t\t\tif ( camera.isPerspectiveCamera ) {\r\n\r\n\t\t\t\tnode = viewZToPerspectiveDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === ViewportDepthNode.LINEAR_DEPTH ) {\r\n\r\n\t\t\tif ( value !== null ) {\r\n\r\n\t\t\t\tif ( camera.isPerspectiveCamera ) {\r\n\r\n\t\t\t\t\tconst viewZ = perspectiveDepthToViewZ( value, cameraNear, cameraFar );\r\n\r\n\t\t\t\t\tnode = viewZToOrthographicDepth( viewZ, cameraNear, cameraFar );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tnode = value;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n}\r\n\r\nViewportDepthNode.DEPTH_BASE = 'depthBase';\r\nViewportDepthNode.DEPTH = 'depth';\r\nViewportDepthNode.LINEAR_DEPTH = 'linearDepth';\r\n\r\nexport default ViewportDepthNode;\r\n\r\n// NOTE: viewZ, the z-coordinate in camera space, is negative for points in front of the camera\r\n\r\n/**\r\n * TSL function for converting a viewZ value to an orthographic depth value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<float>} viewZ - The viewZ node.\r\n * @param {Node<float>} near - The camera's near value.\r\n * @param {Node<float>} far - The camera's far value.\r\n * @returns {Node<float>}\r\n */\r\nexport const viewZToOrthographicDepth = ( viewZ, near, far ) => viewZ.add( near ).div( near.sub( far ) );\r\n\r\n/**\r\n * TSL function for converting an orthographic depth value to a viewZ value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<float>} depth - The orthographic depth.\r\n * @param {Node<float>} near - The camera's near value.\r\n * @param {Node<float>} far - The camera's far value.\r\n * @returns {Node<float>}\r\n */\r\nexport const orthographicDepthToViewZ = ( depth, near, far ) => near.sub( far ).mul( depth ).sub( near );\r\n\r\n/**\r\n * TSL function for converting a viewZ value to a perspective depth value.\r\n *\r\n * Note: {link https://twitter.com/gonnavis/status/1377183786949959682}.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<float>} viewZ - The viewZ node.\r\n * @param {Node<float>} near - The camera's near value.\r\n * @param {Node<float>} far - The camera's far value.\r\n * @returns {Node<float>}\r\n */\r\nexport const viewZToPerspectiveDepth = ( viewZ, near, far ) => near.add( viewZ ).mul( far ).div( far.sub( near ).mul( viewZ ) );\r\n\r\n/**\r\n * TSL function for converting a perspective depth value to a viewZ value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<float>} depth - The perspective depth.\r\n * @param {Node<float>} near - The camera's near value.\r\n * @param {Node<float>} far - The camera's far value.\r\n * @returns {Node<float>}\r\n */\r\nexport const perspectiveDepthToViewZ = ( depth, near, far ) => near.mul( far ).div( far.sub( near ).mul( depth ).sub( far ) );\r\n\r\n/**\r\n * TSL function for converting a viewZ value to a logarithmic depth value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<float>} viewZ - The viewZ node.\r\n * @param {Node<float>} near - The camera's near value.\r\n * @param {Node<float>} far - The camera's far value.\r\n * @returns {Node<float>}\r\n */\r\nexport const viewZToLogarithmicDepth = ( viewZ, near, far ) => {\r\n\r\n\t// NOTE: viewZ must be negative--see explanation at the end of this comment block.\r\n\t// The final logarithmic depth formula used here is adapted from one described in an\r\n\t// article by Thatcher Ulrich (see http://tulrich.com/geekstuff/log_depth_buffer.txt),\r\n\t// which was an improvement upon an earlier formula one described in an\r\n\t// Outerra article (https://outerra.blogspot.com/2009/08/logarithmic-z-buffer.html).\r\n\t// Ulrich's formula is the following:\r\n\t//     z = K * log( w / cameraNear ) / log( cameraFar / cameraNear )\r\n\t//     where K = 2^k - 1, and k is the number of bits in the depth buffer.\r\n\t// The Outerra variant ignored the camera near plane (it assumed it was 0) and instead\r\n\t// opted for a \"C-constant\" for resolution adjustment of objects near the camera.\r\n\t// Outerra states: \"Notice that the 'C' variant doesn’t use a near plane distance, it has it\r\n\t// set at 0\" (quote from https://outerra.blogspot.com/2012/11/maximizing-depth-buffer-range-and.html).\r\n\t// Ulrich's variant has the benefit of constant relative precision over the whole near-far range.\r\n\t// It was debated here whether Outerra's \"C-constant\" or Ulrich's \"near plane\" variant should\r\n\t// be used, and ultimately Ulrich's \"near plane\" version was chosen.\r\n\t// Outerra eventually made another improvement to their original \"C-constant\" variant,\r\n\t// but it still does not incorporate the camera near plane (for this version,\r\n\t// see https://outerra.blogspot.com/2013/07/logarithmic-depth-buffer-optimizations.html).\r\n\t// Here we make 4 changes to Ulrich's formula:\r\n\t// 1. Clamp the camera near plane so we don't divide by 0.\r\n\t// 2. Use log2 instead of log to avoid an extra multiply (shaders implement log using log2).\r\n\t// 3. Assume K is 1 (K = maximum value in depth buffer; see Ulrich's formula above).\r\n\t// 4. To maintain consistency with the functions \"viewZToOrthographicDepth\" and \"viewZToPerspectiveDepth\",\r\n\t//    we modify the formula here to use 'viewZ' instead of 'w'. The other functions expect a negative viewZ,\r\n\t//    so we do the same here, hence the 'viewZ.negate()' call.\r\n\t// For visual representation of this depth curve, see https://www.desmos.com/calculator/uyqk0vex1u\r\n\tnear = near.max( 1e-6 ).toVar();\r\n\tconst numerator = log2( viewZ.negate().div( near ) );\r\n\tconst denominator = log2( far.div( near ) );\r\n\treturn numerator.div( denominator );\r\n\r\n};\r\n\r\n/**\r\n * TSL function for converting a logarithmic depth value to a viewZ value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<float>} depth - The logarithmic depth.\r\n * @param {Node<float>} near - The camera's near value.\r\n * @param {Node<float>} far - The camera's far value.\r\n * @returns {Node<float>}\r\n */\r\nexport const logarithmicDepthToViewZ = ( depth, near, far ) => {\r\n\r\n\t// NOTE: we add a 'negate()' call to the return value here to maintain consistency with\r\n\t// the functions \"orthographicDepthToViewZ\" and \"perspectiveDepthToViewZ\" (they return\r\n\t// a negative viewZ).\r\n\tconst exponent = depth.mul( log( far.div( near ) ) );\r\n\treturn float( Math.E ).pow( exponent ).mul( near ).negate();\r\n\r\n};\r\n\r\n/**\r\n * TSL function for defining a value for the current fragment's depth.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<float>} value - The depth value to set.\r\n * @returns {ViewportDepthNode<float>}\r\n */\r\nconst depthBase = /*@__PURE__*/ nodeProxy( ViewportDepthNode, ViewportDepthNode.DEPTH_BASE );\r\n\r\n/**\r\n * TSL object that represents the depth value for the current fragment.\r\n *\r\n * @tsl\r\n * @type {ViewportDepthNode}\r\n */\r\nexport const depth = /*@__PURE__*/ nodeImmutable( ViewportDepthNode, ViewportDepthNode.DEPTH );\r\n\r\n/**\r\n * TSL function for converting a perspective depth value to linear depth.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Node<float>} [value=null] - The perspective depth. If `null` is provided, the current fragment's depth is used.\r\n * @returns {ViewportDepthNode<float>}\r\n */\r\nexport const linearDepth = /*@__PURE__*/ nodeProxy( ViewportDepthNode, ViewportDepthNode.LINEAR_DEPTH ).setParameterLength( 0, 1 );\r\n\r\n/**\r\n * TSL object that represents the linear (orthographic) depth value of the current fragment\r\n *\r\n * @tsl\r\n * @type {ViewportDepthNode}\r\n */\r\nexport const viewportLinearDepth = /*@__PURE__*/ linearDepth( viewportDepthTexture() );\r\n\r\ndepth.assign = ( value ) => depthBase( value );\r\n", "import { Fn } from '../tsl/TSLBase.js';\r\nimport { screenUV } from '../display/ScreenNode.js';\r\nimport { viewportDepthTexture } from '../display/ViewportDepthTextureNode.js';\r\nimport { linearDepth } from '../display/ViewportDepthNode.js';\r\n\r\n/**\r\n * A special version of a screen uv function that involves a depth comparison\r\n * when computing the final uvs. The function mitigates visual errors when\r\n * using viewport texture nodes for refraction purposes. Without this function\r\n * objects in front of a refractive surface might appear on the refractive surface\r\n * which is incorrect.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Node<vec2>} uv - Optional uv coordinates. By default `screenUV` is used.\r\n * @return {Node<vec2>} The update uv coordinates.\r\n */\r\nexport const viewportSafeUV = /*@__PURE__*/ Fn( ( [ uv = null ] ) => {\r\n\r\n\tconst depth = linearDepth();\r\n\tconst depthDiff = linearDepth( viewportDepthTexture( uv ) ).sub( depth );\r\n\tconst finalUV = depthDiff.lessThan( 0 ).select( screenUV, uv );\r\n\r\n\treturn finalUV;\r\n\r\n} );\r\n", "import Node from '../core/Node.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { nodeProxy, float, vec2 } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * Can be used to compute texture coordinates for animated sprite sheets.\r\n *\r\n * ```js\r\n * const uvNode = spritesheetUV( vec2( 6, 6 ), uv(), time.mul( animationSpeed ) );\r\n *\r\n * material.colorNode = texture( spriteSheet, uvNode );\r\n * ```\r\n *\r\n * @augments Node\r\n */\r\nclass SpriteSheetUVNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SpriteSheetUVNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new sprite sheet uv node.\r\n\t *\r\n\t * @param {Node<vec2>} countNode - The node that defines the number of sprites in the x and y direction (e.g 6x6).\r\n\t * @param {Node<vec2>} [uvNode=uv()] - The uv node.\r\n\t * @param {Node<float>} [frameNode=float()] - The node that defines the current frame/sprite.\r\n\t */\r\n\tconstructor( countNode, uvNode = uv(), frameNode = float( 0 ) ) {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\t/**\r\n\t\t * The node that defines the number of sprites in the x and y direction (e.g 6x6).\r\n\t\t *\r\n\t\t * @type {Node<vec2>}\r\n\t\t */\r\n\t\tthis.countNode = countNode;\r\n\r\n\t\t/**\r\n\t\t * The uv node.\r\n\t\t *\r\n\t\t * @type {Node<vec2>}\r\n\t\t */\r\n\t\tthis.uvNode = uvNode;\r\n\r\n\t\t/**\r\n\t\t * The node that defines the current frame/sprite.\r\n\t\t *\r\n\t\t * @type {Node<float>}\r\n\t\t */\r\n\t\tthis.frameNode = frameNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { frameNode, uvNode, countNode } = this;\r\n\r\n\t\tconst { width, height } = countNode;\r\n\r\n\t\tconst frameNum = frameNode.mod( width.mul( height ) ).floor();\r\n\r\n\t\tconst column = frameNum.mod( width );\r\n\t\tconst row = height.sub( frameNum.add( 1 ).div( width ).ceil() );\r\n\r\n\t\tconst scale = countNode.reciprocal();\r\n\t\tconst uvFrameOffset = vec2( column, row );\r\n\r\n\t\treturn uvNode.add( uvFrameOffset ).mul( scale );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SpriteSheetUVNode;\r\n\r\n/**\r\n * TSL function for creating a sprite sheet uv node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2>} countNode - The node that defines the number of sprites in the x and y direction (e.g 6x6).\r\n * @param {?Node<vec2>} [uvNode=uv()] - The uv node.\r\n * @param {?Node<float>} [frameNode=float()] - The node that defines the current frame/sprite.\r\n * @returns {SpriteSheetUVNode}\r\n */\r\nexport const spritesheetUV = /*@__PURE__*/ nodeProxy( SpriteSheetUVNode ).setParameterLength( 3 );\r\n", "import { add } from '../math/OperatorNode.js';\r\nimport { normalLocal } from '../accessors/Normal.js';\r\nimport { positionLocal } from '../accessors/Position.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { float, vec3, Fn } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * TSL function for creating a triplanar textures node.\r\n *\r\n * Can be used for triplanar texture mapping.\r\n *\r\n * ```js\r\n * material.colorNode = triplanarTexture( texture( diffuseMap ) );\r\n * ```\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} textureXNode - First texture node.\r\n * @param {?Node} [textureYNode=null] - Second texture node. When not set, the shader will sample from `textureXNode` instead.\r\n * @param {?Node} [textureZNode=null] - Third texture node. When not set, the shader will sample from `textureXNode` instead.\r\n * @param {?Node<float>} [scaleNode=float(1)] - The scale node.\r\n * @param {?Node<vec3>} [positionNode=positionLocal] - Vertex positions in local space.\r\n * @param {?Node<vec3>} [normalNode=normalLocal] - Normals in local space.\r\n * @returns {Node<vec4>}\r\n */\r\nexport const triplanarTextures = /*@__PURE__*/ Fn( ( [ textureXNode, textureYNode = null, textureZNode = null, scaleNode = float( 1 ), positionNode = positionLocal, normalNode = normalLocal ] ) => {\r\n\r\n\t// Reference: https://github.com/keijiro/StandardTriplanar\r\n\r\n\t// Blending factor of triplanar mapping\r\n\tlet bf = normalNode.abs().normalize();\r\n\tbf = bf.div( bf.dot( vec3( 1.0 ) ) );\r\n\r\n\t// Triplanar mapping\r\n\tconst tx = positionNode.yz.mul( scaleNode );\r\n\tconst ty = positionNode.zx.mul( scaleNode );\r\n\tconst tz = positionNode.xy.mul( scaleNode );\r\n\r\n\t// Base color\r\n\tconst textureX = textureXNode.value;\r\n\tconst textureY = textureYNode !== null ? textureYNode.value : textureX;\r\n\tconst textureZ = textureZNode !== null ? textureZNode.value : textureX;\r\n\r\n\tconst cx = texture( textureX, tx ).mul( bf.x );\r\n\tconst cy = texture( textureY, ty ).mul( bf.y );\r\n\tconst cz = texture( textureZ, tz ).mul( bf.z );\r\n\r\n\treturn add( cx, cy, cz );\r\n\r\n} );\r\n\r\n/**\r\n * TSL function for creating a triplanar textures node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} textureXNode - First texture node.\r\n * @param {?Node} [textureYNode=null] - Second texture node. When not set, the shader will sample from `textureXNode` instead.\r\n * @param {?Node} [textureZNode=null] - Third texture node. When not set, the shader will sample from `textureXNode` instead.\r\n * @param {?Node<float>} [scaleNode=float(1)] - The scale node.\r\n * @param {?Node<vec3>} [positionNode=positionLocal] - Vertex positions in local space.\r\n * @param {?Node<vec3>} [normalNode=normalLocal] - Normals in local space.\r\n * @returns {Node<vec4>}\r\n */\r\nexport const triplanarTexture = ( ...params ) => triplanarTextures( ...params );\r\n", "import { Matrix3 } from './Matrix3.js';\r\nimport { Vector3 } from './Vector3.js';\r\n\r\nconst _vector1 = /*@__PURE__*/ new Vector3();\r\nconst _vector2 = /*@__PURE__*/ new Vector3();\r\nconst _normalMatrix = /*@__PURE__*/ new Matrix3();\r\n\r\n/**\r\n * A two dimensional surface that extends infinitely in 3D space, represented\r\n * in [Hessian normal form]{@link http://mathworld.wolfram.com/HessianNormalForm.html}\r\n * by a unit length normal vector and a constant.\r\n */\r\nclass Plane {\r\n\r\n\t/**\r\n\t * Constructs a new plane.\r\n\t *\r\n\t * @param {Vector3} [normal=(1,0,0)] - A unit length vector defining the normal of the plane.\r\n\t * @param {number} [constant=0] - The signed distance from the origin to the plane.\r\n\t */\r\n\tconstructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isPlane = true;\r\n\r\n\t\t/**\r\n\t\t * A unit length vector defining the normal of the plane.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.normal = normal;\r\n\r\n\t\t/**\r\n\t\t * The signed distance from the origin to the plane.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.constant = constant;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the plane components by copying the given values.\r\n\t *\r\n\t * @param {Vector3} normal - The normal.\r\n\t * @param {number} constant - The constant.\r\n\t * @return {Plane} A reference to this plane.\r\n\t */\r\n\tset( normal, constant ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = constant;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the plane components by defining `x`, `y`, `z` as the\r\n\t * plane normal and `w` as the constant.\r\n\t *\r\n\t * @param {number} x - The value for the normal's x component.\r\n\t * @param {number} y - The value for the normal's y component.\r\n\t * @param {number} z - The value for the normal's z component.\r\n\t * @param {number} w - The constant value.\r\n\t * @return {Plane} A reference to this plane.\r\n\t */\r\n\tsetComponents( x, y, z, w ) {\r\n\r\n\t\tthis.normal.set( x, y, z );\r\n\t\tthis.constant = w;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the plane from the given normal and coplanar point (that is a point\r\n\t * that lies onto the plane).\r\n\t *\r\n\t * @param {Vector3} normal - The normal.\r\n\t * @param {Vector3} point - A coplanar point.\r\n\t * @return {Plane} A reference to this plane.\r\n\t */\r\n\tsetFromNormalAndCoplanarPoint( normal, point ) {\r\n\r\n\t\tthis.normal.copy( normal );\r\n\t\tthis.constant = - point.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the plane from three coplanar points. The winding order is\r\n\t * assumed to be counter-clockwise, and determines the direction of\r\n\t * the plane normal.\r\n\t *\r\n\t * @param {Vector3} a - The first coplanar point.\r\n\t * @param {Vector3} b - The second coplanar point.\r\n\t * @param {Vector3} c - The third coplanar point.\r\n\t * @return {Plane} A reference to this plane.\r\n\t */\r\n\tsetFromCoplanarPoints( a, b, c ) {\r\n\r\n\t\tconst normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();\r\n\r\n\t\t// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?\r\n\r\n\t\tthis.setFromNormalAndCoplanarPoint( normal, a );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given plane to this instance.\r\n\t *\r\n\t * @param {Plane} plane - The plane to copy.\r\n\t * @return {Plane} A reference to this plane.\r\n\t */\r\n\tcopy( plane ) {\r\n\r\n\t\tthis.normal.copy( plane.normal );\r\n\t\tthis.constant = plane.constant;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Normalizes the plane normal and adjusts the constant accordingly.\r\n\t *\r\n\t * @return {Plane} A reference to this plane.\r\n\t */\r\n\tnormalize() {\r\n\r\n\t\t// Note: will lead to a divide by zero if the plane is invalid.\r\n\r\n\t\tconst inverseNormalLength = 1.0 / this.normal.length();\r\n\t\tthis.normal.multiplyScalar( inverseNormalLength );\r\n\t\tthis.constant *= inverseNormalLength;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Negates both the plane normal and the constant.\r\n\t *\r\n\t * @return {Plane} A reference to this plane.\r\n\t */\r\n\tnegate() {\r\n\r\n\t\tthis.constant *= - 1;\r\n\t\tthis.normal.negate();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the signed distance from the given point to this plane.\r\n\t *\r\n\t * @param {Vector3} point - The point to compute the distance for.\r\n\t * @return {number} The signed distance.\r\n\t */\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn this.normal.dot( point ) + this.constant;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the signed distance from the given sphere to this plane.\r\n\t *\r\n\t * @param {Sphere} sphere - The sphere to compute the distance for.\r\n\t * @return {number} The signed distance.\r\n\t */\r\n\tdistanceToSphere( sphere ) {\r\n\r\n\t\treturn this.distanceToPoint( sphere.center ) - sphere.radius;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Projects a the given point onto the plane.\r\n\t *\r\n\t * @param {Vector3} point - The point to project.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The projected point on the plane.\r\n\t */\r\n\tprojectPoint( point, target ) {\r\n\r\n\t\treturn target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the intersection point of the passed line and the plane. Returns\r\n\t * `null` if the line does not intersect. Returns the line's starting point if\r\n\t * the line is coplanar with the plane.\r\n\t *\r\n\t * @param {Line3} line - The line to compute the intersection for.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {?Vector3} The intersection point.\r\n\t */\r\n\tintersectLine( line, target ) {\r\n\r\n\t\tconst direction = line.delta( _vector1 );\r\n\r\n\t\tconst denominator = this.normal.dot( direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( this.distanceToPoint( line.start ) === 0 ) {\r\n\r\n\t\t\t\treturn target.copy( line.start );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Unsure if this is the correct method to handle this case.\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;\r\n\r\n\t\tif ( t < 0 || t > 1 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( line.start ).addScaledVector( direction, t );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given line segment intersects with (passes through) the plane.\r\n\t *\r\n\t * @param {Line3} line - The line to test.\r\n\t * @return {boolean} Whether the given line segment intersects with the plane or not.\r\n\t */\r\n\tintersectsLine( line ) {\r\n\r\n\t\t// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.\r\n\r\n\t\tconst startSign = this.distanceToPoint( line.start );\r\n\t\tconst endSign = this.distanceToPoint( line.end );\r\n\r\n\t\treturn ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given bounding box intersects with the plane.\r\n\t *\r\n\t * @param {Box3} box - The bounding box to test.\r\n\t * @return {boolean} Whether the given bounding box intersects with the plane or not.\r\n\t */\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsPlane( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given bounding sphere intersects with the plane.\r\n\t *\r\n\t * @param {Sphere} sphere - The bounding sphere to test.\r\n\t * @return {boolean} Whether the given bounding sphere intersects with the plane or not.\r\n\t */\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\treturn sphere.intersectsPlane( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a coplanar vector to the plane, by calculating the\r\n\t * projection of the normal at the origin onto the plane.\r\n\t *\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The coplanar point.\r\n\t */\r\n\tcoplanarPoint( target ) {\r\n\r\n\t\treturn target.copy( this.normal ).multiplyScalar( - this.constant );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Apply a 4x4 matrix to the plane. The matrix must be an affine, homogeneous transform.\r\n\t *\r\n\t * The optional normal matrix can be pre-computed like so:\r\n\t * ```js\r\n\t * const optionalNormalMatrix = new THREE.Matrix3().getNormalMatrix( matrix );\r\n\t * ```\r\n\t *\r\n\t * @param {Matrix4} matrix - The transformation matrix.\r\n\t * @param {Matrix4} [optionalNormalMatrix] - A pre-computed normal matrix.\r\n\t * @return {Plane} A reference to this plane.\r\n\t */\r\n\tapplyMatrix4( matrix, optionalNormalMatrix ) {\r\n\r\n\t\tconst normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );\r\n\r\n\t\tconst referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );\r\n\r\n\t\tconst normal = this.normal.applyMatrix3( normalMatrix ).normalize();\r\n\r\n\t\tthis.constant = - referencePoint.dot( normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Translates the plane by the distance defined by the given offset vector.\r\n\t * Note that this only affects the plane constant and will not affect the normal vector.\r\n\t *\r\n\t * @param {Vector3} offset - The offset vector.\r\n\t * @return {Plane} A reference to this plane.\r\n\t */\r\n\ttranslate( offset ) {\r\n\r\n\t\tthis.constant -= offset.dot( this.normal );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this plane is equal with the given one.\r\n\t *\r\n\t * @param {Plane} plane - The plane to test for equality.\r\n\t * @return {boolean} Whether this plane is equal with the given one.\r\n\t */\r\n\tequals( plane ) {\r\n\r\n\t\treturn plane.normal.equals( this.normal ) && ( plane.constant === this.constant );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new plane with copied values from this instance.\r\n\t *\r\n\t * @return {Plane} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Plane };\r\n", "import { Quaternion } from './Quaternion.js';\r\nimport { Matrix4 } from './Matrix4.js';\r\nimport { clamp } from './MathUtils.js';\r\n\r\nconst _matrix = /*@__PURE__*/ new Matrix4();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\n/**\r\n * A class representing Euler angles.\r\n *\r\n * Euler angles describe a rotational transformation by rotating an object on\r\n * its various axes in specified amounts per axis, and a specified axis\r\n * order.\r\n *\r\n * Iterating through an instance will yield its components (x, y, z,\r\n * order) in the corresponding order.\r\n *\r\n * ```js\r\n * const a = new THREE.Euler( 0, 1, 1.57, 'XYZ' );\r\n * const b = new THREE.Vector3( 1, 0, 1 );\r\n * b.applyEuler(a);\r\n * ```\r\n */\r\nclass Euler {\r\n\r\n\t/**\r\n\t * Constructs a new euler instance.\r\n\t *\r\n\t * @param {number} [x=0] - The angle of the x axis in radians.\r\n\t * @param {number} [y=0] - The angle of the y axis in radians.\r\n\t * @param {number} [z=0] - The angle of the z axis in radians.\r\n\t * @param {string} [order=Euler.DEFAULT_ORDER] - A string representing the order that the rotations are applied.\r\n\t */\r\n\tconstructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isEuler = true;\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The angle of the x axis in radians.\r\n\t *\r\n\t * @type {number}\r\n\t * @default 0\r\n\t */\r\n\tget x() {\r\n\r\n\t\treturn this._x;\r\n\r\n\t}\r\n\r\n\tset x( value ) {\r\n\r\n\t\tthis._x = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The angle of the y axis in radians.\r\n\t *\r\n\t * @type {number}\r\n\t * @default 0\r\n\t */\r\n\tget y() {\r\n\r\n\t\treturn this._y;\r\n\r\n\t}\r\n\r\n\tset y( value ) {\r\n\r\n\t\tthis._y = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The angle of the z axis in radians.\r\n\t *\r\n\t * @type {number}\r\n\t * @default 0\r\n\t */\r\n\tget z() {\r\n\r\n\t\treturn this._z;\r\n\r\n\t}\r\n\r\n\tset z( value ) {\r\n\r\n\t\tthis._z = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A string representing the order that the rotations are applied.\r\n\t *\r\n\t * @type {string}\r\n\t * @default 'XYZ'\r\n\t */\r\n\tget order() {\r\n\r\n\t\treturn this._order;\r\n\r\n\t}\r\n\r\n\tset order( value ) {\r\n\r\n\t\tthis._order = value;\r\n\t\tthis._onChangeCallback();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the Euler components.\r\n\t *\r\n\t * @param {number} x - The angle of the x axis in radians.\r\n\t * @param {number} y - The angle of the y axis in radians.\r\n\t * @param {number} z - The angle of the z axis in radians.\r\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\r\n\t * @return {Euler} A reference to this Euler instance.\r\n\t */\r\n\tset( x, y, z, order = this._order ) {\r\n\r\n\t\tthis._x = x;\r\n\t\tthis._y = y;\r\n\t\tthis._z = z;\r\n\t\tthis._order = order;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new Euler instance with copied values from this instance.\r\n\t *\r\n\t * @return {Euler} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this._x, this._y, this._z, this._order );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given Euler instance to this instance.\r\n\t *\r\n\t * @param {Euler} euler - The Euler instance to copy.\r\n\t * @return {Euler} A reference to this Euler instance.\r\n\t */\r\n\tcopy( euler ) {\r\n\r\n\t\tthis._x = euler._x;\r\n\t\tthis._y = euler._y;\r\n\t\tthis._z = euler._z;\r\n\t\tthis._order = euler._order;\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the angles of this Euler instance from a pure rotation matrix.\r\n\t *\r\n\t * @param {Matrix4} m - A 4x4 matrix of which the upper 3x3 of matrix is a pure rotation matrix (i.e. unscaled).\r\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\r\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\r\n\t * @return {Euler} A reference to this Euler instance.\r\n\t */\r\n\tsetFromRotationMatrix( m, order = this._order, update = true ) {\r\n\r\n\t\tconst te = m.elements;\r\n\t\tconst m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];\r\n\t\tconst m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];\r\n\t\tconst m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];\r\n\r\n\t\tswitch ( order ) {\r\n\r\n\t\t\tcase 'XYZ':\r\n\r\n\t\t\t\tthis._y = Math.asin( clamp( m13, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m13 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YXZ':\r\n\r\n\t\t\t\tthis._x = Math.asin( - clamp( m23, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m23 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\t\t\t\t\tthis._z = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZXY':\r\n\r\n\t\t\t\tthis._x = Math.asin( clamp( m32, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m32 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._y = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'ZYX':\r\n\r\n\t\t\t\tthis._y = Math.asin( - clamp( m31, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m31 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m33 );\r\n\t\t\t\t\tthis._z = Math.atan2( m21, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._z = Math.atan2( - m12, m22 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'YZX':\r\n\r\n\t\t\t\tthis._z = Math.asin( clamp( m21, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m21 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( - m31, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = 0;\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m33 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'XZY':\r\n\r\n\t\t\t\tthis._z = Math.asin( - clamp( m12, - 1, 1 ) );\r\n\r\n\t\t\t\tif ( Math.abs( m12 ) < 0.9999999 ) {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( m32, m22 );\r\n\t\t\t\t\tthis._y = Math.atan2( m13, m11 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis._x = Math.atan2( - m23, m33 );\r\n\t\t\t\t\tthis._y = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tdefault:\r\n\r\n\t\t\t\tconsole.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );\r\n\r\n\t\t}\r\n\r\n\t\tthis._order = order;\r\n\r\n\t\tif ( update === true ) this._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the angles of this Euler instance from a normalized quaternion.\r\n\t *\r\n\t * @param {Quaternion} q - A normalized Quaternion.\r\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\r\n\t * @param {boolean} [update=true] - Whether the internal `onChange` callback should be executed or not.\r\n\t * @return {Euler} A reference to this Euler instance.\r\n\t */\r\n\tsetFromQuaternion( q, order, update ) {\r\n\r\n\t\t_matrix.makeRotationFromQuaternion( q );\r\n\r\n\t\treturn this.setFromRotationMatrix( _matrix, order, update );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the angles of this Euler instance from the given vector.\r\n\t *\r\n\t * @param {Vector3} v - The vector.\r\n\t * @param {string} [order] - A string representing the order that the rotations are applied.\r\n\t * @return {Euler} A reference to this Euler instance.\r\n\t */\r\n\tsetFromVector3( v, order = this._order ) {\r\n\r\n\t\treturn this.set( v.x, v.y, v.z, order );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the euler angle with a new order by creating a quaternion from this\r\n\t * euler angle and then setting this euler angle with the quaternion and the\r\n\t * new order.\r\n\t *\r\n\t * Warning: This discards revolution information.\r\n\t *\r\n\t * @param {string} [newOrder] - A string representing the new order that the rotations are applied.\r\n\t * @return {Euler} A reference to this Euler instance.\r\n\t */\r\n\treorder( newOrder ) {\r\n\r\n\t\t_quaternion.setFromEuler( this );\r\n\r\n\t\treturn this.setFromQuaternion( _quaternion, newOrder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this Euler instance is equal with the given one.\r\n\t *\r\n\t * @param {Euler} euler - The Euler instance to test for equality.\r\n\t * @return {boolean} Whether this Euler instance is equal with the given one.\r\n\t */\r\n\tequals( euler ) {\r\n\r\n\t\treturn ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets this Euler instance's components to values from the given array. The first three\r\n\t * entries of the array are assign to the x,y and z components. An optional fourth entry\r\n\t * defines the Euler order.\r\n\t *\r\n\t * @param {Array<number,number,number,?string>} array - An array holding the Euler component values.\r\n\t * @return {Euler} A reference to this Euler instance.\r\n\t */\r\n\tfromArray( array ) {\r\n\r\n\t\tthis._x = array[ 0 ];\r\n\t\tthis._y = array[ 1 ];\r\n\t\tthis._z = array[ 2 ];\r\n\t\tif ( array[ 3 ] !== undefined ) this._order = array[ 3 ];\r\n\r\n\t\tthis._onChangeCallback();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Writes the components of this Euler instance to the given array. If no array is provided,\r\n\t * the method returns a new instance.\r\n\t *\r\n\t * @param {Array<number,number,number,string>} [array=[]] - The target array holding the Euler components.\r\n\t * @param {number} [offset=0] - Index of the first element in the array.\r\n\t * @return {Array<number,number,number,string>} The Euler components.\r\n\t */\r\n\ttoArray( array = [], offset = 0 ) {\r\n\r\n\t\tarray[ offset ] = this._x;\r\n\t\tarray[ offset + 1 ] = this._y;\r\n\t\tarray[ offset + 2 ] = this._z;\r\n\t\tarray[ offset + 3 ] = this._order;\r\n\r\n\t\treturn array;\r\n\r\n\t}\r\n\r\n\t_onChange( callback ) {\r\n\r\n\t\tthis._onChangeCallback = callback;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t_onChangeCallback() {}\r\n\r\n\t*[ Symbol.iterator ]() {\r\n\r\n\t\tyield this._x;\r\n\t\tyield this._y;\r\n\t\tyield this._z;\r\n\t\tyield this._order;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The default Euler angle order.\r\n *\r\n * @static\r\n * @type {string}\r\n * @default 'XYZ'\r\n */\r\nEuler.DEFAULT_ORDER = 'XYZ';\r\n\r\nexport { Euler };\r\n", "/**\r\n * A layers object assigns an 3D object to 1 or more of 32\r\n * layers numbered `0` to `31` - internally the layers are stored as a\r\n * bit mask], and by default all 3D objects are a member of layer `0`.\r\n *\r\n * This can be used to control visibility - an object must share a layer with\r\n * a camera to be visible when that camera's view is\r\n * rendered.\r\n *\r\n * All classes that inherit from {@link Object3D} have an `layers` property which\r\n * is an instance of this class.\r\n */\r\nclass Layers {\r\n\r\n\t/**\r\n\t * Constructs a new layers instance, with membership\r\n\t * initially set to layer `0`.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * A bit mask storing which of the 32 layers this layers object is currently\r\n\t\t * a member of.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.mask = 1 | 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets membership to the given layer, and remove membership all other layers.\r\n\t *\r\n\t * @param {number} layer - The layer to set.\r\n\t */\r\n\tset( layer ) {\r\n\r\n\t\tthis.mask = ( 1 << layer | 0 ) >>> 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds membership of the given layer.\r\n\t *\r\n\t * @param {number} layer - The layer to enable.\r\n\t */\r\n\tenable( layer ) {\r\n\r\n\t\tthis.mask |= 1 << layer | 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds membership to all layers.\r\n\t */\r\n\tenableAll() {\r\n\r\n\t\tthis.mask = 0xffffffff | 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Toggles the membership of the given layer.\r\n\t *\r\n\t * @param {number} layer - The layer to toggle.\r\n\t */\r\n\ttoggle( layer ) {\r\n\r\n\t\tthis.mask ^= 1 << layer | 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes membership of the given layer.\r\n\t *\r\n\t * @param {number} layer - The layer to enable.\r\n\t */\r\n\tdisable( layer ) {\r\n\r\n\t\tthis.mask &= ~ ( 1 << layer | 0 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the membership from all layers.\r\n\t */\r\n\tdisableAll() {\r\n\r\n\t\tthis.mask = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this and the given layers object have at least one\r\n\t * layer in common.\r\n\t *\r\n\t * @param {Layers} layers - The layers to test.\r\n\t * @return {boolean } Whether this and the given layers object have at least one layer in common or not.\r\n\t */\r\n\ttest( layers ) {\r\n\r\n\t\treturn ( this.mask & layers.mask ) !== 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given layer is enabled.\r\n\t *\r\n\t * @param {number} layer - The layer to test.\r\n\t * @return {boolean } Whether the given layer is enabled or not.\r\n\t */\r\n\tisEnabled( layer ) {\r\n\r\n\t\treturn ( this.mask & ( 1 << layer | 0 ) ) !== 0;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\nexport { Layers };\r\n", "import { Quaternion } from '../math/Quaternion.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { EventDispatcher } from './EventDispatcher.js';\r\nimport { Euler } from '../math/Euler.js';\r\nimport { Layers } from './Layers.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport { generateUUID } from '../math/MathUtils.js';\r\n\r\nlet _object3DId = 0;\r\n\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _q1 = /*@__PURE__*/ new Quaternion();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _target = /*@__PURE__*/ new Vector3();\r\n\r\nconst _position = /*@__PURE__*/ new Vector3();\r\nconst _scale = /*@__PURE__*/ new Vector3();\r\nconst _quaternion = /*@__PURE__*/ new Quaternion();\r\n\r\nconst _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );\r\nconst _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );\r\nconst _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );\r\n\r\n/**\r\n * Fires when the object has been added to its parent object.\r\n *\r\n * @event Object3D#added\r\n * @type {Object}\r\n */\r\nconst _addedEvent = { type: 'added' };\r\n\r\n/**\r\n * Fires when the object has been removed from its parent object.\r\n *\r\n * @event Object3D#removed\r\n * @type {Object}\r\n */\r\nconst _removedEvent = { type: 'removed' };\r\n\r\n/**\r\n * Fires when a new child object has been added.\r\n *\r\n * @event Object3D#childadded\r\n * @type {Object}\r\n */\r\nconst _childaddedEvent = { type: 'childadded', child: null };\r\n\r\n/**\r\n * Fires when a child object has been removed.\r\n *\r\n * @event Object3D#childremoved\r\n * @type {Object}\r\n */\r\nconst _childremovedEvent = { type: 'childremoved', child: null };\r\n\r\n/**\r\n * This is the base class for most objects in three.js and provides a set of\r\n * properties and methods for manipulating objects in 3D space.\r\n *\r\n * @augments EventDispatcher\r\n */\r\nclass Object3D extends EventDispatcher {\r\n\r\n\t/**\r\n\t * Constructs a new 3D object.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isObject3D = true;\r\n\r\n\t\t/**\r\n\t\t * The ID of the 3D object.\r\n\t\t *\r\n\t\t * @name Object3D#id\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tObject.defineProperty( this, 'id', { value: _object3DId ++ } );\r\n\r\n\t\t/**\r\n\t\t * The UUID of the 3D object.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.uuid = generateUUID();\r\n\r\n\t\t/**\r\n\t\t * The name of the 3D object.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.name = '';\r\n\r\n\t\t/**\r\n\t\t * The type property is used for detecting the object type\r\n\t\t * in context of serialization/deserialization.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.type = 'Object3D';\r\n\r\n\t\t/**\r\n\t\t * A reference to the parent object.\r\n\t\t *\r\n\t\t * @type {?Object3D}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.parent = null;\r\n\r\n\t\t/**\r\n\t\t * An array holding the child 3D objects of this instance.\r\n\t\t *\r\n\t\t * @type {Array<Object3D>}\r\n\t\t */\r\n\t\tthis.children = [];\r\n\r\n\t\t/**\r\n\t\t * Defines the `up` direction of the 3D object which influences\r\n\t\t * the orientation via methods like {@link Object3D#lookAt}.\r\n\t\t *\r\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_UP`.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.up = Object3D.DEFAULT_UP.clone();\r\n\r\n\t\tconst position = new Vector3();\r\n\t\tconst rotation = new Euler();\r\n\t\tconst quaternion = new Quaternion();\r\n\t\tconst scale = new Vector3( 1, 1, 1 );\r\n\r\n\t\tfunction onRotationChange() {\r\n\r\n\t\t\tquaternion.setFromEuler( rotation, false );\r\n\r\n\t\t}\r\n\r\n\t\tfunction onQuaternionChange() {\r\n\r\n\t\t\trotation.setFromQuaternion( quaternion, undefined, false );\r\n\r\n\t\t}\r\n\r\n\t\trotation._onChange( onRotationChange );\r\n\t\tquaternion._onChange( onQuaternionChange );\r\n\r\n\t\tObject.defineProperties( this, {\r\n\t\t\t/**\r\n\t\t\t * Represents the object's local position.\r\n\t\t\t *\r\n\t\t\t * @name Object3D#position\r\n\t\t\t * @type {Vector3}\r\n\t\t\t * @default (0,0,0)\r\n\t\t\t */\r\n\t\t\tposition: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: position\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * Represents the object's local rotation as Euler angles, in radians.\r\n\t\t\t *\r\n\t\t\t * @name Object3D#rotation\r\n\t\t\t * @type {Euler}\r\n\t\t\t * @default (0,0,0)\r\n\t\t\t */\r\n\t\t\trotation: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: rotation\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * Represents the object's local rotation as Quaternions.\r\n\t\t\t *\r\n\t\t\t * @name Object3D#quaternion\r\n\t\t\t * @type {Quaternion}\r\n\t\t\t */\r\n\t\t\tquaternion: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: quaternion\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * Represents the object's local scale.\r\n\t\t\t *\r\n\t\t\t * @name Object3D#scale\r\n\t\t\t * @type {Vector3}\r\n\t\t\t * @default (1,1,1)\r\n\t\t\t */\r\n\t\t\tscale: {\r\n\t\t\t\tconfigurable: true,\r\n\t\t\t\tenumerable: true,\r\n\t\t\t\tvalue: scale\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * Represents the object's model-view matrix.\r\n\t\t\t *\r\n\t\t\t * @name Object3D#modelViewMatrix\r\n\t\t\t * @type {Matrix4}\r\n\t\t\t */\r\n\t\t\tmodelViewMatrix: {\r\n\t\t\t\tvalue: new Matrix4()\r\n\t\t\t},\r\n\t\t\t/**\r\n\t\t\t * Represents the object's normal matrix.\r\n\t\t\t *\r\n\t\t\t * @name Object3D#normalMatrix\r\n\t\t\t * @type {Matrix3}\r\n\t\t\t */\r\n\t\t\tnormalMatrix: {\r\n\t\t\t\tvalue: new Matrix3()\r\n\t\t\t}\r\n\t\t} );\r\n\r\n\t\t/**\r\n\t\t * Represents the object's transformation matrix in local space.\r\n\t\t *\r\n\t\t * @type {Matrix4}\r\n\t\t */\r\n\t\tthis.matrix = new Matrix4();\r\n\r\n\t\t/**\r\n\t\t * Represents the object's transformation matrix in world space.\r\n\t\t * If the 3D object has no parent, then it's identical to the local transformation matrix\r\n\t\t *\r\n\t\t * @type {Matrix4}\r\n\t\t */\r\n\t\tthis.matrixWorld = new Matrix4();\r\n\r\n\t\t/**\r\n\t\t * When set to `true`, the engine automatically computes the local matrix from position,\r\n\t\t * rotation and scale every frame.\r\n\t\t *\r\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_AUTO_UPDATE`.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;\r\n\r\n\t\t/**\r\n\t\t * When set to `true`, the engine automatically computes the world matrix from the current local\r\n\t\t * matrix and the object's transformation hierarchy.\r\n\t\t *\r\n\t\t * The default values for all 3D objects is defined by `Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE`.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer\r\n\r\n\t\t/**\r\n\t\t * When set to `true`, it calculates the world matrix in that frame and resets this property\r\n\t\t * to `false`.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t/**\r\n\t\t * The layer membership of the 3D object. The 3D object is only visible if it has\r\n\t\t * at least one layer in common with the camera in use. This property can also be\r\n\t\t * used to filter out unwanted objects in ray-intersection tests when using {@link Raycaster}.\r\n\t\t *\r\n\t\t * @type {Layers}\r\n\t\t */\r\n\t\tthis.layers = new Layers();\r\n\r\n\t\t/**\r\n\t\t * When set to `true`, the 3D object gets rendered.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.visible = true;\r\n\r\n\t\t/**\r\n\t\t * When set to `true`, the 3D object gets rendered into shadow maps.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.castShadow = false;\r\n\r\n\t\t/**\r\n\t\t * When set to `true`, the 3D object is affected by shadows in the scene.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.receiveShadow = false;\r\n\r\n\t\t/**\r\n\t\t * When set to `true`, the 3D object is honored by view frustum culling.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.frustumCulled = true;\r\n\r\n\t\t/**\r\n\t\t * This value allows the default rendering order of scene graph objects to be\r\n\t\t * overridden although opaque and transparent objects remain sorted independently.\r\n\t\t * When this property is set for an instance of {@link Group},all descendants\r\n\t\t * objects will be sorted and rendered together. Sorting is from lowest to highest\r\n\t\t * render order.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.renderOrder = 0;\r\n\r\n\t\t/**\r\n\t\t * An array holding the animation clips of the 3D object.\r\n\t\t *\r\n\t\t * @type {Array<AnimationClip>}\r\n\t\t */\r\n\t\tthis.animations = [];\r\n\r\n\t\t/**\r\n\t\t * Custom depth material to be used when rendering to the depth map. Can only be used\r\n\t\t * in context of meshes. When shadow-casting with a {@link DirectionalLight} or {@link SpotLight},\r\n\t\t * if you are modifying vertex positions in the vertex shader you must specify a custom depth\r\n\t\t * material for proper shadows.\r\n\t\t *\r\n\t\t * Only relevant in context of {@link WebGLRenderer}.\r\n\t\t *\r\n\t\t * @type {(Material|undefined)}\r\n\t\t * @default undefined\r\n\t\t */\r\n\t\tthis.customDepthMaterial = undefined;\r\n\r\n\t\t/**\r\n\t\t * Same as {@link Object3D#customDepthMaterial}, but used with {@link PointLight}.\r\n\t\t *\r\n\t\t * Only relevant in context of {@link WebGLRenderer}.\r\n\t\t *\r\n\t\t * @type {(Material|undefined)}\r\n\t\t * @default undefined\r\n\t\t */\r\n\t\tthis.customDistanceMaterial = undefined;\r\n\r\n\t\t/**\r\n\t\t * An object that can be used to store custom data about the 3D object. It\r\n\t\t * should not hold references to functions as these will not be cloned.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A callback that is executed immediately before a 3D object is rendered to a shadow map.\r\n\t *\r\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\r\n\t * @param {Object3D} object - The 3D object.\r\n\t * @param {Camera} camera - The camera that is used to render the scene.\r\n\t * @param {Camera} shadowCamera - The shadow camera.\r\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\r\n\t * @param {Material} depthMaterial - The depth material.\r\n\t * @param {Object} group - The geometry group data.\r\n\t */\r\n\tonBeforeShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\r\n\r\n\t/**\r\n\t * A callback that is executed immediately after a 3D object is rendered to a shadow map.\r\n\t *\r\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\r\n\t * @param {Object3D} object - The 3D object.\r\n\t * @param {Camera} camera - The camera that is used to render the scene.\r\n\t * @param {Camera} shadowCamera - The shadow camera.\r\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\r\n\t * @param {Material} depthMaterial - The depth material.\r\n\t * @param {Object} group - The geometry group data.\r\n\t */\r\n\tonAfterShadow( /* renderer, object, camera, shadowCamera, geometry, depthMaterial, group */ ) {}\r\n\r\n\t/**\r\n\t * A callback that is executed immediately before a 3D object is rendered.\r\n\t *\r\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\r\n\t * @param {Object3D} object - The 3D object.\r\n\t * @param {Camera} camera - The camera that is used to render the scene.\r\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\r\n\t * @param {Material} material - The 3D object's material.\r\n\t * @param {Object} group - The geometry group data.\r\n\t */\r\n\tonBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}\r\n\r\n\t/**\r\n\t * A callback that is executed immediately after a 3D object is rendered.\r\n\t *\r\n\t * @param {Renderer|WebGLRenderer} renderer - The renderer.\r\n\t * @param {Object3D} object - The 3D object.\r\n\t * @param {Camera} camera - The camera that is used to render the scene.\r\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\r\n\t * @param {Material} material - The 3D object's material.\r\n\t * @param {Object} group - The geometry group data.\r\n\t */\r\n\tonAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}\r\n\r\n\t/**\r\n\t * Applies the given transformation matrix to the object and updates the object's position,\r\n\t * rotation and scale.\r\n\t *\r\n\t * @param {Matrix4} matrix - The transformation matrix.\r\n\t */\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tthis.matrix.premultiply( matrix );\r\n\r\n\t\tthis.matrix.decompose( this.position, this.quaternion, this.scale );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies a rotation represented by given the quaternion to the 3D object.\r\n\t *\r\n\t * @param {Quaternion} q - The quaternion.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\tthis.quaternion.premultiply( q );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given rotation represented as an axis/angle couple to the 3D object.\r\n\t *\r\n\t * @param {Vector3} axis - The (normalized) axis vector.\r\n\t * @param {number} angle - The angle in radians.\r\n\t */\r\n\tsetRotationFromAxisAngle( axis, angle ) {\r\n\r\n\t\t// assumes axis is normalized\r\n\r\n\t\tthis.quaternion.setFromAxisAngle( axis, angle );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given rotation represented as Euler angles to the 3D object.\r\n\t *\r\n\t * @param {Euler} euler - The Euler angles.\r\n\t */\r\n\tsetRotationFromEuler( euler ) {\r\n\r\n\t\tthis.quaternion.setFromEuler( euler, true );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given rotation represented as rotation matrix to the 3D object.\r\n\t *\r\n\t * @param {Matrix4} m - Although a 4x4 matrix is expected, the upper 3x3 portion must be\r\n\t * a pure rotation matrix (i.e, unscaled).\r\n\t */\r\n\tsetRotationFromMatrix( m ) {\r\n\r\n\t\t// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( m );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given rotation represented as a Quaternion to the 3D object.\r\n\t *\r\n\t * @param {Quaternion} q - The Quaternion\r\n\t */\r\n\tsetRotationFromQuaternion( q ) {\r\n\r\n\t\t// assumes q is normalized\r\n\r\n\t\tthis.quaternion.copy( q );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the 3D object along an axis in local space.\r\n\t *\r\n\t * @param {Vector3} axis - The (normalized) axis vector.\r\n\t * @param {number} angle - The angle in radians.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\trotateOnAxis( axis, angle ) {\r\n\r\n\t\t// rotate object on axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.quaternion.multiply( _q1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the 3D object along an axis in world space.\r\n\t *\r\n\t * @param {Vector3} axis - The (normalized) axis vector.\r\n\t * @param {number} angle - The angle in radians.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\trotateOnWorldAxis( axis, angle ) {\r\n\r\n\t\t// rotate object on axis in world space\r\n\t\t// axis is assumed to be normalized\r\n\t\t// method assumes no rotated parent\r\n\r\n\t\t_q1.setFromAxisAngle( axis, angle );\r\n\r\n\t\tthis.quaternion.premultiply( _q1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the 3D object around its X axis in local space.\r\n\t *\r\n\t * @param {number} angle - The angle in radians.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\trotateX( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _xAxis, angle );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the 3D object around its Y axis in local space.\r\n\t *\r\n\t * @param {number} angle - The angle in radians.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\trotateY( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _yAxis, angle );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the 3D object around its Z axis in local space.\r\n\t *\r\n\t * @param {number} angle - The angle in radians.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\trotateZ( angle ) {\r\n\r\n\t\treturn this.rotateOnAxis( _zAxis, angle );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Translate the 3D object by a distance along the given axis in local space.\r\n\t *\r\n\t * @param {Vector3} axis - The (normalized) axis vector.\r\n\t * @param {number} distance - The distance in world units.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\ttranslateOnAxis( axis, distance ) {\r\n\r\n\t\t// translate object by distance along axis in object space\r\n\t\t// axis is assumed to be normalized\r\n\r\n\t\t_v1.copy( axis ).applyQuaternion( this.quaternion );\r\n\r\n\t\tthis.position.add( _v1.multiplyScalar( distance ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Translate the 3D object by a distance along its X-axis in local space.\r\n\t *\r\n\t * @param {number} distance - The distance in world units.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\ttranslateX( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _xAxis, distance );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Translate the 3D object by a distance along its Y-axis in local space.\r\n\t *\r\n\t * @param {number} distance - The distance in world units.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\ttranslateY( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _yAxis, distance );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Translate the 3D object by a distance along its Z-axis in local space.\r\n\t *\r\n\t * @param {number} distance - The distance in world units.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\ttranslateZ( distance ) {\r\n\r\n\t\treturn this.translateOnAxis( _zAxis, distance );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the given vector from this 3D object's local space to world space.\r\n\t *\r\n\t * @param {Vector3} vector - The vector to convert.\r\n\t * @return {Vector3} The converted vector.\r\n\t */\r\n\tlocalToWorld( vector ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\treturn vector.applyMatrix4( this.matrixWorld );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Converts the given vector from this 3D object's word space to local space.\r\n\t *\r\n\t * @param {Vector3} vector - The vector to convert.\r\n\t * @return {Vector3} The converted vector.\r\n\t */\r\n\tworldToLocal( vector ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\treturn vector.applyMatrix4( _m1.copy( this.matrixWorld ).invert() );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the object to face a point in world space.\r\n\t *\r\n\t * This method does not support objects having non-uniformly-scaled parent(s).\r\n\t *\r\n\t * @param {number|Vector3} x - The x coordinate in world space. Alternatively, a vector representing a position in world space\r\n\t * @param {number} [y] - The y coordinate in world space.\r\n\t * @param {number} [z] - The z coordinate in world space.\r\n\t */\r\n\tlookAt( x, y, z ) {\r\n\r\n\t\t// This method does not support objects having non-uniformly-scaled parent(s)\r\n\r\n\t\tif ( x.isVector3 ) {\r\n\r\n\t\t\t_target.copy( x );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_target.set( x, y, z );\r\n\r\n\t\t}\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t_position.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t\tif ( this.isCamera || this.isLight ) {\r\n\r\n\t\t\t_m1.lookAt( _position, _target, this.up );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t_m1.lookAt( _target, _position, this.up );\r\n\r\n\t\t}\r\n\r\n\t\tthis.quaternion.setFromRotationMatrix( _m1 );\r\n\r\n\t\tif ( parent ) {\r\n\r\n\t\t\t_m1.extractRotation( parent.matrixWorld );\r\n\t\t\t_q1.setFromRotationMatrix( _m1 );\r\n\t\t\tthis.quaternion.premultiply( _q1.invert() );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given 3D object as a child to this 3D object. An arbitrary number of\r\n\t * objects may be added. Any current parent on an object passed in here will be\r\n\t * removed, since an object can have at most one parent.\r\n\t *\r\n\t * @fires Object3D#added\r\n\t * @fires Object3D#childadded\r\n\t * @param {Object3D} object - The 3D object to add.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\tadd( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.add( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object === this ) {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D.add: object can\\'t be added as a child of itself.', object );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tif ( object && object.isObject3D ) {\r\n\r\n\t\t\tobject.removeFromParent();\r\n\t\t\tobject.parent = this;\r\n\t\t\tthis.children.push( object );\r\n\r\n\t\t\tobject.dispatchEvent( _addedEvent );\r\n\r\n\t\t\t_childaddedEvent.child = object;\r\n\t\t\tthis.dispatchEvent( _childaddedEvent );\r\n\t\t\t_childaddedEvent.child = null;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the given 3D object as child from this 3D object.\r\n\t * An arbitrary number of objects may be removed.\r\n\t *\r\n\t * @fires Object3D#removed\r\n\t * @fires Object3D#childremoved\r\n\t * @param {Object3D} object - The 3D object to remove.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\tremove( object ) {\r\n\r\n\t\tif ( arguments.length > 1 ) {\r\n\r\n\t\t\tfor ( let i = 0; i < arguments.length; i ++ ) {\r\n\r\n\t\t\t\tthis.remove( arguments[ i ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst index = this.children.indexOf( object );\r\n\r\n\t\tif ( index !== - 1 ) {\r\n\r\n\t\t\tobject.parent = null;\r\n\t\t\tthis.children.splice( index, 1 );\r\n\r\n\t\t\tobject.dispatchEvent( _removedEvent );\r\n\r\n\t\t\t_childremovedEvent.child = object;\r\n\t\t\tthis.dispatchEvent( _childremovedEvent );\r\n\t\t\t_childremovedEvent.child = null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes this 3D object from its current parent.\r\n\t *\r\n\t * @fires Object3D#removed\r\n\t * @fires Object3D#childremoved\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\tremoveFromParent() {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tparent.remove( this );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes all child objects.\r\n\t *\r\n\t * @fires Object3D#removed\r\n\t * @fires Object3D#childremoved\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\tclear() {\r\n\r\n\t\treturn this.remove( ... this.children );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds the given 3D object as a child of this 3D object, while maintaining the object's world\r\n\t * transform. This method does not support scene graphs having non-uniformly-scaled nodes(s).\r\n\t *\r\n\t * @fires Object3D#added\r\n\t * @fires Object3D#childadded\r\n\t * @param {Object3D} object - The 3D object to attach.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\tattach( object ) {\r\n\r\n\t\t// adds object as a child of this, while maintaining the object's world transform\r\n\r\n\t\t// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\t_m1.copy( this.matrixWorld ).invert();\r\n\r\n\t\tif ( object.parent !== null ) {\r\n\r\n\t\t\tobject.parent.updateWorldMatrix( true, false );\r\n\r\n\t\t\t_m1.multiply( object.parent.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tobject.applyMatrix4( _m1 );\r\n\r\n\t\tobject.removeFromParent();\r\n\t\tobject.parent = this;\r\n\t\tthis.children.push( object );\r\n\r\n\t\tobject.updateWorldMatrix( false, true );\r\n\r\n\t\tobject.dispatchEvent( _addedEvent );\r\n\r\n\t\t_childaddedEvent.child = object;\r\n\t\tthis.dispatchEvent( _childaddedEvent );\r\n\t\t_childaddedEvent.child = null;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Searches through the 3D object and its children, starting with the 3D object\r\n\t * itself, and returns the first with a matching ID.\r\n\t *\r\n\t * @param {number} id - The id.\r\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\r\n\t */\r\n\tgetObjectById( id ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'id', id );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Searches through the 3D object and its children, starting with the 3D object\r\n\t * itself, and returns the first with a matching name.\r\n\t *\r\n\t * @param {string} name - The name.\r\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\r\n\t */\r\n\tgetObjectByName( name ) {\r\n\r\n\t\treturn this.getObjectByProperty( 'name', name );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Searches through the 3D object and its children, starting with the 3D object\r\n\t * itself, and returns the first with a matching property value.\r\n\t *\r\n\t * @param {string} name - The name of the property.\r\n\t * @param {any} value - The value.\r\n\t * @return {Object3D|undefined} The found 3D object. Returns `undefined` if no 3D object has been found.\r\n\t */\r\n\tgetObjectByProperty( name, value ) {\r\n\r\n\t\tif ( this[ name ] === value ) return this;\r\n\r\n\t\tfor ( let i = 0, l = this.children.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst child = this.children[ i ];\r\n\t\t\tconst object = child.getObjectByProperty( name, value );\r\n\r\n\t\t\tif ( object !== undefined ) {\r\n\r\n\t\t\t\treturn object;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn undefined;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Searches through the 3D object and its children, starting with the 3D object\r\n\t * itself, and returns all 3D objects with a matching property value.\r\n\t *\r\n\t * @param {string} name - The name of the property.\r\n\t * @param {any} value - The value.\r\n\t * @param {Array<Object3D>} result - The method stores the result in this array.\r\n\t * @return {Array<Object3D>} The found 3D objects.\r\n\t */\r\n\tgetObjectsByProperty( name, value, result = [] ) {\r\n\r\n\t\tif ( this[ name ] === value ) result.push( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].getObjectsByProperty( name, value, result );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a vector representing the position of the 3D object in world space.\r\n\t *\r\n\t * @param {Vector3} target - The target vector the result is stored to.\r\n\t * @return {Vector3} The 3D object's position in world space.\r\n\t */\r\n\tgetWorldPosition( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\treturn target.setFromMatrixPosition( this.matrixWorld );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a Quaternion representing the position of the 3D object in world space.\r\n\t *\r\n\t * @param {Quaternion} target - The target Quaternion the result is stored to.\r\n\t * @return {Quaternion} The 3D object's rotation in world space.\r\n\t */\r\n\tgetWorldQuaternion( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tthis.matrixWorld.decompose( _position, target, _scale );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a vector representing the scale of the 3D object in world space.\r\n\t *\r\n\t * @param {Vector3} target - The target vector the result is stored to.\r\n\t * @return {Vector3} The 3D object's scale in world space.\r\n\t */\r\n\tgetWorldScale( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tthis.matrixWorld.decompose( _position, _quaternion, target );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\r\n\t *\r\n\t * @param {Vector3} target - The target vector the result is stored to.\r\n\t * @return {Vector3} The 3D object's direction in world space.\r\n\t */\r\n\tgetWorldDirection( target ) {\r\n\r\n\t\tthis.updateWorldMatrix( true, false );\r\n\r\n\t\tconst e = this.matrixWorld.elements;\r\n\r\n\t\treturn target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Abstract method to get intersections between a casted ray and this\r\n\t * 3D object. Renderable 3D objects such as {@link Mesh}, {@link Line} or {@link Points}\r\n\t * implement this method in order to use raycasting.\r\n\t *\r\n\t * @abstract\r\n\t * @param {Raycaster} raycaster - The raycaster.\r\n\t * @param {Array<Object>} intersects - An array holding the result of the method.\r\n\t */\r\n\traycast( /* raycaster, intersects */ ) {}\r\n\r\n\t/**\r\n\t * Executes the callback on this 3D object and all descendants.\r\n\t *\r\n\t * Note: Modifying the scene graph inside the callback is discouraged.\r\n\t *\r\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\r\n\t */\r\n\ttraverse( callback ) {\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverse( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for visible 3D objects.\r\n\t * Descendants of invisible 3D objects are not traversed.\r\n\t *\r\n\t * Note: Modifying the scene graph inside the callback is discouraged.\r\n\t *\r\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\r\n\t */\r\n\ttraverseVisible( callback ) {\r\n\r\n\t\tif ( this.visible === false ) return;\r\n\r\n\t\tcallback( this );\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tchildren[ i ].traverseVisible( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Like {@link Object3D#traverse}, but the callback will only be executed for all ancestors.\r\n\t *\r\n\t * Note: Modifying the scene graph inside the callback is discouraged.\r\n\t *\r\n\t * @param {Function} callback - A callback function that allows to process the current 3D object.\r\n\t */\r\n\ttraverseAncestors( callback ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( parent !== null ) {\r\n\r\n\t\t\tcallback( parent );\r\n\r\n\t\t\tparent.traverseAncestors( callback );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the transformation matrix in local space by computing it from the current\r\n\t * position, rotation and scale values.\r\n\t */\r\n\tupdateMatrix() {\r\n\r\n\t\tthis.matrix.compose( this.position, this.quaternion, this.scale );\r\n\r\n\t\tthis.matrixWorldNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the transformation matrix in world space of this 3D objects and its descendants.\r\n\t *\r\n\t * To ensure correct results, this method also recomputes the 3D object's transformation matrix in\r\n\t * local space. The computation of the local and world matrix can be controlled with the\r\n\t * {@link Object3D#matrixAutoUpdate} and {@link Object3D#matrixWorldAutoUpdate} flags which are both\r\n\t * `true` by default.  Set these flags to `false` if you need more control over the update matrix process.\r\n\t *\r\n\t * @param {boolean} [force=false] - When set to `true`, a recomputation of world matrices is forced even\r\n\t * when {@link Object3D#matrixWorldAutoUpdate} is set to `false`.\r\n\t */\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldNeedsUpdate || force ) {\r\n\r\n\t\t\tif ( this.matrixWorldAutoUpdate === true ) {\r\n\r\n\t\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.matrixWorldNeedsUpdate = false;\r\n\r\n\t\t\tforce = true;\r\n\r\n\t\t}\r\n\r\n\t\t// make sure descendants are updated if required\r\n\r\n\t\tconst children = this.children;\r\n\r\n\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst child = children[ i ];\r\n\r\n\t\t\tchild.updateMatrixWorld( force );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An alternative version of {@link Object3D#updateMatrixWorld} with more control over the\r\n\t * update of ancestor and descendant nodes.\r\n\t *\r\n\t * @param {boolean} [updateParents=false] Whether ancestor nodes should be updated or not.\r\n\t * @param {boolean} [updateChildren=false] Whether descendant nodes should be updated or not.\r\n\t */\r\n\tupdateWorldMatrix( updateParents, updateChildren ) {\r\n\r\n\t\tconst parent = this.parent;\r\n\r\n\t\tif ( updateParents === true && parent !== null ) {\r\n\r\n\t\t\tparent.updateWorldMatrix( true, false );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.matrixAutoUpdate ) this.updateMatrix();\r\n\r\n\t\tif ( this.matrixWorldAutoUpdate === true ) {\r\n\r\n\t\t\tif ( this.parent === null ) {\r\n\r\n\t\t\t\tthis.matrixWorld.copy( this.matrix );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// make sure descendants are updated\r\n\r\n\t\tif ( updateChildren === true ) {\r\n\r\n\t\t\tconst children = this.children;\r\n\r\n\t\t\tfor ( let i = 0, l = children.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst child = children[ i ];\r\n\r\n\t\t\t\tchild.updateWorldMatrix( false, true );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes the 3D object into JSON.\r\n\t *\r\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\r\n\t * @return {Object} A JSON object representing the serialized 3D object.\r\n\t * @see {@link ObjectLoader#parse}\r\n\t */\r\n\ttoJSON( meta ) {\r\n\r\n\t\t// meta is a string when called from JSON.stringify\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tconst output = {};\r\n\r\n\t\t// meta is a hash used to collect geometries, materials.\r\n\t\t// not providing it implies that this is the root object\r\n\t\t// being serialized.\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\t// initialize meta obj\r\n\t\t\tmeta = {\r\n\t\t\t\tgeometries: {},\r\n\t\t\t\tmaterials: {},\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tshapes: {},\r\n\t\t\t\tskeletons: {},\r\n\t\t\t\tanimations: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t\toutput.metadata = {\r\n\t\t\t\tversion: 4.7,\r\n\t\t\t\ttype: 'Object',\r\n\t\t\t\tgenerator: 'Object3D.toJSON'\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\t// standard Object3D serialization\r\n\r\n\t\tconst object = {};\r\n\r\n\t\tobject.uuid = this.uuid;\r\n\t\tobject.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) object.name = this.name;\r\n\t\tif ( this.castShadow === true ) object.castShadow = true;\r\n\t\tif ( this.receiveShadow === true ) object.receiveShadow = true;\r\n\t\tif ( this.visible === false ) object.visible = false;\r\n\t\tif ( this.frustumCulled === false ) object.frustumCulled = false;\r\n\t\tif ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;\r\n\r\n\t\tobject.layers = this.layers.mask;\r\n\t\tobject.matrix = this.matrix.toArray();\r\n\t\tobject.up = this.up.toArray();\r\n\r\n\t\tif ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;\r\n\r\n\t\t// object specific properties\r\n\r\n\t\tif ( this.isInstancedMesh ) {\r\n\r\n\t\t\tobject.type = 'InstancedMesh';\r\n\t\t\tobject.count = this.count;\r\n\t\t\tobject.instanceMatrix = this.instanceMatrix.toJSON();\r\n\t\t\tif ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isBatchedMesh ) {\r\n\r\n\t\t\tobject.type = 'BatchedMesh';\r\n\t\t\tobject.perObjectFrustumCulled = this.perObjectFrustumCulled;\r\n\t\t\tobject.sortObjects = this.sortObjects;\r\n\r\n\t\t\tobject.drawRanges = this._drawRanges;\r\n\t\t\tobject.reservedRanges = this._reservedRanges;\r\n\r\n\t\t\tobject.geometryInfo = this._geometryInfo.map( info => ( {\r\n\t\t\t\t...info,\r\n\t\t\t\tboundingBox: info.boundingBox ? info.boundingBox.toJSON() : undefined,\r\n\t\t\t\tboundingSphere: info.boundingSphere ? info.boundingSphere.toJSON() : undefined\r\n\t\t\t} ) );\r\n\t\t\tobject.instanceInfo = this._instanceInfo.map( info => ( { ...info } ) );\r\n\r\n\t\t\tobject.availableInstanceIds = this._availableInstanceIds.slice();\r\n\t\t\tobject.availableGeometryIds = this._availableGeometryIds.slice();\r\n\r\n\t\t\tobject.nextIndexStart = this._nextIndexStart;\r\n\t\t\tobject.nextVertexStart = this._nextVertexStart;\r\n\t\t\tobject.geometryCount = this._geometryCount;\r\n\r\n\t\t\tobject.maxInstanceCount = this._maxInstanceCount;\r\n\t\t\tobject.maxVertexCount = this._maxVertexCount;\r\n\t\t\tobject.maxIndexCount = this._maxIndexCount;\r\n\r\n\t\t\tobject.geometryInitialized = this._geometryInitialized;\r\n\r\n\t\t\tobject.matricesTexture = this._matricesTexture.toJSON( meta );\r\n\r\n\t\t\tobject.indirectTexture = this._indirectTexture.toJSON( meta );\r\n\r\n\t\t\tif ( this._colorsTexture !== null ) {\r\n\r\n\t\t\t\tobject.colorsTexture = this._colorsTexture.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\t\tobject.boundingSphere = this.boundingSphere.toJSON();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\t\tobject.boundingBox = this.boundingBox.toJSON();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tfunction serialize( library, element ) {\r\n\r\n\t\t\tif ( library[ element.uuid ] === undefined ) {\r\n\r\n\t\t\t\tlibrary[ element.uuid ] = element.toJSON( meta );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn element.uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isScene ) {\r\n\r\n\t\t\tif ( this.background ) {\r\n\r\n\t\t\t\tif ( this.background.isColor ) {\r\n\r\n\t\t\t\t\tobject.background = this.background.toJSON();\r\n\r\n\t\t\t\t} else if ( this.background.isTexture ) {\r\n\r\n\t\t\t\t\tobject.background = this.background.toJSON( meta ).uuid;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {\r\n\r\n\t\t\t\tobject.environment = this.environment.toJSON( meta ).uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( this.isMesh || this.isLine || this.isPoints ) {\r\n\r\n\t\t\tobject.geometry = serialize( meta.geometries, this.geometry );\r\n\r\n\t\t\tconst parameters = this.geometry.parameters;\r\n\r\n\t\t\tif ( parameters !== undefined && parameters.shapes !== undefined ) {\r\n\r\n\t\t\t\tconst shapes = parameters.shapes;\r\n\r\n\t\t\t\tif ( Array.isArray( shapes ) ) {\r\n\r\n\t\t\t\t\tfor ( let i = 0, l = shapes.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\t\tconst shape = shapes[ i ];\r\n\r\n\t\t\t\t\t\tserialize( meta.shapes, shape );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tserialize( meta.shapes, shapes );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.isSkinnedMesh ) {\r\n\r\n\t\t\tobject.bindMode = this.bindMode;\r\n\t\t\tobject.bindMatrix = this.bindMatrix.toArray();\r\n\r\n\t\t\tif ( this.skeleton !== undefined ) {\r\n\r\n\t\t\t\tserialize( meta.skeletons, this.skeleton );\r\n\r\n\t\t\t\tobject.skeleton = this.skeleton.uuid;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.material !== undefined ) {\r\n\r\n\t\t\tif ( Array.isArray( this.material ) ) {\r\n\r\n\t\t\t\tconst uuids = [];\r\n\r\n\t\t\t\tfor ( let i = 0, l = this.material.length; i < l; i ++ ) {\r\n\r\n\t\t\t\t\tuuids.push( serialize( meta.materials, this.material[ i ] ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.material = uuids;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tobject.material = serialize( meta.materials, this.material );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.children.length > 0 ) {\r\n\r\n\t\t\tobject.children = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.children.length; i ++ ) {\r\n\r\n\t\t\t\tobject.children.push( this.children[ i ].toJSON( meta ).object );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.animations.length > 0 ) {\r\n\r\n\t\t\tobject.animations = [];\r\n\r\n\t\t\tfor ( let i = 0; i < this.animations.length; i ++ ) {\r\n\r\n\t\t\t\tconst animation = this.animations[ i ];\r\n\r\n\t\t\t\tobject.animations.push( serialize( meta.animations, animation ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tconst geometries = extractFromCache( meta.geometries );\r\n\t\t\tconst materials = extractFromCache( meta.materials );\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst shapes = extractFromCache( meta.shapes );\r\n\t\t\tconst skeletons = extractFromCache( meta.skeletons );\r\n\t\t\tconst animations = extractFromCache( meta.animations );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( geometries.length > 0 ) output.geometries = geometries;\r\n\t\t\tif ( materials.length > 0 ) output.materials = materials;\r\n\t\t\tif ( textures.length > 0 ) output.textures = textures;\r\n\t\t\tif ( images.length > 0 ) output.images = images;\r\n\t\t\tif ( shapes.length > 0 ) output.shapes = shapes;\r\n\t\t\tif ( skeletons.length > 0 ) output.skeletons = skeletons;\r\n\t\t\tif ( animations.length > 0 ) output.animations = animations;\r\n\t\t\tif ( nodes.length > 0 ) output.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\toutput.object = object;\r\n\r\n\t\treturn output;\r\n\r\n\t\t// extract data from the cache hash\r\n\t\t// remove metadata on each item\r\n\t\t// and return as array\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new 3D object with copied values from this instance.\r\n\t *\r\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are also cloned.\r\n\t * @return {Object3D} A clone of this instance.\r\n\t */\r\n\tclone( recursive ) {\r\n\r\n\t\treturn new this.constructor().copy( this, recursive );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given 3D object to this instance.\r\n\t *\r\n\t * @param {Object3D} source - The 3D object to copy.\r\n\t * @param {boolean} [recursive=true] - When set to `true`, descendants of the 3D object are cloned.\r\n\t * @return {Object3D} A reference to this instance.\r\n\t */\r\n\tcopy( source, recursive = true ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.up.copy( source.up );\r\n\r\n\t\tthis.position.copy( source.position );\r\n\t\tthis.rotation.order = source.rotation.order;\r\n\t\tthis.quaternion.copy( source.quaternion );\r\n\t\tthis.scale.copy( source.scale );\r\n\r\n\t\tthis.matrix.copy( source.matrix );\r\n\t\tthis.matrixWorld.copy( source.matrixWorld );\r\n\r\n\t\tthis.matrixAutoUpdate = source.matrixAutoUpdate;\r\n\r\n\t\tthis.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;\r\n\t\tthis.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;\r\n\r\n\t\tthis.layers.mask = source.layers.mask;\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.castShadow = source.castShadow;\r\n\t\tthis.receiveShadow = source.receiveShadow;\r\n\r\n\t\tthis.frustumCulled = source.frustumCulled;\r\n\t\tthis.renderOrder = source.renderOrder;\r\n\r\n\t\tthis.animations = source.animations.slice();\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\tif ( recursive === true ) {\r\n\r\n\t\t\tfor ( let i = 0; i < source.children.length; i ++ ) {\r\n\r\n\t\t\t\tconst child = source.children[ i ];\r\n\t\t\t\tthis.add( child.clone() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * The default up direction for objects, also used as the default\r\n * position for {@link DirectionalLight} and {@link HemisphereLight}.\r\n *\r\n * @static\r\n * @type {Vector3}\r\n * @default (0,1,0)\r\n */\r\nObject3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );\r\n\r\n/**\r\n * The default setting for {@link Object3D#matrixAutoUpdate} for\r\n * newly created 3D objects.\r\n *\r\n * @static\r\n * @type {boolean}\r\n * @default true\r\n */\r\nObject3D.DEFAULT_MATRIX_AUTO_UPDATE = true;\r\n\r\n/**\r\n * The default setting for {@link Object3D#matrixWorldAutoUpdate} for\r\n * newly created 3D objects.\r\n *\r\n * @static\r\n * @type {boolean}\r\n * @default true\r\n */\r\nObject3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;\r\n\r\nexport { Object3D };\r\n", "import { EventDispatcher } from './EventDispatcher.js';\r\nimport { Texture } from '../textures/Texture.js';\r\nimport { LinearFilter } from '../constants.js';\r\nimport { Vector4 } from '../math/Vector4.js';\r\nimport { Source } from '../textures/Source.js';\r\n\r\n/**\r\n * A render target is a buffer where the video card draws pixels for a scene\r\n * that is being rendered in the background. It is used in different effects,\r\n * such as applying postprocessing to a rendered image before displaying it\r\n * on the screen.\r\n *\r\n * @augments EventDispatcher\r\n */\r\nclass RenderTarget extends EventDispatcher {\r\n\r\n\t/**\r\n\t * Render target options.\r\n\t *\r\n\t * @typedef {Object} RenderTarget~Options\r\n\t * @property {boolean} [generateMipmaps=false] - Whether to generate mipmaps or not.\r\n\t * @property {number} [magFilter=LinearFilter] - The mag filter.\r\n\t * @property {number} [minFilter=LinearFilter] - The min filter.\r\n\t * @property {number} [format=RGBAFormat] - The texture format.\r\n\t * @property {number} [type=UnsignedByteType] - The texture type.\r\n\t * @property {?string} [internalFormat=null] - The texture's internal format.\r\n\t * @property {number} [wrapS=ClampToEdgeWrapping] - The texture's uv wrapping mode.\r\n\t * @property {number} [wrapT=ClampToEdgeWrapping] - The texture's uv wrapping mode.\r\n\t * @property {number} [anisotropy=1] - The texture's anisotropy value.\r\n\t * @property {string} [colorSpace=NoColorSpace] - The texture's color space.\r\n\t * @property {boolean} [depthBuffer=true] - Whether to allocate a depth buffer or not.\r\n\t * @property {boolean} [stencilBuffer=false] - Whether to allocate a stencil buffer or not.\r\n\t * @property {boolean} [resolveDepthBuffer=true] - Whether to resolve the depth buffer or not.\r\n\t * @property {boolean} [resolveStencilBuffer=true] - Whether  to resolve the stencil buffer or not.\r\n\t * @property {?Texture} [depthTexture=null] - Reference to a depth texture.\r\n\t * @property {number} [samples=0] - The MSAA samples count.\r\n\t * @property {number} [count=1] - Defines the number of color attachments . Must be at least `1`.\r\n\t * @property {number} [depth=1] - The texture depth.\r\n\t * @property {boolean} [multiview=false] - Whether this target is used for multiview rendering.\r\n\t */\r\n\r\n\t/**\r\n\t * Constructs a new render target.\r\n\t *\r\n\t * @param {number} [width=1] - The width of the render target.\r\n\t * @param {number} [height=1] - The height of the render target.\r\n\t * @param {RenderTarget~Options} [options] - The configuration object.\r\n\t */\r\n\tconstructor( width = 1, height = 1, options = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\toptions = Object.assign( {\r\n\t\t\tgenerateMipmaps: false,\r\n\t\t\tinternalFormat: null,\r\n\t\t\tminFilter: LinearFilter,\r\n\t\t\tdepthBuffer: true,\r\n\t\t\tstencilBuffer: false,\r\n\t\t\tresolveDepthBuffer: true,\r\n\t\t\tresolveStencilBuffer: true,\r\n\t\t\tdepthTexture: null,\r\n\t\t\tsamples: 0,\r\n\t\t\tcount: 1,\r\n\t\t\tdepth: 1,\r\n\t\t\tmultiview: false\r\n\t\t}, options );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isRenderTarget = true;\r\n\r\n\t\t/**\r\n\t\t * The width of the render target.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.width = width;\r\n\r\n\t\t/**\r\n\t\t * The height of the render target.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.height = height;\r\n\r\n\t\t/**\r\n\t\t * The depth of the render target.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.depth = options.depth;\r\n\r\n\t\t/**\r\n\t\t * A rectangular area inside the render target's viewport. Fragments that are\r\n\t\t * outside the area will be discarded.\r\n\t\t *\r\n\t\t * @type {Vector4}\r\n\t\t * @default (0,0,width,height)\r\n\t\t */\r\n\t\tthis.scissor = new Vector4( 0, 0, width, height );\r\n\r\n\t\t/**\r\n\t\t * Indicates whether the scissor test should be enabled when rendering into\r\n\t\t * this render target or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.scissorTest = false;\r\n\r\n\t\t/**\r\n\t\t * A rectangular area representing the render target's viewport.\r\n\t\t *\r\n\t\t * @type {Vector4}\r\n\t\t * @default (0,0,width,height)\r\n\t\t */\r\n\t\tthis.viewport = new Vector4( 0, 0, width, height );\r\n\r\n\t\tconst image = { width: width, height: height, depth: options.depth };\r\n\r\n\t\tconst texture = new Texture( image );\r\n\r\n\t\t/**\r\n\t\t * An array of textures. Each color attachment is represented as a separate texture.\r\n\t\t * Has at least a single entry for the default color attachment.\r\n\t\t *\r\n\t\t * @type {Array<Texture>}\r\n\t\t */\r\n\t\tthis.textures = [];\r\n\r\n\t\tconst count = options.count;\r\n\t\tfor ( let i = 0; i < count; i ++ ) {\r\n\r\n\t\t\tthis.textures[ i ] = texture.clone();\r\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\r\n\t\t\tthis.textures[ i ].renderTarget = this;\r\n\r\n\t\t}\r\n\r\n\t\tthis._setTextureOptions( options );\r\n\r\n\t\t/**\r\n\t\t * Whether to allocate a depth buffer or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.depthBuffer = options.depthBuffer;\r\n\r\n\t\t/**\r\n\t\t * Whether to allocate a stencil buffer or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.stencilBuffer = options.stencilBuffer;\r\n\r\n\t\t/**\r\n\t\t * Whether to resolve the depth buffer or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.resolveDepthBuffer = options.resolveDepthBuffer;\r\n\r\n\t\t/**\r\n\t\t * Whether to resolve the stencil buffer or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.resolveStencilBuffer = options.resolveStencilBuffer;\r\n\r\n\t\tthis._depthTexture = null;\r\n\t\tthis.depthTexture = options.depthTexture;\r\n\r\n\t\t/**\r\n\t\t * The number of MSAA samples.\r\n\t\t *\r\n\t\t * A value of `0` disables MSAA.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.samples = options.samples;\r\n\r\n\t\t/**\r\n\t\t * Whether to this target is used in multiview rendering.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.multiview = options.multiview;\r\n\r\n\t}\r\n\r\n\t_setTextureOptions( options = {} ) {\r\n\r\n\t\tconst values = {\r\n\t\t\tminFilter: LinearFilter,\r\n\t\t\tgenerateMipmaps: false,\r\n\t\t\tflipY: false,\r\n\t\t\tinternalFormat: null\r\n\t\t};\r\n\r\n\t\tif ( options.mapping !== undefined ) values.mapping = options.mapping;\r\n\t\tif ( options.wrapS !== undefined ) values.wrapS = options.wrapS;\r\n\t\tif ( options.wrapT !== undefined ) values.wrapT = options.wrapT;\r\n\t\tif ( options.wrapR !== undefined ) values.wrapR = options.wrapR;\r\n\t\tif ( options.magFilter !== undefined ) values.magFilter = options.magFilter;\r\n\t\tif ( options.minFilter !== undefined ) values.minFilter = options.minFilter;\r\n\t\tif ( options.format !== undefined ) values.format = options.format;\r\n\t\tif ( options.type !== undefined ) values.type = options.type;\r\n\t\tif ( options.anisotropy !== undefined ) values.anisotropy = options.anisotropy;\r\n\t\tif ( options.colorSpace !== undefined ) values.colorSpace = options.colorSpace;\r\n\t\tif ( options.flipY !== undefined ) values.flipY = options.flipY;\r\n\t\tif ( options.generateMipmaps !== undefined ) values.generateMipmaps = options.generateMipmaps;\r\n\t\tif ( options.internalFormat !== undefined ) values.internalFormat = options.internalFormat;\r\n\r\n\t\tfor ( let i = 0; i < this.textures.length; i ++ ) {\r\n\r\n\t\t\tconst texture = this.textures[ i ];\r\n\t\t\ttexture.setValues( values );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The texture representing the default color attachment.\r\n\t *\r\n\t * @type {Texture}\r\n\t */\r\n\tget texture() {\r\n\r\n\t\treturn this.textures[ 0 ];\r\n\r\n\t}\r\n\r\n\tset texture( value ) {\r\n\r\n\t\tthis.textures[ 0 ] = value;\r\n\r\n\t}\r\n\r\n\tset depthTexture( current ) {\r\n\r\n\t\tif ( this._depthTexture !== null ) this._depthTexture.renderTarget = null;\r\n\t\tif ( current !== null ) current.renderTarget = this;\r\n\r\n\t\tthis._depthTexture = current;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Instead of saving the depth in a renderbuffer, a texture\r\n\t * can be used instead which is useful for further processing\r\n\t * e.g. in context of post-processing.\r\n\t *\r\n\t * @type {?DepthTexture}\r\n\t * @default null\r\n\t */\r\n\tget depthTexture() {\r\n\r\n\t\treturn this._depthTexture;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the size of this render target.\r\n\t *\r\n\t * @param {number} width - The width.\r\n\t * @param {number} height - The height.\r\n\t * @param {number} [depth=1] - The depth.\r\n\t */\r\n\tsetSize( width, height, depth = 1 ) {\r\n\r\n\t\tif ( this.width !== width || this.height !== height || this.depth !== depth ) {\r\n\r\n\t\t\tthis.width = width;\r\n\t\t\tthis.height = height;\r\n\t\t\tthis.depth = depth;\r\n\r\n\t\t\tfor ( let i = 0, il = this.textures.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tthis.textures[ i ].image.width = width;\r\n\t\t\t\tthis.textures[ i ].image.height = height;\r\n\t\t\t\tthis.textures[ i ].image.depth = depth;\r\n\t\t\t\tthis.textures[ i ].isArrayTexture = this.textures[ i ].image.depth > 1;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis.viewport.set( 0, 0, width, height );\r\n\t\tthis.scissor.set( 0, 0, width, height );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new render target with copied values from this instance.\r\n\t *\r\n\t * @return {RenderTarget} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the settings of the given render target. This is a structural copy so\r\n\t * no resources are shared between render targets after the copy. That includes\r\n\t * all MRT textures and the depth texture.\r\n\t *\r\n\t * @param {RenderTarget} source - The render target to copy.\r\n\t * @return {RenderTarget} A reference to this instance.\r\n\t */\r\n\tcopy( source ) {\r\n\r\n\t\tthis.width = source.width;\r\n\t\tthis.height = source.height;\r\n\t\tthis.depth = source.depth;\r\n\r\n\t\tthis.scissor.copy( source.scissor );\r\n\t\tthis.scissorTest = source.scissorTest;\r\n\r\n\t\tthis.viewport.copy( source.viewport );\r\n\r\n\t\tthis.textures.length = 0;\r\n\r\n\t\tfor ( let i = 0, il = source.textures.length; i < il; i ++ ) {\r\n\r\n\t\t\tthis.textures[ i ] = source.textures[ i ].clone();\r\n\t\t\tthis.textures[ i ].isRenderTargetTexture = true;\r\n\t\t\tthis.textures[ i ].renderTarget = this;\r\n\r\n\t\t\t// ensure image object is not shared, see #20328\r\n\r\n\t\t\tconst image = Object.assign( {}, source.textures[ i ].image );\r\n\t\t\tthis.textures[ i ].source = new Source( image );\r\n\r\n\t\t}\r\n\r\n\t\tthis.depthBuffer = source.depthBuffer;\r\n\t\tthis.stencilBuffer = source.stencilBuffer;\r\n\r\n\t\tthis.resolveDepthBuffer = source.resolveDepthBuffer;\r\n\t\tthis.resolveStencilBuffer = source.resolveStencilBuffer;\r\n\r\n\t\tif ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();\r\n\r\n\t\tthis.samples = source.samples;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever this instance is no longer used in your app.\r\n\t *\r\n\t * @fires RenderTarget#dispose\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { RenderTarget };\r\n", "import Node from '../core/Node.js';\r\nimport TextureNode from '../accessors/TextureNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { screenUV } from '../display/ScreenNode.js';\r\n\r\nimport { HalfFloatType, LinearMipMapLinearFilter, WebGPUCoordinateSystem } from '../../constants.js';\r\nimport { Plane } from '../../math/Plane.js';\r\nimport { Object3D } from '../../core/Object3D.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\n\r\nconst _reflectorPlane = new Plane();\r\nconst _normal = new Vector3();\r\nconst _reflectorWorldPosition = new Vector3();\r\nconst _cameraWorldPosition = new Vector3();\r\nconst _rotationMatrix = new Matrix4();\r\nconst _lookAtPosition = new Vector3( 0, 0, - 1 );\r\nconst clipPlane = new Vector4();\r\n\r\nconst _view = new Vector3();\r\nconst _target = new Vector3();\r\nconst _q = new Vector4();\r\n\r\nconst _size = new Vector2();\r\n\r\nconst _defaultRT = new RenderTarget();\r\nconst _defaultUV = screenUV.flipX();\r\n\r\n_defaultRT.depthTexture = new DepthTexture( 1, 1 );\r\n\r\nlet _inReflector = false;\r\n\r\n/**\r\n * This node can be used to implement mirror-like flat reflective surfaces.\r\n *\r\n * ```js\r\n * const groundReflector = reflector();\r\n * material.colorNode = groundReflector;\r\n *\r\n * const plane = new Mesh( geometry, material );\r\n * plane.add( groundReflector.target );\r\n * ```\r\n *\r\n * @augments TextureNode\r\n */\r\nclass ReflectorNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReflectorNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new reflector node.\r\n\t *\r\n\t * @param {Object} [parameters={}] - An object holding configuration parameters.\r\n\t * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.\r\n\t * @param {number} [parameters.resolution=1] - The resolution scale.\r\n\t * @param {boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.\r\n\t * @param {boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.\r\n\t * @param {boolean} [parameters.depth=false] - Whether depth data should be generated or not.\r\n\t * @param {TextureNode} [parameters.defaultTexture] - The default texture node.\r\n\t * @param {ReflectorBaseNode} [parameters.reflector] - The reflector base node.\r\n\t */\r\n\tconstructor( parameters = {} ) {\r\n\r\n\t\tsuper( parameters.defaultTexture || _defaultRT.texture, _defaultUV );\r\n\r\n\t\t/**\r\n\t\t * A reference to the internal reflector base node which holds the actual implementation.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {ReflectorBaseNode}\r\n\t\t * @default ReflectorBaseNode\r\n\t\t */\r\n\t\tthis._reflectorBaseNode = parameters.reflector || new ReflectorBaseNode( this, parameters );\r\n\r\n\t\t/**\r\n\t\t * A reference to the internal depth node.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._depthNode = null;\r\n\r\n\t\tthis.setUpdateMatrix( false );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to the internal reflector node.\r\n\t *\r\n\t * @type {ReflectorBaseNode}\r\n\t */\r\n\tget reflector() {\r\n\r\n\t\treturn this._reflectorBaseNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * A reference to 3D object the reflector is linked to.\r\n\t *\r\n\t * @type {Object3D}\r\n\t */\r\n\tget target() {\r\n\r\n\t\treturn this._reflectorBaseNode.target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a node representing the mirror's depth. That can be used\r\n\t * to implement more advanced reflection effects like distance attenuation.\r\n\t *\r\n\t * @return {Node} The depth node.\r\n\t */\r\n\tgetDepthNode() {\r\n\r\n\t\tif ( this._depthNode === null ) {\r\n\r\n\t\t\tif ( this._reflectorBaseNode.depth !== true ) {\r\n\r\n\t\t\t\tthrow new Error( 'THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._depthNode = nodeObject( new ReflectorNode( {\r\n\t\t\t\tdefaultTexture: _defaultRT.depthTexture,\r\n\t\t\t\treflector: this._reflectorBaseNode\r\n\t\t\t} ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn this._depthNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\t// ignore if used in post-processing\r\n\t\tif ( ! builder.object.isQuadMesh ) this._reflectorBaseNode.build( builder );\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst newNode = new this.constructor( this.reflectorNode );\r\n\t\tnewNode.uvNode = this.uvNode;\r\n\t\tnewNode.levelNode = this.levelNode;\r\n\t\tnewNode.biasNode = this.biasNode;\r\n\t\tnewNode.sampler = this.sampler;\r\n\t\tnewNode.depthNode = this.depthNode;\r\n\t\tnewNode.compareNode = this.compareNode;\r\n\t\tnewNode.gradNode = this.gradNode;\r\n\t\tnewNode._reflectorBaseNode = this._reflectorBaseNode;\r\n\r\n\t\treturn newNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees internal resources. Should be called when the node is no longer in use.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tsuper.dispose();\r\n\r\n\t\tthis._reflectorBaseNode.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Holds the actual implementation of the reflector.\r\n *\r\n * TODO: Explain why `ReflectorBaseNode`. Originally the entire logic was implemented\r\n * in `ReflectorNode`, see #29619.\r\n *\r\n * @private\r\n * @augments Node\r\n */\r\nclass ReflectorBaseNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReflectorBaseNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new reflector base node.\r\n\t *\r\n\t * @param {TextureNode} textureNode - Represents the rendered reflections as a texture node.\r\n\t * @param {Object} [parameters={}] - An object holding configuration parameters.\r\n\t * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.\r\n\t * @param {number} [parameters.resolution=1] - The resolution scale.\r\n\t * @param {boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.\r\n\t * @param {boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.\r\n\t * @param {boolean} [parameters.depth=false] - Whether depth data should be generated or not.\r\n\t */\r\n\tconstructor( textureNode, parameters = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tconst {\r\n\t\t\ttarget = new Object3D(),\r\n\t\t\tresolution = 1,\r\n\t\t\tgenerateMipmaps = false,\r\n\t\t\tbounces = true,\r\n\t\t\tdepth = false\r\n\t\t} = parameters;\r\n\r\n\t\t/**\r\n\t\t * Represents the rendered reflections as a texture node.\r\n\t\t *\r\n\t\t * @type {TextureNode}\r\n\t\t */\r\n\t\tthis.textureNode = textureNode;\r\n\r\n\t\t/**\r\n\t\t * The 3D object the reflector is linked to.\r\n\t\t *\r\n\t\t * @type {Object3D}\r\n\t\t * @default {new Object3D()}\r\n\t\t */\r\n\t\tthis.target = target;\r\n\r\n\t\t/**\r\n\t\t * The resolution scale.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default {1}\r\n\t\t */\r\n\t\tthis.resolution = resolution;\r\n\r\n\t\t/**\r\n\t\t * Whether mipmaps should be generated or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default {false}\r\n\t\t */\r\n\t\tthis.generateMipmaps = generateMipmaps;\r\n\r\n\t\t/**\r\n\t\t * Whether reflectors can render other reflector nodes or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default {true}\r\n\t\t */\r\n\t\tthis.bounces = bounces;\r\n\r\n\t\t/**\r\n\t\t * Whether depth data should be generated or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default {false}\r\n\t\t */\r\n\t\tthis.depth = depth;\r\n\r\n\t\t/**\r\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.RENDER` when {@link ReflectorBaseNode#bounces}\r\n\t\t * is `true`. Otherwise it's `NodeUpdateType.FRAME`.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'render'\r\n\t\t */\r\n\t\tthis.updateBeforeType = bounces ? NodeUpdateType.RENDER : NodeUpdateType.FRAME;\r\n\r\n\t\t/**\r\n\t\t * Weak map for managing virtual cameras.\r\n\t\t *\r\n\t\t * @type {WeakMap<Camera, Camera>}\r\n\t\t */\r\n\t\tthis.virtualCameras = new WeakMap();\r\n\r\n\t\t/**\r\n\t\t * Weak map for managing render targets.\r\n\t\t *\r\n\t\t * @type {Map<Camera, RenderTarget>}\r\n\t\t */\r\n\t\tthis.renderTargets = new Map();\r\n\r\n\t\t/**\r\n\t\t * Force render even if reflector is facing away from camera.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default {false}\r\n\t\t */\r\n\t\tthis.forceUpdate = false;\r\n\r\n\t\t/**\r\n\t\t * Whether the reflector has been rendered or not.\r\n\t\t *\r\n\t\t * When the reflector is facing away from the camera,\r\n\t\t * this flag is set to `false` and the texture will be empty(black).\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default {false}\r\n\t\t */\r\n\t\tthis.hasOutput = false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the resolution of the internal render target.\r\n\t *\r\n\t * @private\r\n\t * @param {RenderTarget} renderTarget - The render target to resize.\r\n\t * @param {Renderer} renderer - The renderer that is used to determine the new size.\r\n\t */\r\n\t_updateResolution( renderTarget, renderer ) {\r\n\r\n\t\tconst resolution = this.resolution;\r\n\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\trenderTarget.setSize( Math.round( _size.width * resolution ), Math.round( _size.height * resolution ) );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis._updateResolution( _defaultRT, builder.renderer );\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees internal resources. Should be called when the node is no longer in use.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tsuper.dispose();\r\n\r\n\t\tfor ( const renderTarget of this.renderTargets.values() ) {\r\n\r\n\t\t\trenderTarget.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a virtual camera for the given camera. The virtual camera is used to\r\n\t * render the scene from the reflector's view so correct reflections can be produced.\r\n\t *\r\n\t * @param {Camera} camera - The scene's camera.\r\n\t * @return {Camera} The corresponding virtual camera.\r\n\t */\r\n\tgetVirtualCamera( camera ) {\r\n\r\n\t\tlet virtualCamera = this.virtualCameras.get( camera );\r\n\r\n\t\tif ( virtualCamera === undefined ) {\r\n\r\n\t\t\tvirtualCamera = camera.clone();\r\n\r\n\t\t\tthis.virtualCameras.set( camera, virtualCamera );\r\n\r\n\t\t}\r\n\r\n\t\treturn virtualCamera;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a render target for the given camera. The reflections are rendered\r\n\t * into this render target.\r\n\t *\r\n\t * @param {Camera} camera - The scene's camera.\r\n\t * @return {RenderTarget} The render target.\r\n\t */\r\n\tgetRenderTarget( camera ) {\r\n\r\n\t\tlet renderTarget = this.renderTargets.get( camera );\r\n\r\n\t\tif ( renderTarget === undefined ) {\r\n\r\n\t\t\trenderTarget = new RenderTarget( 0, 0, { type: HalfFloatType } );\r\n\r\n\t\t\tif ( this.generateMipmaps === true ) {\r\n\r\n\t\t\t\trenderTarget.texture.minFilter = LinearMipMapLinearFilter;\r\n\t\t\t\trenderTarget.texture.generateMipmaps = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( this.depth === true ) {\r\n\r\n\t\t\t\trenderTarget.depthTexture = new DepthTexture();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.renderTargets.set( camera, renderTarget );\r\n\r\n\t\t}\r\n\r\n\t\treturn renderTarget;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tif ( this.bounces === false && _inReflector ) return false;\r\n\r\n\t\t_inReflector = true;\r\n\r\n\t\tconst { scene, camera, renderer, material } = frame;\r\n\t\tconst { target } = this;\r\n\r\n\t\tconst virtualCamera = this.getVirtualCamera( camera );\r\n\t\tconst renderTarget = this.getRenderTarget( virtualCamera );\r\n\r\n\t\trenderer.getDrawingBufferSize( _size );\r\n\r\n\t\tthis._updateResolution( renderTarget, renderer );\r\n\r\n\t\t//\r\n\r\n\t\t_reflectorWorldPosition.setFromMatrixPosition( target.matrixWorld );\r\n\t\t_cameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\r\n\r\n\t\t_rotationMatrix.extractRotation( target.matrixWorld );\r\n\r\n\t\t_normal.set( 0, 0, 1 );\r\n\t\t_normal.applyMatrix4( _rotationMatrix );\r\n\r\n\t\t_view.subVectors( _reflectorWorldPosition, _cameraWorldPosition );\r\n\r\n\t\t// Avoid rendering when reflector is facing away unless forcing an update\r\n\t\tconst isFacingAway = _view.dot( _normal ) > 0;\r\n\r\n\t\tlet needsClear = false;\r\n\r\n\t\tif ( isFacingAway === true && this.forceUpdate === false ) {\r\n\r\n\t\t\tif ( this.hasOutput === false ) {\r\n\r\n\t\t\t\t_inReflector = false;\r\n\r\n\t\t\t\treturn;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tneedsClear = true;\r\n\r\n\t\t}\r\n\r\n\t\t_view.reflect( _normal ).negate();\r\n\t\t_view.add( _reflectorWorldPosition );\r\n\r\n\t\t_rotationMatrix.extractRotation( camera.matrixWorld );\r\n\r\n\t\t_lookAtPosition.set( 0, 0, - 1 );\r\n\t\t_lookAtPosition.applyMatrix4( _rotationMatrix );\r\n\t\t_lookAtPosition.add( _cameraWorldPosition );\r\n\r\n\t\t_target.subVectors( _reflectorWorldPosition, _lookAtPosition );\r\n\t\t_target.reflect( _normal ).negate();\r\n\t\t_target.add( _reflectorWorldPosition );\r\n\r\n\t\t//\r\n\r\n\t\tvirtualCamera.coordinateSystem = camera.coordinateSystem;\r\n\t\tvirtualCamera.position.copy( _view );\r\n\t\tvirtualCamera.up.set( 0, 1, 0 );\r\n\t\tvirtualCamera.up.applyMatrix4( _rotationMatrix );\r\n\t\tvirtualCamera.up.reflect( _normal );\r\n\t\tvirtualCamera.lookAt( _target );\r\n\r\n\t\tvirtualCamera.near = camera.near;\r\n\t\tvirtualCamera.far = camera.far;\r\n\r\n\t\tvirtualCamera.updateMatrixWorld();\r\n\t\tvirtualCamera.projectionMatrix.copy( camera.projectionMatrix );\r\n\r\n\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\r\n\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\r\n\t\t_reflectorPlane.setFromNormalAndCoplanarPoint( _normal, _reflectorWorldPosition );\r\n\t\t_reflectorPlane.applyMatrix4( virtualCamera.matrixWorldInverse );\r\n\r\n\t\tclipPlane.set( _reflectorPlane.normal.x, _reflectorPlane.normal.y, _reflectorPlane.normal.z, _reflectorPlane.constant );\r\n\r\n\t\tconst projectionMatrix = virtualCamera.projectionMatrix;\r\n\r\n\t\t_q.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\r\n\t\t_q.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\r\n\t\t_q.z = - 1.0;\r\n\t\t_q.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\r\n\r\n\t\t// Calculate the scaled plane vector\r\n\t\tclipPlane.multiplyScalar( 1.0 / clipPlane.dot( _q ) );\r\n\r\n\t\tconst clipBias = 0;\r\n\r\n\t\t// Replacing the third row of the projection matrix\r\n\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\r\n\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\r\n\t\tprojectionMatrix.elements[ 10 ] = ( renderer.coordinateSystem === WebGPUCoordinateSystem ) ? ( clipPlane.z - clipBias ) : ( clipPlane.z + 1.0 - clipBias );\r\n\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\r\n\r\n\t\t//\r\n\r\n\t\tthis.textureNode.value = renderTarget.texture;\r\n\r\n\t\tif ( this.depth === true ) {\r\n\r\n\t\t\tthis.textureNode.getDepthNode().value = renderTarget.depthTexture;\r\n\r\n\t\t}\r\n\r\n\t\tmaterial.visible = false;\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\t\tconst currentAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.setMRT( null );\r\n\t\trenderer.setRenderTarget( renderTarget );\r\n\t\trenderer.autoClear = true;\r\n\r\n\t\tif ( needsClear ) {\r\n\r\n\t\t\trenderer.clear();\r\n\r\n\t\t\tthis.hasOutput = false;\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderer.render( scene, virtualCamera );\r\n\r\n\t\t\tthis.hasOutput = true;\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setMRT( currentMRT );\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.autoClear = currentAutoClear;\r\n\r\n\t\tmaterial.visible = true;\r\n\r\n\t\t_inReflector = false;\r\n\r\n\t\tthis.forceUpdate = false;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * TSL function for creating a reflector node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Object} [parameters={}] - An object holding configuration parameters.\r\n * @param {Object3D} [parameters.target=new Object3D()] - The 3D object the reflector is linked to.\r\n * @param {number} [parameters.resolution=1] - The resolution scale.\r\n * @param {boolean} [parameters.generateMipmaps=false] - Whether mipmaps should be generated or not.\r\n * @param {boolean} [parameters.bounces=true] - Whether reflectors can render other reflector nodes or not.\r\n * @param {boolean} [parameters.depth=false] - Whether depth data should be generated or not.\r\n * @param {TextureNode} [parameters.defaultTexture] - The default texture node.\r\n * @param {ReflectorBaseNode} [parameters.reflector] - The reflector base node.\r\n * @returns {ReflectorNode}\r\n */\r\nexport const reflector = ( parameters ) => nodeObject( new ReflectorNode( parameters ) );\r\n\r\nexport default ReflectorNode;\r\n", "import { Color } from '../math/Color.js';\r\nimport { EventDispatcher } from '../core/EventDispatcher.js';\r\nimport { FrontSide, NormalBlending, LessEqualDepth, AddEquation, OneMinusSrcAlphaFactor, SrcAlphaFactor, AlwaysStencilFunc, KeepStencilOp } from '../constants.js';\r\nimport { generateUUID } from '../math/MathUtils.js';\r\n\r\nlet _materialId = 0;\r\n\r\n/**\r\n * Abstract base class for materials.\r\n *\r\n * Materials define the appearance of renderable 3D objects.\r\n *\r\n * @abstract\r\n * @augments EventDispatcher\r\n */\r\nclass Material extends EventDispatcher {\r\n\r\n\t/**\r\n\t * Constructs a new material.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isMaterial = true;\r\n\r\n\t\t/**\r\n\t\t * The ID of the material.\r\n\t\t *\r\n\t\t * @name Material#id\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tObject.defineProperty( this, 'id', { value: _materialId ++ } );\r\n\r\n\t\t/**\r\n\t\t * The UUID of the material.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.uuid = generateUUID();\r\n\r\n\t\t/**\r\n\t\t * The name of the material.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.name = '';\r\n\r\n\t\t/**\r\n\t\t * The type property is used for detecting the object type\r\n\t\t * in context of serialization/deserialization.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.type = 'Material';\r\n\r\n\t\t/**\r\n\t\t * Defines the blending type of the material.\r\n\t\t *\r\n\t\t * It must be set to `CustomBlending` if custom blending properties like\r\n\t\t * {@link Material#blendSrc}, {@link Material#blendDst} or {@link Material#blendEquation}\r\n\t\t * should have any effect.\r\n\t\t *\r\n\t\t * @type {(NoBlending|NormalBlending|AdditiveBlending|SubtractiveBlending|MultiplyBlending|CustomBlending)}\r\n\t\t * @default NormalBlending\r\n\t\t */\r\n\t\tthis.blending = NormalBlending;\r\n\r\n\t\t/**\r\n\t\t * Defines which side of faces will be rendered - front, back or both.\r\n\t\t *\r\n\t\t * @type {(FrontSide|BackSide|DoubleSide)}\r\n\t\t * @default FrontSide\r\n\t\t */\r\n\t\tthis.side = FrontSide;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, vertex colors should be used.\r\n\t\t *\r\n\t\t * The engine supports RGB and RGBA vertex colors depending on whether a three (RGB) or\r\n\t\t * four (RGBA) component color buffer attribute is used.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.vertexColors = false;\r\n\r\n\t\t/**\r\n\t\t * Defines how transparent the material is.\r\n\t\t * A value of `0.0` indicates fully transparent, `1.0` is fully opaque.\r\n\t\t *\r\n\t\t * If the {@link Material#transparent} is not set to `true`,\r\n\t\t * the material will remain fully opaque and this value will only affect its color.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.opacity = 1;\r\n\r\n\t\t/**\r\n\t\t * Defines whether this material is transparent. This has an effect on\r\n\t\t * rendering as transparent objects need special treatment and are rendered\r\n\t\t * after non-transparent objects.\r\n\t\t *\r\n\t\t * When set to true, the extent to which the material is transparent is\r\n\t\t * controlled by {@link Material#opacity}.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.transparent = false;\r\n\r\n\t\t/**\r\n\t\t * Enables alpha hashed transparency, an alternative to {@link Material#transparent} or\r\n\t\t * {@link Material#alphaTest}. The material will not be rendered if opacity is lower than\r\n\t\t * a random threshold. Randomization introduces some grain or noise, but approximates alpha\r\n\t\t * blending without the associated problems of sorting. Using TAA can reduce the resulting noise.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.alphaHash = false;\r\n\r\n\t\t/**\r\n\t\t * Defines the blending source factor.\r\n\t\t *\r\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\r\n\t\t * @default SrcAlphaFactor\r\n\t\t */\r\n\t\tthis.blendSrc = SrcAlphaFactor;\r\n\r\n\t\t/**\r\n\t\t * Defines the blending destination factor.\r\n\t\t *\r\n\t\t * @type {(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\r\n\t\t * @default OneMinusSrcAlphaFactor\r\n\t\t */\r\n\t\tthis.blendDst = OneMinusSrcAlphaFactor;\r\n\r\n\t\t/**\r\n\t\t * Defines the blending equation.\r\n\t\t *\r\n\t\t * @type {(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\r\n\t\t * @default AddEquation\r\n\t\t */\r\n\t\tthis.blendEquation = AddEquation;\r\n\r\n\t\t/**\r\n\t\t * Defines the blending source alpha factor.\r\n\t\t *\r\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.blendSrcAlpha = null;\r\n\r\n\t\t/**\r\n\t\t * Defines the blending destination alpha factor.\r\n\t\t *\r\n\t\t * @type {?(ZeroFactor|OneFactor|SrcColorFactor|OneMinusSrcColorFactor|SrcAlphaFactor|OneMinusSrcAlphaFactor|DstAlphaFactor|OneMinusDstAlphaFactor|DstColorFactor|OneMinusDstColorFactor|SrcAlphaSaturateFactor|ConstantColorFactor|OneMinusConstantColorFactor|ConstantAlphaFactor|OneMinusConstantAlphaFactor)}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.blendDstAlpha = null;\r\n\r\n\t\t/**\r\n\t\t * Defines the blending equation of the alpha channel.\r\n\t\t *\r\n\t\t * @type {?(AddEquation|SubtractEquation|ReverseSubtractEquation|MinEquation|MaxEquation)}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.blendEquationAlpha = null;\r\n\r\n\t\t/**\r\n\t\t * Represents the RGB values of the constant blend color.\r\n\t\t *\r\n\t\t * This property has only an effect when using custom blending with `ConstantColor` or `OneMinusConstantColor`.\r\n\t\t *\r\n\t\t * @type {Color}\r\n\t\t * @default (0,0,0)\r\n\t\t */\r\n\t\tthis.blendColor = new Color( 0, 0, 0 );\r\n\r\n\t\t/**\r\n\t\t * Represents the alpha value of the constant blend color.\r\n\t\t *\r\n\t\t * This property has only an effect when using custom blending with `ConstantAlpha` or `OneMinusConstantAlpha`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.blendAlpha = 0;\r\n\r\n\t\t/**\r\n\t\t * Defines the depth function.\r\n\t\t *\r\n\t\t * @type {(NeverDepth|AlwaysDepth|LessDepth|LessEqualDepth|EqualDepth|GreaterEqualDepth|GreaterDepth|NotEqualDepth)}\r\n\t\t * @default LessEqualDepth\r\n\t\t */\r\n\t\tthis.depthFunc = LessEqualDepth;\r\n\r\n\t\t/**\r\n\t\t * Whether to have depth test enabled when rendering this material.\r\n\t\t * When the depth test is disabled, the depth write will also be implicitly disabled.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.depthTest = true;\r\n\r\n\t\t/**\r\n\t\t * Whether rendering this material has any effect on the depth buffer.\r\n\t\t *\r\n\t\t * When drawing 2D overlays it can be useful to disable the depth writing in\r\n\t\t * order to layer several things together without creating z-index artifacts.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.depthWrite = true;\r\n\r\n\t\t/**\r\n\t\t * The bit mask to use when writing to the stencil buffer.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0xff\r\n\t\t */\r\n\t\tthis.stencilWriteMask = 0xff;\r\n\r\n\t\t/**\r\n\t\t * The stencil comparison function to use.\r\n\t\t *\r\n\t\t * @type {NeverStencilFunc|LessStencilFunc|EqualStencilFunc|LessEqualStencilFunc|GreaterStencilFunc|NotEqualStencilFunc|GreaterEqualStencilFunc|AlwaysStencilFunc}\r\n\t\t * @default AlwaysStencilFunc\r\n\t\t */\r\n\t\tthis.stencilFunc = AlwaysStencilFunc;\r\n\r\n\t\t/**\r\n\t\t * The value to use when performing stencil comparisons or stencil operations.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.stencilRef = 0;\r\n\r\n\t\t/**\r\n\t\t * The bit mask to use when comparing against the stencil buffer.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0xff\r\n\t\t */\r\n\t\tthis.stencilFuncMask = 0xff;\r\n\r\n\t\t/**\r\n\t\t * Which stencil operation to perform when the comparison function returns `false`.\r\n\t\t *\r\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\r\n\t\t * @default KeepStencilOp\r\n\t\t */\r\n\t\tthis.stencilFail = KeepStencilOp;\r\n\r\n\t\t/**\r\n\t\t * Which stencil operation to perform when the comparison function returns\r\n\t\t * `true` but the depth test fails.\r\n\t\t *\r\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\r\n\t\t * @default KeepStencilOp\r\n\t\t */\r\n\t\tthis.stencilZFail = KeepStencilOp;\r\n\r\n\t\t/**\r\n\t\t * Which stencil operation to perform when the comparison function returns\r\n\t\t * `true` and the depth test passes.\r\n\t\t *\r\n\t\t * @type {ZeroStencilOp|KeepStencilOp|ReplaceStencilOp|IncrementStencilOp|DecrementStencilOp|IncrementWrapStencilOp|DecrementWrapStencilOp|InvertStencilOp}\r\n\t\t * @default KeepStencilOp\r\n\t\t */\r\n\t\tthis.stencilZPass = KeepStencilOp;\r\n\r\n\t\t/**\r\n\t\t * Whether stencil operations are performed against the stencil buffer. In\r\n\t\t * order to perform writes or comparisons against the stencil buffer this\r\n\t\t * value must be `true`.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.stencilWrite = false;\r\n\r\n\t\t/**\r\n\t\t * User-defined clipping planes specified as THREE.Plane objects in world\r\n\t\t * space. These planes apply to the objects this material is attached to.\r\n\t\t * Points in space whose signed distance to the plane is negative are clipped\r\n\t\t * (not rendered). This requires {@link WebGLRenderer#localClippingEnabled} to\r\n\t\t * be `true`.\r\n\t\t *\r\n\t\t * @type {?Array<Plane>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.clippingPlanes = null;\r\n\r\n\t\t/**\r\n\t\t * Changes the behavior of clipping planes so that only their intersection is\r\n\t\t * clipped, rather than their union.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.clipIntersection = false;\r\n\r\n\t\t/**\r\n\t\t * Defines whether to clip shadows according to the clipping planes specified\r\n\t\t * on this material.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.clipShadows = false;\r\n\r\n\t\t/**\r\n\t\t * Defines which side of faces cast shadows. If `null`, the side casting shadows\r\n\t\t * is determined as follows:\r\n\t\t *\r\n\t\t * - When {@link Material#side} is set to `FrontSide`, the back side cast shadows.\r\n\t\t * - When {@link Material#side} is set to `BackSide`, the front side cast shadows.\r\n\t\t * - When {@link Material#side} is set to `DoubleSide`, both sides cast shadows.\r\n\t\t *\r\n\t\t * @type {?(FrontSide|BackSide|DoubleSide)}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.shadowSide = null;\r\n\r\n\t\t/**\r\n\t\t * Whether to render the material's color.\r\n\t\t *\r\n\t\t * This can be used in conjunction with {@link Object3D#renderOder} to create invisible\r\n\t\t * objects that occlude other objects.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.colorWrite = true;\r\n\r\n\t\t/**\r\n\t\t * Override the renderer's default precision for this material.\r\n\t\t *\r\n\t\t * @type {?('highp'|'mediump'|'lowp')}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.precision = null;\r\n\r\n\t\t/**\r\n\t\t * Whether to use polygon offset or not. When enabled, each fragment's depth value will\r\n\t\t * be offset after it is interpolated from the depth values of the appropriate vertices.\r\n\t\t * The offset is added before the depth test is performed and before the value is written\r\n\t\t * into the depth buffer.\r\n\t\t *\r\n\t\t * Can be useful for rendering hidden-line images, for applying decals to surfaces, and for\r\n\t\t * rendering solids with highlighted edges.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.polygonOffset = false;\r\n\r\n\t\t/**\r\n\t\t * Specifies a scale factor that is used to create a variable depth offset for each polygon.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.polygonOffsetFactor = 0;\r\n\r\n\t\t/**\r\n\t\t * Is multiplied by an implementation-specific value to create a constant depth offset.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.polygonOffsetUnits = 0;\r\n\r\n\t\t/**\r\n\t\t * Whether to apply dithering to the color to remove the appearance of banding.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.dithering = false;\r\n\r\n\t\t/**\r\n\t\t * Whether alpha to coverage should be enabled or not. Can only be used with MSAA-enabled contexts\r\n\t\t * (meaning when the renderer was created with *antialias* parameter set to `true`). Enabling this\r\n\t\t * will smooth aliasing on clip plane edges and alphaTest-clipped edges.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.alphaToCoverage = false;\r\n\r\n\t\t/**\r\n\t\t * Whether to premultiply the alpha (transparency) value.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.premultipliedAlpha = false;\r\n\r\n\t\t/**\r\n\t\t * Whether double-sided, transparent objects should be rendered with a single pass or not.\r\n\t\t *\r\n\t\t * The engine renders double-sided, transparent objects with two draw calls (back faces first,\r\n\t\t * then front faces) to mitigate transparency artifacts. There are scenarios however where this\r\n\t\t * approach produces no quality gains but still doubles draw calls e.g. when rendering flat\r\n\t\t * vegetation like grass sprites. In these cases, set the `forceSinglePass` flag to `true` to\r\n\t\t * disable the two pass rendering to avoid performance issues.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.forceSinglePass = false;\r\n\r\n\t\t/**\r\n\t\t * Whether it's possible to override the material with {@link Scene#overrideMaterial} or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.allowOverride = true;\r\n\r\n\t\t/**\r\n\t\t * Defines whether 3D objects using this material are visible.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.visible = true;\r\n\r\n\t\t/**\r\n\t\t * Defines whether this material is tone mapped according to the renderer's tone mapping setting.\r\n\t\t *\r\n\t\t * It is ignored when rendering to a render target or using post processing or when using\r\n\t\t * `WebGPURenderer`. In all these cases, all materials are honored by tone mapping.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.toneMapped = true;\r\n\r\n\t\t/**\r\n\t\t * An object that can be used to store custom data about the Material. It\r\n\t\t * should not hold references to functions as these will not be cloned.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.userData = {};\r\n\r\n\t\t/**\r\n\t\t * This starts at `0` and counts how many times {@link Material#needsUpdate} is set to `true`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.version = 0;\r\n\r\n\t\tthis._alphaTest = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the alpha value to be used when running an alpha test. The material\r\n\t * will not be rendered if the opacity is lower than this value.\r\n\t *\r\n\t * @type {number}\r\n\t * @readonly\r\n\t * @default 0\r\n\t */\r\n\tget alphaTest() {\r\n\r\n\t\treturn this._alphaTest;\r\n\r\n\t}\r\n\r\n\tset alphaTest( value ) {\r\n\r\n\t\tif ( this._alphaTest > 0 !== value > 0 ) {\r\n\r\n\t\t\tthis.version ++;\r\n\r\n\t\t}\r\n\r\n\t\tthis._alphaTest = value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * An optional callback that is executed immediately before the material is used to render a 3D object.\r\n\t *\r\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\r\n\t *\r\n\t * @param {WebGLRenderer} renderer - The renderer.\r\n\t * @param {Scene} scene - The scene.\r\n\t * @param {Camera} camera - The camera that is used to render the scene.\r\n\t * @param {BufferGeometry} geometry - The 3D object's geometry.\r\n\t * @param {Object3D} object - The 3D object.\r\n\t * @param {Object} group - The geometry group data.\r\n\t */\r\n\tonBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}\r\n\r\n\t/**\r\n\t * An optional callback that is executed immediately before the shader\r\n\t * program is compiled. This function is called with the shader source code\r\n\t * as a parameter. Useful for the modification of built-in materials.\r\n\t *\r\n\t * This method can only be used when rendering with {@link WebGLRenderer}. The\r\n\t * recommended approach when customizing materials is to use `WebGPURenderer` with the new\r\n\t * Node Material system and [TSL]{@link https://github.com/mrdoob/three.js/wiki/Three.js-Shading-Language}.\r\n\t *\r\n\t * @param {{vertexShader:string,fragmentShader:string,uniforms:Object}} shaderobject - The object holds the uniforms and the vertex and fragment shader source.\r\n\t * @param {WebGLRenderer} renderer - A reference to the renderer.\r\n\t */\r\n\tonBeforeCompile( /* shaderobject, renderer */ ) {}\r\n\r\n\t/**\r\n\t * In case {@link Material#onBeforeCompile} is used, this callback can be used to identify\r\n\t * values of settings used in `onBeforeCompile()`, so three.js can reuse a cached\r\n\t * shader or recompile the shader for this material as needed.\r\n\t *\r\n\t * This method can only be used when rendering with {@link WebGLRenderer}.\r\n\t *\r\n\t * @return {string} The custom program cache key.\r\n\t */\r\n\tcustomProgramCacheKey() {\r\n\r\n\t\treturn this.onBeforeCompile.toString();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method can be used to set default values from parameter objects.\r\n\t * It is a generic implementation so it can be used with different types\r\n\t * of materials.\r\n\t *\r\n\t * @param {Object} [values] - The material values to set.\r\n\t */\r\n\tsetValues( values ) {\r\n\r\n\t\tif ( values === undefined ) return;\r\n\r\n\t\tfor ( const key in values ) {\r\n\r\n\t\t\tconst newValue = values[ key ];\r\n\r\n\t\t\tif ( newValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst currentValue = this[ key ];\r\n\r\n\t\t\tif ( currentValue === undefined ) {\r\n\r\n\t\t\t\tconsole.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );\r\n\t\t\t\tcontinue;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( currentValue && currentValue.isColor ) {\r\n\r\n\t\t\t\tcurrentValue.set( newValue );\r\n\r\n\t\t\t} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {\r\n\r\n\t\t\t\tcurrentValue.copy( newValue );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis[ key ] = newValue;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes the material into JSON.\r\n\t *\r\n\t * @param {?(Object|string)} meta - An optional value holding meta information about the serialization.\r\n\t * @return {Object} A JSON object representing the serialized material.\r\n\t * @see {@link ObjectLoader#parse}\r\n\t */\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRootObject = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.7,\r\n\t\t\t\ttype: 'Material',\r\n\t\t\t\tgenerator: 'Material.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard Material serialization\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\r\n\t\tif ( this.color && this.color.isColor ) data.color = this.color.getHex();\r\n\r\n\t\tif ( this.roughness !== undefined ) data.roughness = this.roughness;\r\n\t\tif ( this.metalness !== undefined ) data.metalness = this.metalness;\r\n\r\n\t\tif ( this.sheen !== undefined ) data.sheen = this.sheen;\r\n\t\tif ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();\r\n\t\tif ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;\r\n\t\tif ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();\r\n\t\tif ( this.emissiveIntensity !== undefined && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;\r\n\r\n\t\tif ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();\r\n\t\tif ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;\r\n\t\tif ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();\r\n\t\tif ( this.shininess !== undefined ) data.shininess = this.shininess;\r\n\t\tif ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;\r\n\t\tif ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;\r\n\r\n\t\tif ( this.clearcoatMap && this.clearcoatMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {\r\n\r\n\t\t\tdata.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.clearcoatNormalScale = this.clearcoatNormalScale.toArray();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.dispersion !== undefined ) data.dispersion = this.dispersion;\r\n\r\n\t\tif ( this.iridescence !== undefined ) data.iridescence = this.iridescence;\r\n\t\tif ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;\r\n\t\tif ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;\r\n\r\n\t\tif ( this.iridescenceMap && this.iridescenceMap.isTexture ) {\r\n\r\n\t\t\tdata.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {\r\n\r\n\t\t\tdata.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;\r\n\t\tif ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;\r\n\r\n\t\tif ( this.anisotropyMap && this.anisotropyMap.isTexture ) {\r\n\r\n\t\t\tdata.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;\r\n\t\tif ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;\r\n\t\tif ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.lightMap && this.lightMap.isTexture ) {\r\n\r\n\t\t\tdata.lightMap = this.lightMap.toJSON( meta ).uuid;\r\n\t\t\tdata.lightMapIntensity = this.lightMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aoMap && this.aoMap.isTexture ) {\r\n\r\n\t\t\tdata.aoMap = this.aoMap.toJSON( meta ).uuid;\r\n\t\t\tdata.aoMapIntensity = this.aoMapIntensity;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.bumpMap && this.bumpMap.isTexture ) {\r\n\r\n\t\t\tdata.bumpMap = this.bumpMap.toJSON( meta ).uuid;\r\n\t\t\tdata.bumpScale = this.bumpScale;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.normalMap && this.normalMap.isTexture ) {\r\n\r\n\t\t\tdata.normalMap = this.normalMap.toJSON( meta ).uuid;\r\n\t\t\tdata.normalMapType = this.normalMapType;\r\n\t\t\tdata.normalScale = this.normalScale.toArray();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.displacementMap && this.displacementMap.isTexture ) {\r\n\r\n\t\t\tdata.displacementMap = this.displacementMap.toJSON( meta ).uuid;\r\n\t\t\tdata.displacementScale = this.displacementScale;\r\n\t\t\tdata.displacementBias = this.displacementBias;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;\r\n\t\tif ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;\r\n\r\n\t\tif ( this.envMap && this.envMap.isTexture ) {\r\n\r\n\t\t\tdata.envMap = this.envMap.toJSON( meta ).uuid;\r\n\r\n\t\t\tif ( this.combine !== undefined ) data.combine = this.combine;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.envMapRotation !== undefined ) data.envMapRotation = this.envMapRotation.toArray();\r\n\t\tif ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;\r\n\t\tif ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;\r\n\t\tif ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;\r\n\r\n\t\tif ( this.gradientMap && this.gradientMap.isTexture ) {\r\n\r\n\t\t\tdata.gradientMap = this.gradientMap.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.transmission !== undefined ) data.transmission = this.transmission;\r\n\t\tif ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;\r\n\t\tif ( this.thickness !== undefined ) data.thickness = this.thickness;\r\n\t\tif ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;\r\n\t\tif ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;\r\n\t\tif ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();\r\n\r\n\t\tif ( this.size !== undefined ) data.size = this.size;\r\n\t\tif ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;\r\n\t\tif ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;\r\n\r\n\t\tif ( this.blending !== NormalBlending ) data.blending = this.blending;\r\n\t\tif ( this.side !== FrontSide ) data.side = this.side;\r\n\t\tif ( this.vertexColors === true ) data.vertexColors = true;\r\n\r\n\t\tif ( this.opacity < 1 ) data.opacity = this.opacity;\r\n\t\tif ( this.transparent === true ) data.transparent = true;\r\n\r\n\t\tif ( this.blendSrc !== SrcAlphaFactor ) data.blendSrc = this.blendSrc;\r\n\t\tif ( this.blendDst !== OneMinusSrcAlphaFactor ) data.blendDst = this.blendDst;\r\n\t\tif ( this.blendEquation !== AddEquation ) data.blendEquation = this.blendEquation;\r\n\t\tif ( this.blendSrcAlpha !== null ) data.blendSrcAlpha = this.blendSrcAlpha;\r\n\t\tif ( this.blendDstAlpha !== null ) data.blendDstAlpha = this.blendDstAlpha;\r\n\t\tif ( this.blendEquationAlpha !== null ) data.blendEquationAlpha = this.blendEquationAlpha;\r\n\t\tif ( this.blendColor && this.blendColor.isColor ) data.blendColor = this.blendColor.getHex();\r\n\t\tif ( this.blendAlpha !== 0 ) data.blendAlpha = this.blendAlpha;\r\n\r\n\t\tif ( this.depthFunc !== LessEqualDepth ) data.depthFunc = this.depthFunc;\r\n\t\tif ( this.depthTest === false ) data.depthTest = this.depthTest;\r\n\t\tif ( this.depthWrite === false ) data.depthWrite = this.depthWrite;\r\n\t\tif ( this.colorWrite === false ) data.colorWrite = this.colorWrite;\r\n\r\n\t\tif ( this.stencilWriteMask !== 0xff ) data.stencilWriteMask = this.stencilWriteMask;\r\n\t\tif ( this.stencilFunc !== AlwaysStencilFunc ) data.stencilFunc = this.stencilFunc;\r\n\t\tif ( this.stencilRef !== 0 ) data.stencilRef = this.stencilRef;\r\n\t\tif ( this.stencilFuncMask !== 0xff ) data.stencilFuncMask = this.stencilFuncMask;\r\n\t\tif ( this.stencilFail !== KeepStencilOp ) data.stencilFail = this.stencilFail;\r\n\t\tif ( this.stencilZFail !== KeepStencilOp ) data.stencilZFail = this.stencilZFail;\r\n\t\tif ( this.stencilZPass !== KeepStencilOp ) data.stencilZPass = this.stencilZPass;\r\n\t\tif ( this.stencilWrite === true ) data.stencilWrite = this.stencilWrite;\r\n\r\n\t\t// rotation (SpriteMaterial)\r\n\t\tif ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;\r\n\r\n\t\tif ( this.polygonOffset === true ) data.polygonOffset = true;\r\n\t\tif ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;\r\n\t\tif ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;\r\n\r\n\t\tif ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;\r\n\t\tif ( this.dashSize !== undefined ) data.dashSize = this.dashSize;\r\n\t\tif ( this.gapSize !== undefined ) data.gapSize = this.gapSize;\r\n\t\tif ( this.scale !== undefined ) data.scale = this.scale;\r\n\r\n\t\tif ( this.dithering === true ) data.dithering = true;\r\n\r\n\t\tif ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;\r\n\t\tif ( this.alphaHash === true ) data.alphaHash = true;\r\n\t\tif ( this.alphaToCoverage === true ) data.alphaToCoverage = true;\r\n\t\tif ( this.premultipliedAlpha === true ) data.premultipliedAlpha = true;\r\n\t\tif ( this.forceSinglePass === true ) data.forceSinglePass = true;\r\n\r\n\t\tif ( this.wireframe === true ) data.wireframe = true;\r\n\t\tif ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;\r\n\t\tif ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;\r\n\t\tif ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;\r\n\r\n\t\tif ( this.flatShading === true ) data.flatShading = true;\r\n\r\n\t\tif ( this.visible === false ) data.visible = false;\r\n\r\n\t\tif ( this.toneMapped === false ) data.toneMapped = false;\r\n\r\n\t\tif ( this.fog === false ) data.fog = false;\r\n\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRootObject ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new material with copied values from this instance.\r\n\t *\r\n\t * @return {Material} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given material to this instance.\r\n\t *\r\n\t * @param {Material} source - The material to copy.\r\n\t * @return {Material} A reference to this instance.\r\n\t */\r\n\tcopy( source ) {\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\tthis.blending = source.blending;\r\n\t\tthis.side = source.side;\r\n\t\tthis.vertexColors = source.vertexColors;\r\n\r\n\t\tthis.opacity = source.opacity;\r\n\t\tthis.transparent = source.transparent;\r\n\r\n\t\tthis.blendSrc = source.blendSrc;\r\n\t\tthis.blendDst = source.blendDst;\r\n\t\tthis.blendEquation = source.blendEquation;\r\n\t\tthis.blendSrcAlpha = source.blendSrcAlpha;\r\n\t\tthis.blendDstAlpha = source.blendDstAlpha;\r\n\t\tthis.blendEquationAlpha = source.blendEquationAlpha;\r\n\t\tthis.blendColor.copy( source.blendColor );\r\n\t\tthis.blendAlpha = source.blendAlpha;\r\n\r\n\t\tthis.depthFunc = source.depthFunc;\r\n\t\tthis.depthTest = source.depthTest;\r\n\t\tthis.depthWrite = source.depthWrite;\r\n\r\n\t\tthis.stencilWriteMask = source.stencilWriteMask;\r\n\t\tthis.stencilFunc = source.stencilFunc;\r\n\t\tthis.stencilRef = source.stencilRef;\r\n\t\tthis.stencilFuncMask = source.stencilFuncMask;\r\n\t\tthis.stencilFail = source.stencilFail;\r\n\t\tthis.stencilZFail = source.stencilZFail;\r\n\t\tthis.stencilZPass = source.stencilZPass;\r\n\t\tthis.stencilWrite = source.stencilWrite;\r\n\r\n\t\tconst srcPlanes = source.clippingPlanes;\r\n\t\tlet dstPlanes = null;\r\n\r\n\t\tif ( srcPlanes !== null ) {\r\n\r\n\t\t\tconst n = srcPlanes.length;\r\n\t\t\tdstPlanes = new Array( n );\r\n\r\n\t\t\tfor ( let i = 0; i !== n; ++ i ) {\r\n\r\n\t\t\t\tdstPlanes[ i ] = srcPlanes[ i ].clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.clippingPlanes = dstPlanes;\r\n\t\tthis.clipIntersection = source.clipIntersection;\r\n\t\tthis.clipShadows = source.clipShadows;\r\n\r\n\t\tthis.shadowSide = source.shadowSide;\r\n\r\n\t\tthis.colorWrite = source.colorWrite;\r\n\r\n\t\tthis.precision = source.precision;\r\n\r\n\t\tthis.polygonOffset = source.polygonOffset;\r\n\t\tthis.polygonOffsetFactor = source.polygonOffsetFactor;\r\n\t\tthis.polygonOffsetUnits = source.polygonOffsetUnits;\r\n\r\n\t\tthis.dithering = source.dithering;\r\n\r\n\t\tthis.alphaTest = source.alphaTest;\r\n\t\tthis.alphaHash = source.alphaHash;\r\n\t\tthis.alphaToCoverage = source.alphaToCoverage;\r\n\t\tthis.premultipliedAlpha = source.premultipliedAlpha;\r\n\t\tthis.forceSinglePass = source.forceSinglePass;\r\n\r\n\t\tthis.visible = source.visible;\r\n\r\n\t\tthis.toneMapped = source.toneMapped;\r\n\r\n\t\tthis.userData = JSON.parse( JSON.stringify( source.userData ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever this instance is no longer used in your app.\r\n\t *\r\n\t * @fires Material#dispose\r\n\t */\r\n\tdispose() {\r\n\r\n\t\t/**\r\n\t\t * Fires when the material has been disposed of.\r\n\t\t *\r\n\t\t * @event Material#dispose\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setting this property to `true` indicates the engine the material\r\n\t * needs to be recompiled.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @default false\r\n\t * @param {boolean} value\r\n\t */\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.version ++;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Material };\r\n", "import { Euler } from '../../math/Euler.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\n\r\nconst _e1 = /*@__PURE__*/ new Euler();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\n\r\n/**\r\n * TSL object that represents the refraction ratio of the material used for rendering the current object.\r\n *\r\n * @tsl\r\n * @type {UniformNode<float>}\r\n */\r\nexport const materialRefractionRatio = /*@__PURE__*/ uniform( 0 ).onReference( ( { material } ) => material ).onObjectUpdate( ( { material } ) => material.refractionRatio );\r\n\r\n/**\r\n * TSL object that represents the intensity of environment maps of PBR materials.\r\n * When `material.envMap` is set, the value is `material.envMapIntensity` otherwise `scene.environmentIntensity`.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialEnvIntensity = /*@__PURE__*/ uniform( 1 ).onReference( ( { material } ) => material ).onObjectUpdate( function ( { material, scene } ) {\r\n\r\n\treturn material.envMap ? material.envMapIntensity : scene.environmentIntensity;\r\n\r\n} );\r\n\r\n/**\r\n * TSL object that represents the rotation of environment maps.\r\n * When `material.envMap` is set, the value is `material.envMapRotation`. `scene.environmentRotation` controls the\r\n * rotation of `scene.environment` instead.\r\n *\r\n * @tsl\r\n * @type {Node<mat4>}\r\n */\r\nexport const materialEnvRotation = /*@__PURE__*/ uniform( new Matrix4() ).onReference( function ( frame ) {\r\n\r\n\treturn frame.material;\r\n\r\n} ).onObjectUpdate( function ( { material, scene } ) {\r\n\r\n\tconst rotation = ( scene.environment !== null && material.envMap === null ) ? scene.environmentRotation : material.envMapRotation;\r\n\r\n\tif ( rotation ) {\r\n\r\n\t\t_e1.copy( rotation );\r\n\r\n\t\t_m1.makeRotationFromEuler( _e1 );\r\n\r\n\t} else {\r\n\r\n\t\t_m1.identity();\r\n\r\n\t}\r\n\r\n\treturn _m1;\r\n\r\n} );\r\n", "import { cameraViewMatrix } from './Camera.js';\r\nimport { normalView } from './Normal.js';\r\nimport { positionViewDirection } from './Position.js';\r\nimport { materialRefractionRatio } from './MaterialProperties.js';\r\n\r\n/**\r\n * The reflect vector in view space.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const reflectView = /*@__PURE__*/ positionViewDirection.negate().reflect( normalView );\r\n\r\n/**\r\n * The refract vector in view space.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const refractView = /*@__PURE__*/ positionViewDirection.negate().refract( normalView, materialRefractionRatio );\r\n\r\n/**\r\n * Used for sampling cube maps when using cube reflection mapping.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const reflectVector = /*@__PURE__*/ reflectView.transformDirection( cameraViewMatrix ).toVar( 'reflectVector' );\r\n\r\n/**\r\n * Used for sampling cube maps when using cube refraction mapping.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const refractVector = /*@__PURE__*/ refractView.transformDirection( cameraViewMatrix ).toVar( 'reflectVector' );\r\n", "import { Texture } from './Texture.js';\r\nimport { CubeReflectionMapping } from '../constants.js';\r\n\r\n/**\r\n * Creates a cube texture made up of six images.\r\n *\r\n * ```js\r\n * const loader = new THREE.CubeTextureLoader();\r\n * loader.setPath( 'textures/cube/pisa/' );\r\n *\r\n * const textureCube = loader.load( [\r\n * \t'px.png', 'nx.png', 'py.png', 'ny.png', 'pz.png', 'nz.png'\r\n * ] );\r\n *\r\n * const material = new THREE.MeshBasicMaterial( { color: 0xffffff, envMap: textureCube } );\r\n * ```\r\n *\r\n * @augments Texture\r\n */\r\nclass CubeTexture extends Texture {\r\n\r\n\t/**\r\n\t * Constructs a new cube texture.\r\n\t *\r\n\t * @param {Array<Image>} [images=[]] - An array holding a image for each side of a cube.\r\n\t * @param {number} [mapping=CubeReflectionMapping] - The texture mapping.\r\n\t * @param {number} [wrapS=ClampToEdgeWrapping] - The wrapS value.\r\n\t * @param {number} [wrapT=ClampToEdgeWrapping] - The wrapT value.\r\n\t * @param {number} [magFilter=LinearFilter] - The mag filter value.\r\n\t * @param {number} [minFilter=LinearMipmapLinearFilter] - The min filter value.\r\n\t * @param {number} [format=RGBAFormat] - The texture format.\r\n\t * @param {number} [type=UnsignedByteType] - The texture type.\r\n\t * @param {number} [anisotropy=Texture.DEFAULT_ANISOTROPY] - The anisotropy value.\r\n\t * @param {string} [colorSpace=NoColorSpace] - The color space value.\r\n\t */\r\n\tconstructor( images = [], mapping = CubeReflectionMapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {\r\n\r\n\t\tsuper( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isCubeTexture = true;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\r\n\t\t * uploaded to the GPU.\r\n\t\t *\r\n\t\t * Overwritten and set to `false` by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.flipY = false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Alias for {@link CubeTexture#image}.\r\n\t *\r\n\t * @type {Array<Image>}\r\n\t */\r\n\tget images() {\r\n\r\n\t\treturn this.image;\r\n\r\n\t}\r\n\r\n\tset images( value ) {\r\n\r\n\t\tthis.image = value;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { CubeTexture };\r\n", "import TextureNode from './TextureNode.js';\r\nimport { reflectVector, refractVector } from './ReflectVector.js';\r\nimport { nodeObject, nodeProxy, vec3 } from '../tsl/TSLBase.js';\r\n\r\nimport { CubeReflectionMapping, CubeRefractionMapping, WebGPUCoordinateSystem } from '../../constants.js';\r\nimport { materialEnvRotation } from './MaterialProperties.js';\r\n\r\nimport { CubeTexture } from '../../textures/CubeTexture.js';\r\n\r\nconst EmptyTexture = /*@__PURE__*/ new CubeTexture();\r\n\r\n/**\r\n * This type of uniform node represents a cube texture.\r\n *\r\n * @augments TextureNode\r\n */\r\nclass CubeTextureNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'CubeTextureNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new cube texture node.\r\n\t *\r\n\t * @param {CubeTexture} value - The cube texture.\r\n\t * @param {?Node<vec3>} [uvNode=null] - The uv node.\r\n\t * @param {?Node<int>} [levelNode=null] - The level node.\r\n\t * @param {?Node<float>} [biasNode=null] - The bias node.\r\n\t */\r\n\tconstructor( value, uvNode = null, levelNode = null, biasNode = null ) {\r\n\r\n\t\tsuper( value, uvNode, levelNode, biasNode );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isCubeTextureNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation to return a fixed value `'cubeTexture'`.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The input type.\r\n\t */\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'cubeTexture';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a default uvs based on the mapping type of the cube texture.\r\n\t *\r\n\t * @return {Node<vec3>} The default uv attribute.\r\n\t */\r\n\tgetDefaultUV() {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( texture.mapping === CubeReflectionMapping ) {\r\n\r\n\t\t\treturn reflectVector;\r\n\r\n\t\t} else if ( texture.mapping === CubeRefractionMapping ) {\r\n\r\n\t\t\treturn refractVector;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.CubeTextureNode: Mapping \"%s\" not supported.', texture.mapping );\r\n\r\n\t\t\treturn vec3( 0, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten with an empty implementation since the `updateMatrix` flag is ignored\r\n\t * for cube textures. The uv transformation matrix is not applied to cube textures.\r\n\t *\r\n\t * @param {boolean} value - The update toggle.\r\n\t */\r\n\tsetUpdateMatrix( /*updateMatrix*/ ) { } // Ignore .updateMatrix for CubeTextureNode\r\n\r\n\t/**\r\n\t * Setups the uv node. Depending on the backend as well as the texture type, it might be necessary\r\n\t * to modify the uv node for correct sampling.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {Node} uvNode - The uv node to setup.\r\n\t * @return {Node} The updated uv node.\r\n\t */\r\n\tsetupUV( builder, uvNode ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( builder.renderer.coordinateSystem === WebGPUCoordinateSystem || ! texture.isRenderTargetTexture ) {\r\n\r\n\t\t\tuvNode = vec3( uvNode.x.negate(), uvNode.yz );\r\n\r\n\t\t}\r\n\r\n\t\treturn materialEnvRotation.mul( uvNode );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the uv code snippet.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {Node} cubeUV - The uv node to generate code for.\r\n\t * @return {string} The generated code snippet.\r\n\t */\r\n\tgenerateUV( builder, cubeUV ) {\r\n\r\n\t\treturn cubeUV.build( builder, 'vec3' );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CubeTextureNode;\r\n\r\n/**\r\n * TSL function for creating a cube texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {CubeTexture} value - The cube texture.\r\n * @param {?Node<vec3>} [uvNode=null] - The uv node.\r\n * @param {?Node<int>} [levelNode=null] - The level node.\r\n * @param {?Node<float>} [biasNode=null] - The bias node.\r\n * @returns {CubeTextureNode}\r\n */\r\nexport const cubeTextureBase = /*@__PURE__*/ nodeProxy( CubeTextureNode ).setParameterLength( 1, 4 ).setName( 'cubeTexture' );\r\n\r\n/**\r\n * TSL function for creating a cube texture uniform node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?CubeTexture|CubeTextureNode} [value=EmptyTexture] - The cube texture.\r\n * @param {?Node<vec3>} [uvNode=null] - The uv node.\r\n * @param {?Node<int>} [levelNode=null] - The level node.\r\n * @param {?Node<float>} [biasNode=null] - The bias node.\r\n * @returns {CubeTextureNode}\r\n */\r\nexport const cubeTexture = ( value = EmptyTexture, uvNode = null, levelNode = null, biasNode = null ) => {\r\n\r\n\tlet textureNode;\r\n\r\n\tif ( value && value.isCubeTextureNode === true ) {\r\n\r\n\t\ttextureNode = nodeObject( value.clone() );\r\n\t\ttextureNode.referenceNode = value.getSelf(); // Ensure the reference is set to the original node\r\n\r\n\t\tif ( uvNode !== null ) textureNode.uvNode = nodeObject( uvNode );\r\n\t\tif ( levelNode !== null ) textureNode.levelNode = nodeObject( levelNode );\r\n\t\tif ( biasNode !== null ) textureNode.biasNode = nodeObject( biasNode );\r\n\r\n\t} else {\r\n\r\n\t\ttextureNode = cubeTextureBase( value, uvNode, levelNode, biasNode );\r\n\r\n\t}\r\n\r\n\treturn textureNode;\r\n\r\n};\r\n\r\n/**\r\n * TSL function for creating a uniform cube texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?CubeTexture} [value=EmptyTexture] - The cube texture.\r\n * @returns {CubeTextureNode}\r\n */\r\nexport const uniformCubeTexture = ( value = EmptyTexture ) => cubeTextureBase( value );\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { texture } from './TextureNode.js';\r\nimport { cubeTexture } from './CubeTextureNode.js';\r\nimport { buffer } from './BufferNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\nimport { uniformArray } from './UniformArrayNode.js';\r\nimport ArrayElementNode from '../utils/ArrayElementNode.js';\r\n\r\n// TODO: Avoid duplicated code and ues only ReferenceBaseNode or ReferenceNode\r\n\r\n/**\r\n * This class is only relevant if the referenced property is array-like.\r\n * In this case, `ReferenceElementNode` allows to refer to a specific\r\n * element inside the data structure via an index.\r\n *\r\n * @augments ArrayElementNode\r\n */\r\nclass ReferenceElementNode extends ArrayElementNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReferenceElementNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new reference element node.\r\n\t *\r\n\t * @param {?ReferenceNode} referenceNode - The reference node.\r\n\t * @param {Node} indexNode - The index node that defines the element access.\r\n\t */\r\n\tconstructor( referenceNode, indexNode ) {\r\n\r\n\t\tsuper( referenceNode, indexNode );\r\n\r\n\t\t/**\r\n\t\t * Similar to {@link ReferenceNode#reference}, an additional\r\n\t\t * property references to the current node.\r\n\t\t *\r\n\t\t * @type {?ReferenceNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.referenceNode = referenceNode;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isReferenceElementNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from\r\n\t * the uniform type of the reference node.\r\n\t *\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType() {\r\n\r\n\t\treturn this.referenceNode.uniformType;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst snippet = super.generate( builder );\r\n\t\tconst arrayType = this.referenceNode.getNodeType();\r\n\t\tconst elementType = this.getNodeType();\r\n\r\n\t\treturn builder.format( snippet, arrayType, elementType );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * This type of node establishes a reference to a property of another object.\r\n * In this way, the value of the node is automatically linked to the value of\r\n * referenced object. Reference nodes internally represent the linked value\r\n * as a uniform.\r\n *\r\n * @augments Node\r\n */\r\nclass ReferenceNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ReferenceNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new reference node.\r\n\t *\r\n\t * @param {string} property - The name of the property the node refers to.\r\n\t * @param {string} uniformType - The uniform type that should be used to represent the property value.\r\n\t * @param {?Object} [object=null] - The object the property belongs to.\r\n\t * @param {?number} [count=null] - When the linked property is an array-like, this parameter defines its length.\r\n\t */\r\n\tconstructor( property, uniformType, object = null, count = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The name of the property the node refers to.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.property = property;\r\n\r\n\t\t/**\r\n\t\t * The uniform type that should be used to represent the property value.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.uniformType = uniformType;\r\n\r\n\t\t/**\r\n\t\t * The object the property belongs to.\r\n\t\t *\r\n\t\t * @type {?Object}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.object = object;\r\n\r\n\t\t/**\r\n\t\t * When the linked property is an array, this parameter defines its length.\r\n\t\t *\r\n\t\t * @type {?number}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.count = count;\r\n\r\n\t\t/**\r\n\t\t * The property name might have dots so nested properties can be referred.\r\n\t\t * The hierarchy of the names is stored inside this array.\r\n\t\t *\r\n\t\t * @type {Array<string>}\r\n\t\t */\r\n\t\tthis.properties = property.split( '.' );\r\n\r\n\t\t/**\r\n\t\t * Points to the current referred object. This property exists next to {@link ReferenceNode#object}\r\n\t\t * since the final reference might be updated from calling code.\r\n\t\t *\r\n\t\t * @type {?Object}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.reference = object;\r\n\r\n\t\t/**\r\n\t\t * The uniform node that holds the value of the reference node.\r\n\t\t *\r\n\t\t * @type {UniformNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.node = null;\r\n\r\n\t\t/**\r\n\t\t * The uniform group of the internal uniform.\r\n\t\t *\r\n\t\t * @type {UniformGroupNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.group = null;\r\n\r\n\t\t/**\r\n\t\t * An optional label of the internal uniform node.\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.name = null;\r\n\r\n\t\t/**\r\n\t\t * Overwritten since reference nodes are updated per object.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'object'\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * When the referred property is array-like, this method can be used\r\n\t * to access elements via an index node.\r\n\t *\r\n\t * @param {IndexNode} indexNode - indexNode.\r\n\t * @return {ReferenceElementNode} A reference to an element.\r\n\t */\r\n\telement( indexNode ) {\r\n\r\n\t\treturn nodeObject( new ReferenceElementNode( this, nodeObject( indexNode ) ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the uniform group for this reference node.\r\n\t *\r\n\t * @param {UniformGroupNode} group - The uniform group to set.\r\n\t * @return {ReferenceNode} A reference to this node.\r\n\t */\r\n\tsetGroup( group ) {\r\n\r\n\t\tthis.group = group;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the label for the internal uniform.\r\n\t *\r\n\t * @param {string} name - The label to set.\r\n\t * @return {ReferenceNode} A reference to this node.\r\n\t */\r\n\tlabel( name ) {\r\n\r\n\t\tthis.name = name;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the node type which automatically defines the internal\r\n\t * uniform type.\r\n\t *\r\n\t * @param {string} uniformType - The type to set.\r\n\t */\r\n\tsetNodeType( uniformType ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( this.count !== null ) {\r\n\r\n\t\t\tnode = buffer( null, uniformType, this.count );\r\n\r\n\t\t} else if ( Array.isArray( this.getValueFromReference() ) ) {\r\n\r\n\t\t\tnode = uniformArray( null, uniformType );\r\n\r\n\t\t} else if ( uniformType === 'texture' ) {\r\n\r\n\t\t\tnode = texture( null );\r\n\r\n\t\t} else if ( uniformType === 'cubeTexture' ) {\r\n\r\n\t\t\tnode = cubeTexture( null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tnode = uniform( null, uniformType );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.group !== null ) {\r\n\r\n\t\t\tnode.setGroup( this.group );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.name !== null ) node.label( this.name );\r\n\r\n\t\tthis.node = node.getSelf();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from\r\n\t * the type of the reference node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\tif ( this.node === null ) {\r\n\r\n\t\t\tthis.updateReference( builder );\r\n\t\t\tthis.updateValue();\r\n\r\n\t\t}\r\n\r\n\t\treturn this.node.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the property value from the given referred object.\r\n\t *\r\n\t * @param {Object} [object=this.reference] - The object to retrieve the property value from.\r\n\t * @return {any} The value.\r\n\t */\r\n\tgetValueFromReference( object = this.reference ) {\r\n\r\n\t\tconst { properties } = this;\r\n\r\n\t\tlet value = object[ properties[ 0 ] ];\r\n\r\n\t\tfor ( let i = 1; i < properties.length; i ++ ) {\r\n\r\n\t\t\tvalue = value[ properties[ i ] ];\r\n\r\n\t\t}\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Allows to update the reference based on the given state. The state is only\r\n\t * evaluated {@link ReferenceNode#object} is not set.\r\n\t *\r\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state.\r\n\t * @return {Object} The updated reference.\r\n\t */\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.object !== null ? this.object : state.object;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The output of the reference node is the internal uniform node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {UniformNode} The output node.\r\n\t */\r\n\tsetup( /* builder */ ) {\r\n\r\n\t\tthis.updateValue();\r\n\r\n\t\treturn this.node;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten to update the internal uniform value.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tthis.updateValue();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Retrieves the value from the referred object property and uses it\r\n\t * to updated the internal uniform.\r\n\t */\r\n\tupdateValue() {\r\n\r\n\t\tif ( this.node === null ) this.setNodeType( this.uniformType );\r\n\r\n\t\tconst value = this.getValueFromReference();\r\n\r\n\t\tif ( Array.isArray( value ) ) {\r\n\r\n\t\t\tthis.node.array = value;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.node.value = value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ReferenceNode;\r\n\r\n/**\r\n * TSL function for creating a reference node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The name of the property the node refers to.\r\n * @param {string} type - The uniform type that should be used to represent the property value.\r\n * @param {?Object} [object] - The object the property belongs to.\r\n * @returns {ReferenceNode}\r\n */\r\nexport const reference = ( name, type, object ) => nodeObject( new ReferenceNode( name, type, object ) );\r\n\r\n/**\r\n * TSL function for creating a reference node. Use this function if you want need a reference\r\n * to an array-like property that should be represented as a uniform buffer.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The name of the property the node refers to.\r\n * @param {string} type - The uniform type that should be used to represent the property value.\r\n * @param {number} count - The number of value inside the array-like object.\r\n * @param {Object} object - An array-like object the property belongs to.\r\n * @returns {ReferenceNode}\r\n */\r\nexport const referenceBuffer = ( name, type, count, object ) => nodeObject( new ReferenceNode( name, type, object, count ) );\r\n", "import ReferenceNode from './ReferenceNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * This node is a special type of reference node which is intended\r\n * for linking material properties with node values.\r\n * ```js\r\n * const opacityNode = materialReference( 'opacity', 'float', material );\r\n * ```\r\n * When changing `material.opacity`, the node value of `opacityNode` will\r\n * automatically be updated.\r\n *\r\n * @augments ReferenceNode\r\n */\r\nclass MaterialReferenceNode extends ReferenceNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MaterialReferenceNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new material reference node.\r\n\t *\r\n\t * @param {string} property - The name of the property the node refers to.\r\n\t * @param {string} inputType - The uniform type that should be used to represent the property value.\r\n\t * @param {?Material} [material=null] - The material the property belongs to. When no material is set,\r\n\t * the node refers to the material of the current rendered object.\r\n\t */\r\n\tconstructor( property, inputType, material = null ) {\r\n\r\n\t\tsuper( property, inputType, material );\r\n\r\n\t\t/**\r\n\t\t * The material the property belongs to. When no material is set,\r\n\t\t * the node refers to the material of the current rendered object.\r\n\t\t *\r\n\t\t * @type {?Material}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.material = material;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isMaterialReferenceNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the reference based on the given state. The state is only evaluated\r\n\t * {@link MaterialReferenceNode#material} is not set.\r\n\t *\r\n\t * @param {(NodeFrame|NodeBuilder)} state - The current state.\r\n\t * @return {Object} The updated reference.\r\n\t */\r\n\tupdateReference( state ) {\r\n\r\n\t\tthis.reference = this.material !== null ? this.material : state.material;\r\n\r\n\t\treturn this.reference;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MaterialReferenceNode;\r\n\r\n/**\r\n * TSL function for creating a material reference node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The name of the property the node refers to.\r\n * @param {string} type - The uniform type that should be used to represent the property value.\r\n * @param {?Material} [material=null] - The material the property belongs to.\r\n * When no material is set, the node refers to the material of the current rendered object.\r\n * @returns {MaterialReferenceNode}\r\n */\r\nexport const materialReference = ( name, type, material = null ) => nodeObject( new MaterialReferenceNode( name, type, material ) );\r\n", "import { uv as getUV } from './UV.js';\r\nimport { positionView } from './Position.js';\r\nimport { normalView } from './Normal.js';\r\n\r\n// Normal Mapping Without Precomputed Tangents\r\n// http://www.thetenthplanet.de/archives/1180\r\n\r\nconst uv = getUV();\r\n\r\nconst q0 = positionView.dFdx();\r\nconst q1 = positionView.dFdy();\r\nconst st0 = uv.dFdx();\r\nconst st1 = uv.dFdy();\r\n\r\nconst N = normalView;\r\n\r\nconst q1perp = q1.cross( N );\r\nconst q0perp = N.cross( q0 );\r\n\r\nconst T = q1perp.mul( st0.x ).add( q0perp.mul( st1.x ) );\r\nconst B = q1perp.mul( st0.y ).add( q0perp.mul( st1.y ) );\r\n\r\nconst det = T.dot( T ).max( B.dot( B ) );\r\nconst scale = det.equal( 0.0 ).select( 0.0, det.inverseSqrt() );\r\n\r\n/**\r\n * Tangent vector in view space, computed dynamically from geometry and UV derivatives.\r\n * Useful for normal mapping without precomputed tangents.\r\n *\r\n * Reference: http://www.thetenthplanet.de/archives/1180\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const tangentViewFrame = /*@__PURE__*/ T.mul( scale ).toVar( 'tangentViewFrame' );\r\n\r\n/**\r\n * Bitangent vector in view space, computed dynamically from geometry and UV derivatives.\r\n * Complements the tangentViewFrame for constructing the tangent space basis.\r\n *\r\n * Reference: http://www.thetenthplanet.de/archives/1180\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const bitangentViewFrame = /*@__PURE__*/ B.mul( scale ).toVar( 'bitangentViewFrame' );\r\n", "import { attribute } from '../core/AttributeNode.js';\r\nimport { cameraViewMatrix } from './Camera.js';\r\nimport { modelViewMatrix } from './ModelNode.js';\r\nimport { Fn, vec4 } from '../tsl/TSLBase.js';\r\nimport { tangentViewFrame } from './TangentUtils.js';\r\nimport { directionToFaceDirection } from '../display/FrontFacingNode.js';\r\n\r\n/**\r\n * TSL object that represents the tangent attribute of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec4>}\r\n */\r\nexport const tangentGeometry = /*@__PURE__*/ Fn( ( builder ) => {\r\n\r\n\tif ( builder.geometry.hasAttribute( 'tangent' ) === false ) {\r\n\r\n\t\tbuilder.geometry.computeTangents();\r\n\r\n\t}\r\n\r\n\treturn attribute( 'tangent', 'vec4' );\r\n\r\n} )();\r\n\r\n/**\r\n * TSL object that represents the vertex tangent in local space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const tangentLocal = /*@__PURE__*/ tangentGeometry.xyz.toVar( 'tangentLocal' );\r\n\r\n/**\r\n * TSL object that represents the vertex tangent in view space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const tangentView = /*@__PURE__*/ ( Fn( ( { subBuildFn, geometry, material } ) => {\r\n\r\n\tlet node;\r\n\r\n\tif ( subBuildFn === 'VERTEX' || geometry.hasAttribute( 'tangent' ) ) {\r\n\r\n\t\tnode = modelViewMatrix.mul( vec4( tangentLocal, 0 ) ).xyz.toVarying( 'v_tangentView' ).normalize();\r\n\r\n\t} else {\r\n\r\n\t\tnode = tangentViewFrame;\r\n\r\n\t}\r\n\r\n\tif ( material.flatShading !== true ) {\r\n\r\n\t\tnode = directionToFaceDirection( node );\r\n\r\n\t}\r\n\r\n\treturn node;\r\n\r\n}, 'vec3' ).once( [ 'NORMAL', 'VERTEX' ] ) )().toVar( 'tangentView' );\r\n\r\n/**\r\n * TSL object that represents the vertex tangent in world space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const tangentWorld = /*@__PURE__*/ tangentView.transformDirection( cameraViewMatrix ).toVarying( 'v_tangentWorld' ).normalize().toVar( 'tangentWorld' );\r\n", "import { Fn } from '../tsl/TSLCore.js';\r\nimport { normalGeometry, normalLocal, normalView, normalWorld } from './Normal.js';\r\nimport { tangentGeometry, tangentLocal, tangentView, tangentWorld } from './Tangent.js';\r\nimport { bitangentViewFrame } from './TangentUtils.js';\r\nimport { directionToFaceDirection } from '../display/FrontFacingNode.js';\r\n\r\n/**\r\n * Returns the bitangent node and assigns it to a varying if the material is not flat shaded.\r\n *\r\n * @tsl\r\n * @private\r\n * @param {Node<vec3>} crossNormalTangent - The cross product of the normal and tangent vectors.\r\n * @param {string} varyingName - The name of the varying to assign the bitangent to.\r\n * @returns {Node<vec3>} The bitangent node.\r\n */\r\nconst getBitangent = /*@__PURE__*/ Fn( ( [ crossNormalTangent, varyingName ], { subBuildFn, material } ) => {\r\n\r\n\tlet bitangent = crossNormalTangent.mul( tangentGeometry.w ).xyz;\r\n\r\n\tif ( subBuildFn === 'NORMAL' && material.flatShading !== true ) {\r\n\r\n\t\tbitangent = bitangent.toVarying( varyingName );\r\n\r\n\t}\r\n\r\n\treturn bitangent;\r\n\r\n} ).once( [ 'NORMAL' ] );\r\n\r\n/**\r\n * TSL object that represents the bitangent attribute of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const bitangentGeometry = /*@__PURE__*/ getBitangent( normalGeometry.cross( tangentGeometry ), 'v_bitangentGeometry' ).normalize().toVar( 'bitangentGeometry' );\r\n\r\n/**\r\n * TSL object that represents the vertex bitangent in local space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const bitangentLocal = /*@__PURE__*/ getBitangent( normalLocal.cross( tangentLocal ), 'v_bitangentLocal' ).normalize().toVar( 'bitangentLocal' );\r\n\r\n/**\r\n * TSL object that represents the vertex bitangent in view space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const bitangentView = /*@__PURE__*/ ( Fn( ( { subBuildFn, geometry, material } ) => {\r\n\r\n\tlet node;\r\n\r\n\tif ( subBuildFn === 'VERTEX' || geometry.hasAttribute( 'tangent' ) ) {\r\n\r\n\t\tnode = getBitangent( normalView.cross( tangentView ), 'v_bitangentView' ).normalize();\r\n\r\n\t} else {\r\n\r\n\t\tnode = bitangentViewFrame;\r\n\r\n\t}\r\n\r\n\tif ( material.flatShading !== true ) {\r\n\r\n\t\tnode = directionToFaceDirection( node );\r\n\r\n\t}\r\n\r\n\treturn node;\r\n\r\n}, 'vec3' ).once( [ 'NORMAL', 'VERTEX' ] ) )().toVar( 'bitangentView' );\r\n\r\n/**\r\n * TSL object that represents the vertex bitangent in world space of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const bitangentWorld = /*@__PURE__*/ getBitangent( normalWorld.cross( tangentWorld ), 'v_bitangentWorld' ).normalize().toVar( 'bitangentWorld' );\r\n", "import { normalView } from './Normal.js';\r\nimport { tangentView } from './Tangent.js';\r\nimport { bitangentView } from './Bitangent.js';\r\nimport { Fn, mat3 } from '../tsl/TSLBase.js';\r\nimport { mix } from '../math/MathNode.js';\r\nimport { anisotropy, anisotropyB, roughness } from '../core/PropertyNode.js';\r\nimport { positionViewDirection } from './Position.js';\r\n\r\n/**\r\n * TSL object that represents the TBN matrix in view space.\r\n *\r\n * @tsl\r\n * @type {Node<mat3>}\r\n */\r\nexport const TBNViewMatrix = /*@__PURE__*/ mat3( tangentView, bitangentView, normalView ).toVar( 'TBNViewMatrix' );\r\n\r\n/**\r\n * TSL object that represents the parallax direction.\r\n *\r\n * @tsl\r\n * @type {Node<mat3>}\r\n */\r\nexport const parallaxDirection = /*@__PURE__*/ positionViewDirection.mul( TBNViewMatrix )/*.normalize()*/;\r\n\r\n/**\r\n * TSL function for computing parallax uv coordinates.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2>} uv - A uv node.\r\n * @param {Node<vec2>} scale - A scale node.\r\n * @returns {Node<vec2>} Parallax uv coordinates.\r\n */\r\nexport const parallaxUV = ( uv, scale ) => uv.sub( parallaxDirection.mul( scale ) );\r\n\r\n/**\r\n * TSL function for computing bent normals.\r\n *\r\n * @tsl\r\n * @function\r\n * @returns {Node<vec3>} Bent normals.\r\n */\r\nexport const bentNormalView = /*@__PURE__*/ ( Fn( () => {\r\n\r\n\t// https://google.github.io/filament/Filament.md.html#lighting/imagebasedlights/anisotropy\r\n\r\n\tlet bentNormal = anisotropyB.cross( positionViewDirection );\r\n\tbentNormal = bentNormal.cross( anisotropyB ).normalize();\r\n\tbentNormal = mix( bentNormal, normalView, anisotropy.mul( roughness.oneMinus() ).oneMinus().pow2().pow2() ).normalize();\r\n\r\n\treturn bentNormal;\r\n\r\n} ).once() )();\r\n", "import TempNode from '../core/TempNode.js';\r\n\r\nimport { normalView, transformNormalToView } from '../accessors/Normal.js';\r\nimport { TBNViewMatrix } from '../accessors/AccessorsUtils.js';\r\nimport { nodeProxy, vec3 } from '../tsl/TSLBase.js';\r\n\r\nimport { TangentSpaceNormalMap, ObjectSpaceNormalMap } from '../../constants.js';\r\nimport { directionToFaceDirection } from './FrontFacingNode.js';\r\n\r\n/**\r\n * This class can be used for applying normals maps to materials.\r\n *\r\n * ```js\r\n * material.normalNode = normalMap( texture( normalTex ) );\r\n * ```\r\n *\r\n * @augments TempNode\r\n */\r\nclass NormalMapNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'NormalMapNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new normal map node.\r\n\t *\r\n\t * @param {Node<vec3>} node - Represents the normal map data.\r\n\t * @param {?Node<vec2>} [scaleNode=null] - Controls the intensity of the effect.\r\n\t */\r\n\tconstructor( node, scaleNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\t/**\r\n\t\t * Represents the normal map data.\r\n\t\t *\r\n\t\t * @type {Node<vec3>}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * Controls the intensity of the effect.\r\n\t\t *\r\n\t\t * @type {?Node<vec2>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.scaleNode = scaleNode;\r\n\r\n\t\t/**\r\n\t\t * The normal map type.\r\n\t\t *\r\n\t\t * @type {(TangentSpaceNormalMap|ObjectSpaceNormalMap)}\r\n\t\t * @default TangentSpaceNormalMap\r\n\t\t */\r\n\t\tthis.normalMapType = TangentSpaceNormalMap;\r\n\r\n\t}\r\n\r\n\tsetup( { material } ) {\r\n\r\n\t\tconst { normalMapType, scaleNode } = this;\r\n\r\n\t\tlet normalMap = this.node.mul( 2.0 ).sub( 1.0 );\r\n\r\n\t\tif ( scaleNode !== null ) {\r\n\r\n\t\t\tlet scale = scaleNode;\r\n\r\n\t\t\tif ( material.flatShading === true ) {\r\n\r\n\t\t\t\tscale = directionToFaceDirection( scale );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnormalMap = vec3( normalMap.xy.mul( scale ), normalMap.z );\r\n\r\n\t\t}\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( normalMapType === ObjectSpaceNormalMap ) {\r\n\r\n\t\t\toutput = transformNormalToView( normalMap );\r\n\r\n\t\t} else if ( normalMapType === TangentSpaceNormalMap ) {\r\n\r\n\t\t\toutput = TBNViewMatrix.mul( normalMap ).normalize();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( `THREE.NodeMaterial: Unsupported normal map type: ${ normalMapType }` );\r\n\r\n\t\t\toutput = normalView; // Fallback to default normal view\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NormalMapNode;\r\n\r\n/**\r\n * TSL function for creating a normal map node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} node - Represents the normal map data.\r\n * @param {?Node<vec2>} [scaleNode=null] - Controls the intensity of the effect.\r\n * @returns {NormalMapNode}\r\n */\r\nexport const normalMap = /*@__PURE__*/ nodeProxy( NormalMapNode ).setParameterLength( 1, 2 );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport { normalView } from '../accessors/Normal.js';\r\nimport { positionView } from '../accessors/Position.js';\r\nimport { faceDirection } from './FrontFacingNode.js';\r\nimport { Fn, nodeProxy, float, vec2 } from '../tsl/TSLBase.js';\r\n\r\n// Bump Mapping Unparametrized Surfaces on the GPU by Morten S. Mikkelsen\r\n// https://mmikk.github.io/papers3d/mm_sfgrad_bump.pdf\r\n\r\nconst dHdxy_fwd = Fn( ( { textureNode, bumpScale } ) => {\r\n\r\n\t// It's used to preserve the same TextureNode instance\r\n\tconst sampleTexture = ( callback ) => textureNode.cache().context( { getUV: ( texNode ) => callback( texNode.uvNode || uv() ), forceUVContext: true } );\r\n\r\n\tconst Hll = float( sampleTexture( ( uvNode ) => uvNode ) );\r\n\r\n\treturn vec2(\r\n\t\tfloat( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdx() ) ) ).sub( Hll ),\r\n\t\tfloat( sampleTexture( ( uvNode ) => uvNode.add( uvNode.dFdy() ) ) ).sub( Hll )\r\n\t).mul( bumpScale );\r\n\r\n} );\r\n\r\n// Evaluate the derivative of the height w.r.t. screen-space using forward differencing (listing 2)\r\n\r\nconst perturbNormalArb = Fn( ( inputs ) => {\r\n\r\n\tconst { surf_pos, surf_norm, dHdxy } = inputs;\r\n\r\n\t// normalize is done to ensure that the bump map looks the same regardless of the texture's scale\r\n\tconst vSigmaX = surf_pos.dFdx().normalize();\r\n\tconst vSigmaY = surf_pos.dFdy().normalize();\r\n\tconst vN = surf_norm; // normalized\r\n\r\n\tconst R1 = vSigmaY.cross( vN );\r\n\tconst R2 = vN.cross( vSigmaX );\r\n\r\n\tconst fDet = vSigmaX.dot( R1 ).mul( faceDirection );\r\n\r\n\tconst vGrad = fDet.sign().mul( dHdxy.x.mul( R1 ).add( dHdxy.y.mul( R2 ) ) );\r\n\r\n\treturn fDet.abs().mul( surf_norm ).sub( vGrad ).normalize();\r\n\r\n} );\r\n\r\n/**\r\n * This class can be used for applying bump maps to materials.\r\n *\r\n * ```js\r\n * material.normalNode = bumpMap( texture( bumpTex ) );\r\n * ```\r\n *\r\n * @augments TempNode\r\n */\r\nclass BumpMapNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BumpMapNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new bump map node.\r\n\t *\r\n\t * @param {Node<float>} textureNode - Represents the bump map data.\r\n\t * @param {?Node<float>} [scaleNode=null] - Controls the intensity of the bump effect.\r\n\t */\r\n\tconstructor( textureNode, scaleNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\t/**\r\n\t\t * Represents the bump map data.\r\n\t\t *\r\n\t\t * @type {Node<float>}\r\n\t\t */\r\n\t\tthis.textureNode = textureNode;\r\n\r\n\t\t/**\r\n\t\t * Controls the intensity of the bump effect.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.scaleNode = scaleNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst bumpScale = this.scaleNode !== null ? this.scaleNode : 1;\r\n\t\tconst dHdxy = dHdxy_fwd( { textureNode: this.textureNode, bumpScale } );\r\n\r\n\t\treturn perturbNormalArb( {\r\n\t\t\tsurf_pos: positionView,\r\n\t\t\tsurf_norm: normalView,\r\n\t\t\tdHdxy\r\n\t\t} );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BumpMapNode;\r\n\r\n/**\r\n * TSL function for creating a bump map node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<float>} textureNode - Represents the bump map data.\r\n * @param {?Node<float>} [scaleNode=null] - Controls the intensity of the bump effect.\r\n * @returns {BumpMapNode}\r\n */\r\nexport const bumpMap = /*@__PURE__*/ nodeProxy( BumpMapNode ).setParameterLength( 1, 2 );\r\n", "import Node from '../core/Node.js';\r\nimport { reference } from './ReferenceNode.js';\r\nimport { materialReference } from './MaterialReferenceNode.js';\r\nimport { normalView } from './Normal.js';\r\nimport { nodeImmutable, float, vec2, vec3, mat2 } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { normalMap } from '../display/NormalMapNode.js';\r\nimport { bumpMap } from '../display/BumpMapNode.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\n\r\nconst _propertyCache = new Map();\r\n\r\n/**\r\n * This class should simplify the node access to material properties.\r\n * It internal uses reference nodes to make sure  changes to material\r\n * properties are automatically reflected to predefined TSL objects\r\n * like e.g. `materialColor`.\r\n *\r\n * @augments Node\r\n */\r\nclass MaterialNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MaterialNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new material node.\r\n\t *\r\n\t * @param {string} scope - The scope defines what kind of material property is referred by the node.\r\n\t */\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The scope defines what material property is referred by the node.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a cached reference node for the given property and type.\r\n\t *\r\n\t * @param {string} property - The name of the material property.\r\n\t * @param {string} type - The uniform type of the property.\r\n\t * @return {MaterialReferenceNode} A material reference node representing the property access.\r\n\t */\r\n\tgetCache( property, type ) {\r\n\r\n\t\tlet node = _propertyCache.get( property );\r\n\r\n\t\tif ( node === undefined ) {\r\n\r\n\t\t\tnode = materialReference( property, type );\r\n\r\n\t\t\t_propertyCache.set( property, node );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a float-typed material reference node for the given property name.\r\n\t *\r\n\t * @param {string} property - The name of the material property.\r\n\t * @return {MaterialReferenceNode<float>} A material reference node representing the property access.\r\n\t */\r\n\tgetFloat( property ) {\r\n\r\n\t\treturn this.getCache( property, 'float' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a color-typed material reference node for the given property name.\r\n\t *\r\n\t * @param {string} property - The name of the material property.\r\n\t * @return {MaterialReferenceNode<color>} A material reference node representing the property access.\r\n\t */\r\n\tgetColor( property ) {\r\n\r\n\t\treturn this.getCache( property, 'color' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a texture-typed material reference node for the given property name.\r\n\t *\r\n\t * @param {string} property - The name of the material property.\r\n\t * @return {MaterialReferenceNode} A material reference node representing the property access.\r\n\t */\r\n\tgetTexture( property ) {\r\n\r\n\t\treturn this.getCache( property === 'map' ? 'map' : property + 'Map', 'texture' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The node setup is done depending on the selected scope. Multiple material properties\r\n\t * might be grouped into a single node composition if they logically belong together.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node} The node representing the selected scope.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tconst material = builder.context.material;\r\n\t\tconst scope = this.scope;\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( scope === MaterialNode.COLOR ) {\r\n\r\n\t\t\tconst colorNode = material.color !== undefined ? this.getColor( scope ) : vec3();\r\n\r\n\t\t\tif ( material.map && material.map.isTexture === true ) {\r\n\r\n\t\t\t\tnode = colorNode.mul( this.getTexture( 'map' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = colorNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.OPACITY ) {\r\n\r\n\t\t\tconst opacityNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.alphaMap && material.alphaMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = opacityNode.mul( this.getTexture( 'alpha' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = opacityNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SPECULAR_STRENGTH ) {\r\n\r\n\t\t\tif ( material.specularMap && material.specularMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = this.getTexture( 'specular' ).r;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = float( 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SPECULAR_INTENSITY ) {\r\n\r\n\t\t\tconst specularIntensityNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.specularIntensityMap && material.specularIntensityMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = specularIntensityNode.mul( this.getTexture( scope ).a );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = specularIntensityNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SPECULAR_COLOR ) {\r\n\r\n\t\t\tconst specularColorNode = this.getColor( scope );\r\n\r\n\t\t\tif ( material.specularColorMap && material.specularColorMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = specularColorNode.mul( this.getTexture( scope ).rgb );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = specularColorNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.ROUGHNESS ) { // TODO: cleanup similar branches\r\n\r\n\t\t\tconst roughnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.roughnessMap && material.roughnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = roughnessNode.mul( this.getTexture( scope ).g );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = roughnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.METALNESS ) {\r\n\r\n\t\t\tconst metalnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.metalnessMap && material.metalnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = metalnessNode.mul( this.getTexture( scope ).b );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = metalnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.EMISSIVE ) {\r\n\r\n\t\t\tconst emissiveIntensityNode = this.getFloat( 'emissiveIntensity' );\r\n\t\t\tconst emissiveNode = this.getColor( scope ).mul( emissiveIntensityNode );\r\n\r\n\t\t\tif ( material.emissiveMap && material.emissiveMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = emissiveNode.mul( this.getTexture( scope ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = emissiveNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.NORMAL ) {\r\n\r\n\t\t\tif ( material.normalMap ) {\r\n\r\n\t\t\t\tnode = normalMap( this.getTexture( 'normal' ), this.getCache( 'normalScale', 'vec2' ) );\r\n\t\t\t\tnode.normalMapType = material.normalMapType;\r\n\r\n\t\t\t} else if ( material.bumpMap ) {\r\n\r\n\t\t\t\tnode = bumpMap( this.getTexture( 'bump' ).r, this.getFloat( 'bumpScale' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = normalView;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.CLEARCOAT ) {\r\n\r\n\t\t\tconst clearcoatNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.clearcoatMap && material.clearcoatMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = clearcoatNode.mul( this.getTexture( scope ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = clearcoatNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_ROUGHNESS ) {\r\n\r\n\t\t\tconst clearcoatRoughnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.clearcoatRoughnessMap && material.clearcoatRoughnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = clearcoatRoughnessNode.mul( this.getTexture( scope ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = clearcoatRoughnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.CLEARCOAT_NORMAL ) {\r\n\r\n\t\t\tif ( material.clearcoatNormalMap ) {\r\n\r\n\t\t\t\tnode = normalMap( this.getTexture( scope ), this.getCache( scope + 'Scale', 'vec2' ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = normalView;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SHEEN ) {\r\n\r\n\t\t\tconst sheenNode = this.getColor( 'sheenColor' ).mul( this.getFloat( 'sheen' ) ); // Move this mul() to CPU\r\n\r\n\t\t\tif ( material.sheenColorMap && material.sheenColorMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = sheenNode.mul( this.getTexture( 'sheenColor' ).rgb );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = sheenNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.SHEEN_ROUGHNESS ) {\r\n\r\n\t\t\tconst sheenRoughnessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.sheenRoughnessMap && material.sheenRoughnessMap.isTexture === true ) {\r\n\r\n\t\t\t\tnode = sheenRoughnessNode.mul( this.getTexture( scope ).a );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = sheenRoughnessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tnode = node.clamp( 0.07, 1.0 );\r\n\r\n\t\t} else if ( scope === MaterialNode.ANISOTROPY ) {\r\n\r\n\t\t\tif ( material.anisotropyMap && material.anisotropyMap.isTexture === true ) {\r\n\r\n\t\t\t\tconst anisotropyPolar = this.getTexture( scope );\r\n\t\t\t\tconst anisotropyMat = mat2( materialAnisotropyVector.x, materialAnisotropyVector.y, materialAnisotropyVector.y.negate(), materialAnisotropyVector.x );\r\n\r\n\t\t\t\tnode = anisotropyMat.mul( anisotropyPolar.rg.mul( 2.0 ).sub( vec2( 1.0 ) ).normalize().mul( anisotropyPolar.b ) );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = materialAnisotropyVector;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.IRIDESCENCE_THICKNESS ) {\r\n\r\n\t\t\tconst iridescenceThicknessMaximum = reference( '1', 'float', material.iridescenceThicknessRange );\r\n\r\n\t\t\tif ( material.iridescenceThicknessMap ) {\r\n\r\n\t\t\t\tconst iridescenceThicknessMinimum = reference( '0', 'float', material.iridescenceThicknessRange );\r\n\r\n\t\t\t\tnode = iridescenceThicknessMaximum.sub( iridescenceThicknessMinimum ).mul( this.getTexture( scope ).g ).add( iridescenceThicknessMinimum );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = iridescenceThicknessMaximum;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.TRANSMISSION ) {\r\n\r\n\t\t\tconst transmissionNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.transmissionMap ) {\r\n\r\n\t\t\t\tnode = transmissionNode.mul( this.getTexture( scope ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = transmissionNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.THICKNESS ) {\r\n\r\n\t\t\tconst thicknessNode = this.getFloat( scope );\r\n\r\n\t\t\tif ( material.thicknessMap ) {\r\n\r\n\t\t\t\tnode = thicknessNode.mul( this.getTexture( scope ).g );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tnode = thicknessNode;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( scope === MaterialNode.IOR ) {\r\n\r\n\t\t\tnode = this.getFloat( scope );\r\n\r\n\t\t} else if ( scope === MaterialNode.LIGHT_MAP ) {\r\n\r\n\t\t\tnode = this.getTexture( scope ).rgb.mul( this.getFloat( 'lightMapIntensity' ) );\r\n\r\n\t\t} else if ( scope === MaterialNode.AO ) {\r\n\r\n\t\t\tnode = this.getTexture( scope ).r.sub( 1.0 ).mul( this.getFloat( 'aoMapIntensity' ) ).add( 1.0 );\r\n\r\n\t\t} else if ( scope === MaterialNode.LINE_DASH_OFFSET ) {\r\n\r\n\t\t\tnode = ( material.dashOffset ) ? this.getFloat( scope ) : float( 0 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst outputType = this.getNodeType( builder );\r\n\r\n\t\t\tnode = this.getCache( scope, outputType );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n}\r\n\r\nMaterialNode.ALPHA_TEST = 'alphaTest';\r\nMaterialNode.COLOR = 'color';\r\nMaterialNode.OPACITY = 'opacity';\r\nMaterialNode.SHININESS = 'shininess';\r\nMaterialNode.SPECULAR = 'specular';\r\nMaterialNode.SPECULAR_STRENGTH = 'specularStrength';\r\nMaterialNode.SPECULAR_INTENSITY = 'specularIntensity';\r\nMaterialNode.SPECULAR_COLOR = 'specularColor';\r\nMaterialNode.REFLECTIVITY = 'reflectivity';\r\nMaterialNode.ROUGHNESS = 'roughness';\r\nMaterialNode.METALNESS = 'metalness';\r\nMaterialNode.NORMAL = 'normal';\r\nMaterialNode.CLEARCOAT = 'clearcoat';\r\nMaterialNode.CLEARCOAT_ROUGHNESS = 'clearcoatRoughness';\r\nMaterialNode.CLEARCOAT_NORMAL = 'clearcoatNormal';\r\nMaterialNode.EMISSIVE = 'emissive';\r\nMaterialNode.ROTATION = 'rotation';\r\nMaterialNode.SHEEN = 'sheen';\r\nMaterialNode.SHEEN_ROUGHNESS = 'sheenRoughness';\r\nMaterialNode.ANISOTROPY = 'anisotropy';\r\nMaterialNode.IRIDESCENCE = 'iridescence';\r\nMaterialNode.IRIDESCENCE_IOR = 'iridescenceIOR';\r\nMaterialNode.IRIDESCENCE_THICKNESS = 'iridescenceThickness';\r\nMaterialNode.IOR = 'ior';\r\nMaterialNode.TRANSMISSION = 'transmission';\r\nMaterialNode.THICKNESS = 'thickness';\r\nMaterialNode.ATTENUATION_DISTANCE = 'attenuationDistance';\r\nMaterialNode.ATTENUATION_COLOR = 'attenuationColor';\r\nMaterialNode.LINE_SCALE = 'scale';\r\nMaterialNode.LINE_DASH_SIZE = 'dashSize';\r\nMaterialNode.LINE_GAP_SIZE = 'gapSize';\r\nMaterialNode.LINE_WIDTH = 'linewidth';\r\nMaterialNode.LINE_DASH_OFFSET = 'dashOffset';\r\nMaterialNode.POINT_SIZE = 'size';\r\nMaterialNode.DISPERSION = 'dispersion';\r\nMaterialNode.LIGHT_MAP = 'light';\r\nMaterialNode.AO = 'ao';\r\n\r\nexport default MaterialNode;\r\n\r\n/**\r\n * TSL object that represents alpha test of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialAlphaTest = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ALPHA_TEST );\r\n\r\n/**\r\n * TSL object that represents the diffuse color of the current material.\r\n * The value is composed via `color` * `map`.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const materialColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.COLOR );\r\n\r\n/**\r\n * TSL object that represents the shininess of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialShininess = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHININESS );\r\n\r\n/**\r\n * TSL object that represents the emissive color of the current material.\r\n * The value is composed via `emissive` * `emissiveIntensity` * `emissiveMap`.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const materialEmissive = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.EMISSIVE );\r\n\r\n/**\r\n * TSL object that represents the opacity of the current material.\r\n * The value is composed via `opacity` * `alphaMap`.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialOpacity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.OPACITY );\r\n\r\n/**\r\n * TSL object that represents the specular of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const materialSpecular = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR );\r\n\r\n/**\r\n * TSL object that represents the specular intensity of the current material.\r\n * The value is composed via `specularIntensity` * `specularMap.a`.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialSpecularIntensity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_INTENSITY );\r\n\r\n/**\r\n * TSL object that represents the specular color of the current material.\r\n * The value is composed via `specularColor` * `specularMap.rgb`.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const materialSpecularColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_COLOR );\r\n\r\n/**\r\n * TSL object that represents the specular strength of the current material.\r\n * The value is composed via `specularMap.r`.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialSpecularStrength = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SPECULAR_STRENGTH );\r\n\r\n/**\r\n * TSL object that represents the reflectivity of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialReflectivity = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.REFLECTIVITY );\r\n\r\n/**\r\n * TSL object that represents the roughness of the current material.\r\n * The value is composed via `roughness` * `roughnessMap.g`.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ROUGHNESS );\r\n\r\n/**\r\n * TSL object that represents the metalness of the current material.\r\n * The value is composed via `metalness` * `metalnessMap.b`.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialMetalness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.METALNESS );\r\n\r\n/**\r\n * TSL object that represents the normal of the current material.\r\n * The value will be either `normalMap` * `normalScale`, `bumpMap` * `bumpScale` or `normalView`.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const materialNormal = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.NORMAL );\r\n\r\n/**\r\n * TSL object that represents the clearcoat of the current material.\r\n * The value is composed via `clearcoat` * `clearcoatMap.r`\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialClearcoat = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT );\r\n\r\n/**\r\n * TSL object that represents the clearcoat roughness of the current material.\r\n * The value is composed via `clearcoatRoughness` * `clearcoatRoughnessMap.r`.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialClearcoatRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_ROUGHNESS );\r\n\r\n/**\r\n * TSL object that represents the clearcoat normal of the current material.\r\n * The value will be either `clearcoatNormalMap` or `normalView`.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const materialClearcoatNormal = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.CLEARCOAT_NORMAL );\r\n\r\n/**\r\n * TSL object that represents the rotation of the current sprite material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialRotation = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ROTATION );\r\n\r\n/**\r\n * TSL object that represents the sheen color of the current material.\r\n * The value is composed via `sheen` * `sheenColor` * `sheenColorMap`.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const materialSheen = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHEEN );\r\n\r\n/**\r\n * TSL object that represents the sheen roughness of the current material.\r\n * The value is composed via `sheenRoughness` * `sheenRoughnessMap.a`.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialSheenRoughness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.SHEEN_ROUGHNESS );\r\n\r\n/**\r\n * TSL object that represents the anisotropy of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<vec2>}\r\n */\r\nexport const materialAnisotropy = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ANISOTROPY );\r\n\r\n/**\r\n * TSL object that represents the iridescence of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialIridescence = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE );\r\n\r\n/**\r\n * TSL object that represents the iridescence IOR of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialIridescenceIOR = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_IOR );\r\n\r\n/**\r\n * TSL object that represents the iridescence thickness of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialIridescenceThickness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IRIDESCENCE_THICKNESS );\r\n\r\n/**\r\n * TSL object that represents the transmission of the current material.\r\n * The value is composed via `transmission` * `transmissionMap.r`.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialTransmission = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.TRANSMISSION );\r\n\r\n/**\r\n * TSL object that represents the thickness of the current material.\r\n * The value is composed via `thickness` * `thicknessMap.g`.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialThickness = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.THICKNESS );\r\n\r\n/**\r\n * TSL object that represents the IOR of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialIOR = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.IOR );\r\n\r\n/**\r\n * TSL object that represents the attenuation distance of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialAttenuationDistance = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_DISTANCE );\r\n\r\n/**\r\n * TSL object that represents the attenuation color of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const materialAttenuationColor = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.ATTENUATION_COLOR );\r\n\r\n/**\r\n * TSL object that represents the scale of the current dashed line material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialLineScale = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_SCALE );\r\n\r\n/**\r\n * TSL object that represents the dash size of the current dashed line material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialLineDashSize = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_SIZE );\r\n\r\n/**\r\n * TSL object that represents the gap size of the current dashed line material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialLineGapSize = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_GAP_SIZE );\r\n\r\n/**\r\n * TSL object that represents the line width of the current line material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialLineWidth = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_WIDTH );\r\n\r\n/**\r\n * TSL object that represents the dash offset of the current line material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialLineDashOffset = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LINE_DASH_OFFSET );\r\n\r\n/**\r\n * TSL object that represents the point size of the current points material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialPointSize = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.POINT_SIZE );\r\n\r\n/**\r\n * TSL object that represents the dispersion of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialDispersion = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.DISPERSION );\r\n\r\n/**\r\n * TSL object that represents the light map of the current material.\r\n * The value is composed via `lightMapIntensity` * `lightMap.rgb`.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const materialLightMap = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.LIGHT_MAP );\r\n\r\n/**\r\n * TSL object that represents the ambient occlusion map of the current material.\r\n * The value is composed via `aoMap.r` - 1 * `aoMapIntensity` + 1.\r\n *\r\n * @tsl\r\n * @type {Node<float>}\r\n */\r\nexport const materialAO = /*@__PURE__*/ nodeImmutable( MaterialNode, MaterialNode.AO );\r\n\r\n/**\r\n * TSL object that represents the anisotropy vector of the current material.\r\n *\r\n * @tsl\r\n * @type {Node<vec2>}\r\n */\r\nexport const materialAnisotropyVector = /*@__PURE__*/ uniform( new Vector2() ).onReference( function ( frame ) {\r\n\r\n\treturn frame.material;\r\n\r\n} ).onRenderUpdate( function ( { material } ) {\r\n\r\n\tthis.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );\r\n\r\n} );\r\n", "import { Fn } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * TSL object that represents the position in clip space after the model-view-projection transform of the current rendered object.\r\n *\r\n * @tsl\r\n * @type {VaryingNode<vec4>}\r\n */\r\nexport const modelViewProjection = /*@__PURE__*/ ( Fn( ( builder ) => {\r\n\r\n\treturn builder.context.setupModelViewProjection();\r\n\r\n}, 'vec4' ).once() )().toVarying( 'v_modelViewProjection' );\r\n", "import { InterleavedBuffer } from './InterleavedBuffer.js';\r\n\r\n/**\r\n * An instanced version of an interleaved buffer.\r\n *\r\n * @augments InterleavedBuffer\r\n */\r\nclass InstancedInterleavedBuffer extends InterleavedBuffer {\r\n\r\n\t/**\r\n\t * Constructs a new instanced interleaved buffer.\r\n\t *\r\n\t * @param {TypedArray} array - A typed array with a shared buffer storing attribute data.\r\n\t * @param {number} stride - The number of typed-array elements per vertex.\r\n\t * @param {number} [meshPerAttribute=1] - Defines how often a value of this interleaved buffer should be repeated.\r\n\t */\r\n\tconstructor( array, stride, meshPerAttribute = 1 ) {\r\n\r\n\t\tsuper( array, stride );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isInstancedInterleavedBuffer = true;\r\n\r\n\t\t/**\r\n\t\t * Defines how often a value of this buffer attribute should be repeated,\r\n\t\t * see {@link InstancedBufferAttribute#meshPerAttribute}.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.meshPerAttribute = meshPerAttribute;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tclone( data ) {\r\n\r\n\t\tconst ib = super.clone( data );\r\n\r\n\t\tib.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\treturn ib;\r\n\r\n\t}\r\n\r\n\ttoJSON( data ) {\r\n\r\n\t\tconst json = super.toJSON( data );\r\n\r\n\t\tjson.isInstancedInterleavedBuffer = true;\r\n\t\tjson.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\treturn json;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InstancedInterleavedBuffer };\r\n", "import { BufferAttribute } from './BufferAttribute.js';\r\n\r\n/**\r\n * An instanced version of a buffer attribute.\r\n *\r\n * @augments BufferAttribute\r\n */\r\nclass InstancedBufferAttribute extends BufferAttribute {\r\n\r\n\t/**\r\n\t * Constructs a new instanced buffer attribute.\r\n\t *\r\n\t * @param {TypedArray} array - The array holding the attribute data.\r\n\t * @param {number} itemSize - The item size.\r\n\t * @param {boolean} [normalized=false] - Whether the data are normalized or not.\r\n\t * @param {number} [meshPerAttribute=1] - How often a value of this buffer attribute should be repeated.\r\n\t */\r\n\tconstructor( array, itemSize, normalized, meshPerAttribute = 1 ) {\r\n\r\n\t\tsuper( array, itemSize, normalized );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isInstancedBufferAttribute = true;\r\n\r\n\t\t/**\r\n\t\t * Defines how often a value of this buffer attribute should be repeated. A\r\n\t\t * value of one means that each value of the instanced attribute is used for\r\n\t\t * a single instance. A value of two means that each value is used for two\r\n\t\t * consecutive instances (and so on).\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.meshPerAttribute = meshPerAttribute;\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.meshPerAttribute = source.meshPerAttribute;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\ttoJSON() {\r\n\r\n\t\tconst data = super.toJSON();\r\n\r\n\t\tdata.meshPerAttribute = this.meshPerAttribute;\r\n\r\n\t\tdata.isInstancedBufferAttribute = true;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { InstancedBufferAttribute };\r\n", "import Node from '../core/Node.js';\r\nimport { varyingProperty } from '../core/PropertyNode.js';\r\nimport { instancedBufferAttribute, instancedDynamicBufferAttribute } from './BufferAttributeNode.js';\r\nimport { normalLocal, transformNormal } from './Normal.js';\r\nimport { positionLocal } from './Position.js';\r\nimport { nodeProxy, vec3, mat4 } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { buffer } from '../accessors/BufferNode.js';\r\nimport { instanceIndex } from '../core/IndexNode.js';\r\n\r\nimport { InstancedInterleavedBuffer } from '../../core/InstancedInterleavedBuffer.js';\r\nimport { InstancedBufferAttribute } from '../../core/InstancedBufferAttribute.js';\r\nimport { DynamicDrawUsage } from '../../constants.js';\r\n\r\n/**\r\n * This node implements the vertex shader logic which is required\r\n * when rendering 3D objects via instancing. The code makes sure\r\n * vertex positions, normals and colors can be modified via instanced\r\n * data.\r\n *\r\n * @augments Node\r\n */\r\nclass InstanceNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'InstanceNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new instance node.\r\n\t *\r\n\t * @param {number} count - The number of instances.\r\n\t * @param {InstancedBufferAttribute} instanceMatrix - Instanced buffer attribute representing the instance transformations.\r\n\t * @param {?InstancedBufferAttribute} instanceColor - Instanced buffer attribute representing the instance colors.\r\n\t */\r\n\tconstructor( count, instanceMatrix, instanceColor = null ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\t/**\r\n\t\t * The number of instances.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t */\r\n\t\tthis.count = count;\r\n\r\n\t\t/**\r\n\t\t * Instanced buffer attribute representing the transformation of instances.\r\n\t\t *\r\n\t\t * @type {InstancedBufferAttribute}\r\n\t\t */\r\n\t\tthis.instanceMatrix = instanceMatrix;\r\n\r\n\t\t/**\r\n\t\t * Instanced buffer attribute representing the color of instances.\r\n\t\t *\r\n\t\t * @type {InstancedBufferAttribute}\r\n\t\t */\r\n\t\tthis.instanceColor = instanceColor;\r\n\r\n\t\t/**\r\n\t\t * The node that represents the instance matrix data.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t */\r\n\t\tthis.instanceMatrixNode = null;\r\n\r\n\t\t/**\r\n\t\t * The node that represents the instance color data.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.instanceColorNode = null;\r\n\r\n\t\t/**\r\n\t\t * The update type is set to `frame` since an update\r\n\t\t * of instanced buffer data must be checked per frame.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'frame'\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.FRAME;\r\n\r\n\t\t/**\r\n\t\t * A reference to a buffer that is used by `instanceMatrixNode`.\r\n\t\t *\r\n\t\t * @type {?InstancedInterleavedBuffer}\r\n\t\t */\r\n\t\tthis.buffer = null;\r\n\r\n\t\t/**\r\n\t\t * A reference to a buffer that is used by `instanceColorNode`.\r\n\t\t *\r\n\t\t * @type {?InstancedBufferAttribute}\r\n\t\t */\r\n\t\tthis.bufferColor = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the internal buffers and nodes and assigns the transformed vertex data\r\n\t * to predefined node variables for accumulation. That follows the same patterns\r\n\t * like with morph and skinning nodes.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { count, instanceMatrix, instanceColor } = this;\r\n\r\n\t\tlet { instanceMatrixNode, instanceColorNode } = this;\r\n\r\n\t\tif ( instanceMatrixNode === null ) {\r\n\r\n\t\t\t// Both WebGPU and WebGL backends have UBO max limited to 64kb. Matrix count number bigger than 1000 ( 16 * 4 * 1000 = 64kb ) will fallback to attribute.\r\n\r\n\t\t\tif ( count <= 1000 ) {\r\n\r\n\t\t\t\tinstanceMatrixNode = buffer( instanceMatrix.array, 'mat4', Math.max( count, 1 ) ).element( instanceIndex );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst buffer = new InstancedInterleavedBuffer( instanceMatrix.array, 16, 1 );\r\n\r\n\t\t\t\tthis.buffer = buffer;\r\n\r\n\t\t\t\tconst bufferFn = instanceMatrix.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;\r\n\r\n\t\t\t\tconst instanceBuffers = [\r\n\t\t\t\t\t// F.Signature -> bufferAttribute( array, type, stride, offset )\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 0 ),\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 4 ),\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 8 ),\r\n\t\t\t\t\tbufferFn( buffer, 'vec4', 16, 12 )\r\n\t\t\t\t];\r\n\r\n\t\t\t\tinstanceMatrixNode = mat4( ...instanceBuffers );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.instanceMatrixNode = instanceMatrixNode;\r\n\r\n\t\t}\r\n\r\n\t\tif ( instanceColor && instanceColorNode === null ) {\r\n\r\n\t\t\tconst buffer = new InstancedBufferAttribute( instanceColor.array, 3 );\r\n\r\n\t\t\tconst bufferFn = instanceColor.usage === DynamicDrawUsage ? instancedDynamicBufferAttribute : instancedBufferAttribute;\r\n\r\n\t\t\tthis.bufferColor = buffer;\r\n\r\n\t\t\tinstanceColorNode = vec3( bufferFn( buffer, 'vec3', 3, 0 ) );\r\n\r\n\t\t\tthis.instanceColorNode = instanceColorNode;\r\n\r\n\t\t}\r\n\r\n\t\t// POSITION\r\n\r\n\t\tconst instancePosition = instanceMatrixNode.mul( positionLocal ).xyz;\r\n\t\tpositionLocal.assign( instancePosition );\r\n\r\n\t\t// NORMAL\r\n\r\n\t\tif ( builder.hasGeometryAttribute( 'normal' ) ) {\r\n\r\n\t\t\tconst instanceNormal = transformNormal( normalLocal, instanceMatrixNode );\r\n\r\n\t\t\t// ASSIGNS\r\n\r\n\t\t\tnormalLocal.assign( instanceNormal );\r\n\r\n\t\t}\r\n\r\n\t\t// COLOR\r\n\r\n\t\tif ( this.instanceColorNode !== null ) {\r\n\r\n\t\t\tvaryingProperty( 'vec3', 'vInstanceColor' ).assign( this.instanceColorNode );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the internal buffers required an update.\r\n\t *\r\n\t * @param {NodeFrame} frame - The current node frame.\r\n\t */\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tif ( this.instanceMatrix.usage !== DynamicDrawUsage && this.buffer !== null && this.instanceMatrix.version !== this.buffer.version ) {\r\n\r\n\t\t\tthis.buffer.version = this.instanceMatrix.version;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.instanceColor && this.instanceColor.usage !== DynamicDrawUsage && this.bufferColor !== null && this.instanceColor.version !== this.bufferColor.version ) {\r\n\r\n\t\t\tthis.bufferColor.version = this.instanceColor.version;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default InstanceNode;\r\n\r\n/**\r\n * TSL function for creating an instance node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {number} count - The number of instances.\r\n * @param {InstancedBufferAttribute} instanceMatrix - Instanced buffer attribute representing the instance transformations.\r\n * @param {?InstancedBufferAttribute} instanceColor - Instanced buffer attribute representing the instance colors.\r\n * @returns {InstanceNode}\r\n */\r\nexport const instance = /*@__PURE__*/ nodeProxy( InstanceNode ).setParameterLength( 2, 3 );\r\n", "import InstanceNode from './InstanceNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * This is a special version of `InstanceNode` which requires the usage of {@link InstancedMesh}.\r\n * It allows an easier setup of the instance node.\r\n *\r\n * @augments InstanceNode\r\n */\r\nclass InstancedMeshNode extends InstanceNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'InstancedMeshNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new instanced mesh node.\r\n\t *\r\n\t * @param {InstancedMesh} instancedMesh - The instanced mesh.\r\n\t */\r\n\tconstructor( instancedMesh ) {\r\n\r\n\t\tconst { count, instanceMatrix, instanceColor } = instancedMesh;\r\n\r\n\t\tsuper( count, instanceMatrix, instanceColor );\r\n\r\n\t\t/**\r\n\t\t * A reference to the instanced mesh.\r\n\t\t *\r\n\t\t * @type {InstancedMesh}\r\n\t\t */\r\n\t\tthis.instancedMesh = instancedMesh;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default InstancedMeshNode;\r\n\r\n/**\r\n * TSL function for creating an instanced mesh node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {InstancedMesh} instancedMesh - The instancedMesh.\r\n * @returns {InstancedMeshNode}\r\n */\r\nexport const instancedMesh = /*@__PURE__*/ nodeProxy( InstancedMeshNode ).setParameterLength( 1 );\r\n", "import Node from '../core/Node.js';\r\nimport { normalLocal } from './Normal.js';\r\nimport { positionLocal } from './Position.js';\r\nimport { nodeProxy, vec3, mat3, mat4, int, ivec2, float, Fn } from '../tsl/TSLBase.js';\r\nimport { textureLoad } from './TextureNode.js';\r\nimport { textureSize } from './TextureSizeNode.js';\r\nimport { tangentLocal } from './Tangent.js';\r\nimport { instanceIndex, drawIndex } from '../core/IndexNode.js';\r\nimport { varyingProperty } from '../core/PropertyNode.js';\r\n\r\n/**\r\n * This node implements the vertex shader logic which is required\r\n * when rendering 3D objects via batching. `BatchNode` must be used\r\n * with instances of {@link BatchedMesh}.\r\n *\r\n * @augments Node\r\n */\r\nclass BatchNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'BatchNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new batch node.\r\n\t *\r\n\t * @param {BatchedMesh} batchMesh - A reference to batched mesh.\r\n\t */\r\n\tconstructor( batchMesh ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\t/**\r\n\t\t * A reference to batched mesh.\r\n\t\t *\r\n\t\t * @type {BatchedMesh}\r\n\t\t */\r\n\t\tthis.batchMesh = batchMesh;\r\n\r\n\t\t/**\r\n\t\t * The batching index node.\r\n\t\t *\r\n\t\t * @type {?IndexNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.batchingIdNode = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the internal buffers and nodes and assigns the transformed vertex data\r\n\t * to predefined node variables for accumulation. That follows the same patterns\r\n\t * like with morph and skinning nodes.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( this.batchingIdNode === null ) {\r\n\r\n\t\t\tif ( builder.getDrawIndex() === null ) {\r\n\r\n\t\t\t\tthis.batchingIdNode = instanceIndex;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.batchingIdNode = drawIndex;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst getIndirectIndex = Fn( ( [ id ] ) => {\r\n\r\n\t\t\tconst size = int( textureSize( textureLoad( this.batchMesh._indirectTexture ), 0 ).x );\r\n\t\t\tconst x = int( id ).mod( size );\r\n\t\t\tconst y = int( id ).div( size );\r\n\t\t\treturn textureLoad( this.batchMesh._indirectTexture, ivec2( x, y ) ).x;\r\n\r\n\t\t} ).setLayout( {\r\n\t\t\tname: 'getIndirectIndex',\r\n\t\t\ttype: 'uint',\r\n\t\t\tinputs: [\r\n\t\t\t\t{ name: 'id', type: 'int' }\r\n\t\t\t]\r\n\t\t} );\r\n\r\n\t\tconst indirectId = getIndirectIndex( int( this.batchingIdNode ) );\r\n\r\n\t\tconst matricesTexture = this.batchMesh._matricesTexture;\r\n\r\n\t\tconst size = int( textureSize( textureLoad( matricesTexture ), 0 ).x );\r\n\t\tconst j = float( indirectId ).mul( 4 ).toInt().toVar();\r\n\r\n\t\tconst x = j.mod( size );\r\n\t\tconst y = j.div( size );\r\n\t\tconst batchingMatrix = mat4(\r\n\t\t\ttextureLoad( matricesTexture, ivec2( x, y ) ),\r\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 1 ), y ) ),\r\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 2 ), y ) ),\r\n\t\t\ttextureLoad( matricesTexture, ivec2( x.add( 3 ), y ) )\r\n\t\t);\r\n\r\n\r\n\t\tconst colorsTexture = this.batchMesh._colorsTexture;\r\n\r\n\t\tif ( colorsTexture !== null ) {\r\n\r\n\t\t\tconst getBatchingColor = Fn( ( [ id ] ) => {\r\n\r\n\t\t\t\tconst size = int( textureSize( textureLoad( colorsTexture ), 0 ).x );\r\n\t\t\t\tconst j = id;\r\n\t\t\t\tconst x = j.mod( size );\r\n\t\t\t\tconst y = j.div( size );\r\n\t\t\t\treturn textureLoad( colorsTexture, ivec2( x, y ) ).rgb;\r\n\r\n\t\t\t} ).setLayout( {\r\n\t\t\t\tname: 'getBatchingColor',\r\n\t\t\t\ttype: 'vec3',\r\n\t\t\t\tinputs: [\r\n\t\t\t\t\t{ name: 'id', type: 'int' }\r\n\t\t\t\t]\r\n\t\t\t} );\r\n\r\n\t\t\tconst color = getBatchingColor( indirectId );\r\n\r\n\t\t\tvaryingProperty( 'vec3', 'vBatchColor' ).assign( color );\r\n\r\n\t\t}\r\n\r\n\t\tconst bm = mat3( batchingMatrix );\r\n\r\n\t\tpositionLocal.assign( batchingMatrix.mul( positionLocal ) );\r\n\r\n\t\tconst transformedNormal = normalLocal.div( vec3( bm[ 0 ].dot( bm[ 0 ] ), bm[ 1 ].dot( bm[ 1 ] ), bm[ 2 ].dot( bm[ 2 ] ) ) );\r\n\r\n\t\tconst batchingNormal = bm.mul( transformedNormal ).xyz;\r\n\r\n\t\tnormalLocal.assign( batchingNormal );\r\n\r\n\t\tif ( builder.hasGeometryAttribute( 'tangent' ) ) {\r\n\r\n\t\t\ttangentLocal.mulAssign( bm );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BatchNode;\r\n\r\n/**\r\n * TSL function for creating a batch node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {BatchedMesh} batchMesh - A reference to batched mesh.\r\n * @returns {BatchNode}\r\n */\r\nexport const batch = /*@__PURE__*/ nodeProxy( BatchNode ).setParameterLength( 1 );\r\n", "import { nodeProxy } from '../tsl/TSLBase.js';\r\nimport ArrayElementNode from './ArrayElementNode.js';\r\n\r\n/**\r\n * This class enables element access on instances of {@link StorageBufferNode}.\r\n * In most cases, it is indirectly used when accessing elements with the\r\n * {@link StorageBufferNode#element} method.\r\n *\r\n * ```js\r\n * const position = positionStorage.element( instanceIndex );\r\n * ```\r\n *\r\n * @augments ArrayElementNode\r\n */\r\nclass StorageArrayElementNode extends ArrayElementNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'StorageArrayElementNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs storage buffer element node.\r\n\t *\r\n\t * @param {StorageBufferNode} storageBufferNode - The storage buffer node.\r\n\t * @param {Node} indexNode - The index node that defines the element access.\r\n\t */\r\n\tconstructor( storageBufferNode, indexNode ) {\r\n\r\n\t\tsuper( storageBufferNode, indexNode );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isStorageArrayElementNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The storage buffer node.\r\n\t *\r\n\t * @param {Node} value\r\n\t * @type {StorageBufferNode}\r\n\t */\r\n\tset storageBufferNode( value ) {\r\n\r\n\t\tthis.node = value;\r\n\r\n\t}\r\n\r\n\tget storageBufferNode() {\r\n\r\n\t\treturn this.node;\r\n\r\n\t}\r\n\r\n\tgetMemberType( builder, name ) {\r\n\r\n\t\tconst structTypeNode = this.storageBufferNode.structTypeNode;\r\n\r\n\t\tif ( structTypeNode ) {\r\n\r\n\t\t\treturn structTypeNode.getMemberType( builder, name );\r\n\r\n\t\t}\r\n\r\n\t\treturn 'void';\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( builder.isAvailable( 'storageBuffer' ) === false ) {\r\n\r\n\t\t\tif ( this.node.isPBO === true ) {\r\n\r\n\t\t\t\tbuilder.setupPBO( this.node );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tconst isAssignContext = builder.context.assign;\r\n\r\n\t\t//\r\n\r\n\t\tif ( builder.isAvailable( 'storageBuffer' ) === false ) {\r\n\r\n\t\t\tif ( this.node.isPBO === true && isAssignContext !== true && ( this.node.value.isInstancedBufferAttribute || builder.shaderStage !== 'compute' ) ) {\r\n\r\n\t\t\t\tsnippet = builder.generatePBO( this );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tsnippet = this.node.build( builder );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = super.generate( builder );\r\n\r\n\t\t}\r\n\r\n\t\tif ( isAssignContext !== true ) {\r\n\r\n\t\t\tconst type = this.getNodeType( builder );\r\n\r\n\t\t\tsnippet = builder.format( snippet, type, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StorageArrayElementNode;\r\n\r\n/**\r\n * TSL function for creating a storage element node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {StorageBufferNode} storageBufferNode - The storage buffer node.\r\n * @param {Node} indexNode - The index node that defines the element access.\r\n * @returns {StorageArrayElementNode}\r\n */\r\nexport const storageElement = /*@__PURE__*/ nodeProxy( StorageArrayElementNode ).setParameterLength( 2 );\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\nimport { attribute } from '../core/AttributeNode.js';\r\nimport { reference, referenceBuffer } from './ReferenceNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { normalLocal } from './Normal.js';\r\nimport { positionLocal, positionPrevious } from './Position.js';\r\nimport { tangentLocal } from './Tangent.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { buffer } from './BufferNode.js';\r\nimport { getDataFromObject } from '../core/NodeUtils.js';\r\nimport { storage } from './StorageBufferNode.js';\r\nimport { InstancedBufferAttribute } from '../../core/InstancedBufferAttribute.js';\r\nimport { instanceIndex } from '../core/IndexNode.js';\r\n\r\nconst _frameId = new WeakMap();\r\n\r\n/**\r\n * This node implements the vertex transformation shader logic which is required\r\n * for skinning/skeletal animation.\r\n *\r\n * @augments Node\r\n */\r\nclass SkinningNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SkinningNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new skinning node.\r\n\t *\r\n\t * @param {SkinnedMesh} skinnedMesh - The skinned mesh.\r\n\t */\r\n\tconstructor( skinnedMesh ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\t/**\r\n\t\t * The skinned mesh.\r\n\t\t *\r\n\t\t * @type {SkinnedMesh}\r\n\t\t */\r\n\t\tthis.skinnedMesh = skinnedMesh;\r\n\r\n\t\t/**\r\n\t\t * The update type overwritten since skinning nodes are updated per object.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t\t//\r\n\r\n\t\t/**\r\n\t\t * The skin index attribute.\r\n\t\t *\r\n\t\t * @type {AttributeNode}\r\n\t\t */\r\n\t\tthis.skinIndexNode = attribute( 'skinIndex', 'uvec4' );\r\n\r\n\t\t/**\r\n\t\t * The skin weight attribute.\r\n\t\t *\r\n\t\t * @type {AttributeNode}\r\n\t\t */\r\n\t\tthis.skinWeightNode = attribute( 'skinWeight', 'vec4' );\r\n\r\n\t\t/**\r\n\t\t * The bind matrix node.\r\n\t\t *\r\n\t\t * @type {Node<mat4>}\r\n\t\t */\r\n\t\tthis.bindMatrixNode = reference( 'bindMatrix', 'mat4' );\r\n\r\n\t\t/**\r\n\t\t * The bind matrix inverse node.\r\n\t\t *\r\n\t\t * @type {Node<mat4>}\r\n\t\t */\r\n\t\tthis.bindMatrixInverseNode = reference( 'bindMatrixInverse', 'mat4' );\r\n\r\n\t\t/**\r\n\t\t * The bind matrices as a uniform buffer node.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.boneMatricesNode = referenceBuffer( 'skeleton.boneMatrices', 'mat4', skinnedMesh.skeleton.bones.length );\r\n\r\n\t\t/**\r\n\t\t * The current vertex position in local space.\r\n\t\t *\r\n\t\t * @type {Node<vec3>}\r\n\t\t */\r\n\t\tthis.positionNode = positionLocal;\r\n\r\n\t\t/**\r\n\t\t * The result of vertex position in local space.\r\n\t\t *\r\n\t\t * @type {Node<vec3>}\r\n\t\t */\r\n\t\tthis.toPositionNode = positionLocal;\r\n\r\n\t\t/**\r\n\t\t * The previous bind matrices as a uniform buffer node.\r\n\t\t * Required for computing motion vectors.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.previousBoneMatricesNode = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms the given vertex position via skinning.\r\n\t *\r\n\t * @param {Node} [boneMatrices=this.boneMatricesNode] - The bone matrices\r\n\t * @param {Node<vec3>} [position=this.positionNode] - The vertex position in local space.\r\n\t * @return {Node<vec3>} The transformed vertex position.\r\n\t */\r\n\tgetSkinnedPosition( boneMatrices = this.boneMatricesNode, position = this.positionNode ) {\r\n\r\n\t\tconst { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;\r\n\r\n\t\tconst boneMatX = boneMatrices.element( skinIndexNode.x );\r\n\t\tconst boneMatY = boneMatrices.element( skinIndexNode.y );\r\n\t\tconst boneMatZ = boneMatrices.element( skinIndexNode.z );\r\n\t\tconst boneMatW = boneMatrices.element( skinIndexNode.w );\r\n\r\n\t\t// POSITION\r\n\r\n\t\tconst skinVertex = bindMatrixNode.mul( position );\r\n\r\n\t\tconst skinned = add(\r\n\t\t\tboneMatX.mul( skinWeightNode.x ).mul( skinVertex ),\r\n\t\t\tboneMatY.mul( skinWeightNode.y ).mul( skinVertex ),\r\n\t\t\tboneMatZ.mul( skinWeightNode.z ).mul( skinVertex ),\r\n\t\t\tboneMatW.mul( skinWeightNode.w ).mul( skinVertex )\r\n\t\t);\r\n\r\n\t\treturn bindMatrixInverseNode.mul( skinned ).xyz;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms the given vertex normal via skinning.\r\n\t *\r\n\t * @param {Node} [boneMatrices=this.boneMatricesNode] - The bone matrices\r\n\t * @param {Node<vec3>} [normal=normalLocal] - The vertex normal in local space.\r\n\t * @return {Node<vec3>} The transformed vertex normal.\r\n\t */\r\n\tgetSkinnedNormal( boneMatrices = this.boneMatricesNode, normal = normalLocal ) {\r\n\r\n\t\tconst { skinIndexNode, skinWeightNode, bindMatrixNode, bindMatrixInverseNode } = this;\r\n\r\n\t\tconst boneMatX = boneMatrices.element( skinIndexNode.x );\r\n\t\tconst boneMatY = boneMatrices.element( skinIndexNode.y );\r\n\t\tconst boneMatZ = boneMatrices.element( skinIndexNode.z );\r\n\t\tconst boneMatW = boneMatrices.element( skinIndexNode.w );\r\n\r\n\t\t// NORMAL\r\n\r\n\t\tlet skinMatrix = add(\r\n\t\t\tskinWeightNode.x.mul( boneMatX ),\r\n\t\t\tskinWeightNode.y.mul( boneMatY ),\r\n\t\t\tskinWeightNode.z.mul( boneMatZ ),\r\n\t\t\tskinWeightNode.w.mul( boneMatW )\r\n\t\t);\r\n\r\n\t\tskinMatrix = bindMatrixInverseNode.mul( skinMatrix ).mul( bindMatrixNode );\r\n\r\n\t\treturn skinMatrix.transformDirection( normal ).xyz;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the transformed/skinned vertex position of the previous frame.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node<vec3>} The skinned position from the previous frame.\r\n\t */\r\n\tgetPreviousSkinnedPosition( builder ) {\r\n\r\n\t\tconst skinnedMesh = builder.object;\r\n\r\n\t\tif ( this.previousBoneMatricesNode === null ) {\r\n\r\n\t\t\tskinnedMesh.skeleton.previousBoneMatrices = new Float32Array( skinnedMesh.skeleton.boneMatrices );\r\n\r\n\t\t\tthis.previousBoneMatricesNode = referenceBuffer( 'skeleton.previousBoneMatrices', 'mat4', skinnedMesh.skeleton.bones.length );\r\n\r\n\t\t}\r\n\r\n\t\treturn this.getSkinnedPosition( this.previousBoneMatricesNode, positionPrevious );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if bone matrices from the previous frame are required. Relevant\r\n\t * when computing motion vectors with {@link VelocityNode}.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {boolean} Whether bone matrices from the previous frame are required or not.\r\n\t */\r\n\tneedsPreviousBoneMatrices( builder ) {\r\n\r\n\t\tconst mrt = builder.renderer.getMRT();\r\n\r\n\t\treturn ( mrt && mrt.has( 'velocity' ) ) || getDataFromObject( builder.object ).useVelocity === true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the skinning node by assigning the transformed vertex data to predefined node variables.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node<vec3>} The transformed vertex position.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( this.needsPreviousBoneMatrices( builder ) ) {\r\n\r\n\t\t\tpositionPrevious.assign( this.getPreviousSkinnedPosition( builder ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst skinPosition = this.getSkinnedPosition();\r\n\r\n\t\tif ( this.toPositionNode ) this.toPositionNode.assign( skinPosition );\r\n\r\n\t\t//\r\n\r\n\t\tif ( builder.hasGeometryAttribute( 'normal' ) ) {\r\n\r\n\t\t\tconst skinNormal = this.getSkinnedNormal();\r\n\r\n\t\t\tnormalLocal.assign( skinNormal );\r\n\r\n\t\t\tif ( builder.hasGeometryAttribute( 'tangent' ) ) {\r\n\r\n\t\t\t\ttangentLocal.assign( skinNormal );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn skinPosition;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the code snippet of the skinning node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {string} output - The current output.\r\n\t * @return {string} The generated code snippet.\r\n\t */\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tif ( output !== 'void' ) {\r\n\r\n\t\t\treturn super.generate( builder, output );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the state of the skinned mesh by updating the skeleton once per frame.\r\n\t *\r\n\t * @param {NodeFrame} frame - The current node frame.\r\n\t */\r\n\tupdate( frame ) {\r\n\r\n\t\tconst skeleton = frame.object && frame.object.skeleton ? frame.object.skeleton : this.skinnedMesh.skeleton;\r\n\r\n\t\tif ( _frameId.get( skeleton ) === frame.frameId ) return;\r\n\r\n\t\t_frameId.set( skeleton, frame.frameId );\r\n\r\n\t\tif ( this.previousBoneMatricesNode !== null ) skeleton.previousBoneMatrices.set( skeleton.boneMatrices );\r\n\r\n\t\tskeleton.update();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default SkinningNode;\r\n\r\n/**\r\n * TSL function for creating a skinning node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {SkinnedMesh} skinnedMesh - The skinned mesh.\r\n * @returns {SkinningNode}\r\n */\r\nexport const skinning = ( skinnedMesh ) => nodeObject( new SkinningNode( skinnedMesh ) );\r\n\r\n/**\r\n * TSL function for computing skinning.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {SkinnedMesh} skinnedMesh - The skinned mesh.\r\n * @param {Node<vec3>} [toPosition=null] - The target position.\r\n * @returns {SkinningNode}\r\n */\r\nexport const computeSkinning = ( skinnedMesh, toPosition = null ) => {\r\n\r\n\tconst node = new SkinningNode( skinnedMesh );\r\n\tnode.positionNode = storage( new InstancedBufferAttribute( skinnedMesh.geometry.getAttribute( 'position' ).array, 3 ), 'vec3' ).setPBO( true ).toReadOnly().element( instanceIndex ).toVar();\r\n\tnode.skinIndexNode = storage( new InstancedBufferAttribute( new Uint32Array( skinnedMesh.geometry.getAttribute( 'skinIndex' ).array ), 4 ), 'uvec4' ).setPBO( true ).toReadOnly().element( instanceIndex ).toVar();\r\n\tnode.skinWeightNode = storage( new InstancedBufferAttribute( skinnedMesh.geometry.getAttribute( 'skinWeight' ).array, 4 ), 'vec4' ).setPBO( true ).toReadOnly().element( instanceIndex ).toVar();\r\n\tnode.bindMatrixNode = uniform( skinnedMesh.bindMatrix, 'mat4' );\r\n\tnode.bindMatrixInverseNode = uniform( skinnedMesh.bindMatrixInverse, 'mat4' );\r\n\tnode.boneMatricesNode = buffer( skinnedMesh.skeleton.boneMatrices, 'mat4', skinnedMesh.skeleton.bones.length );\r\n\tnode.toPositionNode = toPosition;\r\n\r\n\treturn nodeObject( node );\r\n\r\n};\r\n", "import { Texture } from './Texture.js';\r\nimport { ClampToEdgeWrapping, NearestFilter } from '../constants.js';\r\n\r\n/**\r\n * Creates an array of textures directly from raw buffer data.\r\n *\r\n * @augments Texture\r\n */\r\nclass DataArrayTexture extends Texture {\r\n\r\n\t/**\r\n\t * Constructs a new data array texture.\r\n\t *\r\n\t * @param {?TypedArray} [data=null] - The buffer data.\r\n\t * @param {number} [width=1] - The width of the texture.\r\n\t * @param {number} [height=1] - The height of the texture.\r\n\t * @param {number} [depth=1] - The depth of the texture.\r\n\t */\r\n\tconstructor( data = null, width = 1, height = 1, depth = 1 ) {\r\n\r\n\t\tsuper( null );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isDataArrayTexture = true;\r\n\r\n\t\t/**\r\n\t\t * The image definition of a data texture.\r\n\t\t *\r\n\t\t * @type {{data:TypedArray,width:number,height:number,depth:number}}\r\n\t\t */\r\n\t\tthis.image = { data, width, height, depth };\r\n\r\n\t\t/**\r\n\t\t * How the texture is sampled when a texel covers more than one pixel.\r\n\t\t *\r\n\t\t * Overwritten and set to `NearestFilter` by default.\r\n\t\t *\r\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\r\n\t\t * @default NearestFilter\r\n\t\t */\r\n\t\tthis.magFilter = NearestFilter;\r\n\r\n\t\t/**\r\n\t\t * How the texture is sampled when a texel covers less than one pixel.\r\n\t\t *\r\n\t\t * Overwritten and set to `NearestFilter` by default.\r\n\t\t *\r\n\t\t * @type {(NearestFilter|NearestMipmapNearestFilter|NearestMipmapLinearFilter|LinearFilter|LinearMipmapNearestFilter|LinearMipmapLinearFilter)}\r\n\t\t * @default NearestFilter\r\n\t\t */\r\n\t\tthis.minFilter = NearestFilter;\r\n\r\n\t\t/**\r\n\t\t * This defines how the texture is wrapped in the depth and corresponds to\r\n\t\t * *W* in UVW mapping.\r\n\t\t *\r\n\t\t * @type {(RepeatWrapping|ClampToEdgeWrapping|MirroredRepeatWrapping)}\r\n\t\t * @default ClampToEdgeWrapping\r\n\t\t */\r\n\t\tthis.wrapR = ClampToEdgeWrapping;\r\n\r\n\t\t/**\r\n\t\t * Whether to generate mipmaps (if possible) for a texture.\r\n\t\t *\r\n\t\t * Overwritten and set to `false` by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.generateMipmaps = false;\r\n\r\n\t\t/**\r\n\t\t * If set to `true`, the texture is flipped along the vertical axis when\r\n\t\t * uploaded to the GPU.\r\n\t\t *\r\n\t\t * Overwritten and set to `false` by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.flipY = false;\r\n\r\n\t\t/**\r\n\t\t * Specifies the alignment requirements for the start of each pixel row in memory.\r\n\t\t *\r\n\t\t * Overwritten and set to `1` by default.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.unpackAlignment = 1;\r\n\r\n\t\t/**\r\n\t\t * A set of all layers which need to be updated in the texture.\r\n\t\t *\r\n\t\t * @type {Set<number>}\r\n\t\t */\r\n\t\tthis.layerUpdates = new Set();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Describes that a specific layer of the texture needs to be updated.\r\n\t * Normally when {@link Texture#needsUpdate} is set to `true`, the\r\n\t * entire data texture array is sent to the GPU. Marking specific\r\n\t * layers will only transmit subsets of all mipmaps associated with a\r\n\t * specific depth in the array which is often much more performant.\r\n\t *\r\n\t * @param {number} layerIndex - The layer index that should be updated.\r\n\t */\r\n\taddLayerUpdate( layerIndex ) {\r\n\r\n\t\tthis.layerUpdates.add( layerIndex );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Resets the layer updates registry.\r\n\t */\r\n\tclearLayerUpdates() {\r\n\r\n\t\tthis.layerUpdates.clear();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { DataArrayTexture };\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { float, nodeProxy, Fn, ivec2, int, If } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { reference } from './ReferenceNode.js';\r\nimport { positionLocal } from './Position.js';\r\nimport { normalLocal } from './Normal.js';\r\nimport { textureLoad } from './TextureNode.js';\r\nimport { instanceIndex, vertexIndex } from '../core/IndexNode.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\n\r\nimport { DataArrayTexture } from '../../textures/DataArrayTexture.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { FloatType } from '../../constants.js';\r\n\r\nconst _morphTextures = /*@__PURE__*/ new WeakMap();\r\nconst _morphVec4 = /*@__PURE__*/ new Vector4();\r\n\r\nconst getMorph = /*@__PURE__*/ Fn( ( { bufferMap, influence, stride, width, depth, offset } ) => {\r\n\r\n\tconst texelIndex = int( vertexIndex ).mul( stride ).add( offset );\r\n\r\n\tconst y = texelIndex.div( width );\r\n\tconst x = texelIndex.sub( y.mul( width ) );\r\n\r\n\tconst bufferAttrib = textureLoad( bufferMap, ivec2( x, y ) ).depth( depth ).xyz;\r\n\r\n\treturn bufferAttrib.mul( influence );\r\n\r\n} );\r\n\r\nfunction getEntry( geometry ) {\r\n\r\n\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\r\n\tconst hasMorphNormals = geometry.morphAttributes.normal !== undefined;\r\n\tconst hasMorphColors = geometry.morphAttributes.color !== undefined;\r\n\r\n\t// instead of using attributes, the WebGL 2 code path encodes morph targets\r\n\t// into an array of data textures. Each layer represents a single morph target.\r\n\r\n\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\r\n\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\r\n\r\n\tlet entry = _morphTextures.get( geometry );\r\n\r\n\tif ( entry === undefined || entry.count !== morphTargetsCount ) {\r\n\r\n\t\tif ( entry !== undefined ) entry.texture.dispose();\r\n\r\n\t\tconst morphTargets = geometry.morphAttributes.position || [];\r\n\t\tconst morphNormals = geometry.morphAttributes.normal || [];\r\n\t\tconst morphColors = geometry.morphAttributes.color || [];\r\n\r\n\t\tlet vertexDataCount = 0;\r\n\r\n\t\tif ( hasMorphPosition === true ) vertexDataCount = 1;\r\n\t\tif ( hasMorphNormals === true ) vertexDataCount = 2;\r\n\t\tif ( hasMorphColors === true ) vertexDataCount = 3;\r\n\r\n\t\tlet width = geometry.attributes.position.count * vertexDataCount;\r\n\t\tlet height = 1;\r\n\r\n\t\tconst maxTextureSize = 4096; // @TODO: Use 'capabilities.maxTextureSize'\r\n\r\n\t\tif ( width > maxTextureSize ) {\r\n\r\n\t\t\theight = Math.ceil( width / maxTextureSize );\r\n\t\t\twidth = maxTextureSize;\r\n\r\n\t\t}\r\n\r\n\t\tconst buffer = new Float32Array( width * height * 4 * morphTargetsCount );\r\n\r\n\t\tconst bufferTexture = new DataArrayTexture( buffer, width, height, morphTargetsCount );\r\n\t\tbufferTexture.type = FloatType;\r\n\t\tbufferTexture.needsUpdate = true;\r\n\r\n\t\t// fill buffer\r\n\r\n\t\tconst vertexDataStride = vertexDataCount * 4;\r\n\r\n\t\tfor ( let i = 0; i < morphTargetsCount; i ++ ) {\r\n\r\n\t\t\tconst morphTarget = morphTargets[ i ];\r\n\t\t\tconst morphNormal = morphNormals[ i ];\r\n\t\t\tconst morphColor = morphColors[ i ];\r\n\r\n\t\t\tconst offset = width * height * 4 * i;\r\n\r\n\t\t\tfor ( let j = 0; j < morphTarget.count; j ++ ) {\r\n\r\n\t\t\t\tconst stride = j * vertexDataStride;\r\n\r\n\t\t\t\tif ( hasMorphPosition === true ) {\r\n\r\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphTarget, j );\r\n\r\n\t\t\t\t\tbuffer[ offset + stride + 0 ] = _morphVec4.x;\r\n\t\t\t\t\tbuffer[ offset + stride + 1 ] = _morphVec4.y;\r\n\t\t\t\t\tbuffer[ offset + stride + 2 ] = _morphVec4.z;\r\n\t\t\t\t\tbuffer[ offset + stride + 3 ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasMorphNormals === true ) {\r\n\r\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphNormal, j );\r\n\r\n\t\t\t\t\tbuffer[ offset + stride + 4 ] = _morphVec4.x;\r\n\t\t\t\t\tbuffer[ offset + stride + 5 ] = _morphVec4.y;\r\n\t\t\t\t\tbuffer[ offset + stride + 6 ] = _morphVec4.z;\r\n\t\t\t\t\tbuffer[ offset + stride + 7 ] = 0;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasMorphColors === true ) {\r\n\r\n\t\t\t\t\t_morphVec4.fromBufferAttribute( morphColor, j );\r\n\r\n\t\t\t\t\tbuffer[ offset + stride + 8 ] = _morphVec4.x;\r\n\t\t\t\t\tbuffer[ offset + stride + 9 ] = _morphVec4.y;\r\n\t\t\t\t\tbuffer[ offset + stride + 10 ] = _morphVec4.z;\r\n\t\t\t\t\tbuffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? _morphVec4.w : 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tentry = {\r\n\t\t\tcount: morphTargetsCount,\r\n\t\t\ttexture: bufferTexture,\r\n\t\t\tstride: vertexDataCount,\r\n\t\t\tsize: new Vector2( width, height )\r\n\t\t};\r\n\r\n\t\t_morphTextures.set( geometry, entry );\r\n\r\n\t\tfunction disposeTexture() {\r\n\r\n\t\t\tbufferTexture.dispose();\r\n\r\n\t\t\t_morphTextures.delete( geometry );\r\n\r\n\t\t\tgeometry.removeEventListener( 'dispose', disposeTexture );\r\n\r\n\t\t}\r\n\r\n\t\tgeometry.addEventListener( 'dispose', disposeTexture );\r\n\r\n\t}\r\n\r\n\treturn entry;\r\n\r\n}\r\n\r\n/**\r\n * This node implements the vertex transformation shader logic which is required\r\n * for morph target animation.\r\n *\r\n * @augments Node\r\n */\r\nclass MorphNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'MorphNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new morph node.\r\n\t *\r\n\t * @param {Mesh} mesh - The mesh holding the morph targets.\r\n\t */\r\n\tconstructor( mesh ) {\r\n\r\n\t\tsuper( 'void' );\r\n\r\n\t\t/**\r\n\t\t * The mesh holding the morph targets.\r\n\t\t *\r\n\t\t * @type {Mesh}\r\n\t\t */\r\n\t\tthis.mesh = mesh;\r\n\r\n\t\t/**\r\n\t\t * A uniform node which represents the morph base influence value.\r\n\t\t *\r\n\t\t * @type {UniformNode<float>}\r\n\t\t */\r\n\t\tthis.morphBaseInfluence = uniform( 1 );\r\n\r\n\t\t/**\r\n\t\t * The update type overwritten since morph nodes are updated per object.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the morph node by assigning the transformed vertex data to predefined node variables.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tconst { geometry } = builder;\r\n\r\n\t\tconst hasMorphPosition = geometry.morphAttributes.position !== undefined;\r\n\t\tconst hasMorphNormals = geometry.hasAttribute( 'normal' ) && geometry.morphAttributes.normal !== undefined;\r\n\r\n\t\tconst morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;\r\n\t\tconst morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;\r\n\r\n\t\t// nodes\r\n\r\n\t\tconst { texture: bufferMap, stride, size } = getEntry( geometry );\r\n\r\n\t\tif ( hasMorphPosition === true ) positionLocal.mulAssign( this.morphBaseInfluence );\r\n\t\tif ( hasMorphNormals === true ) normalLocal.mulAssign( this.morphBaseInfluence );\r\n\r\n\t\tconst width = int( size.width );\r\n\r\n\t\tLoop( morphTargetsCount, ( { i } ) => {\r\n\r\n\t\t\tconst influence = float( 0 ).toVar();\r\n\r\n\t\t\tif ( this.mesh.count > 1 && ( this.mesh.morphTexture !== null && this.mesh.morphTexture !== undefined ) ) {\r\n\r\n\t\t\t\tinfluence.assign( textureLoad( this.mesh.morphTexture, ivec2( int( i ).add( 1 ), int( instanceIndex ) ) ).r );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tinfluence.assign( reference( 'morphTargetInfluences', 'float' ).element( i ).toVar() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tIf( influence.notEqual( 0 ), () => {\r\n\r\n\t\t\t\tif ( hasMorphPosition === true ) {\r\n\r\n\t\t\t\t\tpositionLocal.addAssign( getMorph( {\r\n\t\t\t\t\t\tbufferMap,\r\n\t\t\t\t\t\tinfluence,\r\n\t\t\t\t\t\tstride,\r\n\t\t\t\t\t\twidth,\r\n\t\t\t\t\t\tdepth: i,\r\n\t\t\t\t\t\toffset: int( 0 )\r\n\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif ( hasMorphNormals === true ) {\r\n\r\n\t\t\t\t\tnormalLocal.addAssign( getMorph( {\r\n\t\t\t\t\t\tbufferMap,\r\n\t\t\t\t\t\tinfluence,\r\n\t\t\t\t\t\tstride,\r\n\t\t\t\t\t\twidth,\r\n\t\t\t\t\t\tdepth: i,\r\n\t\t\t\t\t\toffset: int( 1 )\r\n\t\t\t\t\t} ) );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the state of the morphed mesh by updating the base influence.\r\n\t *\r\n\t * @param {NodeFrame} frame - The current node frame.\r\n\t */\r\n\tupdate( /*frame*/ ) {\r\n\r\n\t\tconst morphBaseInfluence = this.morphBaseInfluence;\r\n\r\n\t\tif ( this.mesh.geometry.morphTargetsRelative ) {\r\n\r\n\t\t\tmorphBaseInfluence.value = 1;\r\n\r\n\t\t} else {\r\n\r\n\t\t\tmorphBaseInfluence.value = 1 - this.mesh.morphTargetInfluences.reduce( ( a, b ) => a + b, 0 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default MorphNode;\r\n\r\n/**\r\n * TSL function for creating a morph node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Mesh} mesh - The mesh holding the morph targets.\r\n * @returns {MorphNode}\r\n */\r\nexport const morphReference = /*@__PURE__*/ nodeProxy( MorphNode ).setParameterLength( 1 );\r\n", "import Node from '../core/Node.js';\r\n\r\n/**\r\n * Base class for lighting nodes.\r\n *\r\n * @augments Node\r\n */\r\nclass LightingNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'LightingNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new lighting node.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isLightingNode = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LightingNode;\r\n", "import LightingNode from './LightingNode.js';\r\n\r\n/**\r\n * A generic class that can be used by nodes which contribute\r\n * ambient occlusion to the scene. E.g. an ambient occlusion map\r\n * node can be used as input for this module. Used in {@link NodeMaterial}.\r\n *\r\n * @augments LightingNode\r\n */\r\nclass AONode extends LightingNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AONode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new AO node.\r\n\t *\r\n\t * @param {?Node<float>} [aoNode=null] - The ambient occlusion node.\r\n\t */\r\n\tconstructor( aoNode = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The ambient occlusion node.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.aoNode = aoNode;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tbuilder.context.ambientOcclusion.mulAssign( this.aoNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default AONode;\r\n", "import ContextNode from '../core/ContextNode.js';\r\nimport { nodeProxy, float, vec3 } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * `LightingContextNode` represents an extension of the {@link ContextNode} module\r\n * by adding lighting specific context data. It represents the runtime context of\r\n * {@link LightsNode}.\r\n *\r\n * @augments ContextNode\r\n */\r\nclass LightingContextNode extends ContextNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'LightingContextNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new lighting context node.\r\n\t *\r\n\t * @param {LightsNode} lightsNode - The lights node.\r\n\t * @param {?LightingModel} [lightingModel=null] - The current lighting model.\r\n\t * @param {?Node<vec3>} [backdropNode=null] - A backdrop node.\r\n\t * @param {?Node<float>} [backdropAlphaNode=null] - A backdrop alpha node.\r\n\t */\r\n\tconstructor( lightsNode, lightingModel = null, backdropNode = null, backdropAlphaNode = null ) {\r\n\r\n\t\tsuper( lightsNode );\r\n\r\n\t\t/**\r\n\t\t * The current lighting model.\r\n\t\t *\r\n\t\t * @type {?LightingModel}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.lightingModel = lightingModel;\r\n\r\n\t\t/**\r\n\t\t * A backdrop node.\r\n\t\t *\r\n\t\t * @type {?Node<vec3>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.backdropNode = backdropNode;\r\n\r\n\t\t/**\r\n\t\t * A backdrop alpha node.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.backdropAlphaNode = backdropAlphaNode;\r\n\r\n\t\tthis._value = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a lighting context object.\r\n\t *\r\n\t * @return {{\r\n\t * radiance: Node<vec3>,\r\n\t * irradiance: Node<vec3>,\r\n\t * iblIrradiance: Node<vec3>,\r\n\t * ambientOcclusion: Node<float>,\r\n\t * reflectedLight: {directDiffuse: Node<vec3>, directSpecular: Node<vec3>, indirectDiffuse: Node<vec3>, indirectSpecular: Node<vec3>},\r\n\t * backdrop: Node<vec3>,\r\n\t * backdropAlpha: Node<float>\r\n\t * }} The lighting context object.\r\n\t */\r\n\tgetContext() {\r\n\r\n\t\tconst { backdropNode, backdropAlphaNode } = this;\r\n\r\n\t\tconst directDiffuse = vec3().toVar( 'directDiffuse' ),\r\n\t\t\tdirectSpecular = vec3().toVar( 'directSpecular' ),\r\n\t\t\tindirectDiffuse = vec3().toVar( 'indirectDiffuse' ),\r\n\t\t\tindirectSpecular = vec3().toVar( 'indirectSpecular' );\r\n\r\n\t\tconst reflectedLight = {\r\n\t\t\tdirectDiffuse,\r\n\t\t\tdirectSpecular,\r\n\t\t\tindirectDiffuse,\r\n\t\t\tindirectSpecular\r\n\t\t};\r\n\r\n\t\tconst context = {\r\n\t\t\tradiance: vec3().toVar( 'radiance' ),\r\n\t\t\tirradiance: vec3().toVar( 'irradiance' ),\r\n\t\t\tiblIrradiance: vec3().toVar( 'iblIrradiance' ),\r\n\t\t\tambientOcclusion: float( 1 ).toVar( 'ambientOcclusion' ),\r\n\t\t\treflectedLight,\r\n\t\t\tbackdrop: backdropNode,\r\n\t\t\tbackdropAlpha: backdropAlphaNode\r\n\t\t};\r\n\r\n\t\treturn context;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.value = this._value || ( this._value = this.getContext() );\r\n\t\tthis.value.lightingModel = this.lightingModel || builder.context.lightingModel;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default LightingContextNode;\r\n\r\nexport const lightingContext = /*@__PURE__*/ nodeProxy( LightingContextNode );\r\n", "import LightingNode from './LightingNode.js';\r\n\r\n/**\r\n * A generic class that can be used by nodes which contribute\r\n * irradiance to the scene. E.g. a light map node can be used\r\n * as input for this module. Used in {@link NodeMaterial}.\r\n *\r\n * @augments LightingNode\r\n */\r\nclass IrradianceNode extends LightingNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'IrradianceNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new irradiance node.\r\n\t *\r\n\t * @param {Node<vec3>} node - A node contributing irradiance.\r\n\t */\r\n\tconstructor( node ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * A node contributing irradiance.\r\n\t\t *\r\n\t\t * @type {Node<vec3>}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tbuilder.context.irradiance.addAssign( this.node );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default IrradianceNode;\r\n", "\r\nimport Node from '../core/Node.js';\r\nimport { nodeObject, Fn, bool, float } from '../tsl/TSLBase.js';\r\nimport { positionView } from './Position.js';\r\nimport { diffuseColor } from '../core/PropertyNode.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { smoothstep } from '../math/MathNode.js';\r\nimport { uniformArray } from './UniformArrayNode.js';\r\nimport { builtin } from './BuiltinNode.js';\r\n\r\n/**\r\n * This node is used in {@link NodeMaterial} to setup the clipping\r\n * which can happen hardware-accelerated (if supported) and optionally\r\n * use alpha-to-coverage for anti-aliasing clipped edges.\r\n *\r\n * @augments Node\r\n */\r\nclass ClippingNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ClippingNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new clipping node.\r\n\t *\r\n\t * @param {('default'|'hardware'|'alphaToCoverage')} [scope='default'] - The node's scope. Similar to other nodes,\r\n\t * the selected scope influences the behavior of the node and what type of code is generated.\r\n\t */\r\n\tconstructor( scope = ClippingNode.DEFAULT ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The node's scope. Similar to other nodes, the selected scope influences\r\n\t\t * the behavior of the node and what type of code is generated.\r\n\t\t *\r\n\t\t * @type {('default'|'hardware'|'alphaToCoverage')}\r\n\t\t */\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the node depending on the selected scope.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node} The result node.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst clippingContext = builder.clippingContext;\r\n\t\tconst { intersectionPlanes, unionPlanes } = clippingContext;\r\n\r\n\t\tthis.hardwareClipping = builder.material.hardwareClipping;\r\n\r\n\t\tif ( this.scope === ClippingNode.ALPHA_TO_COVERAGE ) {\r\n\r\n\t\t\treturn this.setupAlphaToCoverage( intersectionPlanes, unionPlanes );\r\n\r\n\t\t} else if ( this.scope === ClippingNode.HARDWARE ) {\r\n\r\n\t\t\treturn this.setupHardwareClipping( unionPlanes, builder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn this.setupDefault( intersectionPlanes, unionPlanes );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups alpha to coverage.\r\n\t *\r\n\t * @param {Array<Vector4>} intersectionPlanes - The intersection planes.\r\n\t * @param {Array<Vector4>} unionPlanes - The union planes.\r\n\t * @return {Node} The result node.\r\n\t */\r\n\tsetupAlphaToCoverage( intersectionPlanes, unionPlanes ) {\r\n\r\n\t\treturn Fn( () => {\r\n\r\n\t\t\tconst distanceToPlane = float().toVar( 'distanceToPlane' );\r\n\t\t\tconst distanceGradient = float().toVar( 'distanceToGradient' );\r\n\r\n\t\t\tconst clipOpacity = float( 1 ).toVar( 'clipOpacity' );\r\n\r\n\t\t\tconst numUnionPlanes = unionPlanes.length;\r\n\r\n\t\t\tif ( this.hardwareClipping === false && numUnionPlanes > 0 ) {\r\n\r\n\t\t\t\tconst clippingPlanes = uniformArray( unionPlanes );\r\n\r\n\t\t\t\tLoop( numUnionPlanes, ( { i } ) => {\r\n\r\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\r\n\r\n\t\t\t\t\tdistanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );\r\n\t\t\t\t\tdistanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );\r\n\r\n\t\t\t\t\tclipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ) );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst numIntersectionPlanes = intersectionPlanes.length;\r\n\r\n\t\t\tif ( numIntersectionPlanes > 0 ) {\r\n\r\n\t\t\t\tconst clippingPlanes = uniformArray( intersectionPlanes );\r\n\t\t\t\tconst intersectionClipOpacity = float( 1 ).toVar( 'intersectionClipOpacity' );\r\n\r\n\t\t\t\tLoop( numIntersectionPlanes, ( { i } ) => {\r\n\r\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\r\n\r\n\t\t\t\t\tdistanceToPlane.assign( positionView.dot( plane.xyz ).negate().add( plane.w ) );\r\n\t\t\t\t\tdistanceGradient.assign( distanceToPlane.fwidth().div( 2.0 ) );\r\n\r\n\t\t\t\t\tintersectionClipOpacity.mulAssign( smoothstep( distanceGradient.negate(), distanceGradient, distanceToPlane ).oneMinus() );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tclipOpacity.mulAssign( intersectionClipOpacity.oneMinus() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tdiffuseColor.a.mulAssign( clipOpacity );\r\n\r\n\t\t\tdiffuseColor.a.equal( 0.0 ).discard();\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the default clipping.\r\n\t *\r\n\t * @param {Array<Vector4>} intersectionPlanes - The intersection planes.\r\n\t * @param {Array<Vector4>} unionPlanes - The union planes.\r\n\t * @return {Node} The result node.\r\n\t */\r\n\tsetupDefault( intersectionPlanes, unionPlanes ) {\r\n\r\n\t\treturn Fn( () => {\r\n\r\n\t\t\tconst numUnionPlanes = unionPlanes.length;\r\n\r\n\t\t\tif ( this.hardwareClipping === false && numUnionPlanes > 0 ) {\r\n\r\n\t\t\t\tconst clippingPlanes = uniformArray( unionPlanes );\r\n\r\n\t\t\t\tLoop( numUnionPlanes, ( { i } ) => {\r\n\r\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\r\n\t\t\t\t\tpositionView.dot( plane.xyz ).greaterThan( plane.w ).discard();\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst numIntersectionPlanes = intersectionPlanes.length;\r\n\r\n\t\t\tif ( numIntersectionPlanes > 0 ) {\r\n\r\n\t\t\t\tconst clippingPlanes = uniformArray( intersectionPlanes );\r\n\t\t\t\tconst clipped = bool( true ).toVar( 'clipped' );\r\n\r\n\t\t\t\tLoop( numIntersectionPlanes, ( { i } ) => {\r\n\r\n\t\t\t\t\tconst plane = clippingPlanes.element( i );\r\n\t\t\t\t\tclipped.assign( positionView.dot( plane.xyz ).greaterThan( plane.w ).and( clipped ) );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tclipped.discard();\r\n\r\n\t\t\t}\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups hardware clipping.\r\n\t *\r\n\t * @param {Array<Vector4>} unionPlanes - The union planes.\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node} The result node.\r\n\t */\r\n\tsetupHardwareClipping( unionPlanes, builder ) {\r\n\r\n\t\tconst numUnionPlanes = unionPlanes.length;\r\n\r\n\t\tbuilder.enableHardwareClipping( numUnionPlanes );\r\n\r\n\t\treturn Fn( () => {\r\n\r\n\t\t\tconst clippingPlanes = uniformArray( unionPlanes );\r\n\t\t\tconst hw_clip_distances = builtin( builder.getClipDistance() );\r\n\r\n\t\t\tLoop( numUnionPlanes, ( { i } ) => {\r\n\r\n\t\t\t\tconst plane = clippingPlanes.element( i );\r\n\r\n\t\t\t\tconst distance = positionView.dot( plane.xyz ).sub( plane.w ).negate();\r\n\t\t\t\thw_clip_distances.element( i ).assign( distance );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n}\r\n\r\nClippingNode.ALPHA_TO_COVERAGE = 'alphaToCoverage';\r\nClippingNode.DEFAULT = 'default';\r\nClippingNode.HARDWARE = 'hardware';\r\n\r\nexport default ClippingNode;\r\n\r\n/**\r\n * TSL function for setting up the default clipping logic.\r\n *\r\n * @tsl\r\n * @function\r\n * @returns {ClippingNode}\r\n */\r\nexport const clipping = () => nodeObject( new ClippingNode() );\r\n\r\n/**\r\n * TSL function for setting up alpha to coverage.\r\n *\r\n * @tsl\r\n * @function\r\n * @returns {ClippingNode}\r\n */\r\nexport const clippingAlpha = () => nodeObject( new ClippingNode( ClippingNode.ALPHA_TO_COVERAGE ) );\r\n\r\n/**\r\n * TSL function for setting up hardware-based clipping.\r\n *\r\n * @tsl\r\n * @function\r\n * @returns {ClippingNode}\r\n */\r\nexport const hardwareClipping = () => nodeObject( new ClippingNode( ClippingNode.HARDWARE ) );\r\n", "const refreshUniforms = [\r\n\t'alphaMap',\r\n\t'alphaTest',\r\n\t'anisotropy',\r\n\t'anisotropyMap',\r\n\t'anisotropyRotation',\r\n\t'aoMap',\r\n\t'aoMapIntensity',\r\n\t'attenuationColor',\r\n\t'attenuationDistance',\r\n\t'bumpMap',\r\n\t'clearcoat',\r\n\t'clearcoatMap',\r\n\t'clearcoatNormalMap',\r\n\t'clearcoatNormalScale',\r\n\t'clearcoatRoughness',\r\n\t'color',\r\n\t'dispersion',\r\n\t'displacementMap',\r\n\t'emissive',\r\n\t'emissiveIntensity',\r\n\t'emissiveMap',\r\n\t'envMap',\r\n\t'envMapIntensity',\r\n\t'gradientMap',\r\n\t'ior',\r\n\t'iridescence',\r\n\t'iridescenceIOR',\r\n\t'iridescenceMap',\r\n\t'iridescenceThicknessMap',\r\n\t'lightMap',\r\n\t'lightMapIntensity',\r\n\t'map',\r\n\t'matcap',\r\n\t'metalness',\r\n\t'metalnessMap',\r\n\t'normalMap',\r\n\t'normalScale',\r\n\t'opacity',\r\n\t'roughness',\r\n\t'roughnessMap',\r\n\t'sheen',\r\n\t'sheenColor',\r\n\t'sheenColorMap',\r\n\t'sheenRoughnessMap',\r\n\t'shininess',\r\n\t'specular',\r\n\t'specularColor',\r\n\t'specularColorMap',\r\n\t'specularIntensity',\r\n\t'specularIntensityMap',\r\n\t'specularMap',\r\n\t'thickness',\r\n\t'transmission',\r\n\t'transmissionMap'\r\n];\r\n\r\n/**\r\n * This class is used by {@link WebGPURenderer} as management component.\r\n * It's primary purpose is to determine whether render objects require a\r\n * refresh right before they are going to be rendered or not.\r\n */\r\nclass NodeMaterialObserver {\r\n\r\n\t/**\r\n\t * Constructs a new node material observer.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The node builder.\r\n\t */\r\n\tconstructor( builder ) {\r\n\r\n\t\t/**\r\n\t\t * A node material can be used by more than one render object so the\r\n\t\t * monitor must maintain a list of render objects.\r\n\t\t *\r\n\t\t * @type {WeakMap<RenderObject,Object>}\r\n\t\t */\r\n\t\tthis.renderObjects = new WeakMap();\r\n\r\n\t\t/**\r\n\t\t * Whether the material uses node objects or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.hasNode = this.containsNode( builder );\r\n\r\n\t\t/**\r\n\t\t * Whether the node builder's 3D object is animated or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.hasAnimation = builder.object.isSkinnedMesh === true;\r\n\r\n\t\t/**\r\n\t\t * A list of all possible material uniforms\r\n\t\t *\r\n\t\t * @type {Array<string>}\r\n\t\t */\r\n\t\tthis.refreshUniforms = refreshUniforms;\r\n\r\n\t\t/**\r\n\t\t * Holds the current render ID from the node frame.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.renderId = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given render object is verified for the first time of this observer.\r\n\t *\r\n\t * @param {RenderObject} renderObject - The render object.\r\n\t * @return {boolean} Whether the given render object is verified for the first time of this observer.\r\n\t */\r\n\tfirstInitialization( renderObject ) {\r\n\r\n\t\tconst hasInitialized = this.renderObjects.has( renderObject );\r\n\r\n\t\tif ( hasInitialized === false ) {\r\n\r\n\t\t\tthis.getRenderObjectData( renderObject );\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the current rendering produces motion vectors.\r\n\t *\r\n\t * @param {Renderer} renderer - The renderer.\r\n\t * @return {boolean} Whether the current rendering produces motion vectors or not.\r\n\t */\r\n\tneedsVelocity( renderer ) {\r\n\r\n\t\tconst mrt = renderer.getMRT();\r\n\r\n\t\treturn ( mrt !== null && mrt.has( 'velocity' ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns monitoring data for the given render object.\r\n\t *\r\n\t * @param {RenderObject} renderObject - The render object.\r\n\t * @return {Object} The monitoring data.\r\n\t */\r\n\tgetRenderObjectData( renderObject ) {\r\n\r\n\t\tlet data = this.renderObjects.get( renderObject );\r\n\r\n\t\tif ( data === undefined ) {\r\n\r\n\t\t\tconst { geometry, material, object } = renderObject;\r\n\r\n\t\t\tdata = {\r\n\t\t\t\tmaterial: this.getMaterialData( material ),\r\n\t\t\t\tgeometry: {\r\n\t\t\t\t\tid: geometry.id,\r\n\t\t\t\t\tattributes: this.getAttributesData( geometry.attributes ),\r\n\t\t\t\t\tindexVersion: geometry.index ? geometry.index.version : null,\r\n\t\t\t\t\tdrawRange: { start: geometry.drawRange.start, count: geometry.drawRange.count }\r\n\t\t\t\t},\r\n\t\t\t\tworldMatrix: object.matrixWorld.clone()\r\n\t\t\t};\r\n\r\n\t\t\tif ( object.center ) {\r\n\r\n\t\t\t\tdata.center = object.center.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( object.morphTargetInfluences ) {\r\n\r\n\t\t\t\tdata.morphTargetInfluences = object.morphTargetInfluences.slice();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( renderObject.bundle !== null ) {\r\n\r\n\t\t\t\tdata.version = renderObject.bundle.version;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( data.material.transmission > 0 ) {\r\n\r\n\t\t\t\tconst { width, height } = renderObject.context;\r\n\r\n\t\t\t\tdata.bufferWidth = width;\r\n\t\t\t\tdata.bufferHeight = height;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.renderObjects.set( renderObject, data );\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an attribute data structure holding the attributes versions for\r\n\t * monitoring.\r\n\t *\r\n\t * @param {Object} attributes - The geometry attributes.\r\n\t * @return {Object} An object for monitoring the versions of attributes.\r\n\t */\r\n\tgetAttributesData( attributes ) {\r\n\r\n\t\tconst attributesData = {};\r\n\r\n\t\tfor ( const name in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ name ];\r\n\r\n\t\t\tattributesData[ name ] = {\r\n\t\t\t\tversion: attribute.version\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\treturn attributesData;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the node builder's material uses\r\n\t * node properties.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {boolean} Whether the node builder's material uses node properties or not.\r\n\t */\r\n\tcontainsNode( builder ) {\r\n\r\n\t\tconst material = builder.material;\r\n\r\n\t\tfor ( const property in material ) {\r\n\r\n\t\t\tif ( material[ property ] && material[ property ].isNode )\r\n\t\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( builder.renderer.overrideNodes.modelViewMatrix !== null || builder.renderer.overrideNodes.modelNormalViewMatrix !== null )\r\n\t\t\treturn true;\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a material data structure holding the material property values for\r\n\t * monitoring.\r\n\t *\r\n\t * @param {Material} material - The material.\r\n\t * @return {Object} An object for monitoring material properties.\r\n\t */\r\n\tgetMaterialData( material ) {\r\n\r\n\t\tconst data = {};\r\n\r\n\t\tfor ( const property of this.refreshUniforms ) {\r\n\r\n\t\t\tconst value = material[ property ];\r\n\r\n\t\t\tif ( value === null || value === undefined ) continue;\r\n\r\n\t\t\tif ( typeof value === 'object' && value.clone !== undefined ) {\r\n\r\n\t\t\t\tif ( value.isTexture === true ) {\r\n\r\n\t\t\t\t\tdata[ property ] = { id: value.id, version: value.version };\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdata[ property ] = value.clone();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata[ property ] = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given render object has not changed its state.\r\n\t *\r\n\t * @param {RenderObject} renderObject - The render object.\r\n\t * @return {boolean} Whether the given render object has changed its state or not.\r\n\t */\r\n\tequals( renderObject ) {\r\n\r\n\t\tconst { object, material, geometry } = renderObject;\r\n\r\n\t\tconst renderObjectData = this.getRenderObjectData( renderObject );\r\n\r\n\t\t// world matrix\r\n\r\n\t\tif ( renderObjectData.worldMatrix.equals( object.matrixWorld ) !== true ) {\r\n\r\n\t\t\trenderObjectData.worldMatrix.copy( object.matrixWorld );\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// material\r\n\r\n\t\tconst materialData = renderObjectData.material;\r\n\r\n\t\tfor ( const property in materialData ) {\r\n\r\n\t\t\tconst value = materialData[ property ];\r\n\t\t\tconst mtlValue = material[ property ];\r\n\r\n\t\t\tif ( value.equals !== undefined ) {\r\n\r\n\t\t\t\tif ( value.equals( mtlValue ) === false ) {\r\n\r\n\t\t\t\t\tvalue.copy( mtlValue );\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( mtlValue.isTexture === true ) {\r\n\r\n\t\t\t\tif ( value.id !== mtlValue.id || value.version !== mtlValue.version ) {\r\n\r\n\t\t\t\t\tvalue.id = mtlValue.id;\r\n\t\t\t\t\tvalue.version = mtlValue.version;\r\n\r\n\t\t\t\t\treturn false;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else if ( value !== mtlValue ) {\r\n\r\n\t\t\t\tmaterialData[ property ] = mtlValue;\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( materialData.transmission > 0 ) {\r\n\r\n\t\t\tconst { width, height } = renderObject.context;\r\n\r\n\t\t\tif ( renderObjectData.bufferWidth !== width || renderObjectData.bufferHeight !== height ) {\r\n\r\n\t\t\t\trenderObjectData.bufferWidth = width;\r\n\t\t\t\trenderObjectData.bufferHeight = height;\r\n\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// geometry\r\n\r\n\t\tconst storedGeometryData = renderObjectData.geometry;\r\n\t\tconst attributes = geometry.attributes;\r\n\t\tconst storedAttributes = storedGeometryData.attributes;\r\n\r\n\t\tconst storedAttributeNames = Object.keys( storedAttributes );\r\n\t\tconst currentAttributeNames = Object.keys( attributes );\r\n\r\n\t\tif ( storedGeometryData.id !== geometry.id ) {\r\n\r\n\t\t\tstoredGeometryData.id = geometry.id;\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\tif ( storedAttributeNames.length !== currentAttributeNames.length ) {\r\n\r\n\t\t\trenderObjectData.geometry.attributes = this.getAttributesData( attributes );\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// compare each attribute\r\n\r\n\t\tfor ( const name of storedAttributeNames ) {\r\n\r\n\t\t\tconst storedAttributeData = storedAttributes[ name ];\r\n\t\t\tconst attribute = attributes[ name ];\r\n\r\n\t\t\tif ( attribute === undefined ) {\r\n\r\n\t\t\t\t// attribute was removed\r\n\t\t\t\tdelete storedAttributes[ name ];\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( storedAttributeData.version !== attribute.version ) {\r\n\r\n\t\t\t\tstoredAttributeData.version = attribute.version;\r\n\t\t\t\treturn false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// check index\r\n\r\n\t\tconst index = geometry.index;\r\n\t\tconst storedIndexVersion = storedGeometryData.indexVersion;\r\n\t\tconst currentIndexVersion = index ? index.version : null;\r\n\r\n\t\tif ( storedIndexVersion !== currentIndexVersion ) {\r\n\r\n\t\t\tstoredGeometryData.indexVersion = currentIndexVersion;\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// check drawRange\r\n\r\n\t\tif ( storedGeometryData.drawRange.start !== geometry.drawRange.start || storedGeometryData.drawRange.count !== geometry.drawRange.count ) {\r\n\r\n\t\t\tstoredGeometryData.drawRange.start = geometry.drawRange.start;\r\n\t\t\tstoredGeometryData.drawRange.count = geometry.drawRange.count;\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\t// morph targets\r\n\r\n\t\tif ( renderObjectData.morphTargetInfluences ) {\r\n\r\n\t\t\tlet morphChanged = false;\r\n\r\n\t\t\tfor ( let i = 0; i < renderObjectData.morphTargetInfluences.length; i ++ ) {\r\n\r\n\t\t\t\tif ( renderObjectData.morphTargetInfluences[ i ] !== object.morphTargetInfluences[ i ] ) {\r\n\r\n\t\t\t\t\tmorphChanged = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( morphChanged ) return true;\r\n\r\n\t\t}\r\n\r\n\t\t// center\r\n\r\n\t\tif ( renderObjectData.center ) {\r\n\r\n\t\t\tif ( renderObjectData.center.equals( object.center ) === false ) {\r\n\r\n\t\t\t\trenderObjectData.center.copy( object.center );\r\n\r\n\t\t\t\treturn true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// bundle\r\n\r\n\t\tif ( renderObject.bundle !== null ) {\r\n\r\n\t\t\trenderObjectData.version = renderObject.bundle.version;\r\n\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Checks if the given render object requires a refresh.\r\n\t *\r\n\t * @param {RenderObject} renderObject - The render object.\r\n\t * @param {NodeFrame} nodeFrame - The current node frame.\r\n\t * @return {boolean} Whether the given render object requires a refresh or not.\r\n\t */\r\n\tneedsRefresh( renderObject, nodeFrame ) {\r\n\r\n\t\tif ( this.hasNode || this.hasAnimation || this.firstInitialization( renderObject ) || this.needsVelocity( nodeFrame.renderer ) )\r\n\t\t\treturn true;\r\n\r\n\t\tconst { renderId } = nodeFrame;\r\n\r\n\t\tif ( this.renderId !== renderId ) {\r\n\r\n\t\t\tthis.renderId = renderId;\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tconst isStatic = renderObject.object.static === true;\r\n\t\tconst isBundle = renderObject.bundle !== null && renderObject.bundle.static === true && this.getRenderObjectData( renderObject ).version === renderObject.bundle.version;\r\n\r\n\t\tif ( isStatic || isBundle )\r\n\t\t\treturn false;\r\n\r\n\t\tconst notEqual = this.equals( renderObject ) !== true;\r\n\r\n\t\treturn notEqual;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeMaterialObserver;\r\n", "import { abs, add, ceil, clamp, dFdx, dFdy, exp2, float, floor, Fn, fract, length, log2, max, min, mul, sin, sub, vec2, vec3 } from '../../tsl/TSLBase.js';\r\n\r\n// See: https://casual-effects.com/research/Wyman2017Hashed/index.html\r\n\r\nconst ALPHA_HASH_SCALE = 0.05; // Derived from trials only, and may be changed.\r\n\r\nconst hash2D = /*@__PURE__*/ Fn( ( [ value ] ) => {\r\n\r\n\treturn fract( mul( 1.0e4, sin( mul( 17.0, value.x ).add( mul( 0.1, value.y ) ) ) ).mul( add( 0.1, abs( sin( mul( 13.0, value.y ).add( value.x ) ) ) ) ) );\r\n\r\n} );\r\n\r\nconst hash3D = /*@__PURE__*/ Fn( ( [ value ] ) => {\r\n\r\n\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\r\n\r\n} );\r\n\r\nconst getAlphaHashThreshold = /*@__PURE__*/ Fn( ( [ position ] ) => {\r\n\r\n\t// Find the discretized derivatives of our coordinates\r\n\tconst maxDeriv = max(\r\n\t\tlength( dFdx( position.xyz ) ),\r\n\t\tlength( dFdy( position.xyz ) )\r\n\t);\r\n\r\n\tconst pixScale = float( 1 ).div( float( ALPHA_HASH_SCALE ).mul( maxDeriv ) ).toVar( 'pixScale' );\r\n\r\n\t// Find two nearest log-discretized noise scales\r\n\tconst pixScales = vec2(\r\n\t\texp2( floor( log2( pixScale ) ) ),\r\n\t\texp2( ceil( log2( pixScale ) ) )\r\n\t);\r\n\r\n\t// Compute alpha thresholds at our two noise scales\r\n\tconst alpha = vec2(\r\n\t\thash3D( floor( pixScales.x.mul( position.xyz ) ) ),\r\n\t\thash3D( floor( pixScales.y.mul( position.xyz ) ) ),\r\n\t);\r\n\r\n\t// Factor to interpolate lerp with\r\n\tconst lerpFactor = fract( log2( pixScale ) );\r\n\r\n\t// Interpolate alpha threshold from noise at two scales\r\n\tconst x = add( mul( lerpFactor.oneMinus(), alpha.x ), mul( lerpFactor, alpha.y ) );\r\n\r\n\t// Pass into CDF to compute uniformly distrib threshold\r\n\tconst a = min( lerpFactor, lerpFactor.oneMinus() );\r\n\tconst cases = vec3(\r\n\t\tx.mul( x ).div( mul( 2.0, a ).mul( sub( 1.0, a ) ) ),\r\n\t\tx.sub( mul( 0.5, a ) ).div( sub( 1.0, a ) ),\r\n\t\tsub( 1.0, sub( 1.0, x ).mul( sub( 1.0, x ) ).div( mul( 2.0, a ).mul( sub( 1.0, a ) ) ) ) );\r\n\r\n\t// Find our final, uniformly distributed alpha threshold (ατ)\r\n\tconst threshold = x.lessThan( a.oneMinus() ).select( x.lessThan( a ).select( cases.x, cases.y ), cases.z );\r\n\r\n\t// Avoids ατ == 0. Could also do ατ =1-ατ\r\n\treturn clamp( threshold, 1.0e-6, 1.0 );\r\n\r\n} ).setLayout( {\r\n\tname: 'getAlphaHashThreshold',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'position', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport default getAlphaHashThreshold;\r\n", "import AttributeNode from '../core/AttributeNode.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\n\r\n/**\r\n * An attribute node for representing vertex colors.\r\n *\r\n * @augments AttributeNode\r\n */\r\nclass VertexColorNode extends AttributeNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'VertexColorNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new vertex color node.\r\n\t *\r\n\t * @param {number} index - The attribute index.\r\n\t */\r\n\tconstructor( index ) {\r\n\r\n\t\tsuper( null, 'vec4' );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isVertexColorNode = true;\r\n\r\n\t\t/**\r\n\t\t * The attribute index to enable more than one sets of vertex colors.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.index = index;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation by honoring the attribute index.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The attribute name.\r\n\t */\r\n\tgetAttributeName( /*builder*/ ) {\r\n\r\n\t\tconst index = this.index;\r\n\r\n\t\treturn 'color' + ( index > 0 ? index : '' );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst attributeName = this.getAttributeName( builder );\r\n\t\tconst geometryAttribute = builder.hasGeometryAttribute( attributeName );\r\n\r\n\t\tlet result;\r\n\r\n\t\tif ( geometryAttribute === true ) {\r\n\r\n\t\t\tresult = super.generate( builder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Vertex color fallback should be white\r\n\t\t\tresult = builder.generateConst( this.nodeType, new Vector4( 1, 1, 1, 1 ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.index = this.index;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.index = data.index;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default VertexColorNode;\r\n\r\n/**\r\n * TSL function for creating a reference node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {number} [index=0] - The attribute index.\r\n * @returns {VertexColorNode}\r\n */\r\nexport const vertexColor = ( index = 0 ) => nodeObject( new VertexColorNode( index ) );\r\n", "import { Fn, If, vec4 } from '../tsl/TSLBase.js';\r\nimport { mix, min, step } from '../math/MathNode.js';\r\n\r\n/**\r\n * Represents a \"Color Burn\" blend mode.\r\n *\r\n * It's designed to darken the base layer's colors based on the color of the blend layer.\r\n * It significantly increases the contrast of the base layer, making the colors more vibrant and saturated.\r\n * The darker the color in the blend layer, the stronger the darkening and contrast effect on the base layer.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} base - The base color.\r\n * @param {Node<vec3>} blend - The blend color. A white (#ffffff) blend color does not alter the base color.\r\n * @return {Node<vec3>} The result.\r\n */\r\nexport const blendBurn = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\r\n\r\n\treturn min( 1.0, base.oneMinus().div( blend ) ).oneMinus();\r\n\r\n} ).setLayout( {\r\n\tname: 'blendBurn',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n/**\r\n * Represents a \"Color Dodge\" blend mode.\r\n *\r\n * It's designed to lighten the base layer's colors based on the color of the blend layer.\r\n * It significantly increases the brightness of the base layer, making the colors lighter and more vibrant.\r\n * The brighter the color in the blend layer, the stronger the lightening and contrast effect on the base layer.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} base - The base color.\r\n * @param {Node<vec3>} blend - The blend color. A black (#000000) blend color does not alter the base color.\r\n * @return {Node<vec3>} The result.\r\n */\r\nexport const blendDodge = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\r\n\r\n\treturn min( base.div( blend.oneMinus() ), 1.0 );\r\n\r\n} ).setLayout( {\r\n\tname: 'blendDodge',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n/**\r\n * Represents a \"Screen\" blend mode.\r\n *\r\n * Similar to `blendDodge()`, this mode also lightens the base layer's colors based on the color of the blend layer.\r\n * The \"Screen\" blend mode is better for general brightening whereas the \"Dodge\" results in more subtle and nuanced\r\n * effects.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} base - The base color.\r\n * @param {Node<vec3>} blend - The blend color. A black (#000000) blend color does not alter the base color.\r\n * @return {Node<vec3>} The result.\r\n */\r\nexport const blendScreen = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\r\n\r\n\treturn base.oneMinus().mul( blend.oneMinus() ).oneMinus();\r\n\r\n} ).setLayout( {\r\n\tname: 'blendScreen',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n/**\r\n * Represents a \"Overlay\" blend mode.\r\n *\r\n * It's designed to increase the contrast of the base layer based on the color of the blend layer.\r\n * It amplifies the existing colors and contrast in the base layer, making lighter areas lighter and darker areas darker.\r\n * The color of the blend layer significantly influences the resulting contrast and color shift in the base layer.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} base - The base color.\r\n * @param {Node<vec3>} blend - The blend color\r\n * @return {Node<vec3>} The result.\r\n */\r\nexport const blendOverlay = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\r\n\r\n\treturn mix( base.mul( 2.0 ).mul( blend ), base.oneMinus().mul( 2.0 ).mul( blend.oneMinus() ).oneMinus(), step( 0.5, base ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'blendOverlay',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec3' },\r\n\t\t{ name: 'blend', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n/**\r\n * This function blends two color based on their alpha values by replicating the behavior of `THREE.NormalBlending`.\r\n * It assumes both input colors have non-premultiplied alpha.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec4>} base - The base color.\r\n * @param {Node<vec4>} blend - The blend color\r\n * @return {Node<vec4>} The result.\r\n */\r\nexport const blendColor = /*@__PURE__*/ Fn( ( [ base, blend ] ) => {\r\n\r\n\tconst outAlpha = blend.a.add( base.a.mul( blend.a.oneMinus() ) );\r\n\r\n\treturn vec4( blend.rgb.mul( blend.a ).add( base.rgb.mul( base.a ).mul( blend.a.oneMinus() ) ).div( outAlpha ), outAlpha );\r\n\r\n} ).setLayout( {\r\n\tname: 'blendColor',\r\n\ttype: 'vec4',\r\n\tinputs: [\r\n\t\t{ name: 'base', type: 'vec4' },\r\n\t\t{ name: 'blend', type: 'vec4' }\r\n\t]\r\n} );\r\n\r\n/**\r\n * Premultiplies the RGB channels of a color by its alpha channel.\r\n *\r\n * This function is useful for converting a non-premultiplied alpha color\r\n * into a premultiplied alpha format, where the RGB values are scaled\r\n * by the alpha value. Premultiplied alpha is often used in graphics\r\n * rendering for certain operations, such as compositing and image processing.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec4>} color - The input color with non-premultiplied alpha.\r\n * @return {Node<vec4>} The color with premultiplied alpha.\r\n */\r\nexport const premultiplyAlpha = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\treturn vec4( color.rgb.mul( color.a ), color.a );\r\n\r\n}, { color: 'vec4', return: 'vec4' } );\r\n\r\n/**\r\n * Unpremultiplies the RGB channels of a color by its alpha channel.\r\n *\r\n * This function is useful for converting a premultiplied alpha color\r\n * back into a non-premultiplied alpha format, where the RGB values are\r\n * divided by the alpha value. Unpremultiplied alpha is often used in graphics\r\n * rendering for certain operations, such as compositing and image processing.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec4>} color - The input color with premultiplied alpha.\r\n * @return {Node<vec4>} The color with non-premultiplied alpha.\r\n */\r\nexport const unpremultiplyAlpha = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\tIf( color.a.equal( 0.0 ), () => vec4( 0.0 ) );\r\n\r\n\treturn vec4( color.rgb.div( color.a ), color.a );\r\n\r\n}, { color: 'vec4', return: 'vec4' } );\r\n\r\n\r\n// Deprecated\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r171. Use {@link blendBurn} instead.\r\n *\r\n * @param {...any} params\r\n * @returns {Function}\r\n */\r\nexport const burn = ( ...params ) => { // @deprecated, r171\r\n\r\n\tconsole.warn( 'THREE.TSL: \"burn\" has been renamed. Use \"blendBurn\" instead.' );\r\n\treturn blendBurn( params );\r\n\r\n};\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r171. Use {@link blendDodge} instead.\r\n *\r\n * @param {...any} params\r\n * @returns {Function}\r\n */\r\nexport const dodge = ( ...params ) => { // @deprecated, r171\r\n\r\n\tconsole.warn( 'THREE.TSL: \"dodge\" has been renamed. Use \"blendDodge\" instead.' );\r\n\treturn blendDodge( params );\r\n\r\n};\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r171. Use {@link blendScreen} instead.\r\n *\r\n * @param {...any} params\r\n * @returns {Function}\r\n */\r\nexport const screen = ( ...params ) => { // @deprecated, r171\r\n\r\n\tconsole.warn( 'THREE.TSL: \"screen\" has been renamed. Use \"blendScreen\" instead.' );\r\n\treturn blendScreen( params );\r\n\r\n};\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r171. Use {@link blendOverlay} instead.\r\n *\r\n * @param {...any} params\r\n * @returns {Function}\r\n */\r\nexport const overlay = ( ...params ) => { // @deprecated, r171\r\n\r\n\tconsole.warn( 'THREE.TSL: \"overlay\" has been renamed. Use \"blendOverlay\" instead.' );\r\n\treturn blendOverlay( params );\r\n\r\n};\r\n", "import { Material } from '../Material.js';\r\nimport { NormalBlending } from '../../constants.js';\r\n\r\nimport { getNodeChildren, getCacheKey } from '../../nodes/core/NodeUtils.js';\r\nimport { output, diffuseColor, emissive, varyingProperty } from '../../nodes/core/PropertyNode.js';\r\nimport { materialAlphaTest, materialColor, materialOpacity, materialEmissive, materialNormal, materialLightMap, materialAO } from '../../nodes/accessors/MaterialNode.js';\r\nimport { modelViewProjection } from '../../nodes/accessors/ModelViewProjectionNode.js';\r\nimport { normalLocal } from '../../nodes/accessors/Normal.js';\r\nimport { instancedMesh } from '../../nodes/accessors/InstancedMeshNode.js';\r\nimport { batch } from '../../nodes/accessors/BatchNode.js';\r\nimport { materialReference } from '../../nodes/accessors/MaterialReferenceNode.js';\r\nimport { positionLocal, positionView } from '../../nodes/accessors/Position.js';\r\nimport { skinning } from '../../nodes/accessors/SkinningNode.js';\r\nimport { morphReference } from '../../nodes/accessors/MorphNode.js';\r\nimport { mix } from '../../nodes/math/MathNode.js';\r\nimport { float, vec3, vec4, bool } from '../../nodes/tsl/TSLBase.js';\r\nimport AONode from '../../nodes/lighting/AONode.js';\r\nimport { lightingContext } from '../../nodes/lighting/LightingContextNode.js';\r\nimport IrradianceNode from '../../nodes/lighting/IrradianceNode.js';\r\nimport { depth, viewZToLogarithmicDepth, viewZToOrthographicDepth } from '../../nodes/display/ViewportDepthNode.js';\r\nimport { cameraFar, cameraNear, cameraProjectionMatrix } from '../../nodes/accessors/Camera.js';\r\nimport { clipping, clippingAlpha, hardwareClipping } from '../../nodes/accessors/ClippingNode.js';\r\nimport NodeMaterialObserver from './manager/NodeMaterialObserver.js';\r\nimport getAlphaHashThreshold from '../../nodes/functions/material/getAlphaHashThreshold.js';\r\nimport { modelViewMatrix } from '../../nodes/accessors/ModelNode.js';\r\nimport { vertexColor } from '../../nodes/accessors/VertexColorNode.js';\r\nimport { premultiplyAlpha } from '../../nodes/display/BlendModes.js';\r\nimport { subBuild } from '../../nodes/core/SubBuildNode.js';\r\n\r\n/**\r\n * Base class for all node materials.\r\n *\r\n * @augments Material\r\n */\r\nclass NodeMaterial extends Material {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'NodeMaterial';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Represents the type of the node material.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tget type() {\r\n\r\n\t\treturn this.constructor.type;\r\n\r\n\t}\r\n\r\n\tset type( _value ) { /* */ }\r\n\r\n\t/**\r\n\t * Constructs a new node material.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isNodeMaterial = true;\r\n\r\n\t\t/**\r\n\t\t * Whether this material is affected by fog or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.fog = true;\r\n\r\n\t\t/**\r\n\t\t * Whether this material is affected by lights or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.lights = false;\r\n\r\n\t\t/**\r\n\t\t * Whether this material uses hardware clipping or not.\r\n\t\t * This property is managed by the engine and should not be\r\n\t\t * modified by apps.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.hardwareClipping = false;\r\n\r\n\t\t/**\r\n\t\t * Node materials which set their `lights` property to `true`\r\n\t\t * are affected by all lights of the scene. Sometimes selective\r\n\t\t * lighting is wanted which means only _some_ lights in the scene\r\n\t\t * affect a material. This can be achieved by creating an instance\r\n\t\t * of {@link LightsNode} with a list of selective\r\n\t\t * lights and assign the node to this property.\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * const customLightsNode = lights( [ light1, light2 ] );\r\n\t\t * material.lightsNode = customLightsNode;\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @type {?LightsNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.lightsNode = null;\r\n\r\n\t\t/**\r\n\t\t * The environment of node materials can be defined by an environment\r\n\t\t * map assigned to the `envMap` property or by `Scene.environment`\r\n\t\t * if the node material is a PBR material. This node property allows to overwrite\r\n\t\t * the default behavior and define the environment with a custom node.\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * material.envNode = pmremTexture( renderTarget.texture );\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @type {?Node<vec3>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.envNode = null;\r\n\r\n\t\t/**\r\n\t\t * The lighting of node materials might be influenced by ambient occlusion.\r\n\t\t * The default AO is inferred from an ambient occlusion map assigned to `aoMap`\r\n\t\t * and the respective `aoMapIntensity`. This node property allows to overwrite\r\n\t\t * the default and define the ambient occlusion with a custom node instead.\r\n\t\t *\r\n\t\t * If you don't want to overwrite the diffuse color but modify the existing\r\n\t\t * values instead, use {@link materialAO}.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.aoNode = null;\r\n\r\n\t\t/**\r\n\t\t * The diffuse color of node materials is by default inferred from the\r\n\t\t * `color` and `map` properties. This node property allows to overwrite the default\r\n\t\t * and define the diffuse color with a node instead.\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * material.colorNode = color( 0xff0000 ); // define red color\r\n\t\t * ```\r\n\t\t *\r\n\t\t * If you don't want to overwrite the diffuse color but modify the existing\r\n\t\t * values instead, use {@link materialColor}.\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * material.colorNode = materialColor.mul( color( 0xff0000 ) ); // give diffuse colors a red tint\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @type {?Node<vec3>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.colorNode = null;\r\n\r\n\t\t/**\r\n\t\t * The normals of node materials are by default inferred from the `normalMap`/`normalScale`\r\n\t\t * or `bumpMap`/`bumpScale` properties. This node property allows to overwrite the default\r\n\t\t * and define the normals with a node instead.\r\n\t\t *\r\n\t\t * If you don't want to overwrite the normals but modify the existing values instead,\r\n\t\t * use {@link materialNormal}.\r\n\t\t *\r\n\t\t * @type {?Node<vec3>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.normalNode = null;\r\n\r\n\t\t/**\r\n\t\t * The opacity of node materials is by default inferred from the `opacity`\r\n\t\t * and `alphaMap` properties. This node property allows to overwrite the default\r\n\t\t * and define the opacity with a node instead.\r\n\t\t *\r\n\t\t * If you don't want to overwrite the normals but modify the existing\r\n\t\t * value instead, use {@link materialOpacity}.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.opacityNode = null;\r\n\r\n\t\t/**\r\n\t\t * This node can be used to implement a variety of filter-like effects. The idea is\r\n\t\t * to store the current rendering into a texture e.g. via `viewportSharedTexture()`, use it\r\n\t\t * to create an arbitrary effect and then assign the node composition to this property.\r\n\t\t * Everything behind the object using this material will now be affected by a filter.\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * const material = new NodeMaterial()\r\n\t\t * material.transparent = true;\r\n\t\t *\r\n\t\t * // everything behind the object will be monochromatic\r\n\t\t * material.backdropNode = saturation( viewportSharedTexture().rgb, 0 );\r\n\t\t * ```\r\n\t\t *\r\n\t\t * Backdrop computations are part of the lighting so only lit materials can use this property.\r\n\t\t *\r\n\t\t * @type {?Node<vec3>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.backdropNode = null;\r\n\r\n\t\t/**\r\n\t\t * This node allows to modulate the influence of `backdropNode` to the outgoing light.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.backdropAlphaNode = null;\r\n\r\n\t\t/**\r\n\t\t * The alpha test of node materials is by default inferred from the `alphaTest`\r\n\t\t * property. This node property allows to overwrite the default and define the\r\n\t\t * alpha test with a node instead.\r\n\t\t *\r\n\t\t * If you don't want to overwrite the alpha test but modify the existing\r\n\t\t * value instead, use {@link materialAlphaTest}.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.alphaTestNode = null;\r\n\r\n\r\n\t\t/**\r\n\t\t * Discards the fragment if the mask value is `false`.\r\n\t\t *\r\n\t\t * @type {?Node<bool>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.maskNode = null;\r\n\r\n\t\t/**\r\n\t\t * The local vertex positions are computed based on multiple factors like the\r\n\t\t * attribute data, morphing or skinning. This node property allows to overwrite\r\n\t\t * the default and define local vertex positions with nodes instead.\r\n\t\t *\r\n\t\t * If you don't want to overwrite the vertex positions but modify the existing\r\n\t\t * values instead, use {@link positionLocal}.\r\n\t\t *\r\n\t\t *```js\r\n\t\t * material.positionNode = positionLocal.add( displace );\r\n\t\t * ```\r\n\t\t *\r\n\t\t * @type {?Node<vec3>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.positionNode = null;\r\n\r\n\t\t/**\r\n\t\t * This node property is intended for logic which modifies geometry data once or per animation step.\r\n\t\t * Apps usually place such logic randomly in initialization routines or in the animation loop.\r\n\t\t * `geometryNode` is intended as a dedicated API so there is an intended spot where geometry modifications\r\n\t\t * can be implemented.\r\n\t\t *\r\n\t\t * The idea is to assign a `Fn` definition that holds the geometry modification logic. A typical example\r\n\t\t * would be a GPU based particle system that provides a node material for usage on app level. The particle\r\n\t\t * simulation would be implemented as compute shaders and managed inside a `Fn` function. This function is\r\n\t\t * eventually assigned to `geometryNode`.\r\n\t\t *\r\n\t\t * @type {?Function}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.geometryNode = null;\r\n\r\n\t\t/**\r\n\t\t * Allows to overwrite depth values in the fragment shader.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.depthNode = null;\r\n\r\n\t\t/**\r\n\t\t * Allows to overwrite the position used for shadow map rendering which\r\n\t\t * is by default {@link positionWorld}, the vertex position\r\n\t\t * in world space.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.receivedShadowPositionNode = null;\r\n\r\n\t\t/**\r\n\t\t * Allows to overwrite the geometry position used for shadow map projection which\r\n\t\t * is by default {@link positionLocal}, the vertex position in local space.\r\n\t\t *\r\n\t\t * @type {?Node<float>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.castShadowPositionNode = null;\r\n\r\n\t\t/**\r\n\t\t * This node can be used to influence how an object using this node material\r\n\t\t * receive shadows.\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * const totalShadows = float( 1 ).toVar();\r\n\t\t * material.receivedShadowNode = Fn( ( [ shadow ] ) => {\r\n\t\t * \ttotalShadows.mulAssign( shadow );\r\n\t\t * \t//return float( 1 ); // bypass received shadows\r\n\t\t * \treturn shadow.mix( color( 0xff0000 ), 1 ); // modify shadow color\r\n\t\t * } );\r\n\t\t *\r\n\t\t * @type {?(Function|FunctionNode<vec4>)}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.receivedShadowNode = null;\r\n\r\n\t\t/**\r\n\t\t * This node can be used to influence how an object using this node material\r\n\t\t * casts shadows. To apply a color to shadows, you can simply do:\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * material.castShadowNode = vec4( 1, 0, 0, 1 );\r\n\t\t * ```\r\n\t\t *\r\n\t\t * Which can be nice to fake colored shadows of semi-transparent objects. It\r\n\t\t * is also common to use the property with `Fn` function so checks are performed\r\n\t\t * per fragment.\r\n\t\t *\r\n\t\t * ```js\r\n\t\t * materialCustomShadow.castShadowNode = Fn( () => {\r\n\t\t * \thash( vertexIndex ).greaterThan( 0.5 ).discard();\r\n\t\t * \treturn materialColor;\r\n\t\t * } )();\r\n\t\t *  ```\r\n\t\t *\r\n\t\t * @type {?Node<vec4>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.castShadowNode = null;\r\n\r\n\t\t/**\r\n\t\t * This node can be used to define the final output of the material.\r\n\t\t *\r\n\t\t * TODO: Explain the differences to `fragmentNode`.\r\n\t\t *\r\n\t\t * @type {?Node<vec4>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.outputNode = null;\r\n\r\n\t\t/**\r\n\t\t * MRT configuration is done on renderer or pass level. This node allows to\r\n\t\t * overwrite what values are written into MRT targets on material level. This\r\n\t\t * can be useful for implementing selective FX features that should only affect\r\n\t\t * specific objects.\r\n\t\t *\r\n\t\t * @type {?MRTNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.mrtNode = null;\r\n\r\n\t\t/**\r\n\t\t * This node property can be used if you need complete freedom in implementing\r\n\t\t * the fragment shader. Assigning a node will replace the built-in material\r\n\t\t * logic used in the fragment stage.\r\n\t\t *\r\n\t\t * @type {?Node<vec4>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.fragmentNode = null;\r\n\r\n\t\t/**\r\n\t\t * This node property can be used if you need complete freedom in implementing\r\n\t\t * the vertex shader. Assigning a node will replace the built-in material logic\r\n\t\t * used in the vertex stage.\r\n\t\t *\r\n\t\t * @type {?Node<vec4>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.vertexNode = null;\r\n\r\n\t\t// Deprecated properties\r\n\r\n\t\tObject.defineProperty( this, 'shadowPositionNode', { // @deprecated, r176\r\n\r\n\t\t\tget: () => {\r\n\r\n\t\t\t\treturn this.receivedShadowPositionNode;\r\n\r\n\t\t\t},\r\n\r\n\t\t\tset: ( value ) => {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.NodeMaterial: \".shadowPositionNode\" was renamed to \".receivedShadowPositionNode\".' );\r\n\r\n\t\t\t\tthis.receivedShadowPositionNode = value;\r\n\r\n\t\t\t}\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Allows to define a custom cache key that influence the material key computation\r\n\t * for render objects.\r\n\t *\r\n\t * @return {string} The custom cache key.\r\n\t */\r\n\tcustomProgramCacheKey() {\r\n\r\n\t\treturn this.type + getCacheKey( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Builds this material with the given node builder.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tbuild( builder ) {\r\n\r\n\t\tthis.setup( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups a node material observer with the given builder.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {NodeMaterialObserver} The node material observer.\r\n\t */\r\n\tsetupObserver( builder ) {\r\n\r\n\t\treturn new NodeMaterialObserver( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the vertex and fragment stage of this node material.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tbuilder.context.setupNormal = () => subBuild( this.setupNormal( builder ), 'NORMAL', 'vec3' );\r\n\t\tbuilder.context.setupPositionView = () => this.setupPositionView( builder );\r\n\t\tbuilder.context.setupModelViewProjection = () => this.setupModelViewProjection( builder );\r\n\r\n\t\tconst renderer = builder.renderer;\r\n\t\tconst renderTarget = renderer.getRenderTarget();\r\n\r\n\t\t// < VERTEX STAGE >\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tconst mvp = subBuild( this.setupVertex( builder ), 'VERTEX' );\r\n\r\n\t\tconst vertexNode = this.vertexNode || mvp;\r\n\r\n\t\tbuilder.stack.outputNode = vertexNode;\r\n\r\n\t\tthis.setupHardwareClipping( builder );\r\n\r\n\t\tif ( this.geometryNode !== null ) {\r\n\r\n\t\t\tbuilder.stack.outputNode = builder.stack.outputNode.bypass( this.geometryNode );\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.addFlow( 'vertex', builder.removeStack() );\r\n\r\n\t\t// < FRAGMENT STAGE >\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tlet resultNode;\r\n\r\n\t\tconst clippingNode = this.setupClipping( builder );\r\n\r\n\t\tif ( this.depthWrite === true || this.depthTest === true ) {\r\n\r\n\t\t\t// only write depth if depth buffer is configured\r\n\r\n\t\t\tif ( renderTarget !== null ) {\r\n\r\n\t\t\t\tif ( renderTarget.depthBuffer === true ) this.setupDepth( builder );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( renderer.depth === true ) this.setupDepth( builder );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.fragmentNode === null ) {\r\n\r\n\t\t\tthis.setupDiffuseColor( builder );\r\n\t\t\tthis.setupVariants( builder );\r\n\r\n\t\t\tconst outgoingLightNode = this.setupLighting( builder );\r\n\r\n\t\t\tif ( clippingNode !== null ) builder.stack.add( clippingNode );\r\n\r\n\t\t\t// force unsigned floats - useful for RenderTargets\r\n\r\n\t\t\tconst basicOutput = vec4( outgoingLightNode, diffuseColor.a ).max( 0 );\r\n\r\n\t\t\tresultNode = this.setupOutput( builder, basicOutput );\r\n\r\n\t\t\t// OUTPUT NODE\r\n\r\n\t\t\toutput.assign( resultNode );\r\n\r\n\t\t\t//\r\n\r\n\t\t\tconst isCustomOutput = this.outputNode !== null;\r\n\r\n\t\t\tif ( isCustomOutput ) resultNode = this.outputNode;\r\n\r\n\t\t\t// MRT\r\n\r\n\t\t\tif ( renderTarget !== null ) {\r\n\r\n\t\t\t\tconst mrt = renderer.getMRT();\r\n\t\t\t\tconst materialMRT = this.mrtNode;\r\n\r\n\t\t\t\tif ( mrt !== null ) {\r\n\r\n\t\t\t\t\tif ( isCustomOutput ) output.assign( resultNode );\r\n\r\n\t\t\t\t\tresultNode = mrt;\r\n\r\n\t\t\t\t\tif ( materialMRT !== null ) {\r\n\r\n\t\t\t\t\t\tresultNode = mrt.merge( materialMRT );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else if ( materialMRT !== null ) {\r\n\r\n\t\t\t\t\tresultNode = materialMRT;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tlet fragmentNode = this.fragmentNode;\r\n\r\n\t\t\tif ( fragmentNode.isOutputStructNode !== true ) {\r\n\r\n\t\t\t\tfragmentNode = vec4( fragmentNode );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tresultNode = this.setupOutput( builder, fragmentNode );\r\n\r\n\t\t}\r\n\r\n\t\tbuilder.stack.outputNode = resultNode;\r\n\r\n\t\tbuilder.addFlow( 'fragment', builder.removeStack() );\r\n\r\n\t\t// < OBSERVER >\r\n\r\n\t\tbuilder.observer = this.setupObserver( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the clipping node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {ClippingNode} The clipping node.\r\n\t */\r\n\tsetupClipping( builder ) {\r\n\r\n\t\tif ( builder.clippingContext === null ) return null;\r\n\r\n\t\tconst { unionPlanes, intersectionPlanes } = builder.clippingContext;\r\n\r\n\t\tlet result = null;\r\n\r\n\t\tif ( unionPlanes.length > 0 || intersectionPlanes.length > 0 ) {\r\n\r\n\t\t\tconst samples = builder.renderer.samples;\r\n\r\n\t\t\tif ( this.alphaToCoverage && samples > 1 ) {\r\n\r\n\t\t\t\t// to be added to flow when the color/alpha value has been determined\r\n\t\t\t\tresult = clippingAlpha();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tbuilder.stack.add( clipping() );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the hardware clipping if available on the current device.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tsetupHardwareClipping( builder ) {\r\n\r\n\t\tthis.hardwareClipping = false;\r\n\r\n\t\tif ( builder.clippingContext === null ) return;\r\n\r\n\t\tconst candidateCount = builder.clippingContext.unionPlanes.length;\r\n\r\n\t\t// 8 planes supported by WebGL ANGLE_clip_cull_distance and WebGPU clip-distances\r\n\r\n\t\tif ( candidateCount > 0 && candidateCount <= 8 && builder.isAvailable( 'clipDistance' ) ) {\r\n\r\n\t\t\tbuilder.stack.add( hardwareClipping() );\r\n\r\n\t\t\tthis.hardwareClipping = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the depth of this material.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tsetupDepth( builder ) {\r\n\r\n\t\tconst { renderer, camera } = builder;\r\n\r\n\t\t// Depth\r\n\r\n\t\tlet depthNode = this.depthNode;\r\n\r\n\t\tif ( depthNode === null ) {\r\n\r\n\t\t\tconst mrt = renderer.getMRT();\r\n\r\n\t\t\tif ( mrt && mrt.has( 'depth' ) ) {\r\n\r\n\t\t\t\tdepthNode = mrt.get( 'depth' );\r\n\r\n\t\t\t} else if ( renderer.logarithmicDepthBuffer === true ) {\r\n\r\n\t\t\t\tif ( camera.isPerspectiveCamera ) {\r\n\r\n\t\t\t\t\tdepthNode = viewZToLogarithmicDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tdepthNode = viewZToOrthographicDepth( positionView.z, cameraNear, cameraFar );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( depthNode !== null ) {\r\n\r\n\t\t\tdepth.assign( depthNode ).toStack();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the position node in view space. This method exists\r\n\t * so derived node materials can modify the implementation e.g. sprite materials.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node<vec3>} The position in view space.\r\n\t */\r\n\tsetupPositionView( /*builder*/ ) {\r\n\r\n\t\treturn modelViewMatrix.mul( positionLocal ).xyz;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the position in clip space.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node<vec4>} The position in view space.\r\n\t */\r\n\tsetupModelViewProjection( /*builder*/ ) {\r\n\r\n\t\treturn cameraProjectionMatrix.mul( positionView );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the logic for the vertex stage.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node<vec4>} The position in clip space.\r\n\t */\r\n\tsetupVertex( builder ) {\r\n\r\n\t\tbuilder.addStack();\r\n\r\n\t\tthis.setupPosition( builder );\r\n\r\n\t\tbuilder.context.vertex = builder.removeStack();\r\n\r\n\t\treturn modelViewProjection;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the computation of the position in local space.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node<vec3>} The position in local space.\r\n\t */\r\n\tsetupPosition( builder ) {\r\n\r\n\t\tconst { object, geometry } = builder;\r\n\r\n\t\tif ( geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color ) {\r\n\r\n\t\t\tmorphReference( object ).toStack();\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.isSkinnedMesh === true ) {\r\n\r\n\t\t\tskinning( object ).toStack();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.displacementMap ) {\r\n\r\n\t\t\tconst displacementMap = materialReference( 'displacementMap', 'texture' );\r\n\t\t\tconst displacementScale = materialReference( 'displacementScale', 'float' );\r\n\t\t\tconst displacementBias = materialReference( 'displacementBias', 'float' );\r\n\r\n\t\t\tpositionLocal.addAssign( normalLocal.normalize().mul( ( displacementMap.x.mul( displacementScale ).add( displacementBias ) ) ) );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.isBatchedMesh ) {\r\n\r\n\t\t\tbatch( object ).toStack();\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( object.isInstancedMesh && object.instanceMatrix && object.instanceMatrix.isInstancedBufferAttribute === true ) ) {\r\n\r\n\t\t\tinstancedMesh( object ).toStack();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.positionNode !== null ) {\r\n\r\n\t\t\tpositionLocal.assign( subBuild( this.positionNode, 'POSITION', 'vec3' ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn positionLocal;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the computation of the material's diffuse color.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {BufferGeometry} geometry - The geometry.\r\n\t */\r\n\tsetupDiffuseColor( { object, geometry } ) {\r\n\r\n\t\t// MASK\r\n\r\n\t\tif ( this.maskNode !== null ) {\r\n\r\n\t\t\t// Discard if the mask is `false`\r\n\r\n\t\t\tbool( this.maskNode ).not().discard();\r\n\r\n\t\t}\r\n\r\n\t\t// COLOR\r\n\r\n\t\tlet colorNode = this.colorNode ? vec4( this.colorNode ) : materialColor;\r\n\r\n\t\t// VERTEX COLORS\r\n\r\n\t\tif ( this.vertexColors === true && geometry.hasAttribute( 'color' ) ) {\r\n\r\n\t\t\tcolorNode = colorNode.mul( vertexColor() );\r\n\r\n\t\t}\r\n\r\n\t\t// INSTANCED COLORS\r\n\r\n\t\tif ( object.instanceColor ) {\r\n\r\n\t\t\tconst instanceColor = varyingProperty( 'vec3', 'vInstanceColor' );\r\n\r\n\t\t\tcolorNode = instanceColor.mul( colorNode );\r\n\r\n\t\t}\r\n\r\n\t\tif ( object.isBatchedMesh && object._colorsTexture ) {\r\n\r\n\t\t\tconst batchColor = varyingProperty( 'vec3', 'vBatchColor' );\r\n\r\n\t\t\tcolorNode = batchColor.mul( colorNode );\r\n\r\n\t\t}\r\n\r\n\t\t// DIFFUSE COLOR\r\n\r\n\t\tdiffuseColor.assign( colorNode );\r\n\r\n\t\t// OPACITY\r\n\r\n\t\tconst opacityNode = this.opacityNode ? float( this.opacityNode ) : materialOpacity;\r\n\t\tdiffuseColor.a.assign( diffuseColor.a.mul( opacityNode ) );\r\n\r\n\t\t// ALPHA TEST\r\n\r\n\t\tlet alphaTestNode = null;\r\n\r\n\t\tif ( this.alphaTestNode !== null || this.alphaTest > 0 ) {\r\n\r\n\t\t\talphaTestNode = this.alphaTestNode !== null ? float( this.alphaTestNode ) : materialAlphaTest;\r\n\r\n\t\t\tdiffuseColor.a.lessThanEqual( alphaTestNode ).discard();\r\n\r\n\t\t}\r\n\r\n\t\t// ALPHA HASH\r\n\r\n\t\tif ( this.alphaHash === true ) {\r\n\r\n\t\t\tdiffuseColor.a.lessThan( getAlphaHashThreshold( positionLocal ) ).discard();\r\n\r\n\t\t}\r\n\r\n\t\t// OPAQUE\r\n\r\n\t\tconst isOpaque = this.transparent === false && this.blending === NormalBlending && this.alphaToCoverage === false;\r\n\r\n\t\tif ( isOpaque ) {\r\n\r\n\t\t\tdiffuseColor.a.assign( 1.0 );\r\n\r\n\t\t} else if ( alphaTestNode === null ) {\r\n\r\n\t\t\tdiffuseColor.a.lessThanEqual( 0 ).discard();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Abstract interface method that can be implemented by derived materials\r\n\t * to setup material-specific node variables.\r\n\t *\r\n\t * @abstract\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tsetupVariants( /*builder*/ ) {\r\n\r\n\t\t// Interface function.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the outgoing light node variable\r\n\t *\r\n\t * @return {Node<vec3>} The outgoing light node.\r\n\t */\r\n\tsetupOutgoingLight() {\r\n\r\n\t\treturn ( this.lights === true ) ? vec3( 0 ) : diffuseColor.rgb;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the normal node from the material.\r\n\t *\r\n\t * @return {Node<vec3>} The normal node.\r\n\t */\r\n\tsetupNormal() {\r\n\r\n\t\treturn this.normalNode ? vec3( this.normalNode ) : materialNormal;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the environment node from the material.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node<vec4>} The environment node.\r\n\t */\r\n\tsetupEnvironment( /*builder*/ ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( this.envNode ) {\r\n\r\n\t\t\tnode = this.envNode;\r\n\r\n\t\t} else if ( this.envMap ) {\r\n\r\n\t\t\tnode = this.envMap.isCubeTexture ? materialReference( 'envMap', 'cubeTexture' ) : materialReference( 'envMap', 'texture' );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the light map node from the material.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node<vec3>} The light map node.\r\n\t */\r\n\tsetupLightMap( builder ) {\r\n\r\n\t\tlet node = null;\r\n\r\n\t\tif ( builder.material.lightMap ) {\r\n\r\n\t\t\tnode = new IrradianceNode( materialLightMap );\r\n\r\n\t\t}\r\n\r\n\t\treturn node;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the lights node based on the scene, environment and material.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {LightsNode} The lights node.\r\n\t */\r\n\tsetupLights( builder ) {\r\n\r\n\t\tconst materialLightsNode = [];\r\n\r\n\t\t//\r\n\r\n\t\tconst envNode = this.setupEnvironment( builder );\r\n\r\n\t\tif ( envNode && envNode.isLightingNode ) {\r\n\r\n\t\t\tmaterialLightsNode.push( envNode );\r\n\r\n\t\t}\r\n\r\n\t\tconst lightMapNode = this.setupLightMap( builder );\r\n\r\n\t\tif ( lightMapNode && lightMapNode.isLightingNode ) {\r\n\r\n\t\t\tmaterialLightsNode.push( lightMapNode );\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.aoNode !== null || builder.material.aoMap ) {\r\n\r\n\t\t\tconst aoNode = this.aoNode !== null ? this.aoNode : materialAO;\r\n\r\n\t\t\tmaterialLightsNode.push( new AONode( aoNode ) );\r\n\r\n\t\t}\r\n\r\n\t\tlet lightsN = this.lightsNode || builder.lightsNode;\r\n\r\n\t\tif ( materialLightsNode.length > 0 ) {\r\n\r\n\t\t\tlightsN = builder.renderer.lighting.createNode( [ ...lightsN.getLights(), ...materialLightsNode ] );\r\n\r\n\t\t}\r\n\r\n\t\treturn lightsN;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method should be implemented by most derived materials\r\n\t * since it defines the material's lighting model.\r\n\t *\r\n\t * @abstract\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {LightingModel} The lighting model.\r\n\t */\r\n\tsetupLightingModel( /*builder*/ ) {\r\n\r\n\t\t// Interface function.\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the outgoing light node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node<vec3>} The outgoing light node.\r\n\t */\r\n\tsetupLighting( builder ) {\r\n\r\n\t\tconst { material } = builder;\r\n\t\tconst { backdropNode, backdropAlphaNode, emissiveNode } = this;\r\n\r\n\t\t// OUTGOING LIGHT\r\n\r\n\t\tconst lights = this.lights === true || this.lightsNode !== null;\r\n\r\n\t\tconst lightsNode = lights ? this.setupLights( builder ) : null;\r\n\r\n\t\tlet outgoingLightNode = this.setupOutgoingLight( builder );\r\n\r\n\t\tif ( lightsNode && lightsNode.getScope().hasLights ) {\r\n\r\n\t\t\tconst lightingModel = this.setupLightingModel( builder ) || null;\r\n\r\n\t\t\toutgoingLightNode = lightingContext( lightsNode, lightingModel, backdropNode, backdropAlphaNode );\r\n\r\n\t\t} else if ( backdropNode !== null ) {\r\n\r\n\t\t\toutgoingLightNode = vec3( backdropAlphaNode !== null ? mix( outgoingLightNode, backdropNode, backdropAlphaNode ) : backdropNode );\r\n\r\n\t\t}\r\n\r\n\t\t// EMISSIVE\r\n\r\n\t\tif ( ( emissiveNode && emissiveNode.isNode === true ) || ( material.emissive && material.emissive.isColor === true ) ) {\r\n\r\n\t\t\temissive.assign( vec3( emissiveNode ? emissiveNode : materialEmissive ) );\r\n\r\n\t\t\toutgoingLightNode = outgoingLightNode.add( emissive );\r\n\r\n\t\t}\r\n\r\n\t\treturn outgoingLightNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setup the fog.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {Node<vec4>} outputNode - The existing output node.\r\n\t * @return {Node<vec4>} The output node.\r\n\t */\r\n\tsetupFog( builder, outputNode ) {\r\n\r\n\t\tconst fogNode = builder.fogNode;\r\n\r\n\t\tif ( fogNode ) {\r\n\r\n\t\t\toutput.assign( outputNode );\r\n\r\n\t\t\toutputNode = vec4( fogNode );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups premultiplied alpha.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {Node<vec4>} outputNode - The existing output node.\r\n\t * @return {Node<vec4>} The output node.\r\n\t */\r\n\tsetupPremultipliedAlpha( builder, outputNode ) {\r\n\r\n\t\treturn premultiplyAlpha( outputNode );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the output node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {Node<vec4>} outputNode - The existing output node.\r\n\t * @return {Node<vec4>} The output node.\r\n\t */\r\n\tsetupOutput( builder, outputNode ) {\r\n\r\n\t\t// FOG\r\n\r\n\t\tif ( this.fog === true ) {\r\n\r\n\t\t\toutputNode = this.setupFog( builder, outputNode );\r\n\r\n\t\t}\r\n\r\n\t\t// PREMULTIPLIED ALPHA\r\n\r\n\t\tif ( this.premultipliedAlpha === true ) {\r\n\r\n\t\t\toutputNode = this.setupPremultipliedAlpha( builder, outputNode );\r\n\r\n\t\t}\r\n\r\n\t\treturn outputNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Most classic material types have a node pendant e.g. for `MeshBasicMaterial`\r\n\t * there is `MeshBasicNodeMaterial`. This utility method is intended for\r\n\t * defining all material properties of the classic type in the node type.\r\n\t *\r\n\t * @param {Material} material - The material to copy properties with their values to this node material.\r\n\t */\r\n\tsetDefaultValues( material ) {\r\n\r\n\t\t// This approach is to reuse the native refreshUniforms*\r\n\t\t// and turn available the use of features like transmission and environment in core\r\n\r\n\t\tfor ( const property in material ) {\r\n\r\n\t\t\tconst value = material[ property ];\r\n\r\n\t\t\tif ( this[ property ] === undefined ) {\r\n\r\n\t\t\t\tthis[ property ] = value;\r\n\r\n\t\t\t\tif ( value && value.clone ) this[ property ] = value.clone();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst descriptors = Object.getOwnPropertyDescriptors( material.constructor.prototype );\r\n\r\n\t\tfor ( const key in descriptors ) {\r\n\r\n\t\t\tif ( Object.getOwnPropertyDescriptor( this.constructor.prototype, key ) === undefined &&\r\n\t\t\t     descriptors[ key ].get !== undefined ) {\r\n\r\n\t\t\t\tObject.defineProperty( this.constructor.prototype, key, descriptors[ key ] );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes this material to JSON.\r\n\t *\r\n\t * @param {?(Object|string)} meta - The meta information for serialization.\r\n\t * @return {Object} The serialized node.\r\n\t */\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst isRoot = ( meta === undefined || typeof meta === 'string' );\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tmeta = {\r\n\t\t\t\ttextures: {},\r\n\t\t\t\timages: {},\r\n\t\t\t\tnodes: {}\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst data = Material.prototype.toJSON.call( this, meta );\r\n\t\tconst nodeChildren = getNodeChildren( this );\r\n\r\n\t\tdata.inputNodes = {};\r\n\r\n\t\tfor ( const { property, childNode } of nodeChildren ) {\r\n\r\n\t\t\tdata.inputNodes[ property ] = childNode.toJSON( meta ).uuid;\r\n\r\n\t\t}\r\n\r\n\t\t// TODO: Copied from Object3D.toJSON\r\n\r\n\t\tfunction extractFromCache( cache ) {\r\n\r\n\t\t\tconst values = [];\r\n\r\n\t\t\tfor ( const key in cache ) {\r\n\r\n\t\t\t\tconst data = cache[ key ];\r\n\t\t\t\tdelete data.metadata;\r\n\t\t\t\tvalues.push( data );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn values;\r\n\r\n\t\t}\r\n\r\n\t\tif ( isRoot ) {\r\n\r\n\t\t\tconst textures = extractFromCache( meta.textures );\r\n\t\t\tconst images = extractFromCache( meta.images );\r\n\t\t\tconst nodes = extractFromCache( meta.nodes );\r\n\r\n\t\t\tif ( textures.length > 0 ) data.textures = textures;\r\n\t\t\tif ( images.length > 0 ) data.images = images;\r\n\t\t\tif ( nodes.length > 0 ) data.nodes = nodes;\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the properties of the given node material to this instance.\r\n\t *\r\n\t * @param {NodeMaterial} source - The material to copy.\r\n\t * @return {NodeMaterial} A reference to this node material.\r\n\t */\r\n\tcopy( source ) {\r\n\r\n\t\tthis.lightsNode = source.lightsNode;\r\n\t\tthis.envNode = source.envNode;\r\n\r\n\t\tthis.colorNode = source.colorNode;\r\n\t\tthis.normalNode = source.normalNode;\r\n\t\tthis.opacityNode = source.opacityNode;\r\n\t\tthis.backdropNode = source.backdropNode;\r\n\t\tthis.backdropAlphaNode = source.backdropAlphaNode;\r\n\t\tthis.alphaTestNode = source.alphaTestNode;\r\n\t\tthis.maskNode = source.maskNode;\r\n\r\n\t\tthis.positionNode = source.positionNode;\r\n\t\tthis.geometryNode = source.geometryNode;\r\n\r\n\t\tthis.depthNode = source.depthNode;\r\n\t\tthis.receivedShadowPositionNode = source.receivedShadowPositionNode;\r\n\t\tthis.castShadowPositionNode = source.castShadowPositionNode;\r\n\t\tthis.receivedShadowNode = source.receivedShadowNode;\r\n\t\tthis.castShadowNode = source.castShadowNode;\r\n\r\n\t\tthis.outputNode = source.outputNode;\r\n\t\tthis.mrtNode = source.mrtNode;\r\n\r\n\t\tthis.fragmentNode = source.fragmentNode;\r\n\t\tthis.vertexNode = source.vertexNode;\r\n\r\n\t\treturn super.copy( source );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default NodeMaterial;\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Box3 } from '../math/Box3.js';\r\nimport { EventDispatcher } from './EventDispatcher.js';\r\nimport { BufferAttribute, Float32BufferAttribute, Uint16BufferAttribute, Uint32BufferAttribute } from './BufferAttribute.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { Object3D } from './Object3D.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Matrix3 } from '../math/Matrix3.js';\r\nimport { generateUUID } from '../math/MathUtils.js';\r\nimport { arrayNeedsUint32 } from '../utils.js';\r\n\r\nlet _id = 0;\r\n\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\nconst _obj = /*@__PURE__*/ new Object3D();\r\nconst _offset = /*@__PURE__*/ new Vector3();\r\nconst _box = /*@__PURE__*/ new Box3();\r\nconst _boxMorphTargets = /*@__PURE__*/ new Box3();\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\n\r\n/**\r\n * A representation of mesh, line, or point geometry. Includes vertex\r\n * positions, face indices, normals, colors, UVs, and custom attributes\r\n * within buffers, reducing the cost of passing all this data to the GPU.\r\n *\r\n * ```js\r\n * const geometry = new THREE.BufferGeometry();\r\n * // create a simple square shape. We duplicate the top left and bottom right\r\n * // vertices because each vertex needs to appear once per triangle.\r\n * const vertices = new Float32Array( [\r\n * \t-1.0, -1.0,  1.0, // v0\r\n * \t 1.0, -1.0,  1.0, // v1\r\n * \t 1.0,  1.0,  1.0, // v2\r\n *\r\n * \t 1.0,  1.0,  1.0, // v3\r\n * \t-1.0,  1.0,  1.0, // v4\r\n * \t-1.0, -1.0,  1.0  // v5\r\n * ] );\r\n * // itemSize = 3 because there are 3 values (components) per vertex\r\n * geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );\r\n * const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );\r\n * const mesh = new THREE.Mesh( geometry, material );\r\n * ```\r\n *\r\n * @augments EventDispatcher\r\n */\r\nclass BufferGeometry extends EventDispatcher {\r\n\r\n\t/**\r\n\t * Constructs a new geometry.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isBufferGeometry = true;\r\n\r\n\t\t/**\r\n\t\t * The ID of the geometry.\r\n\t\t *\r\n\t\t * @name BufferGeometry#id\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tObject.defineProperty( this, 'id', { value: _id ++ } );\r\n\r\n\t\t/**\r\n\t\t * The UUID of the geometry.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.uuid = generateUUID();\r\n\r\n\t\t/**\r\n\t\t * The name of the geometry.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.name = '';\r\n\t\tthis.type = 'BufferGeometry';\r\n\r\n\t\t/**\r\n\t\t * Allows for vertices to be re-used across multiple triangles; this is\r\n\t\t * called using \"indexed triangles\". Each triangle is associated with the\r\n\t\t * indices of three vertices. This attribute therefore stores the index of\r\n\t\t * each vertex for each triangular face. If this attribute is not set, the\r\n\t\t * renderer assumes that each three contiguous positions represent a single triangle.\r\n\t\t *\r\n\t\t * @type {?BufferAttribute}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.index = null;\r\n\r\n\t\t/**\r\n\t\t * A (storage) buffer attribute which was generated with a compute shader and\r\n\t\t * now defines indirect draw calls.\r\n\t\t *\r\n\t\t * Can only be used with {@link WebGPURenderer} and a WebGPU backend.\r\n\t\t *\r\n\t\t * @type {?BufferAttribute}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.indirect = null;\r\n\r\n\t\t/**\r\n\t\t * This dictionary has as id the name of the attribute to be set and as value\r\n\t\t * the buffer attribute to set it to. Rather than accessing this property directly,\r\n\t\t * use `setAttribute()` and `getAttribute()` to access attributes of this geometry.\r\n\t\t *\r\n\t\t * @type {Object<string,(BufferAttribute|InterleavedBufferAttribute)>}\r\n\t\t */\r\n\t\tthis.attributes = {};\r\n\r\n\t\t/**\r\n\t\t * This dictionary holds the morph targets of the geometry.\r\n\t\t *\r\n\t\t * Note: Once the geometry has been rendered, the morph attribute data cannot\r\n\t\t * be changed. You will have to call `dispose()?, and create a new geometry instance.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.morphAttributes = {};\r\n\r\n\t\t/**\r\n\t\t * Used to control the morph target behavior; when set to `true`, the morph\r\n\t\t * target data is treated as relative offsets, rather than as absolute\r\n\t\t * positions/normals.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.morphTargetsRelative = false;\r\n\r\n\t\t/**\r\n\t\t * Split the geometry into groups, each of which will be rendered in a\r\n\t\t * separate draw call. This allows an array of materials to be used with the geometry.\r\n\t\t *\r\n\t\t * Use `addGroup()` and `clearGroups()` to edit groups, rather than modifying this array directly.\r\n\t\t *\r\n\t\t * Every vertex and index must belong to exactly one group — groups must not share vertices or\r\n\t\t * indices, and must not leave vertices or indices unused.\r\n\t\t *\r\n\t\t * @type {Array<Object>}\r\n\t\t */\r\n\t\tthis.groups = [];\r\n\r\n\t\t/**\r\n\t\t * Bounding box for the geometry which can be calculated with `computeBoundingBox()`.\r\n\t\t *\r\n\t\t * @type {Box3}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.boundingBox = null;\r\n\r\n\t\t/**\r\n\t\t * Bounding sphere for the geometry which can be calculated with `computeBoundingSphere()`.\r\n\t\t *\r\n\t\t * @type {Sphere}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t/**\r\n\t\t * Determines the part of the geometry to render. This should not be set directly,\r\n\t\t * instead use `setDrawRange()`.\r\n\t\t *\r\n\t\t * @type {{start:number,count:number}}\r\n\t\t */\r\n\t\tthis.drawRange = { start: 0, count: Infinity };\r\n\r\n\t\t/**\r\n\t\t * An object that can be used to store custom data about the geometry.\r\n\t\t * It should not hold references to functions as these will not be cloned.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.userData = {};\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the index of this geometry.\r\n\t *\r\n\t * @return {?BufferAttribute} The index. Returns `null` if no index is defined.\r\n\t */\r\n\tgetIndex() {\r\n\r\n\t\treturn this.index;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given index to this geometry.\r\n\t *\r\n\t * @param {Array<number>|BufferAttribute} index - The index to set.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tsetIndex( index ) {\r\n\r\n\t\tif ( Array.isArray( index ) ) {\r\n\r\n\t\t\tthis.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.index = index;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given indirect attribute to this geometry.\r\n\t *\r\n\t * @param {BufferAttribute} indirect - The attribute holding indirect draw calls.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tsetIndirect( indirect ) {\r\n\r\n\t\tthis.indirect = indirect;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the indirect attribute of this geometry.\r\n\t *\r\n\t * @return {?BufferAttribute} The indirect attribute. Returns `null` if no indirect attribute is defined.\r\n\t */\r\n\tgetIndirect() {\r\n\r\n\t\treturn this.indirect;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the buffer attribute for the given name.\r\n\t *\r\n\t * @param {string} name - The attribute name.\r\n\t * @return {BufferAttribute|InterleavedBufferAttribute|undefined} The buffer attribute.\r\n\t * Returns `undefined` if not attribute has been found.\r\n\t */\r\n\tgetAttribute( name ) {\r\n\r\n\t\treturn this.attributes[ name ];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given attribute for the given name.\r\n\t *\r\n\t * @param {string} name - The attribute name.\r\n\t * @param {BufferAttribute|InterleavedBufferAttribute} attribute - The attribute to set.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tsetAttribute( name, attribute ) {\r\n\r\n\t\tthis.attributes[ name ] = attribute;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes the attribute for the given name.\r\n\t *\r\n\t * @param {string} name - The attribute name to delete.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tdeleteAttribute( name ) {\r\n\r\n\t\tdelete this.attributes[ name ];\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this geometry has an attribute for the given name.\r\n\t *\r\n\t * @param {string} name - The attribute name.\r\n\t * @return {boolean} Whether this geometry has an attribute for the given name or not.\r\n\t */\r\n\thasAttribute( name ) {\r\n\r\n\t\treturn this.attributes[ name ] !== undefined;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adds a group to this geometry.\r\n\t *\r\n\t * @param {number} start - The first element in this draw call. That is the first\r\n\t * vertex for non-indexed geometry, otherwise the first triangle index.\r\n\t * @param {number} count - Specifies how many vertices (or indices) are part of this group.\r\n\t * @param {number} [materialIndex=0] - The material array index to use.\r\n\t */\r\n\taddGroup( start, count, materialIndex = 0 ) {\r\n\r\n\t\tthis.groups.push( {\r\n\r\n\t\t\tstart: start,\r\n\t\t\tcount: count,\r\n\t\t\tmaterialIndex: materialIndex\r\n\r\n\t\t} );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Clears all groups.\r\n\t */\r\n\tclearGroups() {\r\n\r\n\t\tthis.groups = [];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the draw range for this geometry.\r\n\t *\r\n\t * @param {number} start - The first vertex for non-indexed geometry, otherwise the first triangle index.\r\n\t * @param {number} count - For non-indexed BufferGeometry, `count` is the number of vertices to render.\r\n\t * For indexed BufferGeometry, `count` is the number of indices to render.\r\n\t */\r\n\tsetDrawRange( start, count ) {\r\n\r\n\t\tthis.drawRange.start = start;\r\n\t\tthis.drawRange.count = count;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the given 4x4 transformation matrix to the geometry.\r\n\t *\r\n\t * @param {Matrix4} matrix - The matrix to apply.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tapplyMatrix4( matrix ) {\r\n\r\n\t\tconst position = this.attributes.position;\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tposition.applyMatrix4( matrix );\r\n\r\n\t\t\tposition.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tconst normal = this.attributes.normal;\r\n\r\n\t\tif ( normal !== undefined ) {\r\n\r\n\t\t\tconst normalMatrix = new Matrix3().getNormalMatrix( matrix );\r\n\r\n\t\t\tnormal.applyNormalMatrix( normalMatrix );\r\n\r\n\t\t\tnormal.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tconst tangent = this.attributes.tangent;\r\n\r\n\t\tif ( tangent !== undefined ) {\r\n\r\n\t\t\ttangent.transformDirection( matrix );\r\n\r\n\t\t\ttangent.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingBox !== null ) {\r\n\r\n\t\t\tthis.computeBoundingBox();\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.boundingSphere !== null ) {\r\n\r\n\t\t\tthis.computeBoundingSphere();\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Applies the rotation represented by the Quaternion to the geometry.\r\n\t *\r\n\t * @param {Quaternion} q - The Quaternion to apply.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tapplyQuaternion( q ) {\r\n\r\n\t\t_m1.makeRotationFromQuaternion( q );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the geometry about the X axis. This is typically done as a one time\r\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\r\n\t * real-time mesh rotation.\r\n\t *\r\n\t * @param {number} angle - The angle in radians.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\trotateX( angle ) {\r\n\r\n\t\t// rotate geometry around world x-axis\r\n\r\n\t\t_m1.makeRotationX( angle );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the geometry about the Y axis. This is typically done as a one time\r\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\r\n\t * real-time mesh rotation.\r\n\t *\r\n\t * @param {number} angle - The angle in radians.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\trotateY( angle ) {\r\n\r\n\t\t// rotate geometry around world y-axis\r\n\r\n\t\t_m1.makeRotationY( angle );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the geometry about the Z axis. This is typically done as a one time\r\n\t * operation, and not during a loop. Use {@link Object3D#rotation} for typical\r\n\t * real-time mesh rotation.\r\n\t *\r\n\t * @param {number} angle - The angle in radians.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\trotateZ( angle ) {\r\n\r\n\t\t// rotate geometry around world z-axis\r\n\r\n\t\t_m1.makeRotationZ( angle );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Translates the geometry. This is typically done as a one time\r\n\t * operation, and not during a loop. Use {@link Object3D#position} for typical\r\n\t * real-time mesh rotation.\r\n\t *\r\n\t * @param {number} x - The x offset.\r\n\t * @param {number} y - The y offset.\r\n\t * @param {number} z - The z offset.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\ttranslate( x, y, z ) {\r\n\r\n\t\t// translate geometry\r\n\r\n\t\t_m1.makeTranslation( x, y, z );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Scales the geometry. This is typically done as a one time\r\n\t * operation, and not during a loop. Use {@link Object3D#scale} for typical\r\n\t * real-time mesh rotation.\r\n\t *\r\n\t * @param {number} x - The x scale.\r\n\t * @param {number} y - The y scale.\r\n\t * @param {number} z - The z scale.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tscale( x, y, z ) {\r\n\r\n\t\t// scale geometry\r\n\r\n\t\t_m1.makeScale( x, y, z );\r\n\r\n\t\tthis.applyMatrix4( _m1 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Rotates the geometry to face a point in 3D space. This is typically done as a one time\r\n\t * operation, and not during a loop. Use {@link Object3D#lookAt} for typical\r\n\t * real-time mesh rotation.\r\n\t *\r\n\t * @param {Vector3} vector - The target point.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tlookAt( vector ) {\r\n\r\n\t\t_obj.lookAt( vector );\r\n\r\n\t\t_obj.updateMatrix();\r\n\r\n\t\tthis.applyMatrix4( _obj.matrix );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Center the geometry based on its bounding box.\r\n\t *\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tcenter() {\r\n\r\n\t\tthis.computeBoundingBox();\r\n\r\n\t\tthis.boundingBox.getCenter( _offset ).negate();\r\n\r\n\t\tthis.translate( _offset.x, _offset.y, _offset.z );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Defines a geometry by creating a `position` attribute based on the given array of points. The array\r\n\t * can hold 2D or 3D vectors. When using two-dimensional data, the `z` coordinate for all vertices is\r\n\t * set to `0`.\r\n\t *\r\n\t * If the method is used with an existing `position` attribute, the vertex data are overwritten with the\r\n\t * data from the array. The length of the array must match the vertex count.\r\n\t *\r\n\t * @param {Array<Vector2>|Array<Vector3>} points - The points.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tsetFromPoints( points ) {\r\n\r\n\t\tconst positionAttribute = this.getAttribute( 'position' );\r\n\r\n\t\tif ( positionAttribute === undefined ) {\r\n\r\n\t\t\tconst position = [];\r\n\r\n\t\t\tfor ( let i = 0, l = points.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst point = points[ i ];\r\n\t\t\t\tposition.push( point.x, point.y, point.z || 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst l = Math.min( points.length, positionAttribute.count ); // make sure data do not exceed buffer size\r\n\r\n\t\t\tfor ( let i = 0; i < l; i ++ ) {\r\n\r\n\t\t\t\tconst point = points[ i ];\r\n\t\t\t\tpositionAttribute.setXYZ( i, point.x, point.y, point.z || 0 );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( points.length > positionAttribute.count ) {\r\n\r\n\t\t\t\tconsole.warn( 'THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tpositionAttribute.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the bounding box of the geometry, and updates the `boundingBox` member.\r\n\t * The bounding box is not computed by the engine; it must be computed by your app.\r\n\t * You may need to recompute the bounding box if the geometry vertices are modified.\r\n\t */\r\n\tcomputeBoundingBox() {\r\n\r\n\t\tif ( this.boundingBox === null ) {\r\n\r\n\t\t\tthis.boundingBox = new Box3();\r\n\r\n\t\t}\r\n\r\n\t\tconst position = this.attributes.position;\r\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\tif ( position && position.isGLBufferAttribute ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.', this );\r\n\r\n\t\t\tthis.boundingBox.set(\r\n\t\t\t\tnew Vector3( - Infinity, - Infinity, - Infinity ),\r\n\t\t\t\tnew Vector3( + Infinity, + Infinity, + Infinity )\r\n\t\t\t);\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( position !== undefined ) {\r\n\r\n\t\t\tthis.boundingBox.setFromBufferAttribute( position );\r\n\r\n\t\t\t// process morph attributes if present\r\n\r\n\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t_box.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t_vector.addVectors( this.boundingBox.min, _box.min );\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t\t_vector.addVectors( this.boundingBox.max, _box.max );\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box.min );\r\n\t\t\t\t\t\tthis.boundingBox.expandByPoint( _box.max );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis.boundingBox.makeEmpty();\r\n\r\n\t\t}\r\n\r\n\t\tif ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the bounding sphere of the geometry, and updates the `boundingSphere` member.\r\n\t * The engine automatically computes the bounding sphere when it is needed, e.g., for ray casting or view frustum culling.\r\n\t * You may need to recompute the bounding sphere if the geometry vertices are modified.\r\n\t */\r\n\tcomputeBoundingSphere() {\r\n\r\n\t\tif ( this.boundingSphere === null ) {\r\n\r\n\t\t\tthis.boundingSphere = new Sphere();\r\n\r\n\t\t}\r\n\r\n\t\tconst position = this.attributes.position;\r\n\t\tconst morphAttributesPosition = this.morphAttributes.position;\r\n\r\n\t\tif ( position && position.isGLBufferAttribute ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.', this );\r\n\r\n\t\t\tthis.boundingSphere.set( new Vector3(), Infinity );\r\n\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tif ( position ) {\r\n\r\n\t\t\t// first, find the center of the bounding sphere\r\n\r\n\t\t\tconst center = this.boundingSphere.center;\r\n\r\n\t\t\t_box.setFromBufferAttribute( position );\r\n\r\n\t\t\t// process morph attributes if present\r\n\r\n\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\t_boxMorphTargets.setFromBufferAttribute( morphAttribute );\r\n\r\n\t\t\t\t\tif ( this.morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t_vector.addVectors( _box.min, _boxMorphTargets.min );\r\n\t\t\t\t\t\t_box.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t\t_vector.addVectors( _box.max, _boxMorphTargets.max );\r\n\t\t\t\t\t\t_box.expandByPoint( _vector );\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t_box.expandByPoint( _boxMorphTargets.min );\r\n\t\t\t\t\t\t_box.expandByPoint( _boxMorphTargets.max );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t_box.getCenter( center );\r\n\r\n\t\t\t// second, try to find a boundingSphere with a radius smaller than the\r\n\t\t\t// boundingSphere of the boundingBox: sqrt(3) smaller in the best case\r\n\r\n\t\t\tlet maxRadiusSq = 0;\r\n\r\n\t\t\tfor ( let i = 0, il = position.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t_vector.fromBufferAttribute( position, i );\r\n\r\n\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// process morph attributes if present\r\n\r\n\t\t\tif ( morphAttributesPosition ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst morphAttribute = morphAttributesPosition[ i ];\r\n\t\t\t\t\tconst morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t\t\t\tfor ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {\r\n\r\n\t\t\t\t\t\t_vector.fromBufferAttribute( morphAttribute, j );\r\n\r\n\t\t\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t\t\t_offset.fromBufferAttribute( position, j );\r\n\t\t\t\t\t\t\t_vector.add( _offset );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tmaxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector ) );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.boundingSphere.radius = Math.sqrt( maxRadiusSq );\r\n\r\n\t\t\tif ( isNaN( this.boundingSphere.radius ) ) {\r\n\r\n\t\t\t\tconsole.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The \"position\" attribute is likely to have NaN values.', this );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calculates and adds a tangent attribute to this geometry.\r\n\t *\r\n\t * The computation is only supported for indexed geometries and if position, normal, and uv attributes\r\n\t * are defined. When using a tangent space normal map, prefer the MikkTSpace algorithm provided by\r\n\t * {@link BufferGeometryUtils#computeMikkTSpaceTangents} instead.\r\n\t */\r\n\tcomputeTangents() {\r\n\r\n\t\tconst index = this.index;\r\n\t\tconst attributes = this.attributes;\r\n\r\n\t\t// based on http://www.terathon.com/code/tangent.html\r\n\t\t// (per vertex tangents)\r\n\r\n\t\tif ( index === null ||\r\n\t\t\t attributes.position === undefined ||\r\n\t\t\t attributes.normal === undefined ||\r\n\t\t\t attributes.uv === undefined ) {\r\n\r\n\t\t\tconsole.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );\r\n\t\t\treturn;\r\n\r\n\t\t}\r\n\r\n\t\tconst positionAttribute = attributes.position;\r\n\t\tconst normalAttribute = attributes.normal;\r\n\t\tconst uvAttribute = attributes.uv;\r\n\r\n\t\tif ( this.hasAttribute( 'tangent' ) === false ) {\r\n\r\n\t\t\tthis.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * positionAttribute.count ), 4 ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst tangentAttribute = this.getAttribute( 'tangent' );\r\n\r\n\t\tconst tan1 = [], tan2 = [];\r\n\r\n\t\tfor ( let i = 0; i < positionAttribute.count; i ++ ) {\r\n\r\n\t\t\ttan1[ i ] = new Vector3();\r\n\t\t\ttan2[ i ] = new Vector3();\r\n\r\n\t\t}\r\n\r\n\t\tconst vA = new Vector3(),\r\n\t\t\tvB = new Vector3(),\r\n\t\t\tvC = new Vector3(),\r\n\r\n\t\t\tuvA = new Vector2(),\r\n\t\t\tuvB = new Vector2(),\r\n\t\t\tuvC = new Vector2(),\r\n\r\n\t\t\tsdir = new Vector3(),\r\n\t\t\ttdir = new Vector3();\r\n\r\n\t\tfunction handleTriangle( a, b, c ) {\r\n\r\n\t\t\tvA.fromBufferAttribute( positionAttribute, a );\r\n\t\t\tvB.fromBufferAttribute( positionAttribute, b );\r\n\t\t\tvC.fromBufferAttribute( positionAttribute, c );\r\n\r\n\t\t\tuvA.fromBufferAttribute( uvAttribute, a );\r\n\t\t\tuvB.fromBufferAttribute( uvAttribute, b );\r\n\t\t\tuvC.fromBufferAttribute( uvAttribute, c );\r\n\r\n\t\t\tvB.sub( vA );\r\n\t\t\tvC.sub( vA );\r\n\r\n\t\t\tuvB.sub( uvA );\r\n\t\t\tuvC.sub( uvA );\r\n\r\n\t\t\tconst r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\r\n\r\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\r\n\r\n\t\t\tif ( ! isFinite( r ) ) return;\r\n\r\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\r\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\r\n\r\n\t\t\ttan1[ a ].add( sdir );\r\n\t\t\ttan1[ b ].add( sdir );\r\n\t\t\ttan1[ c ].add( sdir );\r\n\r\n\t\t\ttan2[ a ].add( tdir );\r\n\t\t\ttan2[ b ].add( tdir );\r\n\t\t\ttan2[ c ].add( tdir );\r\n\r\n\t\t}\r\n\r\n\t\tlet groups = this.groups;\r\n\r\n\t\tif ( groups.length === 0 ) {\r\n\r\n\t\t\tgroups = [ {\r\n\t\t\t\tstart: 0,\r\n\t\t\t\tcount: index.count\r\n\t\t\t} ];\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\r\n\t\t\tconst start = group.start;\r\n\t\t\tconst count = group.count;\r\n\r\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\thandleTriangle(\r\n\t\t\t\t\tindex.getX( j + 0 ),\r\n\t\t\t\t\tindex.getX( j + 1 ),\r\n\t\t\t\t\tindex.getX( j + 2 )\r\n\t\t\t\t);\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst tmp = new Vector3(), tmp2 = new Vector3();\r\n\t\tconst n = new Vector3(), n2 = new Vector3();\r\n\r\n\t\tfunction handleVertex( v ) {\r\n\r\n\t\t\tn.fromBufferAttribute( normalAttribute, v );\r\n\t\t\tn2.copy( n );\r\n\r\n\t\t\tconst t = tan1[ v ];\r\n\r\n\t\t\t// Gram-Schmidt orthogonalize\r\n\r\n\t\t\ttmp.copy( t );\r\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\r\n\r\n\t\t\t// Calculate handedness\r\n\r\n\t\t\ttmp2.crossVectors( n2, t );\r\n\t\t\tconst test = tmp2.dot( tan2[ v ] );\r\n\t\t\tconst w = ( test < 0.0 ) ? - 1.0 : 1.0;\r\n\r\n\t\t\ttangentAttribute.setXYZW( v, tmp.x, tmp.y, tmp.z, w );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0, il = groups.length; i < il; ++ i ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\r\n\t\t\tconst start = group.start;\r\n\t\t\tconst count = group.count;\r\n\r\n\t\t\tfor ( let j = start, jl = start + count; j < jl; j += 3 ) {\r\n\r\n\t\t\t\thandleVertex( index.getX( j + 0 ) );\r\n\t\t\t\thandleVertex( index.getX( j + 1 ) );\r\n\t\t\t\thandleVertex( index.getX( j + 2 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes vertex normals for the given vertex data. For indexed geometries, the method sets\r\n\t * each vertex normal to be the average of the face normals of the faces that share that vertex.\r\n\t * For non-indexed geometries, vertices are not shared, and the method sets each vertex normal\r\n\t * to be the same as the face normal.\r\n\t */\r\n\tcomputeVertexNormals() {\r\n\r\n\t\tconst index = this.index;\r\n\t\tconst positionAttribute = this.getAttribute( 'position' );\r\n\r\n\t\tif ( positionAttribute !== undefined ) {\r\n\r\n\t\t\tlet normalAttribute = this.getAttribute( 'normal' );\r\n\r\n\t\t\tif ( normalAttribute === undefined ) {\r\n\r\n\t\t\t\tnormalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );\r\n\t\t\t\tthis.setAttribute( 'normal', normalAttribute );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// reset existing normals to zero\r\n\r\n\t\t\t\tfor ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tnormalAttribute.setXYZ( i, 0, 0, 0 );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst pA = new Vector3(), pB = new Vector3(), pC = new Vector3();\r\n\t\t\tconst nA = new Vector3(), nB = new Vector3(), nC = new Vector3();\r\n\t\t\tconst cb = new Vector3(), ab = new Vector3();\r\n\r\n\t\t\t// indexed elements\r\n\r\n\t\t\tif ( index ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = index.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tconst vA = index.getX( i + 0 );\r\n\t\t\t\t\tconst vB = index.getX( i + 1 );\r\n\t\t\t\t\tconst vC = index.getX( i + 2 );\r\n\r\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, vA );\r\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, vB );\r\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, vC );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnA.fromBufferAttribute( normalAttribute, vA );\r\n\t\t\t\t\tnB.fromBufferAttribute( normalAttribute, vB );\r\n\t\t\t\t\tnC.fromBufferAttribute( normalAttribute, vC );\r\n\r\n\t\t\t\t\tnA.add( cb );\r\n\t\t\t\t\tnB.add( cb );\r\n\t\t\t\t\tnC.add( cb );\r\n\r\n\t\t\t\t\tnormalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// non-indexed elements (unconnected triangle soup)\r\n\r\n\t\t\t\tfor ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tpA.fromBufferAttribute( positionAttribute, i + 0 );\r\n\t\t\t\t\tpB.fromBufferAttribute( positionAttribute, i + 1 );\r\n\t\t\t\t\tpC.fromBufferAttribute( positionAttribute, i + 2 );\r\n\r\n\t\t\t\t\tcb.subVectors( pC, pB );\r\n\t\t\t\t\tab.subVectors( pA, pB );\r\n\t\t\t\t\tcb.cross( ab );\r\n\r\n\t\t\t\t\tnormalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );\r\n\t\t\t\t\tnormalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.normalizeNormals();\r\n\r\n\t\t\tnormalAttribute.needsUpdate = true;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Ensures every normal vector in a geometry will have a magnitude of `1`. This will\r\n\t * correct lighting on the geometry surfaces.\r\n\t */\r\n\tnormalizeNormals() {\r\n\r\n\t\tconst normals = this.attributes.normal;\r\n\r\n\t\tfor ( let i = 0, il = normals.count; i < il; i ++ ) {\r\n\r\n\t\t\t_vector.fromBufferAttribute( normals, i );\r\n\r\n\t\t\t_vector.normalize();\r\n\r\n\t\t\tnormals.setXYZ( i, _vector.x, _vector.y, _vector.z );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Return a new non-index version of this indexed geometry. If the geometry\r\n\t * is already non-indexed, the method is a NOOP.\r\n\t *\r\n\t * @return {BufferGeometry} The non-indexed version of this indexed geometry.\r\n\t */\r\n\ttoNonIndexed() {\r\n\r\n\t\tfunction convertBufferAttribute( attribute, indices ) {\r\n\r\n\t\t\tconst array = attribute.array;\r\n\t\t\tconst itemSize = attribute.itemSize;\r\n\t\t\tconst normalized = attribute.normalized;\r\n\r\n\t\t\tconst array2 = new array.constructor( indices.length * itemSize );\r\n\r\n\t\t\tlet index = 0, index2 = 0;\r\n\r\n\t\t\tfor ( let i = 0, l = indices.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tif ( attribute.isInterleavedBufferAttribute ) {\r\n\r\n\t\t\t\t\tindex = indices[ i ] * attribute.data.stride + attribute.offset;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\tindex = indices[ i ] * itemSize;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor ( let j = 0; j < itemSize; j ++ ) {\r\n\r\n\t\t\t\t\tarray2[ index2 ++ ] = array[ index ++ ];\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn new BufferAttribute( array2, itemSize, normalized );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.index === null ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );\r\n\t\t\treturn this;\r\n\r\n\t\t}\r\n\r\n\t\tconst geometry2 = new BufferGeometry();\r\n\r\n\t\tconst indices = this.index.array;\r\n\t\tconst attributes = this.attributes;\r\n\r\n\t\t// attributes\r\n\r\n\t\tfor ( const name in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ name ];\r\n\r\n\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\tgeometry2.setAttribute( name, newAttribute );\r\n\r\n\t\t}\r\n\r\n\t\t// morph attributes\r\n\r\n\t\tconst morphAttributes = this.morphAttributes;\r\n\r\n\t\tfor ( const name in morphAttributes ) {\r\n\r\n\t\t\tconst morphArray = [];\r\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\tfor ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst attribute = morphAttribute[ i ];\r\n\r\n\t\t\t\tconst newAttribute = convertBufferAttribute( attribute, indices );\r\n\r\n\t\t\t\tmorphArray.push( newAttribute );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgeometry2.morphAttributes[ name ] = morphArray;\r\n\r\n\t\t}\r\n\r\n\t\tgeometry2.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t// groups\r\n\r\n\t\tconst groups = this.groups;\r\n\r\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\t\t\tgeometry2.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\treturn geometry2;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Serializes the geometry into JSON.\r\n\t *\r\n\t * @return {Object} A JSON object representing the serialized geometry.\r\n\t */\r\n\ttoJSON() {\r\n\r\n\t\tconst data = {\r\n\t\t\tmetadata: {\r\n\t\t\t\tversion: 4.7,\r\n\t\t\t\ttype: 'BufferGeometry',\r\n\t\t\t\tgenerator: 'BufferGeometry.toJSON'\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// standard BufferGeometry serialization\r\n\r\n\t\tdata.uuid = this.uuid;\r\n\t\tdata.type = this.type;\r\n\t\tif ( this.name !== '' ) data.name = this.name;\r\n\t\tif ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;\r\n\r\n\t\tif ( this.parameters !== undefined ) {\r\n\r\n\t\t\tconst parameters = this.parameters;\r\n\r\n\t\t\tfor ( const key in parameters ) {\r\n\r\n\t\t\t\tif ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn data;\r\n\r\n\t\t}\r\n\r\n\t\t// for simplicity the code assumes attributes are not shared across geometries, see #15811\r\n\r\n\t\tdata.data = { attributes: {} };\r\n\r\n\t\tconst index = this.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tdata.data.index = {\r\n\t\t\t\ttype: index.array.constructor.name,\r\n\t\t\t\tarray: Array.prototype.slice.call( index.array )\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tconst attributes = this.attributes;\r\n\r\n\t\tfor ( const key in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ key ];\r\n\r\n\t\t\tdata.data.attributes[ key ] = attribute.toJSON( data.data );\r\n\r\n\t\t}\r\n\r\n\t\tconst morphAttributes = {};\r\n\t\tlet hasMorphAttributes = false;\r\n\r\n\t\tfor ( const key in this.morphAttributes ) {\r\n\r\n\t\t\tconst attributeArray = this.morphAttributes[ key ];\r\n\r\n\t\t\tconst array = [];\r\n\r\n\t\t\tfor ( let i = 0, il = attributeArray.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst attribute = attributeArray[ i ];\r\n\r\n\t\t\t\tarray.push( attribute.toJSON( data.data ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( array.length > 0 ) {\r\n\r\n\t\t\t\tmorphAttributes[ key ] = array;\r\n\r\n\t\t\t\thasMorphAttributes = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tif ( hasMorphAttributes ) {\r\n\r\n\t\t\tdata.data.morphAttributes = morphAttributes;\r\n\t\t\tdata.data.morphTargetsRelative = this.morphTargetsRelative;\r\n\r\n\t\t}\r\n\r\n\t\tconst groups = this.groups;\r\n\r\n\t\tif ( groups.length > 0 ) {\r\n\r\n\t\t\tdata.data.groups = JSON.parse( JSON.stringify( groups ) );\r\n\r\n\t\t}\r\n\r\n\t\tconst boundingSphere = this.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tdata.data.boundingSphere = boundingSphere.toJSON();\r\n\r\n\t\t}\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new geometry with copied values from this instance.\r\n\t *\r\n\t * @return {BufferGeometry} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given geometry to this instance.\r\n\t *\r\n\t * @param {BufferGeometry} source - The geometry to copy.\r\n\t * @return {BufferGeometry} A reference to this instance.\r\n\t */\r\n\tcopy( source ) {\r\n\r\n\t\t// reset\r\n\r\n\t\tthis.index = null;\r\n\t\tthis.attributes = {};\r\n\t\tthis.morphAttributes = {};\r\n\t\tthis.groups = [];\r\n\t\tthis.boundingBox = null;\r\n\t\tthis.boundingSphere = null;\r\n\r\n\t\t// used for storing cloned, shared data\r\n\r\n\t\tconst data = {};\r\n\r\n\t\t// name\r\n\r\n\t\tthis.name = source.name;\r\n\r\n\t\t// index\r\n\r\n\t\tconst index = source.index;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\tthis.setIndex( index.clone() );\r\n\r\n\t\t}\r\n\r\n\t\t// attributes\r\n\r\n\t\tconst attributes = source.attributes;\r\n\r\n\t\tfor ( const name in attributes ) {\r\n\r\n\t\t\tconst attribute = attributes[ name ];\r\n\t\t\tthis.setAttribute( name, attribute.clone( data ) );\r\n\r\n\t\t}\r\n\r\n\t\t// morph attributes\r\n\r\n\t\tconst morphAttributes = source.morphAttributes;\r\n\r\n\t\tfor ( const name in morphAttributes ) {\r\n\r\n\t\t\tconst array = [];\r\n\t\t\tconst morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes\r\n\r\n\t\t\tfor ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {\r\n\r\n\t\t\t\tarray.push( morphAttribute[ i ].clone( data ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis.morphAttributes[ name ] = array;\r\n\r\n\t\t}\r\n\r\n\t\tthis.morphTargetsRelative = source.morphTargetsRelative;\r\n\r\n\t\t// groups\r\n\r\n\t\tconst groups = source.groups;\r\n\r\n\t\tfor ( let i = 0, l = groups.length; i < l; i ++ ) {\r\n\r\n\t\t\tconst group = groups[ i ];\r\n\t\t\tthis.addGroup( group.start, group.count, group.materialIndex );\r\n\r\n\t\t}\r\n\r\n\t\t// bounding box\r\n\r\n\t\tconst boundingBox = source.boundingBox;\r\n\r\n\t\tif ( boundingBox !== null ) {\r\n\r\n\t\t\tthis.boundingBox = boundingBox.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// bounding sphere\r\n\r\n\t\tconst boundingSphere = source.boundingSphere;\r\n\r\n\t\tif ( boundingSphere !== null ) {\r\n\r\n\t\t\tthis.boundingSphere = boundingSphere.clone();\r\n\r\n\t\t}\r\n\r\n\t\t// draw range\r\n\r\n\t\tthis.drawRange.start = source.drawRange.start;\r\n\t\tthis.drawRange.count = source.drawRange.count;\r\n\r\n\t\t// user data\r\n\r\n\t\tthis.userData = source.userData;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the GPU-related resources allocated by this instance. Call this\r\n\t * method whenever this instance is no longer used in your app.\r\n\t *\r\n\t * @fires BufferGeometry#dispose\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis.dispatchEvent( { type: 'dispose' } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { BufferGeometry };\r\n", "import { Vector3 } from './Vector3.js';\r\n\r\nconst _vector = /*@__PURE__*/ new Vector3();\r\nconst _segCenter = /*@__PURE__*/ new Vector3();\r\nconst _segDir = /*@__PURE__*/ new Vector3();\r\nconst _diff = /*@__PURE__*/ new Vector3();\r\n\r\nconst _edge1 = /*@__PURE__*/ new Vector3();\r\nconst _edge2 = /*@__PURE__*/ new Vector3();\r\nconst _normal = /*@__PURE__*/ new Vector3();\r\n\r\n/**\r\n * A ray that emits from an origin in a certain direction. The class is used by\r\n * {@link Raycaster} to assist with raycasting. Raycasting is used for\r\n * mouse picking (working out what objects in the 3D space the mouse is over)\r\n * amongst other things.\r\n */\r\nclass Ray {\r\n\r\n\t/**\r\n\t * Constructs a new ray.\r\n\t *\r\n\t * @param {Vector3} [origin=(0,0,0)] - The origin of the ray.\r\n\t * @param {Vector3} [direction=(0,0,-1)] - The (normalized) direction of the ray.\r\n\t */\r\n\tconstructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {\r\n\r\n\t\t/**\r\n\t\t * The origin of the ray.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.origin = origin;\r\n\r\n\t\t/**\r\n\t\t * The (normalized) direction of the ray.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.direction = direction;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the ray's components by copying the given values.\r\n\t *\r\n\t * @param {Vector3} origin - The origin.\r\n\t * @param {Vector3} direction - The direction.\r\n\t * @return {Ray} A reference to this ray.\r\n\t */\r\n\tset( origin, direction ) {\r\n\r\n\t\tthis.origin.copy( origin );\r\n\t\tthis.direction.copy( direction );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given ray to this instance.\r\n\t *\r\n\t * @param {Ray} ray - The ray to copy.\r\n\t * @return {Ray} A reference to this ray.\r\n\t */\r\n\tcopy( ray ) {\r\n\r\n\t\tthis.origin.copy( ray.origin );\r\n\t\tthis.direction.copy( ray.direction );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a vector that is located at a given distance along this ray.\r\n\t *\r\n\t * @param {number} t - The distance along the ray to retrieve a position for.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} A position on the ray.\r\n\t */\r\n\tat( t, target ) {\r\n\r\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, t );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Adjusts the direction of the ray to point at the given vector in world space.\r\n\t *\r\n\t * @param {Vector3} v - The target position.\r\n\t * @return {Ray} A reference to this ray.\r\n\t */\r\n\tlookAt( v ) {\r\n\r\n\t\tthis.direction.copy( v ).sub( this.origin ).normalize();\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Shift the origin of this ray along its direction by the given distance.\r\n\t *\r\n\t * @param {number} t - The distance along the ray to interpolate.\r\n\t * @return {Ray} A reference to this ray.\r\n\t */\r\n\trecast( t ) {\r\n\r\n\t\tthis.origin.copy( this.at( t, _vector ) );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the point along this ray that is closest to the given point.\r\n\t *\r\n\t * @param {Vector3} point - A point in 3D space to get the closet location on the ray for.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The closest point on this ray.\r\n\t */\r\n\tclosestPointToPoint( point, target ) {\r\n\r\n\t\ttarget.subVectors( point, this.origin );\r\n\r\n\t\tconst directionDistance = target.dot( this.direction );\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn target.copy( this.origin );\r\n\r\n\t\t}\r\n\r\n\t\treturn target.copy( this.origin ).addScaledVector( this.direction, directionDistance );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the distance of the closest approach between this ray and the given point.\r\n\t *\r\n\t * @param {Vector3} point - A point in 3D space to compute the distance to.\r\n\t * @return {number} The distance.\r\n\t */\r\n\tdistanceToPoint( point ) {\r\n\r\n\t\treturn Math.sqrt( this.distanceSqToPoint( point ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the squared distance of the closest approach between this ray and the given point.\r\n\t *\r\n\t * @param {Vector3} point - A point in 3D space to compute the distance to.\r\n\t * @return {number} The squared distance.\r\n\t */\r\n\tdistanceSqToPoint( point ) {\r\n\r\n\t\tconst directionDistance = _vector.subVectors( point, this.origin ).dot( this.direction );\r\n\r\n\t\t// point behind the ray\r\n\r\n\t\tif ( directionDistance < 0 ) {\r\n\r\n\t\t\treturn this.origin.distanceToSquared( point );\r\n\r\n\t\t}\r\n\r\n\t\t_vector.copy( this.origin ).addScaledVector( this.direction, directionDistance );\r\n\r\n\t\treturn _vector.distanceToSquared( point );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the squared distance between this ray and the given line segment.\r\n\t *\r\n\t * @param {Vector3} v0 - The start point of the line segment.\r\n\t * @param {Vector3} v1 - The end point of the line segment.\r\n\t * @param {Vector3} [optionalPointOnRay] - When provided, it receives the point on this ray that is closest to the segment.\r\n\t * @param {Vector3} [optionalPointOnSegment] - When provided, it receives the point on the line segment that is closest to this ray.\r\n\t * @return {number} The squared distance.\r\n\t */\r\n\tdistanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {\r\n\r\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h\r\n\t\t// It returns the min distance between the ray and the segment\r\n\t\t// defined by v0 and v1\r\n\t\t// It can also set two optional targets :\r\n\t\t// - The closest point on the ray\r\n\t\t// - The closest point on the segment\r\n\r\n\t\t_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );\r\n\t\t_segDir.copy( v1 ).sub( v0 ).normalize();\r\n\t\t_diff.copy( this.origin ).sub( _segCenter );\r\n\r\n\t\tconst segExtent = v0.distanceTo( v1 ) * 0.5;\r\n\t\tconst a01 = - this.direction.dot( _segDir );\r\n\t\tconst b0 = _diff.dot( this.direction );\r\n\t\tconst b1 = - _diff.dot( _segDir );\r\n\t\tconst c = _diff.lengthSq();\r\n\t\tconst det = Math.abs( 1 - a01 * a01 );\r\n\t\tlet s0, s1, sqrDist, extDet;\r\n\r\n\t\tif ( det > 0 ) {\r\n\r\n\t\t\t// The ray and segment are not parallel.\r\n\r\n\t\t\ts0 = a01 * b1 - b0;\r\n\t\t\ts1 = a01 * b0 - b1;\r\n\t\t\textDet = segExtent * det;\r\n\r\n\t\t\tif ( s0 >= 0 ) {\r\n\r\n\t\t\t\tif ( s1 >= - extDet ) {\r\n\r\n\t\t\t\t\tif ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t\t// region 0\r\n\t\t\t\t\t\t// Minimum at interior points of ray and segment.\r\n\r\n\t\t\t\t\t\tconst invDet = 1 / det;\r\n\t\t\t\t\t\ts0 *= invDet;\r\n\t\t\t\t\t\ts1 *= invDet;\r\n\t\t\t\t\t\tsqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t} else {\r\n\r\n\t\t\t\t\t\t// region 1\r\n\r\n\t\t\t\t\t\ts1 = segExtent;\r\n\t\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// region 5\r\n\r\n\t\t\t\t\ts1 = - segExtent;\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tif ( s1 <= - extDet ) {\r\n\r\n\t\t\t\t\t// region 4\r\n\r\n\t\t\t\t\ts0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );\r\n\t\t\t\t\ts1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t} else if ( s1 <= extDet ) {\r\n\r\n\t\t\t\t\t// region 3\r\n\r\n\t\t\t\t\ts0 = 0;\r\n\t\t\t\t\ts1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t// region 2\r\n\r\n\t\t\t\t\ts0 = Math.max( 0, - ( a01 * segExtent + b0 ) );\r\n\t\t\t\t\ts1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );\r\n\t\t\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\t// Ray and segment are parallel.\r\n\r\n\t\t\ts1 = ( a01 > 0 ) ? - segExtent : segExtent;\r\n\t\t\ts0 = Math.max( 0, - ( a01 * s1 + b0 ) );\r\n\t\t\tsqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;\r\n\r\n\t\t}\r\n\r\n\t\tif ( optionalPointOnRay ) {\r\n\r\n\t\t\toptionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );\r\n\r\n\t\t}\r\n\r\n\t\tif ( optionalPointOnSegment ) {\r\n\r\n\t\t\toptionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );\r\n\r\n\t\t}\r\n\r\n\t\treturn sqrDist;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Intersects this ray with the given sphere, returning the intersection\r\n\t * point or `null` if there is no intersection.\r\n\t *\r\n\t * @param {Sphere} sphere - The sphere to intersect.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {?Vector3} The intersection point.\r\n\t */\r\n\tintersectSphere( sphere, target ) {\r\n\r\n\t\t_vector.subVectors( sphere.center, this.origin );\r\n\t\tconst tca = _vector.dot( this.direction );\r\n\t\tconst d2 = _vector.dot( _vector ) - tca * tca;\r\n\t\tconst radius2 = sphere.radius * sphere.radius;\r\n\r\n\t\tif ( d2 > radius2 ) return null;\r\n\r\n\t\tconst thc = Math.sqrt( radius2 - d2 );\r\n\r\n\t\t// t0 = first intersect point - entrance on front of sphere\r\n\t\tconst t0 = tca - thc;\r\n\r\n\t\t// t1 = second intersect point - exit point on back of sphere\r\n\t\tconst t1 = tca + thc;\r\n\r\n\t\t// test to see if t1 is behind the ray - if so, return null\r\n\t\tif ( t1 < 0 ) return null;\r\n\r\n\t\t// test to see if t0 is behind the ray:\r\n\t\t// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,\r\n\t\t// in order to always return an intersect point that is in front of the ray.\r\n\t\tif ( t0 < 0 ) return this.at( t1, target );\r\n\r\n\t\t// else t0 is in front of the ray, so return the first collision point scaled by t0\r\n\t\treturn this.at( t0, target );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this ray intersects with the given sphere.\r\n\t *\r\n\t * @param {Sphere} sphere - The sphere to intersect.\r\n\t * @return {boolean} Whether this ray intersects with the given sphere or not.\r\n\t */\r\n\tintersectsSphere( sphere ) {\r\n\r\n\t\tif ( sphere.radius < 0 ) return false; // handle empty spheres, see #31187\r\n\r\n\t\treturn this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the distance from the ray's origin to the given plane. Returns `null` if the ray\r\n\t * does not intersect with the plane.\r\n\t *\r\n\t * @param {Plane} plane - The plane to compute the distance to.\r\n\t * @return {?number} Whether this ray intersects with the given sphere or not.\r\n\t */\r\n\tdistanceToPlane( plane ) {\r\n\r\n\t\tconst denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator === 0 ) {\r\n\r\n\t\t\t// line is coplanar, return origin\r\n\t\t\tif ( plane.distanceToPoint( this.origin ) === 0 ) {\r\n\r\n\t\t\t\treturn 0;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// Null is preferable to undefined since undefined means.... it is undefined\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;\r\n\r\n\t\t// Return if the ray never intersects the plane\r\n\r\n\t\treturn t >= 0 ? t : null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Intersects this ray with the given plane, returning the intersection\r\n\t * point or `null` if there is no intersection.\r\n\t *\r\n\t * @param {Plane} plane - The plane to intersect.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {?Vector3} The intersection point.\r\n\t */\r\n\tintersectPlane( plane, target ) {\r\n\r\n\t\tconst t = this.distanceToPlane( plane );\r\n\r\n\t\tif ( t === null ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\treturn this.at( t, target );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this ray intersects with the given plane.\r\n\t *\r\n\t * @param {Plane} plane - The plane to intersect.\r\n\t * @return {boolean} Whether this ray intersects with the given plane or not.\r\n\t */\r\n\tintersectsPlane( plane ) {\r\n\r\n\t\t// check if the ray lies on the plane first\r\n\r\n\t\tconst distToPoint = plane.distanceToPoint( this.origin );\r\n\r\n\t\tif ( distToPoint === 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\tconst denominator = plane.normal.dot( this.direction );\r\n\r\n\t\tif ( denominator * distToPoint < 0 ) {\r\n\r\n\t\t\treturn true;\r\n\r\n\t\t}\r\n\r\n\t\t// ray origin is behind the plane (and is pointing behind it)\r\n\r\n\t\treturn false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Intersects this ray with the given bounding box, returning the intersection\r\n\t * point or `null` if there is no intersection.\r\n\t *\r\n\t * @param {Box3} box - The box to intersect.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {?Vector3} The intersection point.\r\n\t */\r\n\tintersectBox( box, target ) {\r\n\r\n\t\tlet tmin, tmax, tymin, tymax, tzmin, tzmax;\r\n\r\n\t\tconst invdirx = 1 / this.direction.x,\r\n\t\t\tinvdiry = 1 / this.direction.y,\r\n\t\t\tinvdirz = 1 / this.direction.z;\r\n\r\n\t\tconst origin = this.origin;\r\n\r\n\t\tif ( invdirx >= 0 ) {\r\n\r\n\t\t\ttmin = ( box.min.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.max.x - origin.x ) * invdirx;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttmin = ( box.max.x - origin.x ) * invdirx;\r\n\t\t\ttmax = ( box.min.x - origin.x ) * invdirx;\r\n\r\n\t\t}\r\n\r\n\t\tif ( invdiry >= 0 ) {\r\n\r\n\t\t\ttymin = ( box.min.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.max.y - origin.y ) * invdiry;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttymin = ( box.max.y - origin.y ) * invdiry;\r\n\t\t\ttymax = ( box.min.y - origin.y ) * invdiry;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;\r\n\r\n\t\tif ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;\r\n\r\n\t\tif ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;\r\n\r\n\t\tif ( invdirz >= 0 ) {\r\n\r\n\t\t\ttzmin = ( box.min.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.max.z - origin.z ) * invdirz;\r\n\r\n\t\t} else {\r\n\r\n\t\t\ttzmin = ( box.max.z - origin.z ) * invdirz;\r\n\t\t\ttzmax = ( box.min.z - origin.z ) * invdirz;\r\n\r\n\t\t}\r\n\r\n\t\tif ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;\r\n\r\n\t\tif ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;\r\n\r\n\t\tif ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;\r\n\r\n\t\t//return point closest to the ray (positive side)\r\n\r\n\t\tif ( tmax < 0 ) return null;\r\n\r\n\t\treturn this.at( tmin >= 0 ? tmin : tmax, target );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this ray intersects with the given box.\r\n\t *\r\n\t * @param {Box3} box - The box to intersect.\r\n\t * @return {boolean} Whether this ray intersects with the given box or not.\r\n\t */\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn this.intersectBox( box, _vector ) !== null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Intersects this ray with the given triangle, returning the intersection\r\n\t * point or `null` if there is no intersection.\r\n\t *\r\n\t * @param {Vector3} a - The first vertex of the triangle.\r\n\t * @param {Vector3} b - The second vertex of the triangle.\r\n\t * @param {Vector3} c - The third vertex of the triangle.\r\n\t * @param {boolean} backfaceCulling - Whether to use backface culling or not.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {?Vector3} The intersection point.\r\n\t */\r\n\tintersectTriangle( a, b, c, backfaceCulling, target ) {\r\n\r\n\t\t// Compute the offset origin, edges, and normal.\r\n\r\n\t\t// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h\r\n\r\n\t\t_edge1.subVectors( b, a );\r\n\t\t_edge2.subVectors( c, a );\r\n\t\t_normal.crossVectors( _edge1, _edge2 );\r\n\r\n\t\t// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,\r\n\t\t// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by\r\n\t\t//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))\r\n\t\t//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))\r\n\t\t//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)\r\n\t\tlet DdN = this.direction.dot( _normal );\r\n\t\tlet sign;\r\n\r\n\t\tif ( DdN > 0 ) {\r\n\r\n\t\t\tif ( backfaceCulling ) return null;\r\n\t\t\tsign = 1;\r\n\r\n\t\t} else if ( DdN < 0 ) {\r\n\r\n\t\t\tsign = - 1;\r\n\t\t\tDdN = - DdN;\r\n\r\n\t\t} else {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t_diff.subVectors( this.origin, a );\r\n\t\tconst DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );\r\n\r\n\t\t// b1 < 0, no intersection\r\n\t\tif ( DdQxE2 < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );\r\n\r\n\t\t// b2 < 0, no intersection\r\n\t\tif ( DdE1xQ < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// b1+b2 > 1, no intersection\r\n\t\tif ( DdQxE2 + DdE1xQ > DdN ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// Line intersects triangle, check if ray does.\r\n\t\tconst QdN = - sign * _diff.dot( _normal );\r\n\r\n\t\t// t < 0, no intersection\r\n\t\tif ( QdN < 0 ) {\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\t// Ray intersects triangle.\r\n\t\treturn this.at( QdN / DdN, target );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Transforms this ray with the given 4x4 transformation matrix.\r\n\t *\r\n\t * @param {Matrix4} matrix4 - The transformation matrix.\r\n\t * @return {Ray} A reference to this ray.\r\n\t */\r\n\tapplyMatrix4( matrix4 ) {\r\n\r\n\t\tthis.origin.applyMatrix4( matrix4 );\r\n\t\tthis.direction.transformDirection( matrix4 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this ray is equal with the given one.\r\n\t *\r\n\t * @param {Ray} ray - The ray to test for equality.\r\n\t * @return {boolean} Whether this ray is equal with the given one.\r\n\t */\r\n\tequals( ray ) {\r\n\r\n\t\treturn ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new ray with copied values from this instance.\r\n\t *\r\n\t * @return {Ray} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Ray };\r\n", "import { Vector3 } from './Vector3.js';\r\nimport { Vector4 } from './Vector4.js';\r\n\r\nconst _v0 = /*@__PURE__*/ new Vector3();\r\nconst _v1 = /*@__PURE__*/ new Vector3();\r\nconst _v2 = /*@__PURE__*/ new Vector3();\r\nconst _v3 = /*@__PURE__*/ new Vector3();\r\n\r\nconst _vab = /*@__PURE__*/ new Vector3();\r\nconst _vac = /*@__PURE__*/ new Vector3();\r\nconst _vbc = /*@__PURE__*/ new Vector3();\r\nconst _vap = /*@__PURE__*/ new Vector3();\r\nconst _vbp = /*@__PURE__*/ new Vector3();\r\nconst _vcp = /*@__PURE__*/ new Vector3();\r\n\r\nconst _v40 = /*@__PURE__*/ new Vector4();\r\nconst _v41 = /*@__PURE__*/ new Vector4();\r\nconst _v42 = /*@__PURE__*/ new Vector4();\r\n\r\n/**\r\n * A geometric triangle as defined by three vectors representing its three corners.\r\n */\r\nclass Triangle {\r\n\r\n\t/**\r\n\t * Constructs a new triangle.\r\n\t *\r\n\t * @param {Vector3} [a=(0,0,0)] - The first corner of the triangle.\r\n\t * @param {Vector3} [b=(0,0,0)] - The second corner of the triangle.\r\n\t * @param {Vector3} [c=(0,0,0)] - The third corner of the triangle.\r\n\t */\r\n\tconstructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {\r\n\r\n\t\t/**\r\n\t\t * The first corner of the triangle.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.a = a;\r\n\r\n\t\t/**\r\n\t\t * The second corner of the triangle.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.b = b;\r\n\r\n\t\t/**\r\n\t\t * The third corner of the triangle.\r\n\t\t *\r\n\t\t * @type {Vector3}\r\n\t\t */\r\n\t\tthis.c = c;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the normal vector of a triangle.\r\n\t *\r\n\t * @param {Vector3} a - The first corner of the triangle.\r\n\t * @param {Vector3} b - The second corner of the triangle.\r\n\t * @param {Vector3} c - The third corner of the triangle.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The triangle's normal.\r\n\t */\r\n\tstatic getNormal( a, b, c, target ) {\r\n\r\n\t\ttarget.subVectors( c, b );\r\n\t\t_v0.subVectors( a, b );\r\n\t\ttarget.cross( _v0 );\r\n\r\n\t\tconst targetLengthSq = target.lengthSq();\r\n\t\tif ( targetLengthSq > 0 ) {\r\n\r\n\t\t\treturn target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn target.set( 0, 0, 0 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes a barycentric coordinates from the given vector.\r\n\t * Returns `null` if the triangle is degenerate.\r\n\t *\r\n\t * @param {Vector3} point - A point in 3D space.\r\n\t * @param {Vector3} a - The first corner of the triangle.\r\n\t * @param {Vector3} b - The second corner of the triangle.\r\n\t * @param {Vector3} c - The third corner of the triangle.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {?Vector3} The barycentric coordinates for the given point\r\n\t */\r\n\tstatic getBarycoord( point, a, b, c, target ) {\r\n\r\n\t\t// based on: http://www.blackpawn.com/texts/pointinpoly/default.html\r\n\r\n\t\t_v0.subVectors( c, a );\r\n\t\t_v1.subVectors( b, a );\r\n\t\t_v2.subVectors( point, a );\r\n\r\n\t\tconst dot00 = _v0.dot( _v0 );\r\n\t\tconst dot01 = _v0.dot( _v1 );\r\n\t\tconst dot02 = _v0.dot( _v2 );\r\n\t\tconst dot11 = _v1.dot( _v1 );\r\n\t\tconst dot12 = _v1.dot( _v2 );\r\n\r\n\t\tconst denom = ( dot00 * dot11 - dot01 * dot01 );\r\n\r\n\t\t// collinear or singular triangle\r\n\t\tif ( denom === 0 ) {\r\n\r\n\t\t\ttarget.set( 0, 0, 0 );\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tconst invDenom = 1 / denom;\r\n\t\tconst u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;\r\n\t\tconst v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;\r\n\r\n\t\t// barycentric coordinates must always sum to 1\r\n\t\treturn target.set( 1 - u - v, v, u );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given point, when projected onto the plane of the\r\n\t * triangle, lies within the triangle.\r\n\t *\r\n\t * @param {Vector3} point - The point in 3D space to test.\r\n\t * @param {Vector3} a - The first corner of the triangle.\r\n\t * @param {Vector3} b - The second corner of the triangle.\r\n\t * @param {Vector3} c - The third corner of the triangle.\r\n\t * @return {boolean} Whether the given point, when projected onto the plane of the\r\n\t * triangle, lies within the triangle or not.\r\n\t */\r\n\tstatic containsPoint( point, a, b, c ) {\r\n\r\n\t\t// if the triangle is degenerate then we can't contain a point\r\n\t\tif ( this.getBarycoord( point, a, b, c, _v3 ) === null ) {\r\n\r\n\t\t\treturn false;\r\n\r\n\t\t}\r\n\r\n\t\treturn ( _v3.x >= 0 ) && ( _v3.y >= 0 ) && ( ( _v3.x + _v3.y ) <= 1 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the value barycentrically interpolated for the given point on the\r\n\t * triangle. Returns `null` if the triangle is degenerate.\r\n\t *\r\n\t * @param {Vector3} point - Position of interpolated point.\r\n\t * @param {Vector3} p1 - The first corner of the triangle.\r\n\t * @param {Vector3} p2 - The second corner of the triangle.\r\n\t * @param {Vector3} p3 - The third corner of the triangle.\r\n\t * @param {Vector3} v1 - Value to interpolate of first vertex.\r\n\t * @param {Vector3} v2 - Value to interpolate of second vertex.\r\n\t * @param {Vector3} v3 - Value to interpolate of third vertex.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {?Vector3} The interpolated value.\r\n\t */\r\n\tstatic getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {\r\n\r\n\t\tif ( this.getBarycoord( point, p1, p2, p3, _v3 ) === null ) {\r\n\r\n\t\t\ttarget.x = 0;\r\n\t\t\ttarget.y = 0;\r\n\t\t\tif ( 'z' in target ) target.z = 0;\r\n\t\t\tif ( 'w' in target ) target.w = 0;\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\ttarget.setScalar( 0 );\r\n\t\ttarget.addScaledVector( v1, _v3.x );\r\n\t\ttarget.addScaledVector( v2, _v3.y );\r\n\t\ttarget.addScaledVector( v3, _v3.z );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the value barycentrically interpolated for the given attribute and indices.\r\n\t *\r\n\t * @param {BufferAttribute} attr - The attribute to interpolate.\r\n\t * @param {number} i1 - Index of first vertex.\r\n\t * @param {number} i2 - Index of second vertex.\r\n\t * @param {number} i3 - Index of third vertex.\r\n\t * @param {Vector3} barycoord - The barycoordinate value to use to interpolate.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The interpolated attribute value.\r\n\t */\r\n\tstatic getInterpolatedAttribute( attr, i1, i2, i3, barycoord, target ) {\r\n\r\n\t\t_v40.setScalar( 0 );\r\n\t\t_v41.setScalar( 0 );\r\n\t\t_v42.setScalar( 0 );\r\n\r\n\t\t_v40.fromBufferAttribute( attr, i1 );\r\n\t\t_v41.fromBufferAttribute( attr, i2 );\r\n\t\t_v42.fromBufferAttribute( attr, i3 );\r\n\r\n\t\ttarget.setScalar( 0 );\r\n\t\ttarget.addScaledVector( _v40, barycoord.x );\r\n\t\ttarget.addScaledVector( _v41, barycoord.y );\r\n\t\ttarget.addScaledVector( _v42, barycoord.z );\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the triangle is oriented towards the given direction.\r\n\t *\r\n\t * @param {Vector3} a - The first corner of the triangle.\r\n\t * @param {Vector3} b - The second corner of the triangle.\r\n\t * @param {Vector3} c - The third corner of the triangle.\r\n\t * @param {Vector3} direction - The (normalized) direction vector.\r\n\t * @return {boolean} Whether the triangle is oriented towards the given direction or not.\r\n\t */\r\n\tstatic isFrontFacing( a, b, c, direction ) {\r\n\r\n\t\t_v0.subVectors( c, b );\r\n\t\t_v1.subVectors( a, b );\r\n\r\n\t\t// strictly front facing\r\n\t\treturn ( _v0.cross( _v1 ).dot( direction ) < 0 ) ? true : false;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the triangle's vertices by copying the given values.\r\n\t *\r\n\t * @param {Vector3} a - The first corner of the triangle.\r\n\t * @param {Vector3} b - The second corner of the triangle.\r\n\t * @param {Vector3} c - The third corner of the triangle.\r\n\t * @return {Triangle} A reference to this triangle.\r\n\t */\r\n\tset( a, b, c ) {\r\n\r\n\t\tthis.a.copy( a );\r\n\t\tthis.b.copy( b );\r\n\t\tthis.c.copy( c );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the triangle's vertices by copying the given array values.\r\n\t *\r\n\t * @param {Array<Vector3>} points - An array with 3D points.\r\n\t * @param {number} i0 - The array index representing the first corner of the triangle.\r\n\t * @param {number} i1 - The array index representing the second corner of the triangle.\r\n\t * @param {number} i2 - The array index representing the third corner of the triangle.\r\n\t * @return {Triangle} A reference to this triangle.\r\n\t */\r\n\tsetFromPointsAndIndices( points, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.copy( points[ i0 ] );\r\n\t\tthis.b.copy( points[ i1 ] );\r\n\t\tthis.c.copy( points[ i2 ] );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the triangle's vertices by copying the given attribute values.\r\n\t *\r\n\t * @param {BufferAttribute} attribute - A buffer attribute with 3D points data.\r\n\t * @param {number} i0 - The attribute index representing the first corner of the triangle.\r\n\t * @param {number} i1 - The attribute index representing the second corner of the triangle.\r\n\t * @param {number} i2 - The attribute index representing the third corner of the triangle.\r\n\t * @return {Triangle} A reference to this triangle.\r\n\t */\r\n\tsetFromAttributeAndIndices( attribute, i0, i1, i2 ) {\r\n\r\n\t\tthis.a.fromBufferAttribute( attribute, i0 );\r\n\t\tthis.b.fromBufferAttribute( attribute, i1 );\r\n\t\tthis.c.fromBufferAttribute( attribute, i2 );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a new triangle with copied values from this instance.\r\n\t *\r\n\t * @return {Triangle} A clone of this instance.\r\n\t */\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Copies the values of the given triangle to this instance.\r\n\t *\r\n\t * @param {Triangle} triangle - The triangle to copy.\r\n\t * @return {Triangle} A reference to this triangle.\r\n\t */\r\n\tcopy( triangle ) {\r\n\r\n\t\tthis.a.copy( triangle.a );\r\n\t\tthis.b.copy( triangle.b );\r\n\t\tthis.c.copy( triangle.c );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the area of the triangle.\r\n\t *\r\n\t * @return {number} The triangle's area.\r\n\t */\r\n\tgetArea() {\r\n\r\n\t\t_v0.subVectors( this.c, this.b );\r\n\t\t_v1.subVectors( this.a, this.b );\r\n\r\n\t\treturn _v0.cross( _v1 ).length() * 0.5;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the midpoint of the triangle.\r\n\t *\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The triangle's midpoint.\r\n\t */\r\n\tgetMidpoint( target ) {\r\n\r\n\t\treturn target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the normal of the triangle.\r\n\t *\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The triangle's normal.\r\n\t */\r\n\tgetNormal( target ) {\r\n\r\n\t\treturn Triangle.getNormal( this.a, this.b, this.c, target );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes a plane the triangle lies within.\r\n\t *\r\n\t * @param {Plane} target - The target vector that is used to store the method's result.\r\n\t * @return {Plane} The plane the triangle lies within.\r\n\t */\r\n\tgetPlane( target ) {\r\n\r\n\t\treturn target.setFromCoplanarPoints( this.a, this.b, this.c );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes a barycentric coordinates from the given vector.\r\n\t * Returns `null` if the triangle is degenerate.\r\n\t *\r\n\t * @param {Vector3} point - A point in 3D space.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {?Vector3} The barycentric coordinates for the given point\r\n\t */\r\n\tgetBarycoord( point, target ) {\r\n\r\n\t\treturn Triangle.getBarycoord( point, this.a, this.b, this.c, target );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the value barycentrically interpolated for the given point on the\r\n\t * triangle. Returns `null` if the triangle is degenerate.\r\n\t *\r\n\t * @param {Vector3} point - Position of interpolated point.\r\n\t * @param {Vector3} v1 - Value to interpolate of first vertex.\r\n\t * @param {Vector3} v2 - Value to interpolate of second vertex.\r\n\t * @param {Vector3} v3 - Value to interpolate of third vertex.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {?Vector3} The interpolated value.\r\n\t */\r\n\tgetInterpolation( point, v1, v2, v3, target ) {\r\n\r\n\t\treturn Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the given point, when projected onto the plane of the\r\n\t * triangle, lies within the triangle.\r\n\t *\r\n\t * @param {Vector3} point - The point in 3D space to test.\r\n\t * @return {boolean} Whether the given point, when projected onto the plane of the\r\n\t * triangle, lies within the triangle or not.\r\n\t */\r\n\tcontainsPoint( point ) {\r\n\r\n\t\treturn Triangle.containsPoint( point, this.a, this.b, this.c );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if the triangle is oriented towards the given direction.\r\n\t *\r\n\t * @param {Vector3} direction - The (normalized) direction vector.\r\n\t * @return {boolean} Whether the triangle is oriented towards the given direction or not.\r\n\t */\r\n\tisFrontFacing( direction ) {\r\n\r\n\t\treturn Triangle.isFrontFacing( this.a, this.b, this.c, direction );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this triangle intersects with the given box.\r\n\t *\r\n\t * @param {Box3} box - The box to intersect.\r\n\t * @return {boolean} Whether this triangle intersects with the given box or not.\r\n\t */\r\n\tintersectsBox( box ) {\r\n\r\n\t\treturn box.intersectsTriangle( this );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the closest point on the triangle to the given point.\r\n\t *\r\n\t * @param {Vector3} p - The point to compute the closest point for.\r\n\t * @param {Vector3} target - The target vector that is used to store the method's result.\r\n\t * @return {Vector3} The closest point on the triangle.\r\n\t */\r\n\tclosestPointToPoint( p, target ) {\r\n\r\n\t\tconst a = this.a, b = this.b, c = this.c;\r\n\t\tlet v, w;\r\n\r\n\t\t// algorithm thanks to Real-Time Collision Detection by Christer Ericson,\r\n\t\t// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,\r\n\t\t// under the accompanying license; see chapter 5.1.5 for detailed explanation.\r\n\t\t// basically, we're distinguishing which of the voronoi regions of the triangle\r\n\t\t// the point lies in with the minimum amount of redundant computation.\r\n\r\n\t\t_vab.subVectors( b, a );\r\n\t\t_vac.subVectors( c, a );\r\n\t\t_vap.subVectors( p, a );\r\n\t\tconst d1 = _vab.dot( _vap );\r\n\t\tconst d2 = _vac.dot( _vap );\r\n\t\tif ( d1 <= 0 && d2 <= 0 ) {\r\n\r\n\t\t\t// vertex region of A; barycentric coords (1, 0, 0)\r\n\t\t\treturn target.copy( a );\r\n\r\n\t\t}\r\n\r\n\t\t_vbp.subVectors( p, b );\r\n\t\tconst d3 = _vab.dot( _vbp );\r\n\t\tconst d4 = _vac.dot( _vbp );\r\n\t\tif ( d3 >= 0 && d4 <= d3 ) {\r\n\r\n\t\t\t// vertex region of B; barycentric coords (0, 1, 0)\r\n\t\t\treturn target.copy( b );\r\n\r\n\t\t}\r\n\r\n\t\tconst vc = d1 * d4 - d3 * d2;\r\n\t\tif ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {\r\n\r\n\t\t\tv = d1 / ( d1 - d3 );\r\n\t\t\t// edge region of AB; barycentric coords (1-v, v, 0)\r\n\t\t\treturn target.copy( a ).addScaledVector( _vab, v );\r\n\r\n\t\t}\r\n\r\n\t\t_vcp.subVectors( p, c );\r\n\t\tconst d5 = _vab.dot( _vcp );\r\n\t\tconst d6 = _vac.dot( _vcp );\r\n\t\tif ( d6 >= 0 && d5 <= d6 ) {\r\n\r\n\t\t\t// vertex region of C; barycentric coords (0, 0, 1)\r\n\t\t\treturn target.copy( c );\r\n\r\n\t\t}\r\n\r\n\t\tconst vb = d5 * d2 - d1 * d6;\r\n\t\tif ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {\r\n\r\n\t\t\tw = d2 / ( d2 - d6 );\r\n\t\t\t// edge region of AC; barycentric coords (1-w, 0, w)\r\n\t\t\treturn target.copy( a ).addScaledVector( _vac, w );\r\n\r\n\t\t}\r\n\r\n\t\tconst va = d3 * d6 - d5 * d4;\r\n\t\tif ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {\r\n\r\n\t\t\t_vbc.subVectors( c, b );\r\n\t\t\tw = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );\r\n\t\t\t// edge region of BC; barycentric coords (0, 1-w, w)\r\n\t\t\treturn target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC\r\n\r\n\t\t}\r\n\r\n\t\t// face region\r\n\t\tconst denom = 1 / ( va + vb + vc );\r\n\t\t// u = va * denom\r\n\t\tv = vb * denom;\r\n\t\tw = vc * denom;\r\n\r\n\t\treturn target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns `true` if this triangle is equal with the given one.\r\n\t *\r\n\t * @param {Triangle} triangle - The triangle to test for equality.\r\n\t * @return {boolean} Whether this triangle is equal with the given one.\r\n\t */\r\n\tequals( triangle ) {\r\n\r\n\t\treturn triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Triangle };\r\n", "import { Material } from './Material.js';\r\nimport { MultiplyOperation } from '../constants.js';\r\nimport { Color } from '../math/Color.js';\r\nimport { Euler } from '../math/Euler.js';\r\n\r\n/**\r\n * A material for drawing geometries in a simple shaded (flat or wireframe) way.\r\n *\r\n * This material is not affected by lights.\r\n *\r\n * @augments Material\r\n */\r\nclass MeshBasicMaterial extends Material {\r\n\r\n\t/**\r\n\t * Constructs a new mesh basic material.\r\n\t *\r\n\t * @param {Object} [parameters] - An object with one or more properties\r\n\t * defining the material's appearance. Any property of the material\r\n\t * (including any property from inherited materials) can be passed\r\n\t * in here. Color values can be passed any type of value accepted\r\n\t * by {@link Color#set}.\r\n\t */\r\n\tconstructor( parameters ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isMeshBasicMaterial = true;\r\n\r\n\t\tthis.type = 'MeshBasicMaterial';\r\n\r\n\t\t/**\r\n\t\t * Color of the material.\r\n\t\t *\r\n\t\t * @type {Color}\r\n\t\t * @default (1,1,1)\r\n\t\t */\r\n\t\tthis.color = new Color( 0xffffff ); // emissive\r\n\r\n\t\t/**\r\n\t\t * The color map. May optionally include an alpha channel, typically combined\r\n\t\t * with {@link Material#transparent} or {@link Material#alphaTest}. The texture map\r\n\t\t * color is modulated by the diffuse `color`.\r\n\t\t *\r\n\t\t * @type {?Texture}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.map = null;\r\n\r\n\t\t/**\r\n\t\t * The light map. Requires a second set of UVs.\r\n\t\t *\r\n\t\t * @type {?Texture}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.lightMap = null;\r\n\r\n\t\t/**\r\n\t\t * Intensity of the baked light.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.lightMapIntensity = 1.0;\r\n\r\n\t\t/**\r\n\t\t * The red channel of this texture is used as the ambient occlusion map.\r\n\t\t * Requires a second set of UVs.\r\n\t\t *\r\n\t\t * @type {?Texture}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.aoMap = null;\r\n\r\n\t\t/**\r\n\t\t * Intensity of the ambient occlusion effect. Range is `[0,1]`, where `0`\r\n\t\t * disables ambient occlusion. Where intensity is `1` and the AO map's\r\n\t\t * red channel is also `1`, ambient light is fully occluded on a surface.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.aoMapIntensity = 1.0;\r\n\r\n\t\t/**\r\n\t\t * Specular map used by the material.\r\n\t\t *\r\n\t\t * @type {?Texture}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.specularMap = null;\r\n\r\n\t\t/**\r\n\t\t * The alpha map is a grayscale texture that controls the opacity across the\r\n\t\t * surface (black: fully transparent; white: fully opaque).\r\n\t\t *\r\n\t\t * Only the color of the texture is used, ignoring the alpha channel if one\r\n\t\t * exists. For RGB and RGBA textures, the renderer will use the green channel\r\n\t\t * when sampling this texture due to the extra bit of precision provided for\r\n\t\t * green in DXT-compressed and uncompressed RGB 565 formats. Luminance-only and\r\n\t\t * luminance/alpha textures will also still work as expected.\r\n\t\t *\r\n\t\t * @type {?Texture}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.alphaMap = null;\r\n\r\n\t\t/**\r\n\t\t * The environment map.\r\n\t\t *\r\n\t\t * @type {?Texture}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.envMap = null;\r\n\r\n\t\t/**\r\n\t\t * The rotation of the environment map in radians.\r\n\t\t *\r\n\t\t * @type {Euler}\r\n\t\t * @default (0,0,0)\r\n\t\t */\r\n\t\tthis.envMapRotation = new Euler();\r\n\r\n\t\t/**\r\n\t\t * How to combine the result of the surface's color with the environment map, if any.\r\n\t\t *\r\n\t\t * When set to `MixOperation`, the {@link MeshBasicMaterial#reflectivity} is used to\r\n\t\t * blend between the two colors.\r\n\t\t *\r\n\t\t * @type {(MultiplyOperation|MixOperation|AddOperation)}\r\n\t\t * @default MultiplyOperation\r\n\t\t */\r\n\t\tthis.combine = MultiplyOperation;\r\n\r\n\t\t/**\r\n\t\t * How much the environment map affects the surface.\r\n\t\t * The valid range is between `0` (no reflections) and `1` (full reflections).\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.reflectivity = 1;\r\n\r\n\t\t/**\r\n\t\t * The index of refraction (IOR) of air (approximately 1) divided by the\r\n\t\t * index of refraction of the material. It is used with environment mapping\r\n\t\t * modes {@link CubeRefractionMapping} and {@link EquirectangularRefractionMapping}.\r\n\t\t * The refraction ratio should not exceed `1`.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0.98\r\n\t\t */\r\n\t\tthis.refractionRatio = 0.98;\r\n\r\n\t\t/**\r\n\t\t * Renders the geometry as a wireframe.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default false\r\n\t\t */\r\n\t\tthis.wireframe = false;\r\n\r\n\t\t/**\r\n\t\t * Controls the thickness of the wireframe.\r\n\t\t *\r\n\t\t * Can only be used with {@link SVGRenderer}.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.wireframeLinewidth = 1;\r\n\r\n\t\t/**\r\n\t\t * Defines appearance of wireframe ends.\r\n\t\t *\r\n\t\t * Can only be used with {@link SVGRenderer}.\r\n\t\t *\r\n\t\t * @type {('round'|'bevel'|'miter')}\r\n\t\t * @default 'round'\r\n\t\t */\r\n\t\tthis.wireframeLinecap = 'round';\r\n\r\n\t\t/**\r\n\t\t * Defines appearance of wireframe joints.\r\n\t\t *\r\n\t\t * Can only be used with {@link SVGRenderer}.\r\n\t\t *\r\n\t\t * @type {('round'|'bevel'|'miter')}\r\n\t\t * @default 'round'\r\n\t\t */\r\n\t\tthis.wireframeLinejoin = 'round';\r\n\r\n\t\t/**\r\n\t\t * Whether the material is affected by fog or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.fog = true;\r\n\r\n\t\tthis.setValues( parameters );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.color.copy( source.color );\r\n\r\n\t\tthis.map = source.map;\r\n\r\n\t\tthis.lightMap = source.lightMap;\r\n\t\tthis.lightMapIntensity = source.lightMapIntensity;\r\n\r\n\t\tthis.aoMap = source.aoMap;\r\n\t\tthis.aoMapIntensity = source.aoMapIntensity;\r\n\r\n\t\tthis.specularMap = source.specularMap;\r\n\r\n\t\tthis.alphaMap = source.alphaMap;\r\n\r\n\t\tthis.envMap = source.envMap;\r\n\t\tthis.envMapRotation.copy( source.envMapRotation );\r\n\t\tthis.combine = source.combine;\r\n\t\tthis.reflectivity = source.reflectivity;\r\n\t\tthis.refractionRatio = source.refractionRatio;\r\n\r\n\t\tthis.wireframe = source.wireframe;\r\n\t\tthis.wireframeLinewidth = source.wireframeLinewidth;\r\n\t\tthis.wireframeLinecap = source.wireframeLinecap;\r\n\t\tthis.wireframeLinejoin = source.wireframeLinejoin;\r\n\r\n\t\tthis.fog = source.fog;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { MeshBasicMaterial };\r\n", "import { Vector3 } from '../math/Vector3.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Sphere } from '../math/Sphere.js';\r\nimport { Ray } from '../math/Ray.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\nimport { Triangle } from '../math/Triangle.js';\r\nimport { BackSide, FrontSide } from '../constants.js';\r\nimport { MeshBasicMaterial } from '../materials/MeshBasicMaterial.js';\r\nimport { BufferGeometry } from '../core/BufferGeometry.js';\r\n\r\nconst _inverseMatrix = /*@__PURE__*/ new Matrix4();\r\nconst _ray = /*@__PURE__*/ new Ray();\r\nconst _sphere = /*@__PURE__*/ new Sphere();\r\nconst _sphereHitAt = /*@__PURE__*/ new Vector3();\r\n\r\nconst _vA = /*@__PURE__*/ new Vector3();\r\nconst _vB = /*@__PURE__*/ new Vector3();\r\nconst _vC = /*@__PURE__*/ new Vector3();\r\n\r\nconst _tempA = /*@__PURE__*/ new Vector3();\r\nconst _morphA = /*@__PURE__*/ new Vector3();\r\n\r\nconst _intersectionPoint = /*@__PURE__*/ new Vector3();\r\nconst _intersectionPointWorld = /*@__PURE__*/ new Vector3();\r\n\r\n/**\r\n * Class representing triangular polygon mesh based objects.\r\n *\r\n * ```js\r\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\r\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\r\n * const mesh = new THREE.Mesh( geometry, material );\r\n * scene.add( mesh );\r\n * ```\r\n *\r\n * @augments Object3D\r\n */\r\nclass Mesh extends Object3D {\r\n\r\n\t/**\r\n\t * Constructs a new mesh.\r\n\t *\r\n\t * @param {BufferGeometry} [geometry] - The mesh geometry.\r\n\t * @param {Material|Array<Material>} [material] - The mesh material.\r\n\t */\r\n\tconstructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isMesh = true;\r\n\r\n\t\tthis.type = 'Mesh';\r\n\r\n\t\t/**\r\n\t\t * The mesh geometry.\r\n\t\t *\r\n\t\t * @type {BufferGeometry}\r\n\t\t */\r\n\t\tthis.geometry = geometry;\r\n\r\n\t\t/**\r\n\t\t * The mesh material.\r\n\t\t *\r\n\t\t * @type {Material|Array<Material>}\r\n\t\t * @default MeshBasicMaterial\r\n\t\t */\r\n\t\tthis.material = material;\r\n\r\n\t\t/**\r\n\t\t * A dictionary representing the morph targets in the geometry. The key is the\r\n\t\t * morph targets name, the value its attribute index. This member is `undefined`\r\n\t\t * by default and only set when morph targets are detected in the geometry.\r\n\t\t *\r\n\t\t * @type {Object<String,number>|undefined}\r\n\t\t * @default undefined\r\n\t\t */\r\n\t\tthis.morphTargetDictionary = undefined;\r\n\r\n\t\t/**\r\n\t\t * An array of weights typically in the range `[0,1]` that specify how much of the morph\r\n\t\t * is applied. This member is `undefined` by default and only set when morph targets are\r\n\t\t * detected in the geometry.\r\n\t\t *\r\n\t\t * @type {Array<number>|undefined}\r\n\t\t * @default undefined\r\n\t\t */\r\n\t\tthis.morphTargetInfluences = undefined;\r\n\r\n\t\t/**\r\n\t\t * The number of instances of this mesh.\r\n\t\t * Can only be used with {@link WebGPURenderer}.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.count = 1;\r\n\r\n\t\tthis.updateMorphTargets();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tif ( source.morphTargetInfluences !== undefined ) {\r\n\r\n\t\t\tthis.morphTargetInfluences = source.morphTargetInfluences.slice();\r\n\r\n\t\t}\r\n\r\n\t\tif ( source.morphTargetDictionary !== undefined ) {\r\n\r\n\t\t\tthis.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );\r\n\r\n\t\t}\r\n\r\n\t\tthis.material = Array.isArray( source.material ) ? source.material.slice() : source.material;\r\n\t\tthis.geometry = source.geometry;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the values of {@link Mesh#morphTargetDictionary} and {@link Mesh#morphTargetInfluences}\r\n\t * to make sure existing morph targets can influence this 3D object.\r\n\t */\r\n\tupdateMorphTargets() {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\r\n\t\tconst morphAttributes = geometry.morphAttributes;\r\n\t\tconst keys = Object.keys( morphAttributes );\r\n\r\n\t\tif ( keys.length > 0 ) {\r\n\r\n\t\t\tconst morphAttribute = morphAttributes[ keys[ 0 ] ];\r\n\r\n\t\t\tif ( morphAttribute !== undefined ) {\r\n\r\n\t\t\t\tthis.morphTargetInfluences = [];\r\n\t\t\t\tthis.morphTargetDictionary = {};\r\n\r\n\t\t\t\tfor ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {\r\n\r\n\t\t\t\t\tconst name = morphAttribute[ m ].name || String( m );\r\n\r\n\t\t\t\t\tthis.morphTargetInfluences.push( 0 );\r\n\t\t\t\t\tthis.morphTargetDictionary[ name ] = m;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the local-space position of the vertex at the given index, taking into\r\n\t * account the current animation state of both morph targets and skinning.\r\n\t *\r\n\t * @param {number} index - The vertex index.\r\n\t * @param {Vector3} target - The target object that is used to store the method's result.\r\n\t * @return {Vector3} The vertex position in local space.\r\n\t */\r\n\tgetVertexPosition( index, target ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst position = geometry.attributes.position;\r\n\t\tconst morphPosition = geometry.morphAttributes.position;\r\n\t\tconst morphTargetsRelative = geometry.morphTargetsRelative;\r\n\r\n\t\ttarget.fromBufferAttribute( position, index );\r\n\r\n\t\tconst morphInfluences = this.morphTargetInfluences;\r\n\r\n\t\tif ( morphPosition && morphInfluences ) {\r\n\r\n\t\t\t_morphA.set( 0, 0, 0 );\r\n\r\n\t\t\tfor ( let i = 0, il = morphPosition.length; i < il; i ++ ) {\r\n\r\n\t\t\t\tconst influence = morphInfluences[ i ];\r\n\t\t\t\tconst morphAttribute = morphPosition[ i ];\r\n\r\n\t\t\t\tif ( influence === 0 ) continue;\r\n\r\n\t\t\t\t_tempA.fromBufferAttribute( morphAttribute, index );\r\n\r\n\t\t\t\tif ( morphTargetsRelative ) {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA, influence );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_morphA.addScaledVector( _tempA.sub( target ), influence );\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\ttarget.add( _morphA );\r\n\r\n\t\t}\r\n\r\n\t\treturn target;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes intersection points between a casted ray and this line.\r\n\t *\r\n\t * @param {Raycaster} raycaster - The raycaster.\r\n\t * @param {Array<Object>} intersects - The target array that holds the intersection points.\r\n\t */\r\n\traycast( raycaster, intersects ) {\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst material = this.material;\r\n\t\tconst matrixWorld = this.matrixWorld;\r\n\r\n\t\tif ( material === undefined ) return;\r\n\r\n\t\t// test with bounding sphere in world space\r\n\r\n\t\tif ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();\r\n\r\n\t\t_sphere.copy( geometry.boundingSphere );\r\n\t\t_sphere.applyMatrix4( matrixWorld );\r\n\r\n\t\t// check distance from ray origin to bounding sphere\r\n\r\n\t\t_ray.copy( raycaster.ray ).recast( raycaster.near );\r\n\r\n\t\tif ( _sphere.containsPoint( _ray.origin ) === false ) {\r\n\r\n\t\t\tif ( _ray.intersectSphere( _sphere, _sphereHitAt ) === null ) return;\r\n\r\n\t\t\tif ( _ray.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;\r\n\r\n\t\t}\r\n\r\n\t\t// convert ray to local space of mesh\r\n\r\n\t\t_inverseMatrix.copy( matrixWorld ).invert();\r\n\t\t_ray.copy( raycaster.ray ).applyMatrix4( _inverseMatrix );\r\n\r\n\t\t// test with bounding box in local space\r\n\r\n\t\tif ( geometry.boundingBox !== null ) {\r\n\r\n\t\t\tif ( _ray.intersectsBox( geometry.boundingBox ) === false ) return;\r\n\r\n\t\t}\r\n\r\n\t\t// test for intersections with geometry\r\n\r\n\t\tthis._computeIntersections( raycaster, intersects, _ray );\r\n\r\n\t}\r\n\r\n\t_computeIntersections( raycaster, intersects, rayLocalSpace ) {\r\n\r\n\t\tlet intersection;\r\n\r\n\t\tconst geometry = this.geometry;\r\n\t\tconst material = this.material;\r\n\r\n\t\tconst index = geometry.index;\r\n\t\tconst position = geometry.attributes.position;\r\n\t\tconst uv = geometry.attributes.uv;\r\n\t\tconst uv1 = geometry.attributes.uv1;\r\n\t\tconst normal = geometry.attributes.normal;\r\n\t\tconst groups = geometry.groups;\r\n\t\tconst drawRange = geometry.drawRange;\r\n\r\n\t\tif ( index !== null ) {\r\n\r\n\t\t\t// indexed buffer geometry\r\n\r\n\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst group = groups[ i ];\r\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\tconst end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\r\n\r\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\tconst a = index.getX( j );\r\n\t\t\t\t\t\tconst b = index.getX( j + 1 );\r\n\t\t\t\t\t\tconst c = index.getX( j + 2 );\r\n\r\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\t\tconst end = Math.min( index.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tconst a = index.getX( i );\r\n\t\t\t\t\tconst b = index.getX( i + 1 );\r\n\t\t\t\t\tconst c = index.getX( i + 2 );\r\n\r\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t} else if ( position !== undefined ) {\r\n\r\n\t\t\t// non-indexed buffer geometry\r\n\r\n\t\t\tif ( Array.isArray( material ) ) {\r\n\r\n\t\t\t\tfor ( let i = 0, il = groups.length; i < il; i ++ ) {\r\n\r\n\t\t\t\t\tconst group = groups[ i ];\r\n\t\t\t\t\tconst groupMaterial = material[ group.materialIndex ];\r\n\r\n\t\t\t\t\tconst start = Math.max( group.start, drawRange.start );\r\n\t\t\t\t\tconst end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );\r\n\r\n\t\t\t\t\tfor ( let j = start, jl = end; j < jl; j += 3 ) {\r\n\r\n\t\t\t\t\t\tconst a = j;\r\n\t\t\t\t\t\tconst b = j + 1;\r\n\t\t\t\t\t\tconst c = j + 2;\r\n\r\n\t\t\t\t\t\tintersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\t\tintersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\t\tintersection.face.materialIndex = group.materialIndex;\r\n\t\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tconst start = Math.max( 0, drawRange.start );\r\n\t\t\t\tconst end = Math.min( position.count, ( drawRange.start + drawRange.count ) );\r\n\r\n\t\t\t\tfor ( let i = start, il = end; i < il; i += 3 ) {\r\n\r\n\t\t\t\t\tconst a = i;\r\n\t\t\t\t\tconst b = i + 1;\r\n\t\t\t\t\tconst c = i + 2;\r\n\r\n\t\t\t\t\tintersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );\r\n\r\n\t\t\t\t\tif ( intersection ) {\r\n\r\n\t\t\t\t\t\tintersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics\r\n\t\t\t\t\t\tintersects.push( intersection );\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {\r\n\r\n\tlet intersect;\r\n\r\n\tif ( material.side === BackSide ) {\r\n\r\n\t\tintersect = ray.intersectTriangle( pC, pB, pA, true, point );\r\n\r\n\t} else {\r\n\r\n\t\tintersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );\r\n\r\n\t}\r\n\r\n\tif ( intersect === null ) return null;\r\n\r\n\t_intersectionPointWorld.copy( point );\r\n\t_intersectionPointWorld.applyMatrix4( object.matrixWorld );\r\n\r\n\tconst distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );\r\n\r\n\tif ( distance < raycaster.near || distance > raycaster.far ) return null;\r\n\r\n\treturn {\r\n\t\tdistance: distance,\r\n\t\tpoint: _intersectionPointWorld.clone(),\r\n\t\tobject: object\r\n\t};\r\n\r\n}\r\n\r\nfunction checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {\r\n\r\n\tobject.getVertexPosition( a, _vA );\r\n\tobject.getVertexPosition( b, _vB );\r\n\tobject.getVertexPosition( c, _vC );\r\n\r\n\tconst intersection = checkIntersection( object, material, raycaster, ray, _vA, _vB, _vC, _intersectionPoint );\r\n\r\n\tif ( intersection ) {\r\n\r\n\t\tconst barycoord = new Vector3();\r\n\t\tTriangle.getBarycoord( _intersectionPoint, _vA, _vB, _vC, barycoord );\r\n\r\n\t\tif ( uv ) {\r\n\r\n\t\t\tintersection.uv = Triangle.getInterpolatedAttribute( uv, a, b, c, barycoord, new Vector2() );\r\n\r\n\t\t}\r\n\r\n\t\tif ( uv1 ) {\r\n\r\n\t\t\tintersection.uv1 = Triangle.getInterpolatedAttribute( uv1, a, b, c, barycoord, new Vector2() );\r\n\r\n\t\t}\r\n\r\n\t\tif ( normal ) {\r\n\r\n\t\t\tintersection.normal = Triangle.getInterpolatedAttribute( normal, a, b, c, barycoord, new Vector3() );\r\n\r\n\t\t\tif ( intersection.normal.dot( ray.direction ) > 0 ) {\r\n\r\n\t\t\t\tintersection.normal.multiplyScalar( - 1 );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst face = {\r\n\t\t\ta: a,\r\n\t\t\tb: b,\r\n\t\t\tc: c,\r\n\t\t\tnormal: new Vector3(),\r\n\t\t\tmaterialIndex: 0\r\n\t\t};\r\n\r\n\t\tTriangle.getNormal( _vA, _vB, _vC, face.normal );\r\n\r\n\t\tintersection.face = face;\r\n\t\tintersection.barycoord = barycoord;\r\n\r\n\t}\r\n\r\n\treturn intersection;\r\n\r\n}\r\n\r\nexport { Mesh };\r\n", "import { WebGLCoordinateSystem } from '../constants.js';\r\nimport { Matrix4 } from '../math/Matrix4.js';\r\nimport { Object3D } from '../core/Object3D.js';\r\n\r\n/**\r\n * Abstract base class for cameras. This class should always be inherited\r\n * when you build a new camera.\r\n *\r\n * @abstract\r\n * @augments Object3D\r\n */\r\nclass Camera extends Object3D {\r\n\r\n\t/**\r\n\t * Constructs a new camera.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isCamera = true;\r\n\r\n\t\tthis.type = 'Camera';\r\n\r\n\t\t/**\r\n\t\t * The inverse of the camera's world matrix.\r\n\t\t *\r\n\t\t * @type {Matrix4}\r\n\t\t */\r\n\t\tthis.matrixWorldInverse = new Matrix4();\r\n\r\n\t\t/**\r\n\t\t * The camera's projection matrix.\r\n\t\t *\r\n\t\t * @type {Matrix4}\r\n\t\t */\r\n\t\tthis.projectionMatrix = new Matrix4();\r\n\r\n\t\t/**\r\n\t\t * The inverse of the camera's projection matrix.\r\n\t\t *\r\n\t\t * @type {Matrix4}\r\n\t\t */\r\n\t\tthis.projectionMatrixInverse = new Matrix4();\r\n\r\n\t\t/**\r\n\t\t * The coordinate system in which the camera is used.\r\n\t\t *\r\n\t\t * @type {(WebGLCoordinateSystem|WebGPUCoordinateSystem)}\r\n\t\t */\r\n\t\tthis.coordinateSystem = WebGLCoordinateSystem;\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.matrixWorldInverse.copy( source.matrixWorldInverse );\r\n\r\n\t\tthis.projectionMatrix.copy( source.projectionMatrix );\r\n\t\tthis.projectionMatrixInverse.copy( source.projectionMatrixInverse );\r\n\r\n\t\tthis.coordinateSystem = source.coordinateSystem;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a vector representing the (\"look\") direction of the 3D object in world space.\r\n\t *\r\n\t * This method is overwritten since cameras have a different forward vector compared to other\r\n\t * 3D objects. A camera looks down its local, negative z-axis by default.\r\n\t *\r\n\t * @param {Vector3} target - The target vector the result is stored to.\r\n\t * @return {Vector3} The 3D object's direction in world space.\r\n\t */\r\n\tgetWorldDirection( target ) {\r\n\r\n\t\treturn super.getWorldDirection( target ).negate();\r\n\r\n\t}\r\n\r\n\tupdateMatrixWorld( force ) {\r\n\r\n\t\tsuper.updateMatrixWorld( force );\r\n\r\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\r\n\r\n\t}\r\n\r\n\tupdateWorldMatrix( updateParents, updateChildren ) {\r\n\r\n\t\tsuper.updateWorldMatrix( updateParents, updateChildren );\r\n\r\n\t\tthis.matrixWorldInverse.copy( this.matrixWorld ).invert();\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor().copy( this );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { Camera };\r\n", "import { Camera } from './Camera.js';\r\n\r\n/**\r\n * Camera that uses [orthographic projection]{@link https://en.wikipedia.org/wiki/Orthographic_projection}.\r\n *\r\n * In this projection mode, an object's size in the rendered image stays\r\n * constant regardless of its distance from the camera. This can be useful\r\n * for rendering 2D scenes and UI elements, amongst other things.\r\n *\r\n * ```js\r\n * const camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );\r\n * scene.add( camera );\r\n * ```\r\n *\r\n * @augments Camera\r\n */\r\nclass OrthographicCamera extends Camera {\r\n\r\n\t/**\r\n\t * Constructs a new orthographic camera.\r\n\t *\r\n\t * @param {number} [left=-1] - The left plane of the camera's frustum.\r\n\t * @param {number} [right=1] - The right plane of the camera's frustum.\r\n\t * @param {number} [top=1] - The top plane of the camera's frustum.\r\n\t * @param {number} [bottom=-1] - The bottom plane of the camera's frustum.\r\n\t * @param {number} [near=0.1] - The camera's near plane.\r\n\t * @param {number} [far=2000] - The camera's far plane.\r\n\t */\r\n\tconstructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isOrthographicCamera = true;\r\n\r\n\t\tthis.type = 'OrthographicCamera';\r\n\r\n\t\t/**\r\n\t\t * The zoom factor of the camera.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.zoom = 1;\r\n\r\n\t\t/**\r\n\t\t * Represents the frustum window specification. This property should not be edited\r\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\r\n\t\t *\r\n\t\t * @type {?Object}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.view = null;\r\n\r\n\t\t/**\r\n\t\t * The left plane of the camera's frustum.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default -1\r\n\t\t */\r\n\t\tthis.left = left;\r\n\r\n\t\t/**\r\n\t\t * The right plane of the camera's frustum.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.right = right;\r\n\r\n\t\t/**\r\n\t\t * The top plane of the camera's frustum.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.top = top;\r\n\r\n\t\t/**\r\n\t\t * The bottom plane of the camera's frustum.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default -1\r\n\t\t */\r\n\t\tthis.bottom = bottom;\r\n\r\n\t\t/**\r\n\t\t * The camera's near plane. The valid range is greater than `0`\r\n\t\t * and less than the current value of {@link OrthographicCamera#far}.\r\n\t\t *\r\n\t\t * Note that, unlike for the {@link PerspectiveCamera}, `0` is a\r\n\t\t * valid value for an orthographic camera's near plane.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0.1\r\n\t\t */\r\n\t\tthis.near = near;\r\n\r\n\t\t/**\r\n\t\t * The camera's far plane. Must be greater than the\r\n\t\t * current value of {@link OrthographicCamera#near}.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 2000\r\n\t\t */\r\n\t\tthis.far = far;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.left = source.left;\r\n\t\tthis.right = source.right;\r\n\t\tthis.top = source.top;\r\n\t\tthis.bottom = source.bottom;\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\r\n\t\tthis.zoom = source.zoom;\r\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t * multi-monitor/multi-machine setups.\r\n\t *\r\n\t * @param {number} fullWidth - The full width of multiview setup.\r\n\t * @param {number} fullHeight - The full height of multiview setup.\r\n\t * @param {number} x - The horizontal offset of the subcamera.\r\n\t * @param {number} y - The vertical offset of the subcamera.\r\n\t * @param {number} width - The width of subcamera.\r\n\t * @param {number} height - The height of subcamera.\r\n\t * @see {@link PerspectiveCamera#setViewOffset}\r\n\t */\r\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\tif ( this.view === null ) {\r\n\r\n\t\t\tthis.view = {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tfullWidth: 1,\r\n\t\t\t\tfullHeight: 1,\r\n\t\t\t\toffsetX: 0,\r\n\t\t\t\toffsetY: 0,\r\n\t\t\t\twidth: 1,\r\n\t\t\t\theight: 1\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tthis.view.enabled = true;\r\n\t\tthis.view.fullWidth = fullWidth;\r\n\t\tthis.view.fullHeight = fullHeight;\r\n\t\tthis.view.offsetX = x;\r\n\t\tthis.view.offsetY = y;\r\n\t\tthis.view.width = width;\r\n\t\tthis.view.height = height;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the view offset from the projection matrix.\r\n\t */\r\n\tclearViewOffset() {\r\n\r\n\t\tif ( this.view !== null ) {\r\n\r\n\t\t\tthis.view.enabled = false;\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the camera's projection matrix. Must be called after any change of\r\n\t * camera properties.\r\n\t */\r\n\tupdateProjectionMatrix() {\r\n\r\n\t\tconst dx = ( this.right - this.left ) / ( 2 * this.zoom );\r\n\t\tconst dy = ( this.top - this.bottom ) / ( 2 * this.zoom );\r\n\t\tconst cx = ( this.right + this.left ) / 2;\r\n\t\tconst cy = ( this.top + this.bottom ) / 2;\r\n\r\n\t\tlet left = cx - dx;\r\n\t\tlet right = cx + dx;\r\n\t\tlet top = cy + dy;\r\n\t\tlet bottom = cy - dy;\r\n\r\n\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\tconst scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;\r\n\t\t\tconst scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;\r\n\r\n\t\t\tleft += scaleW * this.view.offsetX;\r\n\t\t\tright = left + scaleW * this.view.width;\r\n\t\t\ttop -= scaleH * this.view.offsetY;\r\n\t\t\tbottom = top - scaleH * this.view.height;\r\n\r\n\t\t}\r\n\r\n\t\tthis.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );\r\n\r\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.zoom = this.zoom;\r\n\t\tdata.object.left = this.left;\r\n\t\tdata.object.right = this.right;\r\n\t\tdata.object.top = this.top;\r\n\t\tdata.object.bottom = this.bottom;\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\r\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { OrthographicCamera };\r\n", "import { BufferGeometry } from '../../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../../core/BufferAttribute.js';\r\nimport { Mesh } from '../../objects/Mesh.js';\r\nimport { OrthographicCamera } from '../../cameras/OrthographicCamera.js';\r\n\r\nconst _camera = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\n\r\n/**\r\n * The purpose of this special geometry is to fill the entire viewport with a single triangle.\r\n *\r\n * Reference: {@link https://github.com/mrdoob/three.js/pull/21358}\r\n *\r\n * @private\r\n * @augments BufferGeometry\r\n */\r\nclass QuadGeometry extends BufferGeometry {\r\n\r\n\t/**\r\n\t * Constructs a new quad geometry.\r\n\t *\r\n\t * @param {boolean} [flipY=false] - Whether the uv coordinates should be flipped along the vertical axis or not.\r\n\t */\r\n\tconstructor( flipY = false ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tconst uv = flipY === false ? [ 0, - 1, 0, 1, 2, 1 ] : [ 0, 2, 0, 0, 2, 0 ];\r\n\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uv, 2 ) );\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst _geometry = /*@__PURE__*/ new QuadGeometry();\r\n\r\n\r\n/**\r\n * This module is a helper for passes which need to render a full\r\n * screen effect which is quite common in context of post processing.\r\n *\r\n * The intended usage is to reuse a single quad mesh for rendering\r\n * subsequent passes by just reassigning the `material` reference.\r\n *\r\n * Note: This module can only be used with `WebGPURenderer`.\r\n *\r\n * @augments Mesh\r\n */\r\nclass QuadMesh extends Mesh {\r\n\r\n\t/**\r\n\t * Constructs a new quad mesh.\r\n\t *\r\n\t * @param {?Material} [material=null] - The material to render the quad mesh with.\r\n\t */\r\n\tconstructor( material = null ) {\r\n\r\n\t\tsuper( _geometry, material );\r\n\r\n\t\t/**\r\n\t\t * The camera to render the quad mesh with.\r\n\t\t *\r\n\t\t * @type {OrthographicCamera}\r\n\t\t * @readonly\r\n\t\t */\r\n\t\tthis.camera = _camera;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isQuadMesh = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Async version of `render()`.\r\n\t *\r\n\t * @async\r\n\t * @param {Renderer} renderer - The renderer.\r\n\t * @return {Promise} A Promise that resolves when the render has been finished.\r\n\t */\r\n\tasync renderAsync( renderer ) {\r\n\r\n\t\treturn renderer.renderAsync( this, _camera );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the quad mesh\r\n\t *\r\n\t * @param {Renderer} renderer - The renderer.\r\n\t */\r\n\trender( renderer ) {\r\n\r\n\t\trenderer.render( this, _camera );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default QuadMesh;\r\n", "import { nodeObject } from '../tsl/TSLCore.js';\r\nimport TextureNode from '../accessors/TextureNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { uv } from '../accessors/UV.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\n\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { HalfFloatType } from '../../constants.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\n/**\r\n * `RTTNode` takes another node and uses it with a `QuadMesh` to render into a texture (RTT).\r\n * This module is especially relevant in context of post processing where certain nodes require\r\n * texture input for their effects. With the helper function `convertToTexture()` which is based\r\n * on this module, the node system can automatically ensure texture input if required.\r\n *\r\n * @augments TextureNode\r\n */\r\nclass RTTNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RTTNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new RTT node.\r\n\t *\r\n\t * @param {Node} node - The node to render a texture with.\r\n\t * @param {?number} [width=null] - The width of the internal render target. If not width is applied, the render target is automatically resized.\r\n\t * @param {?number} [height=null] - The height of the internal render target.\r\n\t * @param {Object} [options={type:HalfFloatType}] - The options for the internal render target.\r\n\t */\r\n\tconstructor( node, width = null, height = null, options = { type: HalfFloatType } ) {\r\n\r\n\t\tconst renderTarget = new RenderTarget( width, height, options );\r\n\r\n\t\tsuper( renderTarget.texture, uv() );\r\n\r\n\t\t/**\r\n\t\t * The node to render a texture with.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.node = node;\r\n\r\n\t\t/**\r\n\t\t * The width of the internal render target.\r\n\t\t * If not width is applied, the render target is automatically resized.\r\n\t\t *\r\n\t\t * @type {?number}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.width = width;\r\n\r\n\t\t/**\r\n\t\t * The height of the internal render target.\r\n\t\t *\r\n\t\t * @type {?number}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.height = height;\r\n\r\n\t\t/**\r\n\t\t * The pixel ratio\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.pixelRatio = 1;\r\n\r\n\t\t/**\r\n\t\t * The render target\r\n\t\t *\r\n\t\t * @type {RenderTarget}\r\n\t\t */\r\n\t\tthis.renderTarget = renderTarget;\r\n\r\n\t\t/**\r\n\t\t * Whether the texture requires an update or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.textureNeedsUpdate = true;\r\n\r\n\t\t/**\r\n\t\t * Whether the texture should automatically be updated or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.autoUpdate = true;\r\n\r\n\t\t/**\r\n\t\t * The node which is used with the quad mesh for RTT.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._rttNode = null;\r\n\r\n\t\t/**\r\n\t\t * The internal quad mesh for RTT.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {QuadMesh}\r\n\t\t */\r\n\t\tthis._quadMesh = new QuadMesh( new NodeMaterial() );\r\n\r\n\t\t/**\r\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.RENDER` since the node updates\r\n\t\t * the texture once per render in its {@link RTTNode#updateBefore} method.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'render'\r\n\t\t */\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Whether the internal render target should automatically be resized or not.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @readonly\r\n\t * @default true\r\n\t */\r\n\tget autoResize() {\r\n\r\n\t\treturn this.width === null;\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis._rttNode = this.node.context( builder.getSharedContext() );\r\n\t\tthis._quadMesh.material.name = 'RTT';\r\n\t\tthis._quadMesh.material.needsUpdate = true;\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the size of the internal render target\r\n\t *\r\n\t * @param {number} width - The width to set.\r\n\t * @param {number} height - The width to set.\r\n\t */\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\r\n\t\tconst effectiveWidth = width * this.pixelRatio;\r\n\t\tconst effectiveHeight = height * this.pixelRatio;\r\n\r\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t\tthis.textureNeedsUpdate = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the pixel ratio. This will also resize the render target.\r\n\t *\r\n\t * @param {number} pixelRatio - The pixel ratio to set.\r\n\t */\r\n\tsetPixelRatio( pixelRatio ) {\r\n\r\n\t\tthis.pixelRatio = pixelRatio;\r\n\r\n\t\tthis.setSize( this.width, this.height );\r\n\r\n\t}\r\n\r\n\tupdateBefore( { renderer } ) {\r\n\r\n\t\tif ( this.textureNeedsUpdate === false && this.autoUpdate === false ) return;\r\n\r\n\t\tthis.textureNeedsUpdate = false;\r\n\r\n\t\t//\r\n\r\n\t\tif ( this.autoResize === true ) {\r\n\r\n\t\t\tconst pixelRatio = renderer.getPixelRatio();\r\n\t\t\tconst size = renderer.getSize( _size );\r\n\r\n\t\t\tconst effectiveWidth = size.width * pixelRatio;\r\n\t\t\tconst effectiveHeight = size.height * pixelRatio;\r\n\r\n\t\t\tif ( effectiveWidth !== this.renderTarget.width || effectiveHeight !== this.renderTarget.height ) {\r\n\r\n\t\t\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t\t\t\tthis.textureNeedsUpdate = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis._quadMesh.material.fragmentNode = this._rttNode;\r\n\r\n\t\t//\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\r\n\t\trenderer.setRenderTarget( this.renderTarget );\r\n\r\n\t\tthis._quadMesh.render( renderer );\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst newNode = new TextureNode( this.value, this.uvNode, this.levelNode );\r\n\t\tnewNode.sampler = this.sampler;\r\n\t\tnewNode.referenceNode = this;\r\n\r\n\t\treturn newNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RTTNode;\r\n\r\n/**\r\n * TSL function for creating a RTT node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node to render a texture with.\r\n * @param {?number} [width=null] - The width of the internal render target. If not width is applied, the render target is automatically resized.\r\n * @param {?number} [height=null] - The height of the internal render target.\r\n * @param {Object} [options={type:HalfFloatType}] - The options for the internal render target.\r\n * @returns {RTTNode}\r\n */\r\nexport const rtt = ( node, ...params ) => nodeObject( new RTTNode( nodeObject( node ), ...params ) );\r\n\r\n/**\r\n * TSL function for converting nodes to textures nodes.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} node - The node to render a texture with.\r\n * @param {?number} [width=null] - The width of the internal render target. If not width is applied, the render target is automatically resized.\r\n * @param {?number} [height=null] - The height of the internal render target.\r\n * @param {Object} [options={type:HalfFloatType}] - The options for the internal render target.\r\n * @returns {RTTNode}\r\n */\r\nexport const convertToTexture = ( node, ...params ) => {\r\n\r\n\tif ( node.isTextureNode ) return node;\r\n\tif ( node.isPassNode ) return node.getTextureNode();\r\n\r\n\treturn rtt( node, ...params );\r\n\r\n};\r\n", "import { abs, cross, float, Fn, normalize, ivec2, sub, vec2, vec3, vec4 } from '../tsl/TSLBase.js';\r\nimport { textureSize } from '../accessors/TextureSizeNode.js';\r\nimport { textureLoad } from '../accessors/TextureNode.js';\r\nimport { WebGPUCoordinateSystem } from '../../constants.js';\r\n\r\n/**\r\n * Computes a position in view space based on a fragment's screen position expressed as uv coordinates, the fragments\r\n * depth value and the camera's inverse projection matrix.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2>} screenPosition - The fragment's screen position expressed as uv coordinates.\r\n * @param {Node<float>} depth - The fragment's depth value.\r\n * @param {Node<mat4>} projectionMatrixInverse - The camera's inverse projection matrix.\r\n * @return {Node<vec3>} The fragments position in view space.\r\n */\r\nexport const getViewPosition = /*@__PURE__*/ Fn( ( [ screenPosition, depth, projectionMatrixInverse ], builder ) => {\r\n\r\n\tlet clipSpacePosition;\r\n\r\n\tif ( builder.renderer.coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\tscreenPosition = vec2( screenPosition.x, screenPosition.y.oneMinus() ).mul( 2.0 ).sub( 1.0 );\r\n\t\tclipSpacePosition = vec4( vec3( screenPosition, depth ), 1.0 );\r\n\r\n\t} else {\r\n\r\n\t\tclipSpacePosition = vec4( vec3( screenPosition.x, screenPosition.y.oneMinus(), depth ).mul( 2.0 ).sub( 1.0 ), 1.0 );\r\n\r\n\t}\r\n\r\n\tconst viewSpacePosition = vec4( projectionMatrixInverse.mul( clipSpacePosition ) );\r\n\r\n\treturn viewSpacePosition.xyz.div( viewSpacePosition.w );\r\n\r\n} );\r\n\r\n/**\r\n * Computes a screen position expressed as uv coordinates based on a fragment's position in view space\r\n * and the camera's projection matrix\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} viewPosition - The fragments position in view space.\r\n * @param {Node<mat4>} projectionMatrix - The camera's projection matrix.\r\n * @return {Node<vec2>} The fragment's screen position expressed as uv coordinates.\r\n */\r\nexport const getScreenPosition = /*@__PURE__*/ Fn( ( [ viewPosition, projectionMatrix ] ) => {\r\n\r\n\tconst sampleClipPos = projectionMatrix.mul( vec4( viewPosition, 1.0 ) );\r\n\tconst sampleUv = sampleClipPos.xy.div( sampleClipPos.w ).mul( 0.5 ).add( 0.5 ).toVar();\r\n\treturn vec2( sampleUv.x, sampleUv.y.oneMinus() );\r\n\r\n} );\r\n\r\n/**\r\n * Computes a normal vector based on depth data. Can be used as a fallback when no normal render\r\n * target is available or if flat surface normals are required.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2>} uv - The texture coordinate.\r\n * @param {DepthTexture} depthTexture - The depth texture.\r\n * @param {Node<mat4>} projectionMatrixInverse - The camera's inverse projection matrix.\r\n * @return {Node<vec3>} The computed normal vector.\r\n */\r\nexport const getNormalFromDepth = /*@__PURE__*/ Fn( ( [ uv, depthTexture, projectionMatrixInverse ] ) => {\r\n\r\n\tconst size = textureSize( textureLoad( depthTexture ) );\r\n\tconst p = ivec2( uv.mul( size ) ).toVar();\r\n\r\n\tconst c0 = textureLoad( depthTexture, p ).toVar();\r\n\r\n\tconst l2 = textureLoad( depthTexture, p.sub( ivec2( 2, 0 ) ) ).toVar();\r\n\tconst l1 = textureLoad( depthTexture, p.sub( ivec2( 1, 0 ) ) ).toVar();\r\n\tconst r1 = textureLoad( depthTexture, p.add( ivec2( 1, 0 ) ) ).toVar();\r\n\tconst r2 = textureLoad( depthTexture, p.add( ivec2( 2, 0 ) ) ).toVar();\r\n\tconst b2 = textureLoad( depthTexture, p.add( ivec2( 0, 2 ) ) ).toVar();\r\n\tconst b1 = textureLoad( depthTexture, p.add( ivec2( 0, 1 ) ) ).toVar();\r\n\tconst t1 = textureLoad( depthTexture, p.sub( ivec2( 0, 1 ) ) ).toVar();\r\n\tconst t2 = textureLoad( depthTexture, p.sub( ivec2( 0, 2 ) ) ).toVar();\r\n\r\n\tconst dl = abs( sub( float( 2 ).mul( l1 ).sub( l2 ), c0 ) ).toVar();\r\n\tconst dr = abs( sub( float( 2 ).mul( r1 ).sub( r2 ), c0 ) ).toVar();\r\n\tconst db = abs( sub( float( 2 ).mul( b1 ).sub( b2 ), c0 ) ).toVar();\r\n\tconst dt = abs( sub( float( 2 ).mul( t1 ).sub( t2 ), c0 ) ).toVar();\r\n\r\n\tconst ce = getViewPosition( uv, c0, projectionMatrixInverse ).toVar();\r\n\r\n\tconst dpdx = dl.lessThan( dr ).select( ce.sub( getViewPosition( uv.sub( vec2( float( 1 ).div( size.x ), 0 ) ), l1, projectionMatrixInverse ) ), ce.negate().add( getViewPosition( uv.add( vec2( float( 1 ).div( size.x ), 0 ) ), r1, projectionMatrixInverse ) ) );\r\n\tconst dpdy = db.lessThan( dt ).select( ce.sub( getViewPosition( uv.add( vec2( 0, float( 1 ).div( size.y ) ) ), b1, projectionMatrixInverse ) ), ce.negate().add( getViewPosition( uv.sub( vec2( 0, float( 1 ).div( size.y ) ) ), t1, projectionMatrixInverse ) ) );\r\n\r\n\treturn normalize( cross( dpdx, dpdy ) );\r\n\r\n} );\r\n", "import { add, mul, div } from '../math/OperatorNode.js';\r\nimport { floor, ceil, fract, pow } from '../math/MathNode.js';\r\nimport { Fn, vec2, vec4, int } from '../tsl/TSLBase.js';\r\nimport { maxMipLevel } from '../utils/MaxMipLevelNode.js';\r\n\r\n// Mipped Bicubic Texture Filtering by N8\r\n// https://www.shadertoy.com/view/Dl2SDW\r\n\r\nconst bC = 1.0 / 6.0;\r\n\r\nconst w0 = ( a ) => mul( bC, mul( a, mul( a, a.negate().add( 3.0 ) ).sub( 3.0 ) ).add( 1.0 ) );\r\n\r\nconst w1 = ( a ) => mul( bC, mul( a, mul( a, mul( 3.0, a ).sub( 6.0 ) ) ).add( 4.0 ) );\r\n\r\nconst w2 = ( a ) => mul( bC, mul( a, mul( a, mul( - 3.0, a ).add( 3.0 ) ).add( 3.0 ) ).add( 1.0 ) );\r\n\r\nconst w3 = ( a ) => mul( bC, pow( a, 3 ) );\r\n\r\nconst g0 = ( a ) => w0( a ).add( w1( a ) );\r\n\r\nconst g1 = ( a ) => w2( a ).add( w3( a ) );\r\n\r\n// h0 and h1 are the two offset functions\r\nconst h0 = ( a ) => add( - 1.0, w1( a ).div( w0( a ).add( w1( a ) ) ) );\r\n\r\nconst h1 = ( a ) => add( 1.0, w3( a ).div( w2( a ).add( w3( a ) ) ) );\r\n\r\nconst bicubic = ( textureNode, texelSize, lod ) => {\r\n\r\n\tconst uv = textureNode.uvNode;\r\n\tconst uvScaled = mul( uv, texelSize.zw ).add( 0.5 );\r\n\r\n\tconst iuv = floor( uvScaled );\r\n\tconst fuv = fract( uvScaled );\r\n\r\n\tconst g0x = g0( fuv.x );\r\n\tconst g1x = g1( fuv.x );\r\n\tconst h0x = h0( fuv.x );\r\n\tconst h1x = h1( fuv.x );\r\n\tconst h0y = h0( fuv.y );\r\n\tconst h1y = h1( fuv.y );\r\n\r\n\tconst p0 = vec2( iuv.x.add( h0x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\tconst p1 = vec2( iuv.x.add( h1x ), iuv.y.add( h0y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\tconst p2 = vec2( iuv.x.add( h0x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\tconst p3 = vec2( iuv.x.add( h1x ), iuv.y.add( h1y ) ).sub( 0.5 ).mul( texelSize.xy );\r\n\r\n\tconst a = g0( fuv.y ).mul( add( g0x.mul( textureNode.sample( p0 ).level( lod ) ), g1x.mul( textureNode.sample( p1 ).level( lod ) ) ) );\r\n\tconst b = g1( fuv.y ).mul( add( g0x.mul( textureNode.sample( p2 ).level( lod ) ), g1x.mul( textureNode.sample( p3 ).level( lod ) ) ) );\r\n\r\n\treturn a.add( b );\r\n\r\n};\r\n\r\n/**\r\n * Applies mipped bicubic texture filtering to the given texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {TextureNode} textureNode - The texture node that should be filtered.\r\n * @param {Node<float>} lodNode - Defines the LOD to sample from.\r\n * @return {Node} The filtered texture sample.\r\n */\r\nexport const textureBicubicLevel = /*@__PURE__*/ Fn( ( [ textureNode, lodNode ] ) => {\r\n\r\n\tconst fLodSize = vec2( textureNode.size( int( lodNode ) ) );\r\n\tconst cLodSize = vec2( textureNode.size( int( lodNode.add( 1.0 ) ) ) );\r\n\tconst fLodSizeInv = div( 1.0, fLodSize );\r\n\tconst cLodSizeInv = div( 1.0, cLodSize );\r\n\tconst fSample = bicubic( textureNode, vec4( fLodSizeInv, fLodSize ), floor( lodNode ) );\r\n\tconst cSample = bicubic( textureNode, vec4( cLodSizeInv, cLodSize ), ceil( lodNode ) );\r\n\r\n\treturn fract( lodNode ).mix( fSample, cSample );\r\n\r\n} );\r\n\r\n/**\r\n * Applies mipped bicubic texture filtering to the given texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {TextureNode} textureNode - The texture node that should be filtered.\r\n * @param {Node<float>} [strength] - Defines the strength of the bicubic filtering.\r\n * @return {Node} The filtered texture sample.\r\n */\r\nexport const textureBicubic = /*@__PURE__*/ Fn( ( [ textureNode, strength ] ) => {\r\n\r\n\tconst lod = strength.mul( maxMipLevel( textureNode ) );\r\n\r\n\treturn textureBicubicLevel( textureNode, lod );\r\n\r\n} );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeImmutable } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * A node for representing the uv coordinates of points.\r\n *\r\n * Can only be used with a WebGL backend. In WebGPU, point\r\n * primitives always have the size of one pixel and can thus\r\n * can't be used as sprite-like objects that display textures.\r\n *\r\n * @augments Node\r\n */\r\nclass PointUVNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PointUVNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new point uv node.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isPointUVNode = true;\r\n\r\n\t}\r\n\r\n\tgenerate( /*builder*/ ) {\r\n\r\n\t\treturn 'vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )';\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PointUVNode;\r\n\r\n/**\r\n * TSL object that represents the uv coordinates of points.\r\n *\r\n * @tsl\r\n * @type {PointUVNode}\r\n */\r\nexport const pointUV = /*@__PURE__*/ nodeImmutable( PointUVNode );\r\n", "import { UVMapping } from '../../constants.js';\r\nimport { Euler } from '../../math/Euler.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport Node from '../core/Node.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\nimport { nodeImmutable, uniform } from '../tsl/TSLBase.js';\r\nimport { reference } from './ReferenceNode.js';\r\n\r\nconst _e1 = /*@__PURE__*/ new Euler();\r\nconst _m1 = /*@__PURE__*/ new Matrix4();\r\n\r\n/**\r\n * This module allows access to a collection of scene properties. The following predefined TSL objects\r\n * are available for easier use:\r\n *\r\n * - `backgroundBlurriness`: A node that represents the scene's background blurriness.\r\n * - `backgroundIntensity`: A node that represents the scene's background intensity.\r\n * - `backgroundRotation`: A node that represents the scene's background rotation.\r\n *\r\n * @augments Node\r\n */\r\nclass SceneNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'SceneNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new scene node.\r\n\t *\r\n\t * @param {('backgroundBlurriness'|'backgroundIntensity'|'backgroundRotation')} scope - The scope defines the type of scene property that is accessed.\r\n\t * @param {?Scene} [scene=null] - A reference to the scene.\r\n\t */\r\n\tconstructor( scope = SceneNode.BACKGROUND_BLURRINESS, scene = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The scope defines the type of scene property that is accessed.\r\n\t\t *\r\n\t\t * @type {('backgroundBlurriness'|'backgroundIntensity'|'backgroundRotation')}\r\n\t\t */\r\n\t\tthis.scope = scope;\r\n\r\n\t\t/**\r\n\t\t * A reference to the scene that is going to be accessed.\r\n\t\t *\r\n\t\t * @type {?Scene}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.scene = scene;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Depending on the scope, the method returns a different type of node that represents\r\n\t * the respective scene property.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Node} The output node.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tconst scope = this.scope;\r\n\t\tconst scene = this.scene !== null ? this.scene : builder.scene;\r\n\r\n\t\tlet output;\r\n\r\n\t\tif ( scope === SceneNode.BACKGROUND_BLURRINESS ) {\r\n\r\n\t\t\toutput = reference( 'backgroundBlurriness', 'float', scene );\r\n\r\n\t\t} else if ( scope === SceneNode.BACKGROUND_INTENSITY ) {\r\n\r\n\t\t\toutput = reference( 'backgroundIntensity', 'float', scene );\r\n\r\n\t\t} else if ( scope === SceneNode.BACKGROUND_ROTATION ) {\r\n\r\n\t\t\toutput = uniform( 'mat4' ).label( 'backgroundRotation' ).setGroup( renderGroup ).onRenderUpdate( () => {\r\n\r\n\t\t\t\tconst background = scene.background;\r\n\r\n\t\t\t\tif ( background !== null && background.isTexture && background.mapping !== UVMapping ) {\r\n\r\n\t\t\t\t\t_e1.copy( scene.backgroundRotation );\r\n\r\n\t\t\t\t\t// accommodate left-handed frame\r\n\t\t\t\t\t_e1.x *= - 1; _e1.y *= - 1; _e1.z *= - 1;\r\n\r\n\t\t\t\t\t_m1.makeRotationFromEuler( _e1 );\r\n\r\n\t\t\t\t} else {\r\n\r\n\t\t\t\t\t_m1.identity();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn _m1;\r\n\r\n\t\t\t} );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.SceneNode: Unknown scope:', scope );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nSceneNode.BACKGROUND_BLURRINESS = 'backgroundBlurriness';\r\nSceneNode.BACKGROUND_INTENSITY = 'backgroundIntensity';\r\nSceneNode.BACKGROUND_ROTATION = 'backgroundRotation';\r\n\r\nexport default SceneNode;\r\n\r\n/**\r\n * TSL object that represents the scene's background blurriness.\r\n *\r\n * @tsl\r\n * @type {SceneNode}\r\n */\r\nexport const backgroundBlurriness = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_BLURRINESS );\r\n\r\n/**\r\n * TSL object that represents the scene's background intensity.\r\n *\r\n * @tsl\r\n * @type {SceneNode}\r\n */\r\nexport const backgroundIntensity = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_INTENSITY );\r\n\r\n/**\r\n * TSL object that represents the scene's background rotation.\r\n *\r\n * @tsl\r\n * @type {SceneNode}\r\n */\r\nexport const backgroundRotation = /*@__PURE__*/ nodeImmutable( SceneNode, SceneNode.BACKGROUND_ROTATION );\r\n", "import TextureNode from './TextureNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\nimport { NodeAccess } from '../core/constants.js';\r\n\r\n/**\r\n * This special version of a texture node can be used to\r\n * write data into a storage texture with a compute shader.\r\n *\r\n * ```js\r\n * const storageTexture = new THREE.StorageTexture( width, height );\r\n *\r\n * const computeTexture = Fn( ( { storageTexture } ) => {\r\n *\r\n * \tconst posX = instanceIndex.mod( width );\r\n * \tconst posY = instanceIndex.div( width );\r\n * \tconst indexUV = uvec2( posX, posY );\r\n *\r\n * \t// generate RGB values\r\n *\r\n * \tconst r = 1;\r\n * \tconst g = 1;\r\n * \tconst b = 1;\r\n *\r\n * \ttextureStore( storageTexture, indexUV, vec4( r, g, b, 1 ) ).toWriteOnly();\r\n *\r\n * } );\r\n *\r\n * const computeNode = computeTexture( { storageTexture } ).compute( width * height );\r\n * renderer.computeAsync( computeNode );\r\n * ```\r\n *\r\n * This node can only be used with a WebGPU backend.\r\n *\r\n * @augments TextureNode\r\n */\r\nclass StorageTextureNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'StorageTextureNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new storage texture node.\r\n\t *\r\n\t * @param {StorageTexture} value - The storage texture.\r\n\t * @param {Node<vec2|vec3>} uvNode - The uv node.\r\n\t * @param {?Node} [storeNode=null] - The value node that should be stored in the texture.\r\n\t */\r\n\tconstructor( value, uvNode, storeNode = null ) {\r\n\r\n\t\tsuper( value, uvNode );\r\n\r\n\t\t/**\r\n\t\t * The value node that should be stored in the texture.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.storeNode = storeNode;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isStorageTextureNode = true;\r\n\r\n\t\t/**\r\n\t\t * The access type of the texture node.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'writeOnly'\r\n\t\t */\r\n\t\tthis.access = NodeAccess.WRITE_ONLY;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation to return a fixed value `'storageTexture'`.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The input type.\r\n\t */\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'storageTexture';\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tsuper.setup( builder );\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tproperties.storeNode = this.storeNode;\r\n\r\n\t\treturn properties;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Defines the node access.\r\n\t *\r\n\t * @param {string} value - The node access.\r\n\t * @return {StorageTextureNode} A reference to this node.\r\n\t */\r\n\tsetAccess( value ) {\r\n\r\n\t\tthis.access = value;\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the code snippet of the storage node. If no `storeNode`\r\n\t * is defined, the texture node is generated as normal texture.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {string} output - The current output.\r\n\t * @return {string} The generated code snippet.\r\n\t */\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tlet snippet;\r\n\r\n\t\tif ( this.storeNode !== null ) {\r\n\r\n\t\t\tsnippet = this.generateStore( builder );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tsnippet = super.generate( builder, output );\r\n\r\n\t\t}\r\n\r\n\t\treturn snippet;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Convenience method for configuring a read/write node access.\r\n\t *\r\n\t * @return {StorageTextureNode} A reference to this node.\r\n\t */\r\n\ttoReadWrite() {\r\n\r\n\t\treturn this.setAccess( NodeAccess.READ_WRITE );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Convenience method for configuring a read-only node access.\r\n\t *\r\n\t * @return {StorageTextureNode} A reference to this node.\r\n\t */\r\n\ttoReadOnly() {\r\n\r\n\t\treturn this.setAccess( NodeAccess.READ_ONLY );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Convenience method for configuring a write-only node access.\r\n\t *\r\n\t * @return {StorageTextureNode} A reference to this node.\r\n\t */\r\n\ttoWriteOnly() {\r\n\r\n\t\treturn this.setAccess( NodeAccess.WRITE_ONLY );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the code snippet of the storage texture node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t */\r\n\tgenerateStore( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\r\n\t\tconst { uvNode, storeNode, depthNode } = properties;\r\n\r\n\t\tconst textureProperty = super.generate( builder, 'property' );\r\n\t\tconst uvSnippet = uvNode.build( builder, 'uvec2' );\r\n\t\tconst storeSnippet = storeNode.build( builder, 'vec4' );\r\n\t\tconst depthSnippet = depthNode ? depthNode.build( builder, 'int' ) : null;\r\n\r\n\t\tconst snippet = builder.generateTextureStore( builder, textureProperty, uvSnippet, depthSnippet, storeSnippet );\r\n\r\n\t\tbuilder.addLineFlowCode( snippet, this );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst newNode = super.clone();\r\n\t\tnewNode.storeNode = this.storeNode;\r\n\t\treturn newNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default StorageTextureNode;\r\n\r\n/**\r\n * TSL function for creating a storage texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {StorageTexture} value - The storage texture.\r\n * @param {?Node<vec2|vec3>} uvNode - The uv node.\r\n * @param {?Node} [storeNode=null] - The value node that should be stored in the texture.\r\n * @returns {StorageTextureNode}\r\n */\r\nexport const storageTexture = /*@__PURE__*/ nodeProxy( StorageTextureNode ).setParameterLength( 1, 3 );\r\n\r\n\r\n/**\r\n * TODO: Explain difference to `storageTexture()`.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {StorageTexture} value - The storage texture.\r\n * @param {Node<vec2|vec3>} uvNode - The uv node.\r\n * @param {?Node} [storeNode=null] - The value node that should be stored in the texture.\r\n * @returns {StorageTextureNode}\r\n */\r\nexport const textureStore = ( value, uvNode, storeNode ) => {\r\n\r\n\tconst node = storageTexture( value, uvNode, storeNode );\r\n\r\n\tif ( storeNode !== null ) node.toStack();\r\n\r\n\treturn node;\r\n\r\n};\r\n", "import TextureNode from './TextureNode.js';\r\nimport { nodeProxy, vec3, Fn, If, int } from '../tsl/TSLBase.js';\r\nimport { textureSize } from './TextureSizeNode.js';\r\n\r\nconst normal = Fn( ( { texture, uv } ) => {\r\n\r\n\tconst epsilon = 0.0001;\r\n\r\n\tconst ret = vec3().toVar();\r\n\r\n\tIf( uv.x.lessThan( epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 1, 0, 0 ) );\r\n\r\n\t} ).ElseIf( uv.y.lessThan( epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, 1, 0 ) );\r\n\r\n\t} ).ElseIf( uv.z.lessThan( epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, 0, 1 ) );\r\n\r\n\t} ).ElseIf( uv.x.greaterThan( 1 - epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( - 1, 0, 0 ) );\r\n\r\n\t} ).ElseIf( uv.y.greaterThan( 1 - epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, - 1, 0 ) );\r\n\r\n\t} ).ElseIf( uv.z.greaterThan( 1 - epsilon ), () => {\r\n\r\n\t\tret.assign( vec3( 0, 0, - 1 ) );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tconst step = 0.01;\r\n\r\n\t\tconst x = texture.sample( uv.add( vec3( - step, 0.0, 0.0 ) ) ).r.sub( texture.sample( uv.add( vec3( step, 0.0, 0.0 ) ) ).r );\r\n\t\tconst y = texture.sample( uv.add( vec3( 0.0, - step, 0.0 ) ) ).r.sub( texture.sample( uv.add( vec3( 0.0, step, 0.0 ) ) ).r );\r\n\t\tconst z = texture.sample( uv.add( vec3( 0.0, 0.0, - step ) ) ).r.sub( texture.sample( uv.add( vec3( 0.0, 0.0, step ) ) ).r );\r\n\r\n\t\tret.assign( vec3( x, y, z ) );\r\n\r\n\t} );\r\n\r\n\treturn ret.normalize();\r\n\r\n} );\r\n\r\n/**\r\n * This type of uniform node represents a 3D texture.\r\n *\r\n * @augments TextureNode\r\n */\r\nclass Texture3DNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'Texture3DNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new 3D texture node.\r\n\t *\r\n\t * @param {Data3DTexture} value - The 3D texture.\r\n\t * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\r\n\t * @param {?Node<int>} [levelNode=null] - The level node.\r\n\t */\r\n\tconstructor( value, uvNode = null, levelNode = null ) {\r\n\r\n\t\tsuper( value, uvNode, levelNode );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isTexture3DNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation to return a fixed value `'texture3D'`.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The input type.\r\n\t */\r\n\tgetInputType( /*builder*/ ) {\r\n\r\n\t\treturn 'texture3D';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a default uv node which is in context of 3D textures a three-dimensional\r\n\t * uv node.\r\n\t *\r\n\t * @return {Node<vec3>} The default uv node.\r\n\t */\r\n\tgetDefaultUV() {\r\n\r\n\t\treturn vec3( 0.5, 0.5, 0.5 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten with an empty implementation since the `updateMatrix` flag is ignored\r\n\t * for 3D textures. The uv transformation matrix is not applied to 3D textures.\r\n\t *\r\n\t * @param {boolean} value - The update toggle.\r\n\t */\r\n\tsetUpdateMatrix( /*value*/ ) { } // Ignore .updateMatrix for 3d TextureNode\r\n\r\n\t/**\r\n\t * Overwrites the default implementation to return the unmodified uv node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {Node} uvNode - The uv node to setup.\r\n\t * @return {Node} The unmodified uv node.\r\n\t */\r\n\tsetupUV( builder, uvNode ) {\r\n\r\n\t\tconst texture = this.value;\r\n\r\n\t\tif ( builder.isFlipY() && ( texture.isRenderTargetTexture === true || texture.isFramebufferTexture === true ) ) {\r\n\r\n\t\t\tif ( this.sampler ) {\r\n\r\n\t\t\t\tuvNode = uvNode.flipY();\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tuvNode = uvNode.setY( int( textureSize( this, this.levelNode ).y ).sub( uvNode.y ).sub( 1 ) );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn uvNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates the uv code snippet.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @param {Node} uvNode - The uv node to generate code for.\r\n\t * @return {string} The generated code snippet.\r\n\t */\r\n\tgenerateUV( builder, uvNode ) {\r\n\r\n\t\treturn uvNode.build( builder, 'vec3' );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * TODO.\r\n\t *\r\n\t * @param {Node<vec3>} uvNode - The uv node .\r\n\t * @return {Node<vec3>} TODO.\r\n\t */\r\n\tnormal( uvNode ) {\r\n\r\n\t\treturn normal( { texture: this, uv: uvNode } );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Texture3DNode;\r\n\r\n/**\r\n * TSL function for creating a 3D texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Data3DTexture} value - The 3D texture.\r\n * @param {?Node<vec2|vec3>} [uvNode=null] - The uv node.\r\n * @param {?Node<int>} [levelNode=null] - The level node.\r\n * @returns {Texture3DNode}\r\n */\r\nexport const texture3D = /*@__PURE__*/ nodeProxy( Texture3DNode ).setParameterLength( 1, 3 );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { modelViewMatrix } from './ModelNode.js';\r\nimport { positionLocal, positionPrevious } from './Position.js';\r\nimport { nodeImmutable } from '../tsl/TSLBase.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { Matrix4 } from '../../math/Matrix4.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { sub } from '../math/OperatorNode.js';\r\nimport { cameraProjectionMatrix } from './Camera.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\n\r\nconst _objectData = new WeakMap();\r\n\r\n/**\r\n * A node for representing motion or velocity vectors. Foundation\r\n * for advanced post processing effects like motion blur or TRAA.\r\n *\r\n * The node keeps track of the model, view and projection matrices\r\n * of the previous frame and uses them to compute offsets in NDC space.\r\n * These offsets represent the final velocity.\r\n *\r\n * @augments TempNode\r\n */\r\nclass VelocityNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'VelocityNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new vertex color node.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\tsuper( 'vec2' );\r\n\r\n\t\t/**\r\n\t\t * The current projection matrix.\r\n\t\t *\r\n\t\t * @type {?Matrix4}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.projectionMatrix = null;\r\n\r\n\t\t/**\r\n\t\t * Overwritten since velocity nodes are updated per object.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'object'\r\n\t\t */\r\n\t\tthis.updateType = NodeUpdateType.OBJECT;\r\n\r\n\t\t/**\r\n\t\t * Overwritten since velocity nodes save data after the update.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'object'\r\n\t\t */\r\n\t\tthis.updateAfterType = NodeUpdateType.OBJECT;\r\n\r\n\t\t/**\r\n\t\t * Uniform node representing the previous model matrix in world space.\r\n\t\t *\r\n\t\t * @type {UniformNode<mat4>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.previousModelWorldMatrix = uniform( new Matrix4() );\r\n\r\n\t\t/**\r\n\t\t * Uniform node representing the previous projection matrix.\r\n\t\t *\r\n\t\t * @type {UniformNode<mat4>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.previousProjectionMatrix = uniform( new Matrix4() ).setGroup( renderGroup );\r\n\r\n\t\t/**\r\n\t\t * Uniform node representing the previous view matrix.\r\n\t\t *\r\n\t\t * @type {UniformNode<mat4>}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.previousCameraViewMatrix = uniform( new Matrix4() );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given projection matrix.\r\n\t *\r\n\t * @param {Matrix4} projectionMatrix - The projection matrix to set.\r\n\t */\r\n\tsetProjectionMatrix( projectionMatrix ) {\r\n\r\n\t\tthis.projectionMatrix = projectionMatrix;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates velocity specific uniforms.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\tupdate( { frameId, camera, object } ) {\r\n\r\n\t\tconst previousModelMatrix = getPreviousMatrix( object );\r\n\r\n\t\tthis.previousModelWorldMatrix.value.copy( previousModelMatrix );\r\n\r\n\t\t//\r\n\r\n\t\tconst cameraData = getData( camera );\r\n\r\n\t\tif ( cameraData.frameId !== frameId ) {\r\n\r\n\t\t\tcameraData.frameId = frameId;\r\n\r\n\t\t\tif ( cameraData.previousProjectionMatrix === undefined ) {\r\n\r\n\t\t\t\tcameraData.previousProjectionMatrix = new Matrix4();\r\n\t\t\t\tcameraData.previousCameraViewMatrix = new Matrix4();\r\n\r\n\t\t\t\tcameraData.currentProjectionMatrix = new Matrix4();\r\n\t\t\t\tcameraData.currentCameraViewMatrix = new Matrix4();\r\n\r\n\t\t\t\tcameraData.previousProjectionMatrix.copy( this.projectionMatrix || camera.projectionMatrix );\r\n\t\t\t\tcameraData.previousCameraViewMatrix.copy( camera.matrixWorldInverse );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcameraData.previousProjectionMatrix.copy( cameraData.currentProjectionMatrix );\r\n\t\t\t\tcameraData.previousCameraViewMatrix.copy( cameraData.currentCameraViewMatrix );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tcameraData.currentProjectionMatrix.copy( this.projectionMatrix || camera.projectionMatrix );\r\n\t\t\tcameraData.currentCameraViewMatrix.copy( camera.matrixWorldInverse );\r\n\r\n\t\t\tthis.previousProjectionMatrix.value.copy( cameraData.previousProjectionMatrix );\r\n\t\t\tthis.previousCameraViewMatrix.value.copy( cameraData.previousCameraViewMatrix );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten to updated velocity specific uniforms.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\tupdateAfter( { object } ) {\r\n\r\n\t\tgetPreviousMatrix( object ).copy( object.matrixWorld );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Implements the velocity computation based on the previous and current vertex data.\r\n\t *\r\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\r\n\t * @return {Node<vec2>} The motion vector.\r\n\t */\r\n\tsetup( /*builder*/ ) {\r\n\r\n\t\tconst projectionMatrix = ( this.projectionMatrix === null ) ? cameraProjectionMatrix : uniform( this.projectionMatrix );\r\n\r\n\t\tconst previousModelViewMatrix = this.previousCameraViewMatrix.mul( this.previousModelWorldMatrix );\r\n\r\n\t\tconst clipPositionCurrent = projectionMatrix.mul( modelViewMatrix ).mul( positionLocal );\r\n\t\tconst clipPositionPrevious = this.previousProjectionMatrix.mul( previousModelViewMatrix ).mul( positionPrevious );\r\n\r\n\t\tconst ndcPositionCurrent = clipPositionCurrent.xy.div( clipPositionCurrent.w );\r\n\t\tconst ndcPositionPrevious = clipPositionPrevious.xy.div( clipPositionPrevious.w );\r\n\r\n\t\tconst velocity = sub( ndcPositionCurrent, ndcPositionPrevious );\r\n\r\n\t\treturn velocity;\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction getData( object ) {\r\n\r\n\tlet objectData = _objectData.get( object );\r\n\r\n\tif ( objectData === undefined ) {\r\n\r\n\t\tobjectData = {};\r\n\t\t_objectData.set( object, objectData );\r\n\r\n\t}\r\n\r\n\treturn objectData;\r\n\r\n}\r\n\r\nfunction getPreviousMatrix( object, index = 0 ) {\r\n\r\n\tconst objectData = getData( object );\r\n\r\n\tlet matrix = objectData[ index ];\r\n\r\n\tif ( matrix === undefined ) {\r\n\r\n\t\tobjectData[ index ] = matrix = new Matrix4();\r\n\t\tobjectData[ index ].copy( object.matrixWorld );\r\n\r\n\t}\r\n\r\n\treturn matrix;\r\n\r\n}\r\n\r\nexport default VelocityNode;\r\n\r\n/**\r\n * TSL object that represents the velocity of a render pass.\r\n *\r\n * @tsl\r\n * @type {VelocityNode}\r\n */\r\nexport const velocity = /*@__PURE__*/ nodeImmutable( VelocityNode );\r\n", "import { dot, max, mix } from '../math/MathNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { Fn, If, float, vec3, vec4 } from '../tsl/TSLBase.js';\r\nimport { ColorManagement } from '../../math/ColorManagement.js';\r\nimport { Vector3 } from '../../math/Vector3.js';\r\nimport { LinearSRGBColorSpace } from '../../constants.js';\r\n\r\n/**\r\n * Computes a grayscale value for the given RGB color value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The color value to compute the grayscale for.\r\n * @return {Node<vec3>} The grayscale color.\r\n */\r\nexport const grayscale = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\treturn luminance( color.rgb );\r\n\r\n} );\r\n\r\n/**\r\n * Super-saturates or desaturates the given RGB color.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The input color.\r\n * @param {Node<float>} [adjustment=1] - Specifies the amount of the conversion. A value under `1` desaturates the color, a value over `1` super-saturates it.\r\n * @return {Node<vec3>} The saturated color.\r\n */\r\nexport const saturation = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\r\n\r\n\treturn adjustment.mix( luminance( color.rgb ), color.rgb );\r\n\r\n} );\r\n\r\n/**\r\n * Selectively enhance the intensity of less saturated RGB colors. Can result\r\n * in a more natural and visually appealing image with enhanced color depth\r\n * compared to {@link ColorAdjustment#saturation}.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The input color.\r\n * @param {Node<float>} [adjustment=1] - Controls the intensity of the vibrance effect.\r\n * @return {Node<vec3>} The updated color.\r\n */\r\nexport const vibrance = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\r\n\r\n\tconst average = add( color.r, color.g, color.b ).div( 3.0 );\r\n\r\n\tconst mx = color.r.max( color.g.max( color.b ) );\r\n\tconst amt = mx.sub( average ).mul( adjustment ).mul( - 3.0 );\r\n\r\n\treturn mix( color.rgb, mx, amt );\r\n\r\n} );\r\n\r\n/**\r\n * Updates the hue component of the given RGB color while preserving its luminance and saturation.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The input color.\r\n * @param {Node<float>} [adjustment=1] - Defines the degree of hue rotation in radians. A positive value rotates the hue clockwise, while a negative value rotates it counterclockwise.\r\n * @return {Node<vec3>} The updated color.\r\n */\r\nexport const hue = /*@__PURE__*/ Fn( ( [ color, adjustment = float( 1 ) ] ) => {\r\n\r\n\tconst k = vec3( 0.57735, 0.57735, 0.57735 );\r\n\r\n\tconst cosAngle = adjustment.cos();\r\n\r\n\treturn vec3( color.rgb.mul( cosAngle ).add( k.cross( color.rgb ).mul( adjustment.sin() ).add( k.mul( dot( k, color.rgb ).mul( cosAngle.oneMinus() ) ) ) ) );\r\n\r\n} );\r\n\r\n/**\r\n * Computes the luminance for the given RGB color value.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The color value to compute the luminance for.\r\n * @param {?Node<vec3>} luminanceCoefficients - The luminance coefficients. By default predefined values of the current working color space are used.\r\n * @return {Node<vec3>} The luminance.\r\n */\r\nexport const luminance = (\r\n\tcolor,\r\n\tluminanceCoefficients = vec3( ColorManagement.getLuminanceCoefficients( new Vector3() ) )\r\n) => dot( color, luminanceCoefficients );\r\n\r\n/**\r\n * Color Decision List (CDL) v1.2\r\n *\r\n * Compact representation of color grading information, defined by slope, offset, power, and\r\n * saturation. The CDL should be typically be given input in a log space (such as LogC, ACEScc,\r\n * or AgX Log), and will return output in the same space. Output may require clamping >=0.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec4>} color Input (-Infinity < input < +Infinity)\r\n * @param {Node<vec3>} slope Slope (0 ≤ slope < +Infinity)\r\n * @param {Node<vec3>} offset Offset (-Infinity < offset < +Infinity; typically -1 < offset < 1)\r\n * @param {Node<vec3>} power Power (0 < power < +Infinity)\r\n * @param {Node<float>} saturation Saturation (0 ≤ saturation < +Infinity; typically 0 ≤ saturation < 4)\r\n * @param {Node<vec3>} luminanceCoefficients Luminance coefficients for saturation term, typically Rec. 709\r\n * @return {Node<vec4>} Output, -Infinity < output < +Infinity\r\n *\r\n * References:\r\n * - ASC CDL v1.2\r\n * - {@link https://blender.stackexchange.com/a/55239/43930}\r\n * - {@link https://docs.acescentral.com/specifications/acescc/}\r\n */\r\nexport const cdl = /*@__PURE__*/ Fn( ( [\r\n\tcolor,\r\n\tslope = vec3( 1 ),\r\n\toffset = vec3( 0 ),\r\n\tpower = vec3( 1 ),\r\n\tsaturation = float( 1 ),\r\n\t// ASC CDL v1.2 explicitly requires Rec. 709 luminance coefficients.\r\n\tluminanceCoefficients = vec3( ColorManagement.getLuminanceCoefficients( new Vector3(), LinearSRGBColorSpace ) )\r\n] ) => {\r\n\r\n\t// NOTE: The ASC CDL v1.2 defines a [0, 1] clamp on the slope+offset term, and another on the\r\n\t// saturation term. Per the ACEScc specification and Filament, limits may be omitted to support\r\n\t// values outside [0, 1], requiring a workaround for negative values in the power expression.\r\n\r\n\tconst luma = color.rgb.dot( vec3( luminanceCoefficients ) );\r\n\r\n\tconst v = max( color.rgb.mul( slope ).add( offset ), 0.0 ).toVar();\r\n\tconst pv = v.pow( power ).toVar();\r\n\r\n\tIf( v.r.greaterThan( 0.0 ), () => { v.r.assign( pv.r ); } ); // eslint-disable-line\r\n\tIf( v.g.greaterThan( 0.0 ), () => { v.g.assign( pv.g ); } ); // eslint-disable-line\r\n\tIf( v.b.greaterThan( 0.0 ), () => { v.b.assign( pv.b ); } ); // eslint-disable-line\r\n\r\n\tv.assign( luma.add( v.sub( luma ).mul( saturation ) ) );\r\n\r\n\treturn vec4( v.rgb, color.a );\r\n\r\n} );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * Represents a posterize effect which reduces the number of colors\r\n * in an image, resulting in a more blocky and stylized appearance.\r\n *\r\n * @augments TempNode\r\n */\r\nclass PosterizeNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PosterizeNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new posterize node.\r\n\t *\r\n\t * @param {Node} sourceNode - The input color.\r\n\t * @param {Node} stepsNode - Controls the intensity of the posterization effect. A lower number results in a more blocky appearance.\r\n\t */\r\n\tconstructor( sourceNode, stepsNode ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The input color.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.sourceNode = sourceNode;\r\n\r\n\t\t/**\r\n\t\t * Controls the intensity of the posterization effect. A lower number results in a more blocky appearance.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.stepsNode = stepsNode;\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\tconst { sourceNode, stepsNode } = this;\r\n\r\n\t\treturn sourceNode.mul( stepsNode ).floor().div( stepsNode );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PosterizeNode;\r\n\r\n/**\r\n * TSL function for creating a posterize node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} sourceNode - The input color.\r\n * @param {Node} stepsNode - Controls the intensity of the posterization effect. A lower number results in a more blocky appearance.\r\n * @returns {PosterizeNode}\r\n */\r\nexport const posterize = /*@__PURE__*/ nodeProxy( PosterizeNode ).setParameterLength( 2 );\r\n", "import ViewportTextureNode from './ViewportTextureNode.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\nimport { screenUV } from './ScreenNode.js';\r\n\r\nimport { FramebufferTexture } from '../../textures/FramebufferTexture.js';\r\n\r\nlet _sharedFramebuffer = null;\r\n\r\n/**\r\n * `ViewportTextureNode` creates an internal texture for each node instance. This module\r\n * shares a texture across all instances of `ViewportSharedTextureNode`. It should\r\n * be the first choice when using data of the default/screen framebuffer for performance reasons.\r\n *\r\n * @augments ViewportTextureNode\r\n */\r\nclass ViewportSharedTextureNode extends ViewportTextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ViewportSharedTextureNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new viewport shared texture node.\r\n\t *\r\n\t * @param {Node} [uvNode=screenUV] - The uv node.\r\n\t * @param {?Node} [levelNode=null] - The level node.\r\n\t */\r\n\tconstructor( uvNode = screenUV, levelNode = null ) {\r\n\r\n\t\tif ( _sharedFramebuffer === null ) {\r\n\r\n\t\t\t_sharedFramebuffer = new FramebufferTexture();\r\n\r\n\t\t}\r\n\r\n\t\tsuper( uvNode, levelNode, _sharedFramebuffer );\r\n\r\n\t}\r\n\r\n\tupdateReference() {\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ViewportSharedTextureNode;\r\n\r\n/**\r\n * TSL function for creating a shared viewport texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {?Node} [uvNode=screenUV] - The uv node.\r\n * @param {?Node} [levelNode=null] - The level node.\r\n * @returns {ViewportSharedTextureNode}\r\n */\r\nexport const viewportSharedTexture = /*@__PURE__*/ nodeProxy( ViewportSharedTextureNode ).setParameterLength( 0, 2 );\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { default as TextureNode/*, texture*/ } from '../accessors/TextureNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { viewZToOrthographicDepth, perspectiveDepthToViewZ } from './ViewportDepthNode.js';\r\n\r\nimport { HalfFloatType/*, FloatType*/ } from '../../constants.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\nimport { RenderTarget } from '../../core/RenderTarget.js';\r\n\r\nconst _size = /*@__PURE__*/ new Vector2();\r\n\r\n/**\r\n * Represents the texture of a pass node.\r\n *\r\n * @augments TextureNode\r\n */\r\nclass PassTextureNode extends TextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PassTextureNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new pass texture node.\r\n\t *\r\n\t * @param {PassNode} passNode - The pass node.\r\n\t * @param {Texture} texture - The output texture.\r\n\t */\r\n\tconstructor( passNode, texture ) {\r\n\r\n\t\tsuper( texture );\r\n\r\n\t\t/**\r\n\t\t * A reference to the pass node.\r\n\t\t *\r\n\t\t * @type {PassNode}\r\n\t\t */\r\n\t\tthis.passNode = passNode;\r\n\r\n\t\tthis.setUpdateMatrix( false );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( builder.object.isQuadMesh ) this.passNode.build( builder );\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\treturn new this.constructor( this.passNode, this.value );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * An extension of `PassTextureNode` which allows to manage more than one\r\n * internal texture. Relevant for the `getPreviousTexture()` related API.\r\n *\r\n * @augments PassTextureNode\r\n */\r\nclass PassMultipleTextureNode extends PassTextureNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PassMultipleTextureNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new pass texture node.\r\n\t *\r\n\t * @param {PassNode} passNode - The pass node.\r\n\t * @param {string} textureName - The output texture name.\r\n\t * @param {boolean} [previousTexture=false] - Whether previous frame data should be used or not.\r\n\t */\r\n\tconstructor( passNode, textureName, previousTexture = false ) {\r\n\r\n\t\t// null is passed to the super call since this class does not\r\n\t\t// use an external texture for rendering pass data into. Instead\r\n\t\t// the texture is managed by the pass node itself\r\n\r\n\t\tsuper( passNode, null );\r\n\r\n\t\t/**\r\n\t\t * The output texture name.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.textureName = textureName;\r\n\r\n\t\t/**\r\n\t\t * Whether previous frame data should be used or not.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t */\r\n\t\tthis.previousTexture = previousTexture;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the texture reference of this node.\r\n\t */\r\n\tupdateTexture() {\r\n\r\n\t\tthis.value = this.previousTexture ? this.passNode.getPreviousTexture( this.textureName ) : this.passNode.getTexture( this.textureName );\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tthis.updateTexture();\r\n\r\n\t\treturn super.setup( builder );\r\n\r\n\t}\r\n\r\n\tclone() {\r\n\r\n\t\tconst newNode = new this.constructor( this.passNode, this.textureName, this.previousTexture );\r\n\t\tnewNode.uvNode = this.uvNode;\r\n\t\tnewNode.levelNode = this.levelNode;\r\n\t\tnewNode.biasNode = this.biasNode;\r\n\t\tnewNode.sampler = this.sampler;\r\n\t\tnewNode.depthNode = this.depthNode;\r\n\t\tnewNode.compareNode = this.compareNode;\r\n\t\tnewNode.gradNode = this.gradNode;\r\n\r\n\t\treturn newNode;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Represents a render pass (sometimes called beauty pass) in context of post processing.\r\n * This pass produces a render for the given scene and camera and can provide multiple outputs\r\n * via MRT for further processing.\r\n *\r\n * ```js\r\n * const postProcessing = new PostProcessing( renderer );\r\n *\r\n * const scenePass = pass( scene, camera );\r\n *\r\n * postProcessing.outputNode = scenePass;\r\n * ```\r\n *\r\n * @augments TempNode\r\n */\r\nclass PassNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PassNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new pass node.\r\n\t *\r\n\t * @param {('color'|'depth')} scope - The scope of the pass. The scope determines whether the node outputs color or depth.\r\n\t * @param {Scene} scene - A reference to the scene.\r\n\t * @param {Camera} camera - A reference to the camera.\r\n\t * @param {Object} options - Options for the internal render target.\r\n\t */\r\n\tconstructor( scope, scene, camera, options = {} ) {\r\n\r\n\t\tsuper( 'vec4' );\r\n\r\n\t\t/**\r\n\t\t * The scope of the pass. The scope determines whether the node outputs color or depth.\r\n\t\t *\r\n\t\t * @type {('color'|'depth')}\r\n\t\t */\r\n\t\tthis.scope = scope;\r\n\r\n\t\t/**\r\n\t\t * A reference to the scene.\r\n\t\t *\r\n\t\t * @type {Scene}\r\n\t\t */\r\n\t\tthis.scene = scene;\r\n\r\n\t\t/**\r\n\t\t * A reference to the camera.\r\n\t\t *\r\n\t\t * @type {Camera}\r\n\t\t */\r\n\t\tthis.camera = camera;\r\n\r\n\t\t/**\r\n\t\t * Options for the internal render target.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.options = options;\r\n\r\n\t\t/**\r\n\t\t * The pass's pixel ratio. Will be kept automatically kept in sync with the renderer's pixel ratio.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis._pixelRatio = 1;\r\n\r\n\t\t/**\r\n\t\t * The pass's pixel width. Will be kept automatically kept in sync with the renderer's width.\r\n\t\t * @private\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis._width = 1;\r\n\r\n\t\t/**\r\n\t\t * The pass's pixel height. Will be kept automatically kept in sync with the renderer's height.\r\n\t\t * @private\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis._height = 1;\r\n\r\n\t\tconst depthTexture = new DepthTexture();\r\n\t\tdepthTexture.isRenderTargetTexture = true;\r\n\t\t//depthTexture.type = FloatType;\r\n\t\tdepthTexture.name = 'depth';\r\n\r\n\t\tconst renderTarget = new RenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, { type: HalfFloatType, ...options, } );\r\n\t\trenderTarget.texture.name = 'output';\r\n\t\trenderTarget.depthTexture = depthTexture;\r\n\r\n\t\t/**\r\n\t\t * The pass's render target.\r\n\t\t *\r\n\t\t * @type {RenderTarget}\r\n\t\t */\r\n\t\tthis.renderTarget = renderTarget;\r\n\r\n\t\t/**\r\n\t\t * A dictionary holding the internal result textures.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Object<string, Texture>}\r\n\t\t */\r\n\t\tthis._textures = {\r\n\t\t\toutput: renderTarget.texture,\r\n\t\t\tdepth: depthTexture\r\n\t\t};\r\n\r\n\t\t/**\r\n\t\t * A dictionary holding the internal texture nodes.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Object<string, TextureNode>}\r\n\t\t */\r\n\t\tthis._textureNodes = {};\r\n\r\n\t\t/**\r\n\t\t * A dictionary holding the internal depth nodes.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis._linearDepthNodes = {};\r\n\r\n\t\t/**\r\n\t\t * A dictionary holding the internal viewZ nodes.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis._viewZNodes = {};\r\n\r\n\t\t/**\r\n\t\t * A dictionary holding the texture data of the previous frame.\r\n\t\t * Used for computing velocity/motion vectors.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Object<string, Texture>}\r\n\t\t */\r\n\t\tthis._previousTextures = {};\r\n\r\n\t\t/**\r\n\t\t * A dictionary holding the texture nodes of the previous frame.\r\n\t\t * Used for computing velocity/motion vectors.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Object<string, TextureNode>}\r\n\t\t */\r\n\t\tthis._previousTextureNodes = {};\r\n\r\n\t\t/**\r\n\t\t * The `near` property of the camera as a uniform.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {UniformNode}\r\n\t\t */\r\n\t\tthis._cameraNear = uniform( 0 );\r\n\r\n\t\t/**\r\n\t\t * The `far` property of the camera as a uniform.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {UniformNode}\r\n\t\t */\r\n\t\tthis._cameraFar = uniform( 0 );\r\n\r\n\t\t/**\r\n\t\t * A MRT node configuring the MRT settings.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {?MRTNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._mrt = null;\r\n\r\n\t\tthis._layers = null;\r\n\r\n\t\tthis._resolution = 1;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isPassNode = true;\r\n\r\n\t\t/**\r\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.FRAME` since the node renders the\r\n\t\t * scene once per frame in its {@link PassNode#updateBefore} method.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'frame'\r\n\t\t */\r\n\t\tthis.updateBeforeType = NodeUpdateType.FRAME;\r\n\r\n\t\t/**\r\n\t\t * This flag is used for global cache.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.global = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the resolution for the pass.\r\n\t * The resolution is a factor that is multiplied with the renderer's width and height.\r\n\t *\r\n\t * @param {number} resolution - The resolution to set. A value of `1` means full resolution.\r\n\t * @return {PassNode} A reference to this pass.\r\n\t */\r\n\tsetResolution( resolution ) {\r\n\r\n\t\tthis._resolution = resolution;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the current resolution of the pass.\r\n\t *\r\n\t * @return {number} The current resolution. A value of `1` means full resolution.\r\n\t * @default 1\r\n\t */\r\n\tgetResolution() {\r\n\r\n\t\treturn this._resolution;\r\n\r\n\t}\r\n\r\n\tsetLayers( layers ) {\r\n\r\n\t\tthis._layers = layers;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\tgetLayers() {\r\n\r\n\t\treturn this._layers;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the given MRT node to setup MRT for this pass.\r\n\t *\r\n\t * @param {MRTNode} mrt - The MRT object.\r\n\t * @return {PassNode} A reference to this pass.\r\n\t */\r\n\tsetMRT( mrt ) {\r\n\r\n\t\tthis._mrt = mrt;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current MRT node.\r\n\t *\r\n\t * @return {MRTNode} The current MRT node.\r\n\t */\r\n\tgetMRT() {\r\n\r\n\t\treturn this._mrt;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the texture for the given output name.\r\n\t *\r\n\t * @param {string} name - The output name to get the texture for.\r\n\t * @return {Texture} The texture.\r\n\t */\r\n\tgetTexture( name ) {\r\n\r\n\t\tlet texture = this._textures[ name ];\r\n\r\n\t\tif ( texture === undefined ) {\r\n\r\n\t\t\tconst refTexture = this.renderTarget.texture;\r\n\r\n\t\t\ttexture = refTexture.clone();\r\n\t\t\ttexture.name = name;\r\n\r\n\t\t\tthis._textures[ name ] = texture;\r\n\r\n\t\t\tthis.renderTarget.textures.push( texture );\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the texture holding the data of the previous frame for the given output name.\r\n\t *\r\n\t * @param {string} name - The output name to get the texture for.\r\n\t * @return {Texture} The texture holding the data of the previous frame.\r\n\t */\r\n\tgetPreviousTexture( name ) {\r\n\r\n\t\tlet texture = this._previousTextures[ name ];\r\n\r\n\t\tif ( texture === undefined ) {\r\n\r\n\t\t\ttexture = this.getTexture( name ).clone();\r\n\r\n\t\t\tthis._previousTextures[ name ] = texture;\r\n\r\n\t\t}\r\n\r\n\t\treturn texture;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Switches current and previous textures for the given output name.\r\n\t *\r\n\t * @param {string} name - The output name.\r\n\t */\r\n\ttoggleTexture( name ) {\r\n\r\n\t\tconst prevTexture = this._previousTextures[ name ];\r\n\r\n\t\tif ( prevTexture !== undefined ) {\r\n\r\n\t\t\tconst texture = this._textures[ name ];\r\n\r\n\t\t\tconst index = this.renderTarget.textures.indexOf( texture );\r\n\t\t\tthis.renderTarget.textures[ index ] = prevTexture;\r\n\r\n\t\t\tthis._textures[ name ] = prevTexture;\r\n\t\t\tthis._previousTextures[ name ] = texture;\r\n\r\n\t\t\tthis._textureNodes[ name ].updateTexture();\r\n\t\t\tthis._previousTextureNodes[ name ].updateTexture();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the texture node for the given output name.\r\n\t *\r\n\t * @param {string} [name='output'] - The output name to get the texture node for.\r\n\t * @return {TextureNode} The texture node.\r\n\t */\r\n\tgetTextureNode( name = 'output' ) {\r\n\r\n\t\tlet textureNode = this._textureNodes[ name ];\r\n\r\n\t\tif ( textureNode === undefined ) {\r\n\r\n\t\t\ttextureNode = nodeObject( new PassMultipleTextureNode( this, name ) );\r\n\t\t\ttextureNode.updateTexture();\r\n\t\t\tthis._textureNodes[ name ] = textureNode;\r\n\r\n\t\t}\r\n\r\n\t\treturn textureNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the previous texture node for the given output name.\r\n\t *\r\n\t * @param {string} [name='output'] - The output name to get the previous texture node for.\r\n\t * @return {TextureNode} The previous texture node.\r\n\t */\r\n\tgetPreviousTextureNode( name = 'output' ) {\r\n\r\n\t\tlet textureNode = this._previousTextureNodes[ name ];\r\n\r\n\t\tif ( textureNode === undefined ) {\r\n\r\n\t\t\tif ( this._textureNodes[ name ] === undefined ) this.getTextureNode( name );\r\n\r\n\t\t\ttextureNode = nodeObject( new PassMultipleTextureNode( this, name, true ) );\r\n\t\t\ttextureNode.updateTexture();\r\n\t\t\tthis._previousTextureNodes[ name ] = textureNode;\r\n\r\n\t\t}\r\n\r\n\t\treturn textureNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a viewZ node of this pass.\r\n\t *\r\n\t * @param {string} [name='depth'] - The output name to get the viewZ node for. In most cases the default `'depth'` can be used however the parameter exists for custom depth outputs.\r\n\t * @return {Node} The viewZ node.\r\n\t */\r\n\tgetViewZNode( name = 'depth' ) {\r\n\r\n\t\tlet viewZNode = this._viewZNodes[ name ];\r\n\r\n\t\tif ( viewZNode === undefined ) {\r\n\r\n\t\t\tconst cameraNear = this._cameraNear;\r\n\t\t\tconst cameraFar = this._cameraFar;\r\n\r\n\t\t\tthis._viewZNodes[ name ] = viewZNode = perspectiveDepthToViewZ( this.getTextureNode( name ), cameraNear, cameraFar );\r\n\r\n\t\t}\r\n\r\n\t\treturn viewZNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a linear depth node of this pass.\r\n\t *\r\n\t * @param {string} [name='depth'] - The output name to get the linear depth node for. In most cases the default `'depth'` can be used however the parameter exists for custom depth outputs.\r\n\t * @return {Node} The linear depth node.\r\n\t */\r\n\tgetLinearDepthNode( name = 'depth' ) {\r\n\r\n\t\tlet linearDepthNode = this._linearDepthNodes[ name ];\r\n\r\n\t\tif ( linearDepthNode === undefined ) {\r\n\r\n\t\t\tconst cameraNear = this._cameraNear;\r\n\t\t\tconst cameraFar = this._cameraFar;\r\n\t\t\tconst viewZNode = this.getViewZNode( name );\r\n\r\n\t\t\t// TODO: just if ( builder.camera.isPerspectiveCamera )\r\n\r\n\t\t\tthis._linearDepthNodes[ name ] = linearDepthNode = viewZToOrthographicDepth( viewZNode, cameraNear, cameraFar );\r\n\r\n\t\t}\r\n\r\n\t\treturn linearDepthNode;\r\n\r\n\t}\r\n\r\n\tsetup( { renderer } ) {\r\n\r\n\t\tthis.renderTarget.samples = this.options.samples === undefined ? renderer.samples : this.options.samples;\r\n\r\n\t\tthis.renderTarget.texture.type = renderer.getColorBufferType();\r\n\r\n\t\treturn this.scope === PassNode.COLOR ? this.getTextureNode() : this.getLinearDepthNode();\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { renderer } = frame;\r\n\t\tconst { scene } = this;\r\n\r\n\t\tlet camera;\r\n\t\tlet pixelRatio;\r\n\r\n\t\tconst outputRenderTarget = renderer.getOutputRenderTarget();\r\n\r\n\t\tif ( outputRenderTarget && outputRenderTarget.isXRRenderTarget === true ) {\r\n\r\n\t\t\tpixelRatio = 1;\r\n\t\t\tcamera = renderer.xr.getCamera();\r\n\r\n\t\t\trenderer.xr.updateCamera( camera );\r\n\r\n\t\t\t_size.set( outputRenderTarget.width, outputRenderTarget.height );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tcamera = this.camera;\r\n\t\t\tpixelRatio = renderer.getPixelRatio();\r\n\r\n\t\t\trenderer.getSize( _size );\r\n\r\n\t\t}\r\n\r\n\t\tthis._pixelRatio = pixelRatio;\r\n\r\n\t\tthis.setSize( _size.width, _size.height );\r\n\r\n\t\tconst currentRenderTarget = renderer.getRenderTarget();\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\t\tconst currentMask = camera.layers.mask;\r\n\r\n\t\tthis._cameraNear.value = camera.near;\r\n\t\tthis._cameraFar.value = camera.far;\r\n\r\n\t\tif ( this._layers !== null ) {\r\n\r\n\t\t\tcamera.layers.mask = this._layers.mask;\r\n\r\n\t\t}\r\n\r\n\t\tfor ( const name in this._previousTextures ) {\r\n\r\n\t\t\tthis.toggleTexture( name );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( this.renderTarget );\r\n\t\trenderer.setMRT( this._mrt );\r\n\r\n\t\trenderer.render( scene, camera );\r\n\r\n\t\trenderer.setRenderTarget( currentRenderTarget );\r\n\t\trenderer.setMRT( currentMRT );\r\n\r\n\t\tcamera.layers.mask = currentMask;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the size of the pass's render target. Honors the pixel ratio.\r\n\t *\r\n\t * @param {number} width - The width to set.\r\n\t * @param {number} height - The height to set.\r\n\t */\r\n\tsetSize( width, height ) {\r\n\r\n\t\tthis._width = width;\r\n\t\tthis._height = height;\r\n\r\n\t\tconst effectiveWidth = this._width * this._pixelRatio * this._resolution;\r\n\t\tconst effectiveHeight = this._height * this._pixelRatio * this._resolution;\r\n\r\n\t\tthis.renderTarget.setSize( effectiveWidth, effectiveHeight );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the pixel ratio the pass's render target and updates the size.\r\n\t *\r\n\t * @param {number} pixelRatio - The pixel ratio to set.\r\n\t */\r\n\tsetPixelRatio( pixelRatio ) {\r\n\r\n\t\tthis._pixelRatio = pixelRatio;\r\n\r\n\t\tthis.setSize( this._width, this._height );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees internal resources. Should be called when the node is no longer in use.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis.renderTarget.dispose();\r\n\r\n\t}\r\n\r\n\r\n}\r\n\r\n/**\r\n * @static\r\n * @type {'color'}\r\n * @default 'color'\r\n */\r\nPassNode.COLOR = 'color';\r\n\r\n/**\r\n * @static\r\n * @type {'depth'}\r\n * @default 'depth'\r\n */\r\nPassNode.DEPTH = 'depth';\r\n\r\nexport default PassNode;\r\n\r\n/**\r\n * TSL function for creating a pass node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Scene} scene - A reference to the scene.\r\n * @param {Camera} camera - A reference to the camera.\r\n * @param {Object} options - Options for the internal render target.\r\n * @returns {PassNode}\r\n */\r\nexport const pass = ( scene, camera, options ) => nodeObject( new PassNode( PassNode.COLOR, scene, camera, options ) );\r\n\r\n/**\r\n * TSL function for creating a pass texture node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {PassNode} pass - The pass node.\r\n * @param {Texture} texture - The output texture.\r\n * @returns {PassTextureNode}\r\n */\r\nexport const passTexture = ( pass, texture ) => nodeObject( new PassTextureNode( pass, texture ) );\r\n\r\n/**\r\n * TSL function for creating a depth pass node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Scene} scene - A reference to the scene.\r\n * @param {Camera} camera - A reference to the camera.\r\n * @param {Object} options - Options for the internal render target.\r\n * @returns {PassNode}\r\n */\r\nexport const depthPass = ( scene, camera, options ) => nodeObject( new PassNode( PassNode.DEPTH, scene, camera, options ) );\r\n", "import { Fn, float, mat3, vec3, If } from '../tsl/TSLBase.js';\r\nimport { select } from '../math/ConditionalNode.js';\r\nimport { clamp, log2, max, min, pow, mix } from '../math/MathNode.js';\r\nimport { mul, sub, div } from '../math/OperatorNode.js';\r\n\r\n/**\r\n * Linear tone mapping, exposure only.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The color that should be tone mapped.\r\n * @param {Node<float>} exposure - The exposure.\r\n * @return {Node<vec3>} The tone mapped color.\r\n */\r\nexport const linearToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\treturn color.mul( exposure ).clamp();\r\n\r\n} ).setLayout( {\r\n\tname: 'linearToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\n/**\r\n * Reinhard tone mapping.\r\n *\r\n * Reference: {@link https://www.cs.utah.edu/docs/techreports/2002/pdf/UUCS-02-001.pdf}\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The color that should be tone mapped.\r\n * @param {Node<float>} exposure - The exposure.\r\n * @return {Node<vec3>} The tone mapped color.\r\n */\r\nexport const reinhardToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\tcolor = color.mul( exposure );\r\n\r\n\treturn color.div( color.add( 1.0 ) ).clamp();\r\n\r\n} ).setLayout( {\r\n\tname: 'reinhardToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\n/**\r\n * Cineon tone mapping.\r\n *\r\n * Reference: {@link http://filmicworlds.com/blog/filmic-tonemapping-operators/}\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The color that should be tone mapped.\r\n * @param {Node<float>} exposure - The exposure.\r\n * @return {Node<vec3>} The tone mapped color.\r\n */\r\nexport const cineonToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\t// filmic operator by Jim Hejl and Richard Burgess-Dawson\r\n\tcolor = color.mul( exposure );\r\n\tcolor = color.sub( 0.004 ).max( 0.0 );\r\n\r\n\tconst a = color.mul( color.mul( 6.2 ).add( 0.5 ) );\r\n\tconst b = color.mul( color.mul( 6.2 ).add( 1.7 ) ).add( 0.06 );\r\n\r\n\treturn a.div( b ).pow( 2.2 );\r\n\r\n} ).setLayout( {\r\n\tname: 'cineonToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\n// source: https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs\r\n\r\nconst RRTAndODTFit = /*@__PURE__*/ Fn( ( [ color ] ) => {\r\n\r\n\tconst a = color.mul( color.add( 0.0245786 ) ).sub( 0.000090537 );\r\n\tconst b = color.mul( color.add( 0.4329510 ).mul( 0.983729 ) ).add( 0.238081 );\r\n\r\n\treturn a.div( b );\r\n\r\n} );\r\n\r\n/**\r\n * ACESFilmic tone mapping.\r\n *\r\n * Reference: {@link https://github.com/selfshadow/ltc_code/blob/master/webgl/shaders/ltc/ltc_blit.fs}\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The color that should be tone mapped.\r\n * @param {Node<float>} exposure - The exposure.\r\n * @return {Node<vec3>} The tone mapped color.\r\n */\r\nexport const acesFilmicToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\t// sRGB => XYZ => D65_2_D60 => AP1 => RRT_SAT\r\n\tconst ACESInputMat = mat3(\r\n\t\t0.59719, 0.35458, 0.04823,\r\n\t\t0.07600, 0.90834, 0.01566,\r\n\t\t0.02840, 0.13383, 0.83777\r\n\t);\r\n\r\n\t// ODT_SAT => XYZ => D60_2_D65 => sRGB\r\n\tconst ACESOutputMat = mat3(\r\n\t\t1.60475, - 0.53108, - 0.07367,\r\n\t\t- 0.10208, 1.10813, - 0.00605,\r\n\t\t- 0.00327, - 0.07276, 1.07602\r\n\t);\r\n\r\n\tcolor = color.mul( exposure ).div( 0.6 );\r\n\r\n\tcolor = ACESInputMat.mul( color );\r\n\r\n\t// Apply RRT and ODT\r\n\tcolor = RRTAndODTFit( color );\r\n\r\n\tcolor = ACESOutputMat.mul( color );\r\n\r\n\t// Clamp to [0, 1]\r\n\treturn color.clamp();\r\n\r\n} ).setLayout( {\r\n\tname: 'acesFilmicToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst LINEAR_REC2020_TO_LINEAR_SRGB = /*@__PURE__*/ mat3( vec3( 1.6605, - 0.1246, - 0.0182 ), vec3( - 0.5876, 1.1329, - 0.1006 ), vec3( - 0.0728, - 0.0083, 1.1187 ) );\r\nconst LINEAR_SRGB_TO_LINEAR_REC2020 = /*@__PURE__*/ mat3( vec3( 0.6274, 0.0691, 0.0164 ), vec3( 0.3293, 0.9195, 0.0880 ), vec3( 0.0433, 0.0113, 0.8956 ) );\r\n\r\nconst agxDefaultContrastApprox = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\r\n\r\n\tconst x = vec3( x_immutable ).toVar();\r\n\tconst x2 = vec3( x.mul( x ) ).toVar();\r\n\tconst x4 = vec3( x2.mul( x2 ) ).toVar();\r\n\r\n\treturn float( 15.5 ).mul( x4.mul( x2 ) ).sub( mul( 40.14, x4.mul( x ) ) ).add( mul( 31.96, x4 ).sub( mul( 6.868, x2.mul( x ) ) ).add( mul( 0.4298, x2 ).add( mul( 0.1191, x ).sub( 0.00232 ) ) ) );\r\n\r\n} );\r\n\r\n/**\r\n * AgX tone mapping.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The color that should be tone mapped.\r\n * @param {Node<float>} exposure - The exposure.\r\n * @return {Node<vec3>} The tone mapped color.\r\n */\r\nexport const agxToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\tconst colortone = vec3( color ).toVar();\r\n\tconst AgXInsetMatrix = mat3( vec3( 0.856627153315983, 0.137318972929847, 0.11189821299995 ), vec3( 0.0951212405381588, 0.761241990602591, 0.0767994186031903 ), vec3( 0.0482516061458583, 0.101439036467562, 0.811302368396859 ) );\r\n\tconst AgXOutsetMatrix = mat3( vec3( 1.1271005818144368, - 0.1413297634984383, - 0.14132976349843826 ), vec3( - 0.11060664309660323, 1.157823702216272, - 0.11060664309660294 ), vec3( - 0.016493938717834573, - 0.016493938717834257, 1.2519364065950405 ) );\r\n\tconst AgxMinEv = float( - 12.47393 );\r\n\tconst AgxMaxEv = float( 4.026069 );\r\n\tcolortone.mulAssign( exposure );\r\n\tcolortone.assign( LINEAR_SRGB_TO_LINEAR_REC2020.mul( colortone ) );\r\n\tcolortone.assign( AgXInsetMatrix.mul( colortone ) );\r\n\tcolortone.assign( max( colortone, 1e-10 ) );\r\n\tcolortone.assign( log2( colortone ) );\r\n\tcolortone.assign( colortone.sub( AgxMinEv ).div( AgxMaxEv.sub( AgxMinEv ) ) );\r\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\r\n\tcolortone.assign( agxDefaultContrastApprox( colortone ) );\r\n\tcolortone.assign( AgXOutsetMatrix.mul( colortone ) );\r\n\tcolortone.assign( pow( max( vec3( 0.0 ), colortone ), vec3( 2.2 ) ) );\r\n\tcolortone.assign( LINEAR_REC2020_TO_LINEAR_SRGB.mul( colortone ) );\r\n\tcolortone.assign( clamp( colortone, 0.0, 1.0 ) );\r\n\r\n\treturn colortone;\r\n\r\n} ).setLayout( {\r\n\tname: 'agxToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n\r\n/**\r\n * Neutral tone mapping.\r\n *\r\n * Reference: {@link https://modelviewer.dev/examples/tone-mapping}\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} color - The color that should be tone mapped.\r\n * @param {Node<float>} exposure - The exposure.\r\n * @return {Node<vec3>} The tone mapped color.\r\n */\r\nexport const neutralToneMapping = /*@__PURE__*/ Fn( ( [ color, exposure ] ) => {\r\n\r\n\tconst StartCompression = float( 0.8 - 0.04 );\r\n\tconst Desaturation = float( 0.15 );\r\n\r\n\tcolor = color.mul( exposure );\r\n\r\n\tconst x = min( color.r, min( color.g, color.b ) );\r\n\tconst offset = select( x.lessThan( 0.08 ), x.sub( mul( 6.25, x.mul( x ) ) ), 0.04 );\r\n\r\n\tcolor.subAssign( offset );\r\n\r\n\tconst peak = max( color.r, max( color.g, color.b ) );\r\n\r\n\tIf( peak.lessThan( StartCompression ), () => {\r\n\r\n\t\treturn color;\r\n\r\n\t} );\r\n\r\n\tconst d = sub( 1, StartCompression );\r\n\tconst newPeak = sub( 1, d.mul( d ).div( peak.add( d.sub( StartCompression ) ) ) );\r\n\tcolor.mulAssign( newPeak.div( peak ) );\r\n\tconst g = sub( 1, div( 1, Desaturation.mul( peak.sub( newPeak ) ).add( 1 ) ) );\r\n\r\n\treturn mix( color, vec3( newPeak ), g );\r\n\r\n} ).setLayout( {\r\n\tname: 'neutralToneMapping',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' },\r\n\t\t{ name: 'exposure', type: 'float' }\r\n\t]\r\n} );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * This class represents native code sections. It is the base\r\n * class for modules like {@link FunctionNode} which allows to implement\r\n * functions with native shader languages.\r\n *\r\n * @augments Node\r\n */\r\nclass CodeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'CodeNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new code node.\r\n\t *\r\n\t * @param {string} [code=''] - The native code.\r\n\t * @param {Array<Node>} [includes=[]] - An array of includes.\r\n\t * @param {('js'|'wgsl'|'glsl')} [language=''] - The used language.\r\n\t */\r\n\tconstructor( code = '', includes = [], language = '' ) {\r\n\r\n\t\tsuper( 'code' );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isCodeNode = true;\r\n\r\n\t\t/**\r\n\t\t * This flag is used for global cache.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.global = true;\r\n\r\n\t\t/**\r\n\t\t * The native code.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default ''\r\n\t\t */\r\n\t\tthis.code = code;\r\n\r\n\t\t/**\r\n\t\t * An array of includes\r\n\t\t *\r\n\t\t * @type {Array<Node>}\r\n\t\t * @default []\r\n\t\t */\r\n\t\tthis.includes = includes;\r\n\r\n\t\t/**\r\n\t\t * The used language.\r\n\t\t *\r\n\t\t * @type {('js'|'wgsl'|'glsl')}\r\n\t\t * @default ''\r\n\t\t */\r\n\t\tthis.language = language;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the includes of this code node.\r\n\t *\r\n\t * @param {Array<Node>} includes - The includes to set.\r\n\t * @return {CodeNode} A reference to this node.\r\n\t */\r\n\tsetIncludes( includes ) {\r\n\r\n\t\tthis.includes = includes;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the includes of this code node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {Array<Node>} The includes.\r\n\t */\r\n\tgetIncludes( /*builder*/ ) {\r\n\r\n\t\treturn this.includes;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst includes = this.getIncludes( builder );\r\n\r\n\t\tfor ( const include of includes ) {\r\n\r\n\t\t\tinclude.build( builder );\r\n\r\n\t\t}\r\n\r\n\t\tconst nodeCode = builder.getCodeFromNode( this, this.getNodeType( builder ) );\r\n\t\tnodeCode.code = this.code;\r\n\r\n\t\treturn nodeCode.code;\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.code = this.code;\r\n\t\tdata.language = this.language;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.code = data.code;\r\n\t\tthis.language = data.language;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default CodeNode;\r\n\r\n/**\r\n * TSL function for creating a code node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} [code] - The native code.\r\n * @param {?Array<Node>} [includes=[]] - An array of includes.\r\n * @param {?('js'|'wgsl'|'glsl')} [language=''] - The used language.\r\n * @returns {CodeNode}\r\n */\r\nexport const code = /*@__PURE__*/ nodeProxy( CodeNode ).setParameterLength( 1, 3 );\r\n\r\n/**\r\n * TSL function for creating a JS code node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} src - The native code.\r\n * @param {Array<Node>} includes - An array of includes.\r\n * @returns {CodeNode}\r\n */\r\nexport const js = ( src, includes ) => code( src, includes, 'js' );\r\n\r\n/**\r\n * TSL function for creating a WGSL code node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} src - The native code.\r\n * @param {Array<Node>} includes - An array of includes.\r\n * @returns {CodeNode}\r\n */\r\nexport const wgsl = ( src, includes ) => code( src, includes, 'wgsl' );\r\n\r\n/**\r\n * TSL function for creating a GLSL code node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} src - The native code.\r\n * @param {Array<Node>} includes - An array of includes.\r\n * @returns {CodeNode}\r\n */\r\nexport const glsl = ( src, includes ) => code( src, includes, 'glsl' );\r\n", "import Node from '../core/Node.js';\r\nimport { arrayBufferToBase64, base64ToArrayBuffer } from '../core/NodeUtils.js';\r\nimport { nodeProxy, float } from '../tsl/TSLBase.js';\r\n\r\nimport { EventDispatcher } from '../../core/EventDispatcher.js';\r\n\r\n/**\r\n * `ScriptableNode` uses this class to manage script inputs and outputs.\r\n *\r\n * @augments Node\r\n */\r\nclass ScriptableValueNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ScriptableValueNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new scriptable node.\r\n\t *\r\n\t * @param {any} [value=null] - The value.\r\n\t */\r\n\tconstructor( value = null ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * A reference to the value.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._value = value;\r\n\r\n\t\t/**\r\n\t\t * Depending on the type of `_value`, this property might cache parsed data.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._cache = null;\r\n\r\n\t\t/**\r\n\t\t * If this node represents an input, this property represents the input type.\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.inputType = null;\r\n\r\n\t\t/**\r\n\t\t * If this node represents an output, this property represents the output type.\r\n\t\t *\r\n\t\t * @type {?string}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.outputType = null;\r\n\r\n\t\t/**\r\n\t\t * An event dispatcher for managing events.\r\n\t\t *\r\n\t\t * @type {EventDispatcher}\r\n\t\t */\r\n\t\tthis.events = new EventDispatcher();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isScriptableValueNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Whether this node represents an output or not.\r\n\t *\r\n\t * @type {boolean}\r\n\t * @readonly\r\n\t * @default true\r\n\t */\r\n\tget isScriptableOutputNode() {\r\n\r\n\t\treturn this.outputType !== null;\r\n\r\n\t}\r\n\r\n\tset value( val ) {\r\n\r\n\t\tif ( this._value === val ) return;\r\n\r\n\t\tif ( this._cache && this.inputType === 'URL' && this.value.value instanceof ArrayBuffer ) {\r\n\r\n\t\t\tURL.revokeObjectURL( this._cache );\r\n\r\n\t\t\tthis._cache = null;\r\n\r\n\t\t}\r\n\r\n\t\tthis._value = val;\r\n\r\n\t\tthis.events.dispatchEvent( { type: 'change' } );\r\n\r\n\t\tthis.refresh();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The node's value.\r\n\t *\r\n\t * @type {any}\r\n\t */\r\n\tget value() {\r\n\r\n\t\treturn this._value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Dispatches the `refresh` event.\r\n\t */\r\n\trefresh() {\r\n\r\n\t\tthis.events.dispatchEvent( { type: 'refresh' } );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The `value` property usually represents a node or even binary data in form of array buffers.\r\n\t * In this case, this method tries to return the actual value behind the complex type.\r\n\t *\r\n\t * @return {any} The value.\r\n\t */\r\n\tgetValue() {\r\n\r\n\t\tconst value = this.value;\r\n\r\n\t\tif ( value && this._cache === null && this.inputType === 'URL' && value.value instanceof ArrayBuffer ) {\r\n\r\n\t\t\tthis._cache = URL.createObjectURL( new Blob( [ value.value ] ) );\r\n\r\n\t\t} else if ( value && value.value !== null && value.value !== undefined && (\r\n\t\t\t( ( this.inputType === 'URL' || this.inputType === 'String' ) && typeof value.value === 'string' ) ||\r\n\t\t\t( this.inputType === 'Number' && typeof value.value === 'number' ) ||\r\n\t\t\t( this.inputType === 'Vector2' && value.value.isVector2 ) ||\r\n\t\t\t( this.inputType === 'Vector3' && value.value.isVector3 ) ||\r\n\t\t\t( this.inputType === 'Vector4' && value.value.isVector4 ) ||\r\n\t\t\t( this.inputType === 'Color' && value.value.isColor ) ||\r\n\t\t\t( this.inputType === 'Matrix3' && value.value.isMatrix3 ) ||\r\n\t\t\t( this.inputType === 'Matrix4' && value.value.isMatrix4 )\r\n\t\t) ) {\r\n\r\n\t\t\treturn value.value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this._cache || value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten since the node type is inferred from the value.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.value && this.value.isNode ? this.value.getNodeType( builder ) : 'float';\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.value && this.value.isNode ? this.value : float();\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tif ( this.value !== null ) {\r\n\r\n\t\t\tif ( this.inputType === 'ArrayBuffer' ) {\r\n\r\n\t\t\t\tdata.value = arrayBufferToBase64( this.value );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tdata.value = this.value ? this.value.toJSON( data.meta ).uuid : null;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tdata.value = null;\r\n\r\n\t\t}\r\n\r\n\t\tdata.inputType = this.inputType;\r\n\t\tdata.outputType = this.outputType;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tlet value = null;\r\n\r\n\t\tif ( data.value !== null ) {\r\n\r\n\t\t\tif ( data.inputType === 'ArrayBuffer' ) {\r\n\r\n\t\t\t\tvalue = base64ToArrayBuffer( data.value );\r\n\r\n\t\t\t} else if ( data.inputType === 'Texture' ) {\r\n\r\n\t\t\t\tvalue = data.meta.textures[ data.value ];\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tvalue = data.meta.nodes[ data.value ] || null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tthis.value = value;\r\n\r\n\t\tthis.inputType = data.inputType;\r\n\t\tthis.outputType = data.outputType;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ScriptableValueNode;\r\n\r\n/**\r\n * TSL function for creating a scriptable value node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {any} [value] - The value.\r\n * @returns {ScriptableValueNode}\r\n */\r\nexport const scriptableValue = /*@__PURE__*/ nodeProxy( ScriptableValueNode ).setParameterLength( 1 );\r\n", "import Node from '../core/Node.js';\r\nimport { scriptableValue } from './ScriptableValueNode.js';\r\nimport { nodeProxy, float } from '../tsl/TSLBase.js';\r\nimport { hashArray, hashString } from '../core/NodeUtils.js';\r\n\r\n/**\r\n * A Map-like data structure for managing resources of scriptable nodes.\r\n *\r\n * @augments Map\r\n */\r\nclass Resources extends Map {\r\n\r\n\tget( key, callback = null, ...params ) {\r\n\r\n\t\tif ( this.has( key ) ) return super.get( key );\r\n\r\n\t\tif ( callback !== null ) {\r\n\r\n\t\t\tconst value = callback( ...params );\r\n\t\t\tthis.set( key, value );\r\n\t\t\treturn value;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nclass Parameters {\r\n\r\n\tconstructor( scriptableNode ) {\r\n\r\n\t\tthis.scriptableNode = scriptableNode;\r\n\r\n\t}\r\n\r\n\tget parameters() {\r\n\r\n\t\treturn this.scriptableNode.parameters;\r\n\r\n\t}\r\n\r\n\tget layout() {\r\n\r\n\t\treturn this.scriptableNode.getLayout();\r\n\r\n\t}\r\n\r\n\tgetInputLayout( id ) {\r\n\r\n\t\treturn this.scriptableNode.getInputLayout( id );\r\n\r\n\t}\r\n\r\n\tget( name ) {\r\n\r\n\t\tconst param = this.parameters[ name ];\r\n\t\tconst value = param ? param.getValue() : null;\r\n\r\n\t\treturn value;\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Defines the resources (e.g. namespaces) of scriptable nodes.\r\n *\r\n * @type {Resources}\r\n */\r\nexport const ScriptableNodeResources = new Resources();\r\n\r\n/**\r\n * This type of node allows to implement nodes with custom scripts. The script\r\n * section is represented as an instance of `CodeNode` written with JavaScript.\r\n * The script itself must adhere to a specific structure.\r\n *\r\n * - main(): Executed once by default and every time `node.needsUpdate` is set.\r\n * - layout: The layout object defines the script's interface (inputs and outputs).\r\n *\r\n * ```js\r\n * ScriptableNodeResources.set( 'TSL', TSL );\r\n *\r\n * const scriptableNode = scriptable( js( `\r\n * \tlayout = {\r\n * \t\toutputType: 'node',\r\n * \t\telements: [\r\n * \t\t\t{ name: 'source', inputType: 'node' },\r\n * \t\t]\r\n * \t};\r\n *\r\n * \tconst { mul, oscSine } = TSL;\r\n *\r\n * \tfunction main() {\r\n * \t\tconst source = parameters.get( 'source' ) || float();\r\n * \t\treturn mul( source, oscSine() ) );\r\n * \t}\r\n *\r\n * ` ) );\r\n *\r\n * scriptableNode.setParameter( 'source', color( 1, 0, 0 ) );\r\n *\r\n * const material = new THREE.MeshBasicNodeMaterial();\r\n * material.colorNode = scriptableNode;\r\n * ```\r\n *\r\n * @augments Node\r\n */\r\nclass ScriptableNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ScriptableNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new scriptable node.\r\n\t *\r\n\t * @param {?CodeNode} [codeNode=null] - The code node.\r\n\t * @param {Object} [parameters={}] - The parameters definition.\r\n\t */\r\n\tconstructor( codeNode = null, parameters = {} ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The code node.\r\n\t\t *\r\n\t\t * @type {?CodeNode}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.codeNode = codeNode;\r\n\r\n\t\t/**\r\n\t\t * The parameters definition.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t * @default {}\r\n\t\t */\r\n\t\tthis.parameters = parameters;\r\n\r\n\t\tthis._local = new Resources();\r\n\t\tthis._output = scriptableValue( null );\r\n\t\tthis._outputs = {};\r\n\t\tthis._source = this.source;\r\n\t\tthis._method = null;\r\n\t\tthis._object = null;\r\n\t\tthis._value = null;\r\n\t\tthis._needsOutputUpdate = true;\r\n\r\n\t\tthis.onRefresh = this.onRefresh.bind( this );\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isScriptableNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The source code of the scriptable node.\r\n\t *\r\n\t * @type {string}\r\n\t */\r\n\tget source() {\r\n\r\n\t\treturn this.codeNode ? this.codeNode.code : '';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the reference of a local script variable.\r\n\t *\r\n\t * @param {string} name - The variable name.\r\n\t * @param {Object} value - The reference to set.\r\n\t * @return {Resources} The resource map\r\n\t */\r\n\tsetLocal( name, value ) {\r\n\r\n\t\treturn this._local.set( name, value );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Gets the value of a local script variable.\r\n\t *\r\n\t * @param {string} name - The variable name.\r\n\t * @return {Object} The value.\r\n\t */\r\n\tgetLocal( name ) {\r\n\r\n\t\treturn this._local.get( name );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Event listener for the `refresh` event.\r\n\t */\r\n\tonRefresh() {\r\n\r\n\t\tthis._refresh();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an input from the layout with the given id/name.\r\n\t *\r\n\t * @param {string} id - The id/name of the input.\r\n\t * @return {Object} The element entry.\r\n\t */\r\n\tgetInputLayout( id ) {\r\n\r\n\t\tfor ( const element of this.getLayout() ) {\r\n\r\n\t\t\tif ( element.inputType && ( element.id === id || element.name === id ) ) {\r\n\r\n\t\t\t\treturn element;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an output from the layout with the given id/name.\r\n\t *\r\n\t * @param {string} id - The id/name of the output.\r\n\t * @return {Object} The element entry.\r\n\t */\r\n\tgetOutputLayout( id ) {\r\n\r\n\t\tfor ( const element of this.getLayout() ) {\r\n\r\n\t\t\tif ( element.outputType && ( element.id === id || element.name === id ) ) {\r\n\r\n\t\t\t\treturn element;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Defines a script output for the given name and value.\r\n\t *\r\n\t * @param {string} name - The name of the output.\r\n\t * @param {Node} value - The node value.\r\n\t * @return {ScriptableNode} A reference to this node.\r\n\t */\r\n\tsetOutput( name, value ) {\r\n\r\n\t\tconst outputs = this._outputs;\r\n\r\n\t\tif ( outputs[ name ] === undefined ) {\r\n\r\n\t\t\toutputs[ name ] = scriptableValue( value );\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutputs[ name ].value = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a script output for the given name.\r\n\t *\r\n\t * @param {string} name - The name of the output.\r\n\t * @return {ScriptableValueNode} The node value.\r\n\t */\r\n\tgetOutput( name ) {\r\n\r\n\t\treturn this._outputs[ name ];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a parameter for the given name\r\n\t *\r\n\t * @param {string} name - The name of the parameter.\r\n\t * @return {ScriptableValueNode} The node value.\r\n\t */\r\n\tgetParameter( name ) {\r\n\r\n\t\treturn this.parameters[ name ];\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets a value for the given parameter name.\r\n\t *\r\n\t * @param {string} name - The parameter name.\r\n\t * @param {any} value - The parameter value.\r\n\t * @return {ScriptableNode} A reference to this node.\r\n\t */\r\n\tsetParameter( name, value ) {\r\n\r\n\t\tconst parameters = this.parameters;\r\n\r\n\t\tif ( value && value.isScriptableNode ) {\r\n\r\n\t\t\tthis.deleteParameter( name );\r\n\r\n\t\t\tparameters[ name ] = value;\r\n\t\t\tparameters[ name ].getDefaultOutput().events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t} else if ( value && value.isScriptableValueNode ) {\r\n\r\n\t\t\tthis.deleteParameter( name );\r\n\r\n\t\t\tparameters[ name ] = value;\r\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t} else if ( parameters[ name ] === undefined ) {\r\n\r\n\t\t\tparameters[ name ] = scriptableValue( value );\r\n\t\t\tparameters[ name ].events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tparameters[ name ].value = value;\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value of this node which is the value of\r\n\t * the default output.\r\n\t *\r\n\t * @return {Node} The value.\r\n\t */\r\n\tgetValue() {\r\n\r\n\t\treturn this.getDefaultOutput().getValue();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a parameter from the script.\r\n\t *\r\n\t * @param {string} name - The parameter to remove.\r\n\t * @return {ScriptableNode} A reference to this node.\r\n\t */\r\n\tdeleteParameter( name ) {\r\n\r\n\t\tlet valueNode = this.parameters[ name ];\r\n\r\n\t\tif ( valueNode ) {\r\n\r\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\r\n\r\n\t\t\tvalueNode.events.removeEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t}\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes all parameters from the script.\r\n\t *\r\n\t * @return {ScriptableNode} A reference to this node.\r\n\t */\r\n\tclearParameters() {\r\n\r\n\t\tfor ( const name of Object.keys( this.parameters ) ) {\r\n\r\n\t\t\tthis.deleteParameter( name );\r\n\r\n\t\t}\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Calls a function from the script.\r\n\t *\r\n\t * @param {string} name - The function name.\r\n\t * @param {...any} params - A list of parameters.\r\n\t * @return {any} The result of the function call.\r\n\t */\r\n\tcall( name, ...params ) {\r\n\r\n\t\tconst object = this.getObject();\r\n\t\tconst method = object[ name ];\r\n\r\n\t\tif ( typeof method === 'function' ) {\r\n\r\n\t\t\treturn method( ...params );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Asynchronously calls a function from the script.\r\n\t *\r\n\t * @param {string} name - The function name.\r\n\t * @param {...any} params - A list of parameters.\r\n\t * @return {Promise<any>} The result of the function call.\r\n\t */\r\n\tasync callAsync( name, ...params ) {\r\n\r\n\t\tconst object = this.getObject();\r\n\t\tconst method = object[ name ];\r\n\r\n\t\tif ( typeof method === 'function' ) {\r\n\r\n\t\t\treturn method.constructor.name === 'AsyncFunction' ? await method( ...params ) : method( ...params );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten since the node types is inferred from the script's output.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.getDefaultOutputNode().getNodeType( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Refreshes the script node.\r\n\t *\r\n\t * @param {?string} [output=null] - An optional output.\r\n\t */\r\n\trefresh( output = null ) {\r\n\r\n\t\tif ( output !== null ) {\r\n\r\n\t\t\tthis.getOutput( output ).refresh();\r\n\r\n\t\t} else {\r\n\r\n\t\t\tthis._refresh();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an object representation of the script.\r\n\t *\r\n\t * @return {Object} The result object.\r\n\t */\r\n\tgetObject() {\r\n\r\n\t\tif ( this.needsUpdate ) this.dispose();\r\n\t\tif ( this._object !== null ) return this._object;\r\n\r\n\t\t//\r\n\r\n\t\tconst refresh = () => this.refresh();\r\n\t\tconst setOutput = ( id, value ) => this.setOutput( id, value );\r\n\r\n\t\tconst parameters = new Parameters( this );\r\n\r\n\t\tconst THREE = ScriptableNodeResources.get( 'THREE' );\r\n\t\tconst TSL = ScriptableNodeResources.get( 'TSL' );\r\n\r\n\t\tconst method = this.getMethod();\r\n\t\tconst params = [ parameters, this._local, ScriptableNodeResources, refresh, setOutput, THREE, TSL ];\r\n\r\n\t\tthis._object = method( ...params );\r\n\r\n\t\tconst layout = this._object.layout;\r\n\r\n\t\tif ( layout ) {\r\n\r\n\t\t\tif ( layout.cache === false ) {\r\n\r\n\t\t\t\tthis._local.clear();\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// default output\r\n\t\t\tthis._output.outputType = layout.outputType || null;\r\n\r\n\t\t\tif ( Array.isArray( layout.elements ) ) {\r\n\r\n\t\t\t\tfor ( const element of layout.elements ) {\r\n\r\n\t\t\t\t\tconst id = element.id || element.name;\r\n\r\n\t\t\t\t\tif ( element.inputType ) {\r\n\r\n\t\t\t\t\t\tif ( this.getParameter( id ) === undefined ) this.setParameter( id, null );\r\n\r\n\t\t\t\t\t\tthis.getParameter( id ).inputType = element.inputType;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif ( element.outputType ) {\r\n\r\n\t\t\t\t\t\tif ( this.getOutput( id ) === undefined ) this.setOutput( id, null );\r\n\r\n\t\t\t\t\t\tthis.getOutput( id ).outputType = element.outputType;\r\n\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\treturn this._object;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tfor ( const name in this.parameters ) {\r\n\r\n\t\t\tlet valueNode = this.parameters[ name ];\r\n\r\n\t\t\tif ( valueNode.isScriptableNode ) valueNode = valueNode.getDefaultOutput();\r\n\r\n\t\t\tvalueNode.events.addEventListener( 'refresh', this.onRefresh );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the layout of the script.\r\n\t *\r\n\t * @return {Object} The script's layout.\r\n\t */\r\n\tgetLayout() {\r\n\r\n\t\treturn this.getObject().layout;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns default node output of the script.\r\n\t *\r\n\t * @return {Node} The default node output.\r\n\t */\r\n\tgetDefaultOutputNode() {\r\n\r\n\t\tconst output = this.getDefaultOutput().value;\r\n\r\n\t\tif ( output && output.isNode ) {\r\n\r\n\t\t\treturn output;\r\n\r\n\t\t}\r\n\r\n\t\treturn float();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns default output of the script.\r\n\t *\r\n\t * @return {ScriptableValueNode} The default output.\r\n\t */\r\n\tgetDefaultOutput()\t{\r\n\r\n\t\treturn this._exec()._output;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a function created from the node's script.\r\n\t *\r\n\t * @return {Function} The function representing the node's code.\r\n\t */\r\n\tgetMethod() {\r\n\r\n\t\tif ( this.needsUpdate ) this.dispose();\r\n\t\tif ( this._method !== null ) return this._method;\r\n\r\n\t\t//\r\n\r\n\t\tconst parametersProps = [ 'parameters', 'local', 'global', 'refresh', 'setOutput', 'THREE', 'TSL' ];\r\n\t\tconst interfaceProps = [ 'layout', 'init', 'main', 'dispose' ];\r\n\r\n\t\tconst properties = interfaceProps.join( ', ' );\r\n\t\tconst declarations = 'var ' + properties + '; var output = {};\\n';\r\n\t\tconst returns = '\\nreturn { ...output, ' + properties + ' };';\r\n\r\n\t\tconst code = declarations + this.codeNode.code + returns;\r\n\r\n\t\t//\r\n\r\n\t\tthis._method = new Function( ...parametersProps, code );\r\n\r\n\t\treturn this._method;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees all internal resources.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tif ( this._method === null ) return;\r\n\r\n\t\tif ( this._object && typeof this._object.dispose === 'function' ) {\r\n\r\n\t\t\tthis._object.dispose();\r\n\r\n\t\t}\r\n\r\n\t\tthis._method = null;\r\n\t\tthis._object = null;\r\n\t\tthis._source = null;\r\n\t\tthis._value = null;\r\n\t\tthis._needsOutputUpdate = true;\r\n\t\tthis._output.value = null;\r\n\t\tthis._outputs = {};\r\n\r\n\t}\r\n\r\n\tsetup() {\r\n\r\n\t\treturn this.getDefaultOutputNode();\r\n\r\n\t}\r\n\r\n\tgetCacheKey( force ) {\r\n\r\n\t\tconst values = [ hashString( this.source ), this.getDefaultOutputNode().getCacheKey( force ) ];\r\n\r\n\t\tfor ( const param in this.parameters ) {\r\n\r\n\t\t\tvalues.push( this.parameters[ param ].getCacheKey( force ) );\r\n\r\n\t\t}\r\n\r\n\t\treturn hashArray( values );\r\n\r\n\t}\r\n\r\n\tset needsUpdate( value ) {\r\n\r\n\t\tif ( value === true ) this.dispose();\r\n\r\n\t}\r\n\r\n\tget needsUpdate() {\r\n\r\n\t\treturn this.source !== this._source;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Executes the `main` function of the script.\r\n\t *\r\n\t * @private\r\n\t * @return {ScriptableNode} A reference to this node.\r\n\t */\r\n\t_exec()\t{\r\n\r\n\t\tif ( this.codeNode === null ) return this;\r\n\r\n\t\tif ( this._needsOutputUpdate === true ) {\r\n\r\n\t\t\tthis._value = this.call( 'main' );\r\n\r\n\t\t\tthis._needsOutputUpdate = false;\r\n\r\n\t\t}\r\n\r\n\t\tthis._output.value = this._value;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Executes the refresh.\r\n\t *\r\n\t * @private\r\n\t */\r\n\t_refresh() {\r\n\r\n\t\tthis.needsUpdate = true;\r\n\r\n\t\tthis._exec();\r\n\r\n\t\tthis._output.refresh();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ScriptableNode;\r\n\r\n/**\r\n * TSL function for creating a scriptable node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {CodeNode} [codeNode] - The code node.\r\n * @param {?Object} [parameters={}] - The parameters definition.\r\n * @returns {ScriptableNode}\r\n */\r\nexport const scriptable = /*@__PURE__*/ nodeProxy( ScriptableNode ).setParameterLength( 1, 2 );\r\n", "import { positionView } from '../accessors/Position.js';\r\nimport { smoothstep } from '../math/MathNode.js';\r\nimport { Fn, output, vec4 } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * Returns a node that represents the `z` coordinate in view space\r\n * for the current fragment. It's a different representation of the\r\n * default depth value.\r\n *\r\n * This value can be part of a computation that defines how the fog\r\n * density increases when moving away from the camera.\r\n *\r\n * @param {NodeBuilder} builder - The current node builder.\r\n * @return {Node} The viewZ node.\r\n */\r\nfunction getViewZNode( builder ) {\r\n\r\n\tlet viewZ;\r\n\r\n\tconst getViewZ = builder.context.getViewZ;\r\n\r\n\tif ( getViewZ !== undefined ) {\r\n\r\n\t\tviewZ = getViewZ( this );\r\n\r\n\t}\r\n\r\n\treturn ( viewZ || positionView.z ).negate();\r\n\r\n}\r\n\r\n/**\r\n * Constructs a new range factor node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} near - Defines the near value.\r\n * @param {Node} far - Defines the far value.\r\n */\r\nexport const rangeFogFactor = Fn( ( [ near, far ], builder ) => {\r\n\r\n\tconst viewZ = getViewZNode( builder );\r\n\r\n\treturn smoothstep( near, far, viewZ );\r\n\r\n} );\r\n\r\n/**\r\n * Represents an exponential squared fog. This type of fog gives\r\n * a clear view near the camera and a faster than exponentially\r\n * densening fog farther from the camera.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} density - Defines the fog density.\r\n */\r\nexport const densityFogFactor = Fn( ( [ density ], builder ) => {\r\n\r\n\tconst viewZ = getViewZNode( builder );\r\n\r\n\treturn density.mul( density, viewZ, viewZ ).negate().exp().oneMinus();\r\n\r\n} );\r\n\r\n/**\r\n * This class can be used to configure a fog for the scene.\r\n * Nodes of this type are assigned to `Scene.fogNode`.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} color - Defines the color of the fog.\r\n * @param {Node} factor - Defines how the fog is factored in the scene.\r\n */\r\nexport const fog = Fn( ( [ color, factor ] ) => {\r\n\r\n\treturn vec4( factor.toFloat().mix( output.rgb, color.toVec3() ), output.a );\r\n\r\n} );\r\n\r\n// Deprecated\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r171. Use `fog( color, rangeFogFactor( near, far ) )` instead.\r\n *\r\n * @param {Node} color\r\n * @param {Node} near\r\n * @param {Node} far\r\n * @returns {Function}\r\n */\r\nexport function rangeFog( color, near, far ) { // @deprecated, r171\r\n\r\n\tconsole.warn( 'THREE.TSL: \"rangeFog( color, near, far )\" is deprecated. Use \"fog( color, rangeFogFactor( near, far ) )\" instead.' );\r\n\treturn fog( color, rangeFogFactor( near, far ) );\r\n\r\n}\r\n\r\n/**\r\n * @tsl\r\n * @function\r\n * @deprecated since r171. Use `fog( color, densityFogFactor( density ) )` instead.\r\n *\r\n * @param {Node} color\r\n * @param {Node} density\r\n * @returns {Function}\r\n */\r\nexport function densityFog( color, density ) { // @deprecated, r171\r\n\r\n\tconsole.warn( 'THREE.TSL: \"densityFog( color, density )\" is deprecated. Use \"fog( color, densityFogFactor( density ) )\" instead.' );\r\n\treturn fog( color, densityFogFactor( density ) );\r\n\r\n}\r\n", "import Node from '../core/Node.js';\r\nimport { getValueType } from '../core/NodeUtils.js';\r\nimport { buffer } from '../accessors/BufferNode.js';\r\nimport { instancedBufferAttribute } from '../accessors/BufferAttributeNode.js';\r\nimport { instanceIndex } from '../core/IndexNode.js';\r\nimport { nodeProxy, float } from '../tsl/TSLBase.js';\r\n\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { MathUtils } from '../../math/MathUtils.js';\r\nimport { InstancedBufferAttribute } from '../../core/InstancedBufferAttribute.js';\r\n\r\nlet min = null;\r\nlet max = null;\r\n\r\n/**\r\n * `RangeNode` generates random instanced attribute data in a defined range.\r\n * An exemplary use case for this utility node is to generate random per-instance\r\n * colors:\r\n * ```js\r\n * const material = new MeshBasicNodeMaterial();\r\n * material.colorNode = range( new Color( 0x000000 ), new Color( 0xFFFFFF ) );\r\n * const mesh = new InstancedMesh( geometry, material, count );\r\n * ```\r\n * @augments Node\r\n */\r\nclass RangeNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'RangeNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new range node.\r\n\t *\r\n\t * @param {Node<any>} [minNode=float()] - A node defining the lower bound of the range.\r\n\t * @param {Node<any>} [maxNode=float()] - A node defining the upper bound of the range.\r\n\t */\r\n\tconstructor( minNode = float(), maxNode = float() ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t *  A node defining the lower bound of the range.\r\n\t\t *\r\n\t\t * @type {Node<any>}\r\n\t\t * @default float()\r\n\t\t */\r\n\t\tthis.minNode = minNode;\r\n\r\n\t\t/**\r\n\t\t *  A node defining the upper bound of the range.\r\n\t\t *\r\n\t\t * @type {Node<any>}\r\n\t\t * @default float()\r\n\t\t */\r\n\t\tthis.maxNode = maxNode;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the vector length which is computed based on the range definition.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {number} The vector length.\r\n\t */\r\n\tgetVectorLength( builder ) {\r\n\r\n\t\tconst minLength = builder.getTypeLength( getValueType( this.minNode.value ) );\r\n\t\tconst maxLength = builder.getTypeLength( getValueType( this.maxNode.value ) );\r\n\r\n\t\treturn minLength > maxLength ? minLength : maxLength;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is inferred from range definition.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn builder.object.count > 1 ? builder.getTypeFromLength( this.getVectorLength( builder ) ) : 'float';\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tconst object = builder.object;\r\n\r\n\t\tlet output = null;\r\n\r\n\t\tif ( object.count > 1 ) {\r\n\r\n\t\t\tconst minValue = this.minNode.value;\r\n\t\t\tconst maxValue = this.maxNode.value;\r\n\r\n\t\t\tconst minLength = builder.getTypeLength( getValueType( minValue ) );\r\n\t\t\tconst maxLength = builder.getTypeLength( getValueType( maxValue ) );\r\n\r\n\t\t\tmin = min || new Vector4();\r\n\t\t\tmax = max || new Vector4();\r\n\r\n\t\t\tmin.setScalar( 0 );\r\n\t\t\tmax.setScalar( 0 );\r\n\r\n\t\t\tif ( minLength === 1 ) min.setScalar( minValue );\r\n\t\t\telse if ( minValue.isColor ) min.set( minValue.r, minValue.g, minValue.b, 1 );\r\n\t\t\telse min.set( minValue.x, minValue.y, minValue.z || 0, minValue.w || 0 );\r\n\r\n\t\t\tif ( maxLength === 1 ) max.setScalar( maxValue );\r\n\t\t\telse if ( maxValue.isColor ) max.set( maxValue.r, maxValue.g, maxValue.b, 1 );\r\n\t\t\telse max.set( maxValue.x, maxValue.y, maxValue.z || 0, maxValue.w || 0 );\r\n\r\n\t\t\tconst stride = 4;\r\n\r\n\t\t\tconst length = stride * object.count;\r\n\t\t\tconst array = new Float32Array( length );\r\n\r\n\t\t\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\t\t\tconst index = i % stride;\r\n\r\n\t\t\t\tconst minElementValue = min.getComponent( index );\r\n\t\t\t\tconst maxElementValue = max.getComponent( index );\r\n\r\n\t\t\t\tarray[ i ] = MathUtils.lerp( minElementValue, maxElementValue, Math.random() );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\t\tif ( object.count <= 4096 ) {\r\n\r\n\t\t\t\toutput = buffer( array, 'vec4', object.count ).element( instanceIndex ).convert( nodeType );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\t// TODO: Improve anonymous buffer attribute creation removing this part\r\n\t\t\t\tconst bufferAttribute = new InstancedBufferAttribute( array, 4 );\r\n\t\t\t\tbuilder.geometry.setAttribute( '__range' + this.id, bufferAttribute );\r\n\r\n\t\t\t\toutput = instancedBufferAttribute( bufferAttribute ).convert( nodeType );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\toutput = float( 0 );\r\n\r\n\t\t}\r\n\r\n\t\treturn output;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default RangeNode;\r\n\r\n/**\r\n * TSL function for creating a range node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<any>} [minNode=float()] - A node defining the lower bound of the range.\r\n * @param {Node<any>} [maxNode=float()] - A node defining the upper bound of the range.\r\n * @returns {RangeNode}\r\n */\r\nexport const range = /*@__PURE__*/ nodeProxy( RangeNode ).setParameterLength( 2 );\r\n", "import Node from '../core/Node.js';\r\nimport { nodeObject } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * `ComputeBuiltinNode` represents a compute-scope builtin value that expose information\r\n * about the currently running dispatch and/or the device it is running on.\r\n *\r\n * This node can only be used with a WebGPU backend.\r\n *\r\n * @augments Node\r\n */\r\nclass ComputeBuiltinNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ComputeBuiltinNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new compute builtin node.\r\n\t *\r\n\t * @param {string} builtinName - The built-in name.\r\n\t * @param {string} nodeType - The node type.\r\n\t */\r\n\tconstructor( builtinName, nodeType ) {\r\n\r\n\t\tsuper( nodeType );\r\n\r\n\t\t/**\r\n\t\t * The built-in name.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis._builtinName = builtinName;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since hash is derived from the built-in name.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The hash.\r\n\t */\r\n\tgetHash( builder ) {\r\n\r\n\t\treturn this.getBuiltinName( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This method is overwritten since the node type is simply derived from `nodeType`..\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( /*builder*/ ) {\r\n\r\n\t\treturn this.nodeType;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the builtin name.\r\n\t *\r\n\t * @param {string} builtinName - The built-in name.\r\n\t * @return {ComputeBuiltinNode} A reference to this node.\r\n\t */\r\n\tsetBuiltinName( builtinName ) {\r\n\r\n\t\tthis._builtinName = builtinName;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the builtin name.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The builtin name.\r\n\t */\r\n\tgetBuiltinName( /*builder*/ ) {\r\n\r\n\t\treturn this._builtinName;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Whether the current node builder has the builtin or not.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {boolean} Whether the builder has the builtin or not.\r\n\t */\r\n\thasBuiltin( builder ) {\r\n\r\n\t\treturn builder.hasBuiltin( this._builtinName );\r\n\r\n\t}\r\n\r\n\tgenerate( builder, output ) {\r\n\r\n\t\tconst builtinName = this.getBuiltinName( builder );\r\n\t\tconst nodeType = this.getNodeType( builder );\r\n\r\n\t\tif ( builder.shaderStage === 'compute' ) {\r\n\r\n\t\t\treturn builder.format( builtinName, nodeType, output );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.warn( `ComputeBuiltinNode: Compute built-in value ${builtinName} can not be accessed in the ${builder.shaderStage} stage` );\r\n\t\t\treturn builder.generateConst( nodeType );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tserialize( data ) {\r\n\r\n\t\tsuper.serialize( data );\r\n\r\n\t\tdata.global = this.global;\r\n\t\tdata._builtinName = this._builtinName;\r\n\r\n\t}\r\n\r\n\tdeserialize( data ) {\r\n\r\n\t\tsuper.deserialize( data );\r\n\r\n\t\tthis.global = data.global;\r\n\t\tthis._builtinName = data._builtinName;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ComputeBuiltinNode;\r\n\r\n/**\r\n * TSL function for creating a compute builtin node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} name - The built-in name.\r\n * @param {string} nodeType - The node type.\r\n * @returns {ComputeBuiltinNode}\r\n */\r\nconst computeBuiltin = ( name, nodeType ) => nodeObject( new ComputeBuiltinNode( name, nodeType ) );\r\n\r\n/**\r\n * Represents the number of workgroups dispatched by the compute shader.\r\n * ```js\r\n * // Run 512 invocations/threads with a workgroup size of 128.\r\n * const computeFn = Fn(() => {\r\n *\r\n *     // numWorkgroups.x = 4\r\n *     storageBuffer.element(0).assign(numWorkgroups.x)\r\n *\r\n * })().compute(512, [128]);\r\n *\r\n * // Run 512 invocations/threads with the default workgroup size of 64.\r\n * const computeFn = Fn(() => {\r\n *\r\n *     // numWorkgroups.x = 8\r\n *     storageBuffer.element(0).assign(numWorkgroups.x)\r\n *\r\n * })().compute(512);\r\n * ```\r\n *\r\n * @tsl\r\n * @type {ComputeBuiltinNode<uvec3>}\r\n */\r\nexport const numWorkgroups = /*@__PURE__*/ computeBuiltin( 'numWorkgroups', 'uvec3' );\r\n\r\n/**\r\n * Represents the 3-dimensional index of the workgroup the current compute invocation belongs to.\r\n * ```js\r\n * // Execute 12 compute threads with a workgroup size of 3.\r\n * const computeFn = Fn( () => {\r\n *\r\n * \tIf( workgroupId.x.mod( 2 ).equal( 0 ), () => {\r\n *\r\n * \t\tstorageBuffer.element( instanceIndex ).assign( instanceIndex );\r\n *\r\n * \t} ).Else( () => {\r\n *\r\n * \t\tstorageBuffer.element( instanceIndex ).assign( 0 );\r\n *\r\n * \t} );\r\n *\r\n * } )().compute( 12, [ 3 ] );\r\n *\r\n * // workgroupId.x =  [0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3];\r\n * // Buffer Output =  [0, 1, 2, 0, 0, 0, 6, 7, 8, 0, 0, 0];\r\n * ```\r\n *\r\n * @tsl\r\n * @type {ComputeBuiltinNode<uvec3>}\r\n */\r\nexport const workgroupId = /*@__PURE__*/ computeBuiltin( 'workgroupId', 'uvec3' );\r\n\r\n/**\r\n * A non-linearized 3-dimensional representation of the current invocation's position within a 3D global grid.\r\n *\r\n * @tsl\r\n * @type {ComputeBuiltinNode<uvec3>}\r\n */\r\nexport const globalId = /*@__PURE__*/ computeBuiltin( 'globalId', 'uvec3' );\r\n/**\r\n * A non-linearized 3-dimensional representation of the current invocation's position within a 3D workgroup grid.\r\n *\r\n * @tsl\r\n * @type {ComputeBuiltinNode<uvec3>}\r\n */\r\nexport const localId = /*@__PURE__*/ computeBuiltin( 'localId', 'uvec3' );\r\n\r\n/**\r\n * A device dependent variable that exposes the size of the current invocation's subgroup.\r\n *\r\n * @tsl\r\n * @type {ComputeBuiltinNode<uint>}\r\n */\r\nexport const subgroupSize = /*@__PURE__*/ computeBuiltin( 'subgroupSize', 'uint' );\r\n\r\n", "import Node from '../core/Node.js';\r\nimport { nodeProxy } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * Represents a GPU control barrier that synchronizes compute operations within a given scope.\r\n *\r\n * This node can only be used with a WebGPU backend.\r\n *\r\n * @augments Node\r\n */\r\nclass BarrierNode extends Node {\r\n\r\n\t/**\r\n\t * Constructs a new barrier node.\r\n\t *\r\n\t * @param {string} scope - The scope defines the behavior of the node.\r\n\t */\r\n\tconstructor( scope ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.scope = scope;\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst { scope } = this;\r\n\t\tconst { renderer } = builder;\r\n\r\n\t\tif ( renderer.backend.isWebGLBackend === true ) {\r\n\r\n\t\t\tbuilder.addFlowCode( `\\t// ${scope}Barrier \\n` );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbuilder.addLineFlowCode( `${scope}Barrier()`, this );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default BarrierNode;\r\n\r\n/**\r\n * TSL function for creating a barrier node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} scope - The scope defines the behavior of the node..\r\n * @returns {BarrierNode}\r\n */\r\nconst barrier = nodeProxy( BarrierNode );\r\n\r\n/**\r\n * TSL function for creating a workgroup barrier. All compute shader\r\n * invocations must wait for each invocation within a workgroup to\r\n * complete before the barrier can be surpassed.\r\n *\r\n * @tsl\r\n * @function\r\n * @returns {BarrierNode}\r\n */\r\nexport const workgroupBarrier = () => barrier( 'workgroup' ).toStack();\r\n\r\n/**\r\n * TSL function for creating a storage barrier. All invocations must\r\n * wait for each access to variables within the 'storage' address space\r\n * to complete before the barrier can be passed.\r\n *\r\n * @tsl\r\n * @function\r\n * @returns {BarrierNode}\r\n */\r\nexport const storageBarrier = () => barrier( 'storage' ).toStack();\r\n\r\n/**\r\n * TSL function for creating a texture barrier. All invocations must\r\n * wait for each access to variables within the 'texture' address space\r\n * to complete before the barrier can be passed.\r\n *\r\n * @tsl\r\n * @function\r\n * @returns {BarrierNode}\r\n */\r\nexport const textureBarrier = () => barrier( 'texture' ).toStack();\r\n\r\n", "import Node from '../core/Node.js';\r\nimport { expression } from '../code/ExpressionNode.js';\r\nimport { nodeProxy } from '../tsl/TSLCore.js';\r\n\r\n/**\r\n * `AtomicFunctionNode` represents any function that can operate on atomic variable types\r\n * within a shader. In an atomic function, any modification to an atomic variable will\r\n * occur as an indivisible step with a defined order relative to other modifications.\r\n * Accordingly, even if multiple atomic functions are modifying an atomic variable at once\r\n * atomic operations will not interfere with each other.\r\n *\r\n * This node can only be used with a WebGPU backend.\r\n *\r\n * @augments Node\r\n */\r\nclass AtomicFunctionNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'AtomicFunctionNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new atomic function node.\r\n\t *\r\n\t * @param {string} method - The signature of the atomic function to construct.\r\n\t * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n\t * @param {Node} valueNode - The value that mutates the atomic variable.\r\n\t */\r\n\tconstructor( method, pointerNode, valueNode ) {\r\n\r\n\t\tsuper( 'uint' );\r\n\r\n\t\t/**\r\n\t\t * The signature of the atomic function to construct.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t */\r\n\t\tthis.method = method;\r\n\r\n\t\t/**\r\n\t\t * An atomic variable or element of an atomic buffer.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.pointerNode = pointerNode;\r\n\r\n\t\t/**\r\n\t\t * A value that modifies the atomic variable.\r\n\t\t *\r\n\t\t * @type {Node}\r\n\t\t */\r\n\t\tthis.valueNode = valueNode;\r\n\r\n\t\t/**\r\n\t\t * Creates a list of the parents for this node for detecting if the node needs to return a value.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.parents = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation to return the type of\r\n\t * the pointer node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The input type.\r\n\t */\r\n\tgetInputType( builder ) {\r\n\r\n\t\treturn this.pointerNode.getNodeType( builder );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwritten since the node type is inferred from the input type.\r\n\t *\r\n\t * @param {NodeBuilder} builder - The current node builder.\r\n\t * @return {string} The node type.\r\n\t */\r\n\tgetNodeType( builder ) {\r\n\r\n\t\treturn this.getInputType( builder );\r\n\r\n\t}\r\n\r\n\tgenerate( builder ) {\r\n\r\n\t\tconst properties = builder.getNodeProperties( this );\r\n\t\tconst parents = properties.parents;\r\n\r\n\t\tconst method = this.method;\r\n\r\n\t\tconst type = this.getNodeType( builder );\r\n\t\tconst inputType = this.getInputType( builder );\r\n\r\n\t\tconst a = this.pointerNode;\r\n\t\tconst b = this.valueNode;\r\n\r\n\t\tconst params = [];\r\n\r\n\t\tparams.push( `&${ a.build( builder, inputType ) }` );\r\n\r\n\t\tif ( b !== null ) {\r\n\r\n\t\t\tparams.push( b.build( builder, inputType ) );\r\n\r\n\r\n\t\t}\r\n\r\n\t\tconst methodSnippet = `${ builder.getMethod( method, type ) }( ${ params.join( ', ' ) } )`;\r\n\t\tconst isVoid = parents.length === 1 && parents[ 0 ].isStackNode === true;\r\n\r\n\t\tif ( isVoid ) {\r\n\r\n\t\t\tbuilder.addLineFlowCode( methodSnippet, this );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( properties.constNode === undefined ) {\r\n\r\n\t\t\t\tproperties.constNode = expression( methodSnippet, type ).toConst();\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn properties.constNode.build( builder );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nAtomicFunctionNode.ATOMIC_LOAD = 'atomicLoad';\r\nAtomicFunctionNode.ATOMIC_STORE = 'atomicStore';\r\nAtomicFunctionNode.ATOMIC_ADD = 'atomicAdd';\r\nAtomicFunctionNode.ATOMIC_SUB = 'atomicSub';\r\nAtomicFunctionNode.ATOMIC_MAX = 'atomicMax';\r\nAtomicFunctionNode.ATOMIC_MIN = 'atomicMin';\r\nAtomicFunctionNode.ATOMIC_AND = 'atomicAnd';\r\nAtomicFunctionNode.ATOMIC_OR = 'atomicOr';\r\nAtomicFunctionNode.ATOMIC_XOR = 'atomicXor';\r\n\r\nexport default AtomicFunctionNode;\r\n\r\n/**\r\n * TSL function for creating an atomic function node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} method - The signature of the atomic function to construct.\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @param {Node} valueNode - The value that mutates the atomic variable.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nconst atomicNode = nodeProxy( AtomicFunctionNode );\r\n\r\n/**\r\n * TSL function for appending an atomic function call into the programmatic flow of a compute shader.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {string} method - The signature of the atomic function to construct.\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @param {Node} valueNode - The value that mutates the atomic variable.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const atomicFunc = ( method, pointerNode, valueNode ) => {\r\n\r\n\treturn atomicNode( method, pointerNode, valueNode ).toStack();\r\n\r\n};\r\n\r\n/**\r\n * Loads the value stored in the atomic variable.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const atomicLoad = ( pointerNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_LOAD, pointerNode, null );\r\n\r\n/**\r\n * Stores a value in the atomic variable.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @param {Node} valueNode - The value that mutates the atomic variable.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const atomicStore = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_STORE, pointerNode, valueNode );\r\n\r\n/**\r\n * Increments the value stored in the atomic variable.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @param {Node} valueNode - The value that mutates the atomic variable.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const atomicAdd = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_ADD, pointerNode, valueNode );\r\n\r\n/**\r\n * Decrements the value stored in the atomic variable.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @param {Node} valueNode - The value that mutates the atomic variable.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const atomicSub = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_SUB, pointerNode, valueNode );\r\n\r\n/**\r\n * Stores in an atomic variable the maximum between its current value and a parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @param {Node} valueNode - The value that mutates the atomic variable.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const atomicMax = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_MAX, pointerNode, valueNode );\r\n\r\n/**\r\n * Stores in an atomic variable the minimum between its current value and a parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @param {Node} valueNode - The value that mutates the atomic variable.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const atomicMin = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_MIN, pointerNode, valueNode );\r\n\r\n/**\r\n * Stores in an atomic variable the bitwise AND of its value with a parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @param {Node} valueNode - The value that mutates the atomic variable.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const atomicAnd = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_AND, pointerNode, valueNode );\r\n\r\n/**\r\n * Stores in an atomic variable the bitwise OR of its value with a parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @param {Node} valueNode - The value that mutates the atomic variable.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const atomicOr = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_OR, pointerNode, valueNode );\r\n\r\n/**\r\n * Stores in an atomic variable the bitwise XOR of its value with a parameter.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node} pointerNode - An atomic variable or element of an atomic buffer.\r\n * @param {Node} valueNode - The value that mutates the atomic variable.\r\n * @returns {AtomicFunctionNode}\r\n */\r\nexport const atomicXor = ( pointerNode, valueNode ) => atomicFunc( AtomicFunctionNode.ATOMIC_XOR, pointerNode, valueNode );\r\n", "import Node from '../core/Node.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { property } from '../tsl/TSLBase.js';\r\nimport { positionWorld } from '../accessors/Position.js';\r\n\r\n/**\r\n * Base class for all shadow nodes.\r\n *\r\n * Shadow nodes encapsulate shadow related logic and are always coupled to lighting nodes.\r\n * Lighting nodes might share the same shadow node type or use specific ones depending on\r\n * their requirements.\r\n *\r\n * @augments Node\r\n */\r\nclass ShadowBaseNode extends Node {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ShadowBaseNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new shadow base node.\r\n\t *\r\n\t * @param {Light} light - The shadow casting light.\r\n\t */\r\n\tconstructor( light ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The shadow casting light.\r\n\t\t *\r\n\t\t * @type {Light}\r\n\t\t */\r\n\t\tthis.light = light;\r\n\r\n\t\t/**\r\n\t\t * Overwritten since shadows are updated by default per render.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'render'\r\n\t\t */\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isShadowBaseNode = true;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the shadow position node which is by default the predefined TSL node object `shadowPositionWorld`.\r\n\t *\r\n\t * @param {NodeBuilder} object - A configuration object that must at least hold a material reference.\r\n\t */\r\n\tsetupShadowPosition( { context, material } ) {\r\n\r\n\t\t// Use assign inside an Fn()\r\n\r\n\t\tshadowPositionWorld.assign( material.receivedShadowPositionNode || context.shadowPositionWorld || positionWorld );\r\n\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * TSL object that represents the vertex position in world space during the shadow pass.\r\n *\r\n * @tsl\r\n * @type {Node<vec3>}\r\n */\r\nexport const shadowPositionWorld = /*@__PURE__*/ property( 'vec3', 'shadowPositionWorld' );\r\n\r\nexport default ShadowBaseNode;\r\n", "import { float, vec2, vec4, If, Fn } from '../tsl/TSLBase.js';\r\nimport { reference } from '../accessors/ReferenceNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { mix, fract, step, max, clamp } from '../math/MathNode.js';\r\nimport { add, sub } from '../math/OperatorNode.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\nimport { objectPosition } from '../accessors/Object3DNode.js';\r\nimport { positionWorld } from '../accessors/Position.js';\r\n\r\nconst shadowMaterialLib = /*@__PURE__*/ new WeakMap();\r\n\r\n/**\r\n * A shadow filtering function performing basic filtering. This is in fact an unfiltered version of the shadow map\r\n * with a binary `[0,1]` result.\r\n *\r\n * @method\r\n * @param {Object} inputs - The input parameter object.\r\n * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\r\n * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\r\n * @return {Node<float>} The filtering result.\r\n */\r\nexport const BasicShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, shadowCoord, depthLayer } ) => {\r\n\r\n\tlet basic = texture( depthTexture, shadowCoord.xy ).label( 't_basic' );\r\n\r\n\tif ( depthTexture.isArrayTexture ) {\r\n\r\n\t\tbasic = basic.depth( depthLayer );\r\n\r\n\t}\r\n\r\n\treturn basic.compare( shadowCoord.z );\r\n\r\n} );\r\n\r\n/**\r\n * A shadow filtering function performing PCF filtering.\r\n *\r\n * @method\r\n * @param {Object} inputs - The input parameter object.\r\n * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\r\n * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\r\n * @param {LightShadow} inputs.shadow - The light shadow.\r\n * @return {Node<float>} The filtering result.\r\n */\r\nexport const PCFShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, shadowCoord, shadow, depthLayer } ) => {\r\n\r\n\tconst depthCompare = ( uv, compare ) => {\r\n\r\n\t\tlet depth = texture( depthTexture, uv );\r\n\r\n\t\tif ( depthTexture.isArrayTexture ) {\r\n\r\n\t\t\tdepth = depth.depth( depthLayer );\r\n\r\n\t\t}\r\n\r\n\t\treturn depth.compare( compare );\r\n\r\n\t};\r\n\r\n\tconst mapSize = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\r\n\tconst radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );\r\n\r\n\tconst texelSize = vec2( 1 ).div( mapSize );\r\n\tconst dx0 = texelSize.x.negate().mul( radius );\r\n\tconst dy0 = texelSize.y.negate().mul( radius );\r\n\tconst dx1 = texelSize.x.mul( radius );\r\n\tconst dy1 = texelSize.y.mul( radius );\r\n\tconst dx2 = dx0.div( 2 );\r\n\tconst dy2 = dy0.div( 2 );\r\n\tconst dx3 = dx1.div( 2 );\r\n\tconst dy3 = dy1.div( 2 );\r\n\r\n\treturn add(\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, dy0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, dy0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, dy2 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy2 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, dy2 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy, shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx2, dy3 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy3 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx3, dy3 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx0, dy1 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( 0, dy1 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( shadowCoord.xy.add( vec2( dx1, dy1 ) ), shadowCoord.z )\r\n\t).mul( 1 / 17 );\r\n\r\n} );\r\n\r\n/**\r\n * A shadow filtering function performing PCF soft filtering.\r\n *\r\n * @method\r\n * @param {Object} inputs - The input parameter object.\r\n * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\r\n * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\r\n * @param {LightShadow} inputs.shadow - The light shadow.\r\n * @return {Node<float>} The filtering result.\r\n */\r\nexport const PCFSoftShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, shadowCoord, shadow, depthLayer } ) => {\r\n\r\n\tconst depthCompare = ( uv, compare ) => {\r\n\r\n\t\tlet depth = texture( depthTexture, uv );\r\n\r\n\t\tif ( depthTexture.isArrayTexture ) {\r\n\r\n\t\t\tdepth = depth.depth( depthLayer );\r\n\r\n\t\t}\r\n\r\n\t\treturn depth.compare( compare );\r\n\r\n\t};\r\n\r\n\r\n\tconst mapSize = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\r\n\r\n\tconst texelSize = vec2( 1 ).div( mapSize );\r\n\tconst dx = texelSize.x;\r\n\tconst dy = texelSize.y;\r\n\r\n\tconst uv = shadowCoord.xy;\r\n\tconst f = fract( uv.mul( mapSize ).add( 0.5 ) );\r\n\tuv.subAssign( f.mul( texelSize ) );\r\n\r\n\treturn add(\r\n\t\tdepthCompare( uv, shadowCoord.z ),\r\n\t\tdepthCompare( uv.add( vec2( dx, 0 ) ), shadowCoord.z ),\r\n\t\tdepthCompare( uv.add( vec2( 0, dy ) ), shadowCoord.z ),\r\n\t\tdepthCompare( uv.add( texelSize ), shadowCoord.z ),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( dx.negate(), 0 ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), 0 ) ), shadowCoord.z ),\r\n\t\t\tf.x\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy ) ), shadowCoord.z ),\r\n\t\t\tf.x\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( 0, dy.negate() ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( 0, dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\tf.y\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tdepthCompare( uv.add( vec2( dx, dy.negate() ) ), shadowCoord.z ),\r\n\t\t\tdepthCompare( uv.add( vec2( dx, dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\tf.y\r\n\t\t),\r\n\t\tmix(\r\n\t\t\tmix(\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy.negate() ) ), shadowCoord.z ),\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy.negate() ) ), shadowCoord.z ),\r\n\t\t\t\tf.x\r\n\t\t\t),\r\n\t\t\tmix(\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.negate(), dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\t\tdepthCompare( uv.add( vec2( dx.mul( 2 ), dy.mul( 2 ) ) ), shadowCoord.z ),\r\n\t\t\t\tf.x\r\n\t\t\t),\r\n\t\t\tf.y\r\n\t\t)\r\n\t).mul( 1 / 9 );\r\n\r\n} );\r\n\r\n/**\r\n * A shadow filtering function performing VSM filtering.\r\n *\r\n * @method\r\n * @param {Object} inputs - The input parameter object.\r\n * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\r\n * @param {Node<vec3>} inputs.shadowCoord - The shadow coordinates.\r\n * @return {Node<float>} The filtering result.\r\n */\r\nexport const VSMShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, shadowCoord, depthLayer } ) => {\r\n\r\n\tconst occlusion = float( 1 ).toVar();\r\n\r\n\tlet distribution = texture( depthTexture ).sample( shadowCoord.xy );\r\n\r\n\tif ( depthTexture.isArrayTexture ) {\r\n\r\n\t\tdistribution = distribution.depth( depthLayer );\r\n\r\n\t}\r\n\r\n\tdistribution = distribution.rg;\r\n\r\n\tconst hardShadow = step( shadowCoord.z, distribution.x );\r\n\r\n\tIf( hardShadow.notEqual( float( 1.0 ) ), () => {\r\n\r\n\t\tconst distance = shadowCoord.z.sub( distribution.x );\r\n\t\tconst variance = max( 0, distribution.y.mul( distribution.y ) );\r\n\t\tlet softnessProbability = variance.div( variance.add( distance.mul( distance ) ) ); // Chebeyshevs inequality\r\n\t\tsoftnessProbability = clamp( sub( softnessProbability, 0.3 ).div( 0.95 - 0.3 ) );\r\n\t\tocclusion.assign( clamp( max( hardShadow, softnessProbability ) ) );\r\n\r\n\t} );\r\n\r\n\treturn occlusion;\r\n\r\n} );\r\n\r\n//\r\n\r\nconst linearDistance = /*@__PURE__*/ Fn( ( [ position, cameraNear, cameraFar ] ) => {\r\n\r\n\tlet dist = positionWorld.sub( position ).length();\r\n\tdist = dist.sub( cameraNear ).div( cameraFar.sub( cameraNear ) );\r\n\tdist = dist.saturate(); // clamp to [ 0, 1 ]\r\n\r\n\treturn dist;\r\n\r\n} );\r\n\r\nconst linearShadowDistance = ( light ) => {\r\n\r\n\tconst camera = light.shadow.camera;\r\n\r\n\tconst nearDistance = reference( 'near', 'float', camera ).setGroup( renderGroup );\r\n\tconst farDistance = reference( 'far', 'float', camera ).setGroup( renderGroup );\r\n\r\n\tconst referencePosition = objectPosition( light );\r\n\r\n\treturn linearDistance( referencePosition, nearDistance, farDistance );\r\n\r\n};\r\n\r\n/**\r\n * Retrieves or creates a shadow material for the given light source.\r\n *\r\n * This function checks if a shadow material already exists for the provided light.\r\n * If not, it creates a new `NodeMaterial` configured for shadow rendering and stores it\r\n * in the `shadowMaterialLib` for future use.\r\n *\r\n * @param {Light} light - The light source for which the shadow material is needed.\r\n *                         If the light is a point light, a depth node is calculated\r\n *                         using the linear shadow distance.\r\n * @returns {NodeMaterial} The shadow material associated with the given light.\r\n */\r\nexport const getShadowMaterial = ( light ) => {\r\n\r\n\tlet material = shadowMaterialLib.get( light );\r\n\r\n\tif ( material === undefined ) {\r\n\r\n\t\tconst depthNode = light.isPointLight ? linearShadowDistance( light ) : null;\r\n\r\n\t\tmaterial = new NodeMaterial();\r\n\t\tmaterial.colorNode = vec4( 0, 0, 0, 1 );\r\n\t\tmaterial.depthNode = depthNode;\r\n\t\tmaterial.isShadowPassMaterial = true; // Use to avoid other overrideMaterial override material.colorNode unintentionally when using material.shadowNode\r\n\t\tmaterial.name = 'ShadowMaterial';\r\n\t\tmaterial.fog = false;\r\n\r\n\t\tshadowMaterialLib.set( light, material );\r\n\r\n\t}\r\n\r\n\treturn material;\r\n\r\n};\r\n", "/**\r\n * Data structure for the renderer. It allows defining values\r\n * with chained, hierarchical keys. Keys are meant to be\r\n * objects since the module internally works with Weak Maps\r\n * for performance reasons.\r\n *\r\n * @private\r\n */\r\nclass ChainMap {\r\n\r\n\t/**\r\n\t * Constructs a new Chain Map.\r\n\t */\r\n\tconstructor() {\r\n\r\n\t\t/**\r\n\t\t * The root Weak Map.\r\n\t\t *\r\n\t\t * @type {WeakMap}\r\n\t\t */\r\n\t\tthis.weakMap = new WeakMap();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the value for the given array of keys.\r\n\t *\r\n\t * @param {Array<Object>} keys - List of keys.\r\n\t * @return {any} The value. Returns `undefined` if no value was found.\r\n\t */\r\n\tget( keys ) {\r\n\r\n\t\tlet map = this.weakMap;\r\n\r\n\t\tfor ( let i = 0; i < keys.length - 1; i ++ ) {\r\n\r\n\t\t\tmap = map.get( keys[ i ] );\r\n\r\n\t\t\tif ( map === undefined ) return undefined;\r\n\r\n\t\t}\r\n\r\n\t\treturn map.get( keys[ keys.length - 1 ] );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the value for the given keys.\r\n\t *\r\n\t * @param {Array<Object>} keys - List of keys.\r\n\t * @param {any} value - The value to set.\r\n\t * @return {ChainMap} A reference to this Chain Map.\r\n\t */\r\n\tset( keys, value ) {\r\n\r\n\t\tlet map = this.weakMap;\r\n\r\n\t\tfor ( let i = 0; i < keys.length - 1; i ++ ) {\r\n\r\n\t\t\tconst key = keys[ i ];\r\n\r\n\t\t\tif ( map.has( key ) === false ) map.set( key, new WeakMap() );\r\n\r\n\t\t\tmap = map.get( key );\r\n\r\n\t\t}\r\n\r\n\t\tmap.set( keys[ keys.length - 1 ], value );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Deletes a value for the given keys.\r\n\t *\r\n\t * @param {Array<Object>} keys - The keys.\r\n\t * @return {boolean} Returns `true` if the value has been removed successfully and `false` if the value has not be found.\r\n\t */\r\n\tdelete( keys ) {\r\n\r\n\t\tlet map = this.weakMap;\r\n\r\n\t\tfor ( let i = 0; i < keys.length - 1; i ++ ) {\r\n\r\n\t\t\tmap = map.get( keys[ i ] );\r\n\r\n\t\t\tif ( map === undefined ) return false;\r\n\r\n\t\t}\r\n\r\n\t\treturn map.delete( keys[ keys.length - 1 ] );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ChainMap;\r\n", "import ShadowBaseNode, { shadowPositionWorld } from './ShadowBaseNode.js';\r\nimport { float, vec2, vec3, int, Fn, nodeObject } from '../tsl/TSLBase.js';\r\nimport { reference } from '../accessors/ReferenceNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { normalWorld } from '../accessors/Normal.js';\r\nimport { mix, sqrt } from '../math/MathNode.js';\r\nimport { add } from '../math/OperatorNode.js';\r\nimport { DepthTexture } from '../../textures/DepthTexture.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\nimport QuadMesh from '../../renderers/common/QuadMesh.js';\r\nimport { Loop } from '../utils/LoopNode.js';\r\nimport { screenCoordinate } from '../display/ScreenNode.js';\r\nimport { HalfFloatType, LessCompare, RGFormat, VSMShadowMap, WebGPUCoordinateSystem } from '../../constants.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\nimport { viewZToLogarithmicDepth } from '../display/ViewportDepthNode.js';\r\nimport { lightShadowMatrix } from '../accessors/Lights.js';\r\nimport { resetRendererAndSceneState, restoreRendererAndSceneState } from '../../renderers/common/RendererUtils.js';\r\nimport { getDataFromObject } from '../core/NodeUtils.js';\r\nimport { getShadowMaterial, BasicShadowFilter, PCFShadowFilter, PCFSoftShadowFilter, VSMShadowFilter } from './ShadowFilterNode.js';\r\nimport ChainMap from '../../renderers/common/ChainMap.js';\r\n\r\n//\r\n\r\nconst _shadowRenderObjectLibrary = /*@__PURE__*/ new ChainMap();\r\nconst _shadowRenderObjectKeys = [];\r\n\r\n/**\r\n * Creates a function to render shadow objects in a scene.\r\n *\r\n * @param {Renderer} renderer - The renderer.\r\n * @param {LightShadow} shadow - The light shadow object containing shadow properties.\r\n * @param {number} shadowType - The type of shadow map (e.g., BasicShadowMap).\r\n * @param {boolean} useVelocity - Whether to use velocity data for rendering.\r\n * @return {Function} A function that renders shadow objects.\r\n *\r\n * The returned function has the following parameters:\r\n * @param {Object3D} object - The 3D object to render.\r\n * @param {Scene} scene - The scene containing the object.\r\n * @param {Camera} _camera - The camera used for rendering.\r\n * @param {BufferGeometry} geometry - The geometry of the object.\r\n * @param {Material} material - The material of the object.\r\n * @param {Group} group - The group the object belongs to.\r\n * @param {...any} params - Additional parameters for rendering.\r\n */\r\nexport const getShadowRenderObjectFunction = ( renderer, shadow, shadowType, useVelocity ) => {\r\n\r\n\t_shadowRenderObjectKeys[ 0 ] = renderer;\r\n\t_shadowRenderObjectKeys[ 1 ] = shadow;\r\n\r\n\tlet renderObjectFunction = _shadowRenderObjectLibrary.get( _shadowRenderObjectKeys );\r\n\r\n\tif ( renderObjectFunction === undefined || ( renderObjectFunction.shadowType !== shadowType || renderObjectFunction.useVelocity !== useVelocity ) ) {\r\n\r\n\t\trenderObjectFunction = ( object, scene, _camera, geometry, material, group, ...params ) => {\r\n\r\n\t\t\tif ( object.castShadow === true || ( object.receiveShadow && shadowType === VSMShadowMap ) ) {\r\n\r\n\t\t\t\tif ( useVelocity ) {\r\n\r\n\t\t\t\t\tgetDataFromObject( object ).useVelocity = true;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tobject.onBeforeShadow( renderer, object, _camera, shadow.camera, geometry, scene.overrideMaterial, group );\r\n\r\n\t\t\t\trenderer.renderObject( object, scene, _camera, geometry, material, group, ...params );\r\n\r\n\t\t\t\tobject.onAfterShadow( renderer, object, _camera, shadow.camera, geometry, scene.overrideMaterial, group );\r\n\r\n\t\t\t}\r\n\r\n\t\t};\r\n\r\n\t\trenderObjectFunction.shadowType = shadowType;\r\n\t\trenderObjectFunction.useVelocity = useVelocity;\r\n\r\n\t\t_shadowRenderObjectLibrary.set( _shadowRenderObjectKeys, renderObjectFunction );\r\n\r\n\t}\r\n\r\n\t_shadowRenderObjectKeys[ 0 ] = null;\r\n\t_shadowRenderObjectKeys[ 1 ] = null;\r\n\r\n\treturn renderObjectFunction;\r\n\r\n};\r\n\r\n/**\r\n * Represents the shader code for the first VSM render pass.\r\n *\r\n * @method\r\n * @param {Object} inputs - The input parameter object.\r\n * @param {Node<float>} inputs.samples - The number of samples\r\n * @param {Node<float>} inputs.radius - The radius.\r\n * @param {Node<float>} inputs.size - The size.\r\n * @param {TextureNode} inputs.shadowPass - A reference to the render target's depth data.\r\n * @return {Node<vec2>} The VSM output.\r\n */\r\nconst VSMPassVertical = /*@__PURE__*/ Fn( ( { samples, radius, size, shadowPass, depthLayer } ) => {\r\n\r\n\tconst mean = float( 0 ).toVar( 'meanVertical' );\r\n\tconst squaredMean = float( 0 ).toVar( 'squareMeanVertical' );\r\n\r\n\tconst uvStride = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( 2 ).div( samples.sub( 1 ) ) );\r\n\tconst uvStart = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( - 1 ) );\r\n\r\n\tLoop( { start: int( 0 ), end: int( samples ), type: 'int', condition: '<' }, ( { i } ) => {\r\n\r\n\t\tconst uvOffset = uvStart.add( float( i ).mul( uvStride ) );\r\n\r\n\t\tlet depth = shadowPass.sample( add( screenCoordinate.xy, vec2( 0, uvOffset ).mul( radius ) ).div( size ) );\r\n\r\n\t\tif ( shadowPass.value.isArrayTexture ) {\r\n\r\n\t\t\tdepth = depth.depth( depthLayer );\r\n\r\n\t\t}\r\n\r\n\t\tdepth = depth.x;\r\n\r\n\t\tmean.addAssign( depth );\r\n\t\tsquaredMean.addAssign( depth.mul( depth ) );\r\n\r\n\t} );\r\n\r\n\tmean.divAssign( samples );\r\n\tsquaredMean.divAssign( samples );\r\n\r\n\tconst std_dev = sqrt( squaredMean.sub( mean.mul( mean ) ) );\r\n\treturn vec2( mean, std_dev );\r\n\r\n} );\r\n\r\n/**\r\n * Represents the shader code for the second VSM render pass.\r\n *\r\n * @method\r\n * @param {Object} inputs - The input parameter object.\r\n * @param {Node<float>} inputs.samples - The number of samples\r\n * @param {Node<float>} inputs.radius - The radius.\r\n * @param {Node<float>} inputs.size - The size.\r\n * @param {TextureNode} inputs.shadowPass - The result of the first VSM render pass.\r\n * @return {Node<vec2>} The VSM output.\r\n */\r\nconst VSMPassHorizontal = /*@__PURE__*/ Fn( ( { samples, radius, size, shadowPass, depthLayer } ) => {\r\n\r\n\tconst mean = float( 0 ).toVar( 'meanHorizontal' );\r\n\tconst squaredMean = float( 0 ).toVar( 'squareMeanHorizontal' );\r\n\r\n\tconst uvStride = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( 2 ).div( samples.sub( 1 ) ) );\r\n\tconst uvStart = samples.lessThanEqual( float( 1 ) ).select( float( 0 ), float( - 1 ) );\r\n\r\n\tLoop( { start: int( 0 ), end: int( samples ), type: 'int', condition: '<' }, ( { i } ) => {\r\n\r\n\t\tconst uvOffset = uvStart.add( float( i ).mul( uvStride ) );\r\n\r\n\t\tlet distribution = shadowPass.sample( add( screenCoordinate.xy, vec2( uvOffset, 0 ).mul( radius ) ).div( size ) );\r\n\r\n\t\tif ( shadowPass.value.isArrayTexture ) {\r\n\r\n\t\t\tdistribution = distribution.depth( depthLayer );\r\n\r\n\t\t}\r\n\r\n\t\tmean.addAssign( distribution.x );\r\n\t\tsquaredMean.addAssign( add( distribution.y.mul( distribution.y ), distribution.x.mul( distribution.x ) ) );\r\n\r\n\t} );\r\n\r\n\tmean.divAssign( samples );\r\n\tsquaredMean.divAssign( samples );\r\n\r\n\tconst std_dev = sqrt( squaredMean.sub( mean.mul( mean ) ) );\r\n\treturn vec2( mean, std_dev );\r\n\r\n} );\r\n\r\nconst _shadowFilterLib = [ BasicShadowFilter, PCFShadowFilter, PCFSoftShadowFilter, VSMShadowFilter ];\r\n\r\n//\r\n\r\nlet _rendererState;\r\nconst _quadMesh = /*@__PURE__*/ new QuadMesh();\r\n\r\n/**\r\n * Represents the default shadow implementation for lighting nodes.\r\n *\r\n * @augments ShadowBaseNode\r\n */\r\nclass ShadowNode extends ShadowBaseNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'ShadowNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new shadow node.\r\n\t *\r\n\t * @param {Light} light - The shadow casting light.\r\n\t * @param {?LightShadow} [shadow=null] - An optional light shadow.\r\n\t */\r\n\tconstructor( light, shadow = null ) {\r\n\r\n\t\tsuper( light );\r\n\r\n\t\t/**\r\n\t\t * The light shadow which defines the properties light's\r\n\t\t * shadow.\r\n\t\t *\r\n\t\t * @type {?LightShadow}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.shadow = shadow || light.shadow;\r\n\r\n\t\t/**\r\n\t\t * A reference to the shadow map which is a render target.\r\n\t\t *\r\n\t\t * @type {?RenderTarget}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.shadowMap = null;\r\n\r\n\t\t/**\r\n\t\t * Only relevant for VSM shadows. Render target for the\r\n\t\t * first VSM render pass.\r\n\t\t *\r\n\t\t * @type {?RenderTarget}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.vsmShadowMapVertical = null;\r\n\r\n\t\t/**\r\n\t\t * Only relevant for VSM shadows. Render target for the\r\n\t\t * second VSM render pass.\r\n\t\t *\r\n\t\t * @type {?RenderTarget}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.vsmShadowMapHorizontal = null;\r\n\r\n\t\t/**\r\n\t\t * Only relevant for VSM shadows. Node material which\r\n\t\t * is used to render the first VSM pass.\r\n\t\t *\r\n\t\t * @type {?NodeMaterial}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.vsmMaterialVertical = null;\r\n\r\n\t\t/**\r\n\t\t * Only relevant for VSM shadows. Node material which\r\n\t\t * is used to render the second VSM pass.\r\n\t\t *\r\n\t\t * @type {?NodeMaterial}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.vsmMaterialHorizontal = null;\r\n\r\n\t\t/**\r\n\t\t * A reference to the output node which defines the\r\n\t\t * final result of this shadow node.\r\n\t\t *\r\n\t\t * @type {?Node}\r\n\t\t * @private\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._node = null;\r\n\r\n\t\tthis._cameraFrameId = new WeakMap();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isShadowNode = true;\r\n\r\n\t\t/**\r\n\t\t * This index can be used when overriding setupRenderTarget with a RenderTarget Array to specify the depth layer.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.depthLayer = 0;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the shadow filtering.\r\n\t *\r\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\r\n\t * @param {Object} inputs - A configuration object that defines the shadow filtering.\r\n\t * @param {Function} inputs.filterFn - This function defines the filtering type of the shadow map e.g. PCF.\r\n\t * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\r\n\t * @param {Node<vec3>} inputs.shadowCoord - Shadow coordinates which are used to sample from the shadow map.\r\n\t * @param {LightShadow} inputs.shadow - The light shadow.\r\n\t * @return {Node<float>} The result node of the shadow filtering.\r\n\t */\r\n\tsetupShadowFilter( builder, { filterFn, depthTexture, shadowCoord, shadow, depthLayer } ) {\r\n\r\n\t\tconst frustumTest = shadowCoord.x.greaterThanEqual( 0 )\r\n\t\t\t.and( shadowCoord.x.lessThanEqual( 1 ) )\r\n\t\t\t.and( shadowCoord.y.greaterThanEqual( 0 ) )\r\n\t\t\t.and( shadowCoord.y.lessThanEqual( 1 ) )\r\n\t\t\t.and( shadowCoord.z.lessThanEqual( 1 ) );\r\n\r\n\t\tconst shadowNode = filterFn( { depthTexture, shadowCoord, shadow, depthLayer } );\r\n\r\n\t\treturn frustumTest.select( shadowNode, float( 1 ) );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the shadow coordinates.\r\n\t *\r\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\r\n\t * @param {Node<vec3>} shadowPosition - A node representing the shadow position.\r\n\t * @return {Node<vec3>} The shadow coordinates.\r\n\t */\r\n\tsetupShadowCoord( builder, shadowPosition ) {\r\n\r\n\t\tconst { shadow } = this;\r\n\t\tconst { renderer } = builder;\r\n\r\n\t\tconst bias = reference( 'bias', 'float', shadow ).setGroup( renderGroup );\r\n\r\n\t\tlet shadowCoord = shadowPosition;\r\n\t\tlet coordZ;\r\n\r\n\t\tif ( shadow.camera.isOrthographicCamera || renderer.logarithmicDepthBuffer !== true ) {\r\n\r\n\t\t\tshadowCoord = shadowCoord.xyz.div( shadowCoord.w );\r\n\r\n\t\t\tcoordZ = shadowCoord.z;\r\n\r\n\t\t\tif ( renderer.coordinateSystem === WebGPUCoordinateSystem ) {\r\n\r\n\t\t\t\tcoordZ = coordZ.mul( 2 ).sub( 1 ); // WebGPU: Conversion [ 0, 1 ] to [ - 1, 1 ]\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconst w = shadowCoord.w;\r\n\t\t\tshadowCoord = shadowCoord.xy.div( w ); // <-- Only divide X/Y coords since we don't need Z\r\n\r\n\t\t\t// The normally available \"cameraNear\" and \"cameraFar\" nodes cannot be used here because they do not get\r\n\t\t\t// updated to use the shadow camera. So, we have to declare our own \"local\" ones here.\r\n\t\t\t// TODO: How do we get the cameraNear/cameraFar nodes to use the shadow camera so we don't have to declare local ones here?\r\n\t\t\tconst cameraNearLocal = reference( 'near', 'float', shadow.camera ).setGroup( renderGroup );\r\n\t\t\tconst cameraFarLocal = reference( 'far', 'float', shadow.camera ).setGroup( renderGroup );\r\n\r\n\t\t\tcoordZ = viewZToLogarithmicDepth( w.negate(), cameraNearLocal, cameraFarLocal );\r\n\r\n\t\t}\r\n\r\n\t\tshadowCoord = vec3(\r\n\t\t\tshadowCoord.x,\r\n\t\t\tshadowCoord.y.oneMinus(), // follow webgpu standards\r\n\t\t\tcoordZ.add( bias )\r\n\t\t);\r\n\r\n\t\treturn shadowCoord;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the shadow filtering function for the given shadow type.\r\n\t *\r\n\t * @param {number} type - The shadow type.\r\n\t * @return {Function} The filtering function.\r\n\t */\r\n\tgetShadowFilterFn( type ) {\r\n\r\n\t\treturn _shadowFilterLib[ type ];\r\n\r\n\t}\r\n\r\n\r\n\tsetupRenderTarget( shadow, builder ) {\r\n\r\n\t\tconst depthTexture = new DepthTexture( shadow.mapSize.width, shadow.mapSize.height );\r\n\t\tdepthTexture.name = 'ShadowDepthTexture';\r\n\t\tdepthTexture.compareFunction = LessCompare;\r\n\r\n\t\tconst shadowMap = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height );\r\n\t\tshadowMap.texture.name = 'ShadowMap';\r\n\t\tshadowMap.texture.type = shadow.mapType;\r\n\t\tshadowMap.depthTexture = depthTexture;\r\n\r\n\t\treturn { shadowMap, depthTexture };\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Setups the shadow output node.\r\n\t *\r\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\r\n\t * @return {Node<vec3>} The shadow output node.\r\n\t */\r\n\tsetupShadow( builder ) {\r\n\r\n\t\tconst { renderer } = builder;\r\n\r\n\t\tconst { light, shadow } = this;\r\n\r\n\t\tconst shadowMapType = renderer.shadowMap.type;\r\n\r\n\t\tconst { depthTexture, shadowMap } = this.setupRenderTarget( shadow, builder );\r\n\r\n\t\tshadow.camera.updateProjectionMatrix();\r\n\r\n\t\t// VSM\r\n\r\n\t\tif ( shadowMapType === VSMShadowMap && shadow.isPointLightShadow !== true ) {\r\n\r\n\t\t\tdepthTexture.compareFunction = null; // VSM does not use textureSampleCompare()/texture2DCompare()\r\n\r\n\t\t\tif ( shadowMap.depth > 1 ) {\r\n\r\n\t\t\t\tif ( ! shadowMap._vsmShadowMapVertical ) {\r\n\r\n\t\t\t\t\tshadowMap._vsmShadowMapVertical = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType, depth: shadowMap.depth, depthBuffer: false } );\r\n\t\t\t\t\tshadowMap._vsmShadowMapVertical.texture.name = 'VSMVertical';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.vsmShadowMapVertical = shadowMap._vsmShadowMapVertical;\r\n\r\n\t\t\t\tif ( ! shadowMap._vsmShadowMapHorizontal ) {\r\n\r\n\t\t\t\t\tshadowMap._vsmShadowMapHorizontal = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType, depth: shadowMap.depth, depthBuffer: false } );\r\n\t\t\t\t\tshadowMap._vsmShadowMapHorizontal.texture.name = 'VSMHorizontal';\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tthis.vsmShadowMapHorizontal = shadowMap._vsmShadowMapHorizontal;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tthis.vsmShadowMapVertical = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType, depthBuffer: false } );\r\n\t\t\t\tthis.vsmShadowMapHorizontal = builder.createRenderTarget( shadow.mapSize.width, shadow.mapSize.height, { format: RGFormat, type: HalfFloatType, depthBuffer: false } );\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t\tlet shadowPassVertical = texture( depthTexture );\r\n\r\n\t\t\tif ( depthTexture.isArrayTexture ) {\r\n\r\n\t\t\t\tshadowPassVertical = shadowPassVertical.depth( this.depthLayer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tlet shadowPassHorizontal = texture( this.vsmShadowMapVertical.texture );\r\n\r\n\t\t\tif ( depthTexture.isArrayTexture ) {\r\n\r\n\t\t\t\tshadowPassHorizontal = shadowPassHorizontal.depth( this.depthLayer );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst samples = reference( 'blurSamples', 'float', shadow ).setGroup( renderGroup );\r\n\t\t\tconst radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );\r\n\t\t\tconst size = reference( 'mapSize', 'vec2', shadow ).setGroup( renderGroup );\r\n\r\n\t\t\tlet material = this.vsmMaterialVertical || ( this.vsmMaterialVertical = new NodeMaterial() );\r\n\t\t\tmaterial.fragmentNode = VSMPassVertical( { samples, radius, size, shadowPass: shadowPassVertical, depthLayer: this.depthLayer } ).context( builder.getSharedContext() );\r\n\t\t\tmaterial.name = 'VSMVertical';\r\n\r\n\t\t\tmaterial = this.vsmMaterialHorizontal || ( this.vsmMaterialHorizontal = new NodeMaterial() );\r\n\t\t\tmaterial.fragmentNode = VSMPassHorizontal( { samples, radius, size, shadowPass: shadowPassHorizontal, depthLayer: this.depthLayer } ).context( builder.getSharedContext() );\r\n\t\t\tmaterial.name = 'VSMHorizontal';\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst shadowIntensity = reference( 'intensity', 'float', shadow ).setGroup( renderGroup );\r\n\t\tconst normalBias = reference( 'normalBias', 'float', shadow ).setGroup( renderGroup );\r\n\r\n\t\tconst shadowPosition = lightShadowMatrix( light ).mul( shadowPositionWorld.add( normalWorld.mul( normalBias ) ) );\r\n\t\tconst shadowCoord = this.setupShadowCoord( builder, shadowPosition );\r\n\r\n\t\t//\r\n\r\n\t\tconst filterFn = shadow.filterNode || this.getShadowFilterFn( renderer.shadowMap.type ) || null;\r\n\r\n\t\tif ( filterFn === null ) {\r\n\r\n\t\t\tthrow new Error( 'THREE.WebGPURenderer: Shadow map type not supported yet.' );\r\n\r\n\t\t}\r\n\r\n\t\tconst shadowDepthTexture = ( shadowMapType === VSMShadowMap && shadow.isPointLightShadow !== true ) ? this.vsmShadowMapHorizontal.texture : depthTexture;\r\n\r\n\t\tconst shadowNode = this.setupShadowFilter( builder, { filterFn, shadowTexture: shadowMap.texture, depthTexture: shadowDepthTexture, shadowCoord, shadow, depthLayer: this.depthLayer } );\r\n\r\n\t\tlet shadowColor = texture( shadowMap.texture, shadowCoord );\r\n\r\n\t\tif ( depthTexture.isArrayTexture ) {\r\n\r\n\t\t\tshadowColor = shadowColor.depth( this.depthLayer );\r\n\r\n\t\t}\r\n\r\n\t\tconst shadowOutput = mix( 1, shadowNode.rgb.mix( shadowColor, 1 ), shadowIntensity.mul( shadowColor.a ) ).toVar();\r\n\r\n\t\tthis.shadowMap = shadowMap;\r\n\t\tthis.shadow.map = shadowMap;\r\n\r\n\t\treturn shadowOutput;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The implementation performs the setup of the output node. An output is only\r\n\t * produces if shadow mapping is globally enabled in the renderer.\r\n\t *\r\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\r\n\t * @return {ShaderCallNodeInternal} The output node.\r\n\t */\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( builder.renderer.shadowMap.enabled === false ) return;\r\n\r\n\t\treturn Fn( () => {\r\n\r\n\t\t\tlet node = this._node;\r\n\r\n\t\t\tthis.setupShadowPosition( builder );\r\n\r\n\t\t\tif ( node === null ) {\r\n\r\n\t\t\t\tthis._node = node = this.setupShadow( builder );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( builder.material.shadowNode ) { // @deprecated, r171\r\n\r\n\t\t\t\tconsole.warn( 'THREE.NodeMaterial: \".shadowNode\" is deprecated. Use \".castShadowNode\" instead.' );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( builder.material.receivedShadowNode ) {\r\n\r\n\t\t\t\tnode = builder.material.receivedShadowNode( node );\r\n\r\n\t\t\t}\r\n\r\n\t\t\treturn node;\r\n\r\n\t\t} )();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the shadow. The logic of this function could be included\r\n\t * into {@link ShadowNode#updateShadow} however more specialized shadow\r\n\t * nodes might require a custom shadow map rendering. By having a\r\n\t * dedicated method, it's easier to overwrite the default behavior.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\trenderShadow( frame ) {\r\n\r\n\t\tconst { shadow, shadowMap, light } = this;\r\n\t\tconst { renderer, scene } = frame;\r\n\r\n\t\tshadow.updateMatrices( light );\r\n\r\n\t\tshadowMap.setSize( shadow.mapSize.width, shadow.mapSize.height, shadowMap.depth );\r\n\r\n\t\trenderer.render( scene, shadow.camera );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the shadow.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\tupdateShadow( frame ) {\r\n\r\n\t\tconst { shadowMap, light, shadow } = this;\r\n\t\tconst { renderer, scene, camera } = frame;\r\n\r\n\t\tconst shadowType = renderer.shadowMap.type;\r\n\r\n\t\tconst depthVersion = shadowMap.depthTexture.version;\r\n\t\tthis._depthVersionCached = depthVersion;\r\n\r\n\t\tconst _shadowCameraLayer = shadow.camera.layers.mask;\r\n\r\n\t\tif ( ( shadow.camera.layers.mask & 0xFFFFFFFE ) === 0 ) {\r\n\r\n\t\t\tshadow.camera.layers.mask = camera.layers.mask;\r\n\r\n\t\t}\r\n\r\n\t\tconst currentRenderObjectFunction = renderer.getRenderObjectFunction();\r\n\r\n\t\tconst currentMRT = renderer.getMRT();\r\n\t\tconst useVelocity = currentMRT ? currentMRT.has( 'velocity' ) : false;\r\n\r\n\t\t_rendererState = resetRendererAndSceneState( renderer, scene, _rendererState );\r\n\r\n\t\tscene.overrideMaterial = getShadowMaterial( light );\r\n\r\n\t\trenderer.setRenderObjectFunction( getShadowRenderObjectFunction( renderer, shadow, shadowType, useVelocity ) );\r\n\r\n\t\trenderer.setClearColor( 0x000000, 0 );\r\n\r\n\t\trenderer.setRenderTarget( shadowMap );\r\n\r\n\t\tthis.renderShadow( frame );\r\n\r\n\t\trenderer.setRenderObjectFunction( currentRenderObjectFunction );\r\n\r\n\t\t// vsm blur pass\r\n\r\n\t\tif ( shadowType === VSMShadowMap && shadow.isPointLightShadow !== true ) {\r\n\r\n\t\t\tthis.vsmPass( renderer );\r\n\r\n\t\t}\r\n\r\n\t\tshadow.camera.layers.mask = _shadowCameraLayer;\r\n\r\n\t\trestoreRendererAndSceneState( renderer, scene, _rendererState );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * For VSM additional render passes are required.\r\n\t *\r\n\t * @param {Renderer} renderer - A reference to the current renderer.\r\n\t */\r\n\tvsmPass( renderer ) {\r\n\r\n\t\tconst { shadow } = this;\r\n\r\n\t\tconst depth = this.shadowMap.depth;\r\n\t\tthis.vsmShadowMapVertical.setSize( shadow.mapSize.width, shadow.mapSize.height, depth );\r\n\t\tthis.vsmShadowMapHorizontal.setSize( shadow.mapSize.width, shadow.mapSize.height, depth );\r\n\r\n\t\trenderer.setRenderTarget( this.vsmShadowMapVertical );\r\n\t\t_quadMesh.material = this.vsmMaterialVertical;\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t\trenderer.setRenderTarget( this.vsmShadowMapHorizontal );\r\n\t\t_quadMesh.material = this.vsmMaterialHorizontal;\r\n\t\t_quadMesh.render( renderer );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Frees the internal resources of this shadow node.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis.shadowMap.dispose();\r\n\t\tthis.shadowMap = null;\r\n\r\n\t\tif ( this.vsmShadowMapVertical !== null ) {\r\n\r\n\t\t\tthis.vsmShadowMapVertical.dispose();\r\n\t\t\tthis.vsmShadowMapVertical = null;\r\n\r\n\t\t\tthis.vsmMaterialVertical.dispose();\r\n\t\t\tthis.vsmMaterialVertical = null;\r\n\r\n\t\t}\r\n\r\n\t\tif ( this.vsmShadowMapHorizontal !== null ) {\r\n\r\n\t\t\tthis.vsmShadowMapHorizontal.dispose();\r\n\t\t\tthis.vsmShadowMapHorizontal = null;\r\n\r\n\t\t\tthis.vsmMaterialHorizontal.dispose();\r\n\t\t\tthis.vsmMaterialHorizontal = null;\r\n\r\n\t\t}\r\n\r\n\t\tsuper.dispose();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The implementation performs the update of the shadow map if necessary.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tconst { shadow } = this;\r\n\r\n\t\tlet needsUpdate = shadow.needsUpdate || shadow.autoUpdate;\r\n\r\n\t\tif ( needsUpdate ) {\r\n\r\n\t\t\tif ( this._cameraFrameId[ frame.camera ] === frame.frameId ) {\r\n\r\n\t\t\t\tneedsUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._cameraFrameId[ frame.camera ] = frame.frameId;\r\n\r\n\t\t}\r\n\r\n\t\tif ( needsUpdate ) {\r\n\r\n\t\t\tthis.updateShadow( frame );\r\n\r\n\t\t\tif ( this.shadowMap.depthTexture.version === this._depthVersionCached ) {\r\n\r\n\t\t\t\tshadow.needsUpdate = false;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default ShadowNode;\r\n\r\n/**\r\n * TSL function for creating an instance of `ShadowNode`.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Light} light - The shadow casting light.\r\n * @param {?LightShadow} [shadow] - The light shadow.\r\n * @return {ShadowNode} The created shadow node.\r\n */\r\nexport const shadow = ( light, shadow ) => nodeObject( new ShadowNode( light, shadow ) );\r\n", "import ShadowNode from './ShadowNode.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { float, vec2, If, Fn, nodeObject } from '../tsl/TSLBase.js';\r\nimport { reference } from '../accessors/ReferenceNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { max, abs, sign } from '../math/MathNode.js';\r\nimport { sub, div } from '../math/OperatorNode.js';\r\nimport { renderGroup } from '../core/UniformGroupNode.js';\r\nimport { Vector2 } from '../../math/Vector2.js';\r\nimport { Vector4 } from '../../math/Vector4.js';\r\nimport { Color } from '../../math/Color.js';\r\nimport { BasicShadowMap } from '../../constants.js';\r\n\r\nconst _clearColor = /*@__PURE__*/ new Color();\r\n\r\n// cubeToUV() maps a 3D direction vector suitable for cube texture mapping to a 2D\r\n// vector suitable for 2D texture mapping. This code uses the following layout for the\r\n// 2D texture:\r\n//\r\n// xzXZ\r\n//  y Y\r\n//\r\n// Y - Positive y direction\r\n// y - Negative y direction\r\n// X - Positive x direction\r\n// x - Negative x direction\r\n// Z - Positive z direction\r\n// z - Negative z direction\r\n//\r\n// Source and test bed:\r\n// https://gist.github.com/tschw/da10c43c467ce8afd0c4\r\n\r\nexport const cubeToUV = /*@__PURE__*/ Fn( ( [ pos, texelSizeY ] ) => {\r\n\r\n\tconst v = pos.toVar();\r\n\r\n\t// Number of texels to avoid at the edge of each square\r\n\r\n\tconst absV = abs( v );\r\n\r\n\t// Intersect unit cube\r\n\r\n\tconst scaleToCube = div( 1.0, max( absV.x, max( absV.y, absV.z ) ) );\r\n\tabsV.mulAssign( scaleToCube );\r\n\r\n\t// Apply scale to avoid seams\r\n\r\n\t// two texels less per square (one texel will do for NEAREST)\r\n\tv.mulAssign( scaleToCube.mul( texelSizeY.mul( 2 ).oneMinus() ) );\r\n\r\n\t// Unwrap\r\n\r\n\t// space: -1 ... 1 range for each square\r\n\t//\r\n\t// #X##\t\tdim    := ( 4 , 2 )\r\n\t//  # #\t\tcenter := ( 1 , 1 )\r\n\r\n\tconst planar = vec2( v.xy ).toVar();\r\n\r\n\tconst almostATexel = texelSizeY.mul( 1.5 );\r\n\tconst almostOne = almostATexel.oneMinus();\r\n\r\n\tIf( absV.z.greaterThanEqual( almostOne ), () => {\r\n\r\n\t\tIf( v.z.greaterThan( 0.0 ), () => {\r\n\r\n\t\t\tplanar.x.assign( sub( 4.0, v.x ) );\r\n\r\n\t\t} );\r\n\r\n\t} ).ElseIf( absV.x.greaterThanEqual( almostOne ), () => {\r\n\r\n\t\tconst signX = sign( v.x );\r\n\t\tplanar.x.assign( v.z.mul( signX ).add( signX.mul( 2.0 ) ) );\r\n\r\n\t} ).ElseIf( absV.y.greaterThanEqual( almostOne ), () => {\r\n\r\n\t\tconst signY = sign( v.y );\r\n\t\tplanar.x.assign( v.x.add( signY.mul( 2.0 ) ).add( 2.0 ) );\r\n\t\tplanar.y.assign( v.z.mul( signY ).sub( 2.0 ) );\r\n\r\n\t} );\r\n\r\n\t// Transform to UV space\r\n\r\n\t// scale := 0.5 / dim\r\n\t// translate := ( center + 0.5 ) / dim\r\n\treturn vec2( 0.125, 0.25 ).mul( planar ).add( vec2( 0.375, 0.75 ) ).flipY();\r\n\r\n} ).setLayout( {\r\n\tname: 'cubeToUV',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'pos', type: 'vec3' },\r\n\t\t{ name: 'texelSizeY', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const BasicPointShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, bd3D, dp, texelSize } ) => {\r\n\r\n\treturn texture( depthTexture, cubeToUV( bd3D, texelSize.y ) ).compare( dp );\r\n\r\n} );\r\n\r\nexport const PointShadowFilter = /*@__PURE__*/ Fn( ( { depthTexture, bd3D, dp, texelSize, shadow } ) => {\r\n\r\n\tconst radius = reference( 'radius', 'float', shadow ).setGroup( renderGroup );\r\n\tconst offset = vec2( - 1.0, 1.0 ).mul( radius ).mul( texelSize.y );\r\n\r\n\treturn texture( depthTexture, cubeToUV( bd3D.add( offset.xyy ), texelSize.y ) ).compare( dp )\r\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.yyy ), texelSize.y ) ).compare( dp ) )\r\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.xyx ), texelSize.y ) ).compare( dp ) )\r\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.yyx ), texelSize.y ) ).compare( dp ) )\r\n\t\t.add( texture( depthTexture, cubeToUV( bd3D, texelSize.y ) ).compare( dp ) )\r\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.xxy ), texelSize.y ) ).compare( dp ) )\r\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.yxy ), texelSize.y ) ).compare( dp ) )\r\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.xxx ), texelSize.y ) ).compare( dp ) )\r\n\t\t.add( texture( depthTexture, cubeToUV( bd3D.add( offset.yxx ), texelSize.y ) ).compare( dp ) )\r\n\t\t.mul( 1.0 / 9.0 );\r\n\r\n} );\r\n\r\nconst pointShadowFilter = /*@__PURE__*/ Fn( ( { filterFn, depthTexture, shadowCoord, shadow } ) => {\r\n\r\n\t// for point lights, the uniform @vShadowCoord is re-purposed to hold\r\n\t// the vector from the light to the world-space position of the fragment.\r\n\tconst lightToPosition = shadowCoord.xyz.toVar();\r\n\tconst lightToPositionLength = lightToPosition.length();\r\n\r\n\tconst cameraNearLocal = uniform( 'float' ).setGroup( renderGroup ).onRenderUpdate( () => shadow.camera.near );\r\n\tconst cameraFarLocal = uniform( 'float' ).setGroup( renderGroup ).onRenderUpdate( () => shadow.camera.far );\r\n\tconst bias = reference( 'bias', 'float', shadow ).setGroup( renderGroup );\r\n\tconst mapSize = uniform( shadow.mapSize ).setGroup( renderGroup );\r\n\r\n\tconst result = float( 1.0 ).toVar();\r\n\r\n\tIf( lightToPositionLength.sub( cameraFarLocal ).lessThanEqual( 0.0 ).and( lightToPositionLength.sub( cameraNearLocal ).greaterThanEqual( 0.0 ) ), () => {\r\n\r\n\t\t// dp = normalized distance from light to fragment position\r\n\t\tconst dp = lightToPositionLength.sub( cameraNearLocal ).div( cameraFarLocal.sub( cameraNearLocal ) ).toVar(); // need to clamp?\r\n\t\tdp.addAssign( bias );\r\n\r\n\t\t// bd3D = base direction 3D\r\n\t\tconst bd3D = lightToPosition.normalize();\r\n\t\tconst texelSize = vec2( 1.0 ).div( mapSize.mul( vec2( 4.0, 2.0 ) ) );\r\n\r\n\t\t// percentage-closer filtering\r\n\t\tresult.assign( filterFn( { depthTexture, bd3D, dp, texelSize, shadow } ) );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} );\r\n\r\nconst _viewport = /*@__PURE__*/ new Vector4();\r\nconst _viewportSize = /*@__PURE__*/ new Vector2();\r\nconst _shadowMapSize = /*@__PURE__*/ new Vector2();\r\n\r\n\r\n/**\r\n * Represents the shadow implementation for point light nodes.\r\n *\r\n * @augments ShadowNode\r\n */\r\nclass PointShadowNode extends ShadowNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PointShadowNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new point shadow node.\r\n\t *\r\n\t * @param {PointLight} light - The shadow casting point light.\r\n\t * @param {?PointLightShadow} [shadow=null] - An optional point light shadow.\r\n\t */\r\n\tconstructor( light, shadow = null ) {\r\n\r\n\t\tsuper( light, shadow );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation to return point light shadow specific\r\n\t * filtering functions.\r\n\t *\r\n\t * @param {number} type - The shadow type.\r\n\t * @return {Function} The filtering function.\r\n\t */\r\n\tgetShadowFilterFn( type ) {\r\n\r\n\t\treturn type === BasicShadowMap ? BasicPointShadowFilter : PointShadowFilter;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation so the unaltered shadow position is used.\r\n\t *\r\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\r\n\t * @param {Node<vec3>} shadowPosition - A node representing the shadow position.\r\n\t * @return {Node<vec3>} The shadow coordinates.\r\n\t */\r\n\tsetupShadowCoord( builder, shadowPosition ) {\r\n\r\n\t\treturn shadowPosition;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation to only use point light specific\r\n\t * shadow filter functions.\r\n\t *\r\n\t * @param {NodeBuilder} builder - A reference to the current node builder.\r\n\t * @param {Object} inputs - A configuration object that defines the shadow filtering.\r\n\t * @param {Function} inputs.filterFn - This function defines the filtering type of the shadow map e.g. PCF.\r\n\t * @param {Texture} inputs.shadowTexture - A reference to the shadow map's texture.\r\n\t * @param {DepthTexture} inputs.depthTexture - A reference to the shadow map's texture data.\r\n\t * @param {Node<vec3>} inputs.shadowCoord - Shadow coordinates which are used to sample from the shadow map.\r\n\t * @param {LightShadow} inputs.shadow - The light shadow.\r\n\t * @return {Node<float>} The result node of the shadow filtering.\r\n\t */\r\n\tsetupShadowFilter( builder, { filterFn, shadowTexture, depthTexture, shadowCoord, shadow } ) {\r\n\r\n\t\treturn pointShadowFilter( { filterFn, shadowTexture, depthTexture, shadowCoord, shadow } );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Overwrites the default implementation with point light specific\r\n\t * rendering code.\r\n\t *\r\n\t * @param {NodeFrame} frame - A reference to the current node frame.\r\n\t */\r\n\trenderShadow( frame ) {\r\n\r\n\t\tconst { shadow, shadowMap, light } = this;\r\n\t\tconst { renderer, scene } = frame;\r\n\r\n\t\tconst shadowFrameExtents = shadow.getFrameExtents();\r\n\r\n\t\t_shadowMapSize.copy( shadow.mapSize );\r\n\t\t_shadowMapSize.multiply( shadowFrameExtents );\r\n\r\n\t\tshadowMap.setSize( _shadowMapSize.width, _shadowMapSize.height );\r\n\r\n\t\t_viewportSize.copy( shadow.mapSize );\r\n\r\n\t\t//\r\n\r\n\t\tconst previousAutoClear = renderer.autoClear;\r\n\r\n\t\tconst previousClearColor = renderer.getClearColor( _clearColor );\r\n\t\tconst previousClearAlpha = renderer.getClearAlpha();\r\n\r\n\t\trenderer.autoClear = false;\r\n\t\trenderer.setClearColor( shadow.clearColor, shadow.clearAlpha );\r\n\t\trenderer.clear();\r\n\r\n\t\tconst viewportCount = shadow.getViewportCount();\r\n\r\n\t\tfor ( let vp = 0; vp < viewportCount; vp ++ ) {\r\n\r\n\t\t\tconst viewport = shadow.getViewport( vp );\r\n\r\n\t\t\tconst x = _viewportSize.x * viewport.x;\r\n\t\t\tconst y = _shadowMapSize.y - _viewportSize.y - ( _viewportSize.y * viewport.y );\r\n\r\n\t\t\t_viewport.set(\r\n\t\t\t\tx,\r\n\t\t\t\ty,\r\n\t\t\t\t_viewportSize.x * viewport.z,\r\n\t\t\t\t_viewportSize.y * viewport.w\r\n\t\t\t);\r\n\r\n\t\t\tshadowMap.viewport.copy( _viewport );\r\n\r\n\t\t\tshadow.updateMatrices( light, vp );\r\n\r\n\t\t\trenderer.render( scene, shadow.camera );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\trenderer.autoClear = previousAutoClear;\r\n\t\trenderer.setClearColor( previousClearColor, previousClearAlpha );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PointShadowNode;\r\n\r\n/**\r\n * TSL function for creating an instance of `PointShadowNode`.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {PointLight} light - The shadow casting point light.\r\n * @param {?PointLightShadow} [shadow=null] - An optional point light shadow.\r\n * @return {PointShadowNode} The created point shadow node.\r\n */\r\nexport const pointShadow = ( light, shadow ) => nodeObject( new PointShadowNode( light, shadow ) );\r\n", "import { Fn } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * Represents a `discard` shader operation in TSL.\r\n *\r\n * @method\r\n * @param {Object} inputs - The input parameter object.\r\n * @param {Node<float>} inputs.lightDistance - The distance of the light's position to the current fragment position.\r\n * @param {Node<float>} inputs.cutoffDistance - The light's cutoff distance.\r\n * @param {Node<float>} inputs.decayExponent - The light's decay exponent.\r\n * @return {Node<float>} The distance falloff.\r\n */\r\nexport const getDistanceAttenuation = /*@__PURE__*/ Fn( ( { lightDistance, cutoffDistance, decayExponent } ) => {\r\n\r\n\t// based upon Frostbite 3 Moving to Physically-based Rendering\r\n\t// page 32, equation 26: E[window1]\r\n\t// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\n\tconst distanceFalloff = lightDistance.pow( decayExponent ).max( 0.01 ).reciprocal();\r\n\r\n\treturn cutoffDistance.greaterThan( 0 ).select(\r\n\t\tdistanceFalloff.mul( lightDistance.div( cutoffDistance ).pow4().oneMinus().clamp().pow2() ),\r\n\t\tdistanceFalloff\r\n\t);\r\n\r\n} ); // validated\r\n", "import { Fn, int, float, vec2, vec3, vec4, If } from '../tsl/TSLBase.js';\r\nimport { cos, sin, abs, max, exp2, log2, clamp, fract, mix, floor, normalize, cross } from '../math/MathNode.js';\r\nimport { mul } from '../math/OperatorNode.js';\r\nimport { select } from '../math/ConditionalNode.js';\r\nimport { Loop, Break } from '../utils/LoopNode.js';\r\n\r\n// These defines must match with PMREMGenerator\r\n\r\nconst cubeUV_r0 = /*@__PURE__*/ float( 1.0 );\r\nconst cubeUV_m0 = /*@__PURE__*/ float( - 2.0 );\r\nconst cubeUV_r1 = /*@__PURE__*/ float( 0.8 );\r\nconst cubeUV_m1 = /*@__PURE__*/ float( - 1.0 );\r\nconst cubeUV_r4 = /*@__PURE__*/ float( 0.4 );\r\nconst cubeUV_m4 = /*@__PURE__*/ float( 2.0 );\r\nconst cubeUV_r5 = /*@__PURE__*/ float( 0.305 );\r\nconst cubeUV_m5 = /*@__PURE__*/ float( 3.0 );\r\nconst cubeUV_r6 = /*@__PURE__*/ float( 0.21 );\r\nconst cubeUV_m6 = /*@__PURE__*/ float( 4.0 );\r\n\r\nconst cubeUV_minMipLevel = /*@__PURE__*/ float( 4.0 );\r\nconst cubeUV_minTileSize = /*@__PURE__*/ float( 16.0 );\r\n\r\n// These shader functions convert between the UV coordinates of a single face of\r\n// a cubemap, the 0-5 integer index of a cube face, and the direction vector for\r\n// sampling a textureCube (not generally normalized ).\r\n\r\nconst getFace = /*@__PURE__*/ Fn( ( [ direction ] ) => {\r\n\r\n\tconst absDirection = vec3( abs( direction ) ).toVar();\r\n\tconst face = float( - 1.0 ).toVar();\r\n\r\n\tIf( absDirection.x.greaterThan( absDirection.z ), () => {\r\n\r\n\t\tIf( absDirection.x.greaterThan( absDirection.y ), () => {\r\n\r\n\t\t\tface.assign( select( direction.x.greaterThan( 0.0 ), 0.0, 3.0 ) );\r\n\r\n\t\t} ).Else( () => {\r\n\r\n\t\t\tface.assign( select( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );\r\n\r\n\t\t} );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tIf( absDirection.z.greaterThan( absDirection.y ), () => {\r\n\r\n\t\t\tface.assign( select( direction.z.greaterThan( 0.0 ), 2.0, 5.0 ) );\r\n\r\n\t\t} ).Else( () => {\r\n\r\n\t\t\tface.assign( select( direction.y.greaterThan( 0.0 ), 1.0, 4.0 ) );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\treturn face;\r\n\r\n} ).setLayout( {\r\n\tname: 'getFace',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'direction', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\n// RH coordinate system; PMREM face-indexing convention\r\nconst getUV = /*@__PURE__*/ Fn( ( [ direction, face ] ) => {\r\n\r\n\tconst uv = vec2().toVar();\r\n\r\n\tIf( face.equal( 0.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.z, direction.y ).div( abs( direction.x ) ) ); // pos x\r\n\r\n\t} ).ElseIf( face.equal( 1.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.x.negate(), direction.z.negate() ).div( abs( direction.y ) ) ); // pos y\r\n\r\n\t} ).ElseIf( face.equal( 2.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.x.negate(), direction.y ).div( abs( direction.z ) ) ); // pos z\r\n\r\n\t} ).ElseIf( face.equal( 3.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.z.negate(), direction.y ).div( abs( direction.x ) ) ); // neg x\r\n\r\n\t} ).ElseIf( face.equal( 4.0 ), () => {\r\n\r\n\t\tuv.assign( vec2( direction.x.negate(), direction.z ).div( abs( direction.y ) ) ); // neg y\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tuv.assign( vec2( direction.x, direction.y ).div( abs( direction.z ) ) ); // neg z\r\n\r\n\t} );\r\n\r\n\treturn mul( 0.5, uv.add( 1.0 ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'getUV',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'direction', type: 'vec3' },\r\n\t\t{ name: 'face', type: 'float' }\r\n\t]\r\n} );\r\n\r\nconst roughnessToMip = /*@__PURE__*/ Fn( ( [ roughness ] ) => {\r\n\r\n\tconst mip = float( 0.0 ).toVar();\r\n\r\n\tIf( roughness.greaterThanEqual( cubeUV_r1 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r0.sub( roughness ).mul( cubeUV_m1.sub( cubeUV_m0 ) ).div( cubeUV_r0.sub( cubeUV_r1 ) ).add( cubeUV_m0 ) );\r\n\r\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r4 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r1.sub( roughness ).mul( cubeUV_m4.sub( cubeUV_m1 ) ).div( cubeUV_r1.sub( cubeUV_r4 ) ).add( cubeUV_m1 ) );\r\n\r\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r5 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r4.sub( roughness ).mul( cubeUV_m5.sub( cubeUV_m4 ) ).div( cubeUV_r4.sub( cubeUV_r5 ) ).add( cubeUV_m4 ) );\r\n\r\n\t} ).ElseIf( roughness.greaterThanEqual( cubeUV_r6 ), () => {\r\n\r\n\t\tmip.assign( cubeUV_r5.sub( roughness ).mul( cubeUV_m6.sub( cubeUV_m5 ) ).div( cubeUV_r5.sub( cubeUV_r6 ) ).add( cubeUV_m5 ) );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tmip.assign( float( - 2.0 ).mul( log2( mul( 1.16, roughness ) ) ) ); // 1.16 = 1.79^0.25\r\n\r\n\t} );\r\n\r\n\treturn mip;\r\n\r\n} ).setLayout( {\r\n\tname: 'roughnessToMip',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'roughness', type: 'float' }\r\n\t]\r\n} );\r\n\r\n// RH coordinate system; PMREM face-indexing convention\r\nexport const getDirection = /*@__PURE__*/ Fn( ( [ uv_immutable, face ] ) => {\r\n\r\n\tconst uv = uv_immutable.toVar();\r\n\tuv.assign( mul( 2.0, uv ).sub( 1.0 ) );\r\n\tconst direction = vec3( uv, 1.0 ).toVar();\r\n\r\n\tIf( face.equal( 0.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.zyx ); // ( 1, v, u ) pos x\r\n\r\n\t} ).ElseIf( face.equal( 1.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.xzy );\r\n\t\tdirection.xz.mulAssign( - 1.0 ); // ( -u, 1, -v ) pos y\r\n\r\n\t} ).ElseIf( face.equal( 2.0 ), () => {\r\n\r\n\t\tdirection.x.mulAssign( - 1.0 ); // ( -u, v, 1 ) pos z\r\n\r\n\t} ).ElseIf( face.equal( 3.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.zyx );\r\n\t\tdirection.xz.mulAssign( - 1.0 ); // ( -1, v, -u ) neg x\r\n\r\n\t} ).ElseIf( face.equal( 4.0 ), () => {\r\n\r\n\t\tdirection.assign( direction.xzy );\r\n\t\tdirection.xy.mulAssign( - 1.0 ); // ( -u, -1, v ) neg y\r\n\r\n\t} ).ElseIf( face.equal( 5.0 ), () => {\r\n\r\n\t\tdirection.z.mulAssign( - 1.0 ); // ( u, v, -1 ) neg zS\r\n\r\n\t} );\r\n\r\n\treturn direction;\r\n\r\n} ).setLayout( {\r\n\tname: 'getDirection',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'uv', type: 'vec2' },\r\n\t\t{ name: 'face', type: 'float' }\r\n\t]\r\n} );\r\n\r\n//\r\n\r\nexport const textureCubeUV = /*@__PURE__*/ Fn( ( [ envMap, sampleDir_immutable, roughness_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {\r\n\r\n\tconst roughness = float( roughness_immutable );\r\n\tconst sampleDir = vec3( sampleDir_immutable );\r\n\r\n\tconst mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\r\n\tconst mipF = fract( mip );\r\n\tconst mipInt = floor( mip );\r\n\tconst color0 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();\r\n\r\n\tIf( mipF.notEqual( 0.0 ), () => {\r\n\r\n\t\tconst color1 = vec3( bilinearCubeUV( envMap, sampleDir, mipInt.add( 1.0 ), CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ) ).toVar();\r\n\r\n\t\tcolor0.assign( mix( color0, color1, mipF ) );\r\n\r\n\t} );\r\n\r\n\treturn color0;\r\n\r\n} );\r\n\r\nconst bilinearCubeUV = /*@__PURE__*/ Fn( ( [ envMap, direction_immutable, mipInt_immutable, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP ] ) => {\r\n\r\n\tconst mipInt = float( mipInt_immutable ).toVar();\r\n\tconst direction = vec3( direction_immutable );\r\n\tconst face = float( getFace( direction ) ).toVar();\r\n\tconst filterInt = float( max( cubeUV_minMipLevel.sub( mipInt ), 0.0 ) ).toVar();\r\n\tmipInt.assign( max( mipInt, cubeUV_minMipLevel ) );\r\n\tconst faceSize = float( exp2( mipInt ) ).toVar();\r\n\tconst uv = vec2( getUV( direction, face ).mul( faceSize.sub( 2.0 ) ).add( 1.0 ) ).toVar();\r\n\r\n\tIf( face.greaterThan( 2.0 ), () => {\r\n\r\n\t\tuv.y.addAssign( faceSize );\r\n\t\tface.subAssign( 3.0 );\r\n\r\n\t} );\r\n\r\n\tuv.x.addAssign( face.mul( faceSize ) );\r\n\tuv.x.addAssign( filterInt.mul( mul( 3.0, cubeUV_minTileSize ) ) );\r\n\tuv.y.addAssign( mul( 4.0, exp2( CUBEUV_MAX_MIP ).sub( faceSize ) ) );\r\n\tuv.x.mulAssign( CUBEUV_TEXEL_WIDTH );\r\n\tuv.y.mulAssign( CUBEUV_TEXEL_HEIGHT );\r\n\r\n\treturn envMap.sample( uv ).grad( vec2(), vec2() ); // disable anisotropic filtering\r\n\r\n} );\r\n\r\nconst getSample = /*@__PURE__*/ Fn( ( { envMap, mipInt, outputDirection, theta, axis, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {\r\n\r\n\tconst cosTheta = cos( theta );\r\n\r\n\t// Rodrigues' axis-angle rotation\r\n\tconst sampleDirection = outputDirection.mul( cosTheta )\r\n\t\t.add( axis.cross( outputDirection ).mul( sin( theta ) ) )\r\n\t\t.add( axis.mul( axis.dot( outputDirection ).mul( cosTheta.oneMinus() ) ) );\r\n\r\n\treturn bilinearCubeUV( envMap, sampleDirection, mipInt, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP );\r\n\r\n} );\r\n\r\nexport const blur = /*@__PURE__*/ Fn( ( { n, latitudinal, poleAxis, outputDirection, weights, samples, dTheta, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) => {\r\n\r\n\tconst axis = vec3( select( latitudinal, poleAxis, cross( poleAxis, outputDirection ) ) ).toVar();\r\n\r\n\tIf( axis.equal( vec3( 0.0 ) ), () => {\r\n\r\n\t\taxis.assign( vec3( outputDirection.z, 0.0, outputDirection.x.negate() ) );\r\n\r\n\t} );\r\n\r\n\taxis.assign( normalize( axis ) );\r\n\r\n\tconst gl_FragColor = vec3().toVar();\r\n\tgl_FragColor.addAssign( weights.element( 0 ).mul( getSample( { theta: 0.0, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\r\n\r\n\tLoop( { start: int( 1 ), end: n }, ( { i } ) => {\r\n\r\n\t\tIf( i.greaterThanEqual( samples ), () => {\r\n\r\n\t\t\tBreak();\r\n\r\n\t\t} );\r\n\r\n\t\tconst theta = float( dTheta.mul( float( i ) ) ).toVar();\r\n\t\tgl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta: theta.mul( - 1.0 ), axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\r\n\t\tgl_FragColor.addAssign( weights.element( i ).mul( getSample( { theta, axis, outputDirection, mipInt, envMap, CUBEUV_TEXEL_WIDTH, CUBEUV_TEXEL_HEIGHT, CUBEUV_MAX_MIP } ) ) );\r\n\r\n\t} );\r\n\r\n\treturn vec4( gl_FragColor, 1 );\r\n\r\n} );\r\n", "import { Camera } from './Camera.js';\r\nimport { RAD2DEG, DEG2RAD } from '../math/MathUtils.js';\r\nimport { Vector2 } from '../math/Vector2.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\nconst _v3 = /*@__PURE__*/ new Vector3();\r\nconst _minTarget = /*@__PURE__*/ new Vector2();\r\nconst _maxTarget = /*@__PURE__*/ new Vector2();\r\n\r\n/**\r\n * Camera that uses [perspective projection]{@link https://en.wikipedia.org/wiki/Perspective_(graphical)}.\r\n *\r\n * This projection mode is designed to mimic the way the human eye sees. It\r\n * is the most common projection mode used for rendering a 3D scene.\r\n *\r\n * ```js\r\n * const camera = new THREE.PerspectiveCamera( 45, width / height, 1, 1000 );\r\n * scene.add( camera );\r\n * ```\r\n *\r\n * @augments Camera\r\n */\r\nclass PerspectiveCamera extends Camera {\r\n\r\n\t/**\r\n\t * Constructs a new perspective camera.\r\n\t *\r\n\t * @param {number} [fov=50] - The vertical field of view.\r\n\t * @param {number} [aspect=1] - The aspect ratio.\r\n\t * @param {number} [near=0.1] - The camera's near plane.\r\n\t * @param {number} [far=2000] - The camera's far plane.\r\n\t */\r\n\tconstructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * This flag can be used for type testing.\r\n\t\t *\r\n\t\t * @type {boolean}\r\n\t\t * @readonly\r\n\t\t * @default true\r\n\t\t */\r\n\t\tthis.isPerspectiveCamera = true;\r\n\r\n\t\tthis.type = 'PerspectiveCamera';\r\n\r\n\t\t/**\r\n\t\t * The vertical field of view, from bottom to top of view,\r\n\t\t * in degrees.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 50\r\n\t\t */\r\n\t\tthis.fov = fov;\r\n\r\n\t\t/**\r\n\t\t * The zoom factor of the camera.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.zoom = 1;\r\n\r\n\t\t/**\r\n\t\t * The camera's near plane. The valid range is greater than `0`\r\n\t\t * and less than the current value of {@link PerspectiveCamera#far}.\r\n\t\t *\r\n\t\t * Note that, unlike for the {@link OrthographicCamera}, `0` is <em>not</em> a\r\n\t\t * valid value for a perspective camera's near plane.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0.1\r\n\t\t */\r\n\t\tthis.near = near;\r\n\r\n\t\t/**\r\n\t\t * The camera's far plane. Must be greater than the\r\n\t\t * current value of {@link PerspectiveCamera#near}.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 2000\r\n\t\t */\r\n\t\tthis.far = far;\r\n\r\n\t\t/**\r\n\t\t * Object distance used for stereoscopy and depth-of-field effects. This\r\n\t\t * parameter does not influence the projection matrix unless a\r\n\t\t * {@link StereoCamera} is being used.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 10\r\n\t\t */\r\n\t\tthis.focus = 10;\r\n\r\n\t\t/**\r\n\t\t * The aspect ratio, usually the canvas width / canvas height.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 1\r\n\t\t */\r\n\t\tthis.aspect = aspect;\r\n\r\n\t\t/**\r\n\t\t * Represents the frustum window specification. This property should not be edited\r\n\t\t * directly but via {@link PerspectiveCamera#setViewOffset} and {@link PerspectiveCamera#clearViewOffset}.\r\n\t\t *\r\n\t\t * @type {?Object}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis.view = null;\r\n\r\n\t\t/**\r\n\t\t * Film size used for the larger axis. Default is `35` (millimeters). This\r\n\t\t * parameter does not influence the projection matrix unless {@link PerspectiveCamera#filmOffset}\r\n\t\t * is set to a nonzero value.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 35\r\n\t\t */\r\n\t\tthis.filmGauge = 35;\r\n\r\n\t\t/**\r\n\t\t * Horizontal off-center offset in the same unit as {@link PerspectiveCamera#filmGauge}.\r\n\t\t *\r\n\t\t * @type {number}\r\n\t\t * @default 0\r\n\t\t */\r\n\t\tthis.filmOffset = 0;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\tcopy( source, recursive ) {\r\n\r\n\t\tsuper.copy( source, recursive );\r\n\r\n\t\tthis.fov = source.fov;\r\n\t\tthis.zoom = source.zoom;\r\n\r\n\t\tthis.near = source.near;\r\n\t\tthis.far = source.far;\r\n\t\tthis.focus = source.focus;\r\n\r\n\t\tthis.aspect = source.aspect;\r\n\t\tthis.view = source.view === null ? null : Object.assign( {}, source.view );\r\n\r\n\t\tthis.filmGauge = source.filmGauge;\r\n\t\tthis.filmOffset = source.filmOffset;\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets the FOV by focal length in respect to the current {@link PerspectiveCamera#filmGauge}.\r\n\t *\r\n\t * The default film gauge is 35, so that the focal length can be specified for\r\n\t * a 35mm (full frame) camera.\r\n\t *\r\n\t * @param {number} focalLength - Values for focal length and film gauge must have the same unit.\r\n\t */\r\n\tsetFocalLength( focalLength ) {\r\n\r\n\t\t/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */\r\n\t\tconst vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;\r\n\r\n\t\tthis.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the focal length from the current {@link PerspectiveCamera#fov} and\r\n\t * {@link PerspectiveCamera#filmGauge}.\r\n\t *\r\n\t * @return {number} The computed focal length.\r\n\t */\r\n\tgetFocalLength() {\r\n\r\n\t\tconst vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );\r\n\r\n\t\treturn 0.5 * this.getFilmHeight() / vExtentSlope;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the current vertical field of view angle in degrees considering {@link PerspectiveCamera#zoom}.\r\n\t *\r\n\t * @return {number} The effective FOV.\r\n\t */\r\n\tgetEffectiveFOV() {\r\n\r\n\t\treturn RAD2DEG * 2 * Math.atan(\r\n\t\t\tMath.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the width of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\r\n\t * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\r\n\t *\r\n\t * @return {number} The film width.\r\n\t */\r\n\tgetFilmWidth() {\r\n\r\n\t\t// film not completely covered in portrait format (aspect < 1)\r\n\t\treturn this.filmGauge * Math.min( this.aspect, 1 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the height of the image on the film. If {@link PerspectiveCamera#aspect} is greater than or\r\n\t * equal to one (landscape format), the result equals {@link PerspectiveCamera#filmGauge}.\r\n\t *\r\n\t * @return {number} The film width.\r\n\t */\r\n\tgetFilmHeight() {\r\n\r\n\t\t// film not completely covered in landscape format (aspect > 1)\r\n\t\treturn this.filmGauge / Math.max( this.aspect, 1 );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the 2D bounds of the camera's viewable rectangle at a given distance along the viewing direction.\r\n\t * Sets `minTarget` and `maxTarget` to the coordinates of the lower-left and upper-right corners of the view rectangle.\r\n\t *\r\n\t * @param {number} distance - The viewing distance.\r\n\t * @param {Vector2} minTarget - The lower-left corner of the view rectangle is written into this vector.\r\n\t * @param {Vector2} maxTarget - The upper-right corner of the view rectangle is written into this vector.\r\n\t */\r\n\tgetViewBounds( distance, minTarget, maxTarget ) {\r\n\r\n\t\t_v3.set( - 1, - 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\r\n\r\n\t\tminTarget.set( _v3.x, _v3.y ).multiplyScalar( - distance / _v3.z );\r\n\r\n\t\t_v3.set( 1, 1, 0.5 ).applyMatrix4( this.projectionMatrixInverse );\r\n\r\n\t\tmaxTarget.set( _v3.x, _v3.y ).multiplyScalar( - distance / _v3.z );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Computes the width and height of the camera's viewable rectangle at a given distance along the viewing direction.\r\n\t *\r\n\t * @param {number} distance - The viewing distance.\r\n\t * @param {Vector2} target - The target vector that is used to store result where x is width and y is height.\r\n\t * @returns {Vector2} The view size.\r\n\t */\r\n\tgetViewSize( distance, target ) {\r\n\r\n\t\tthis.getViewBounds( distance, _minTarget, _maxTarget );\r\n\r\n\t\treturn target.subVectors( _maxTarget, _minTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Sets an offset in a larger frustum. This is useful for multi-window or\r\n\t * multi-monitor/multi-machine setups.\r\n\t *\r\n\t * For example, if you have 3x2 monitors and each monitor is 1920x1080 and\r\n\t * the monitors are in grid like this\r\n\t *```\r\n\t *   +---+---+---+\r\n\t *   | A | B | C |\r\n\t *   +---+---+---+\r\n\t *   | D | E | F |\r\n\t *   +---+---+---+\r\n\t *```\r\n\t * then for each monitor you would call it like this:\r\n\t *```js\r\n\t * const w = 1920;\r\n\t * const h = 1080;\r\n\t * const fullWidth = w * 3;\r\n\t * const fullHeight = h * 2;\r\n\t *\r\n\t * // --A--\r\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );\r\n\t * // --B--\r\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );\r\n\t * // --C--\r\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );\r\n\t * // --D--\r\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );\r\n\t * // --E--\r\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );\r\n\t * // --F--\r\n\t * camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );\r\n\t * ```\r\n\t *\r\n\t * Note there is no reason monitors have to be the same size or in a grid.\r\n\t *\r\n\t * @param {number} fullWidth - The full width of multiview setup.\r\n\t * @param {number} fullHeight - The full height of multiview setup.\r\n\t * @param {number} x - The horizontal offset of the subcamera.\r\n\t * @param {number} y - The vertical offset of the subcamera.\r\n\t * @param {number} width - The width of subcamera.\r\n\t * @param {number} height - The height of subcamera.\r\n\t */\r\n\tsetViewOffset( fullWidth, fullHeight, x, y, width, height ) {\r\n\r\n\t\tthis.aspect = fullWidth / fullHeight;\r\n\r\n\t\tif ( this.view === null ) {\r\n\r\n\t\t\tthis.view = {\r\n\t\t\t\tenabled: true,\r\n\t\t\t\tfullWidth: 1,\r\n\t\t\t\tfullHeight: 1,\r\n\t\t\t\toffsetX: 0,\r\n\t\t\t\toffsetY: 0,\r\n\t\t\t\twidth: 1,\r\n\t\t\t\theight: 1\r\n\t\t\t};\r\n\r\n\t\t}\r\n\r\n\t\tthis.view.enabled = true;\r\n\t\tthis.view.fullWidth = fullWidth;\r\n\t\tthis.view.fullHeight = fullHeight;\r\n\t\tthis.view.offsetX = x;\r\n\t\tthis.view.offsetY = y;\r\n\t\tthis.view.width = width;\r\n\t\tthis.view.height = height;\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Removes the view offset from the projection matrix.\r\n\t */\r\n\tclearViewOffset() {\r\n\r\n\t\tif ( this.view !== null ) {\r\n\r\n\t\t\tthis.view.enabled = false;\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateProjectionMatrix();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the camera's projection matrix. Must be called after any change of\r\n\t * camera properties.\r\n\t */\r\n\tupdateProjectionMatrix() {\r\n\r\n\t\tconst near = this.near;\r\n\t\tlet top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;\r\n\t\tlet height = 2 * top;\r\n\t\tlet width = this.aspect * height;\r\n\t\tlet left = - 0.5 * width;\r\n\t\tconst view = this.view;\r\n\r\n\t\tif ( this.view !== null && this.view.enabled ) {\r\n\r\n\t\t\tconst fullWidth = view.fullWidth,\r\n\t\t\t\tfullHeight = view.fullHeight;\r\n\r\n\t\t\tleft += view.offsetX * width / fullWidth;\r\n\t\t\ttop -= view.offsetY * height / fullHeight;\r\n\t\t\twidth *= view.width / fullWidth;\r\n\t\t\theight *= view.height / fullHeight;\r\n\r\n\t\t}\r\n\r\n\t\tconst skew = this.filmOffset;\r\n\t\tif ( skew !== 0 ) left += near * skew / this.getFilmWidth();\r\n\r\n\t\tthis.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );\r\n\r\n\t\tthis.projectionMatrixInverse.copy( this.projectionMatrix ).invert();\r\n\r\n\t}\r\n\r\n\ttoJSON( meta ) {\r\n\r\n\t\tconst data = super.toJSON( meta );\r\n\r\n\t\tdata.object.fov = this.fov;\r\n\t\tdata.object.zoom = this.zoom;\r\n\r\n\t\tdata.object.near = this.near;\r\n\t\tdata.object.far = this.far;\r\n\t\tdata.object.focus = this.focus;\r\n\r\n\t\tdata.object.aspect = this.aspect;\r\n\r\n\t\tif ( this.view !== null ) data.object.view = Object.assign( {}, this.view );\r\n\r\n\t\tdata.object.filmGauge = this.filmGauge;\r\n\t\tdata.object.filmOffset = this.filmOffset;\r\n\r\n\t\treturn data;\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { PerspectiveCamera };\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\n/**\r\n * A geometry class for a rectangular cuboid with a given width, height, and depth.\r\n * On creation, the cuboid is centred on the origin, with each edge parallel to one\r\n * of the axes.\r\n *\r\n * ```js\r\n * const geometry = new THREE.BoxGeometry( 1, 1, 1 );\r\n * const material = new THREE.MeshBasicMaterial( { color: 0x00ff00 } );\r\n * const cube = new THREE.Mesh( geometry, material );\r\n * scene.add( cube );\r\n * ```\r\n *\r\n * @augments BufferGeometry\r\n */\r\nclass BoxGeometry extends BufferGeometry {\r\n\r\n\t/**\r\n\t * Constructs a new box geometry.\r\n\t *\r\n\t * @param {number} [width=1] - The width. That is, the length of the edges parallel to the X axis.\r\n\t * @param {number} [height=1] - The height. That is, the length of the edges parallel to the Y axis.\r\n\t * @param {number} [depth=1] - The depth. That is, the length of the edges parallel to the Z axis.\r\n\t * @param {number} [widthSegments=1] - Number of segmented rectangular faces along the width of the sides.\r\n\t * @param {number} [heightSegments=1] - Number of segmented rectangular faces along the height of the sides.\r\n\t * @param {number} [depthSegments=1] - Number of segmented rectangular faces along the depth of the sides.\r\n\t */\r\n\tconstructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'BoxGeometry';\r\n\r\n\t\t/**\r\n\t\t * Holds the constructor parameters that have been\r\n\t\t * used to generate the geometry. Any modification\r\n\t\t * after instantiation does not change the geometry.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.parameters = {\r\n\t\t\twidth: width,\r\n\t\t\theight: height,\r\n\t\t\tdepth: depth,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tdepthSegments: depthSegments\r\n\t\t};\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\t// segments\r\n\r\n\t\twidthSegments = Math.floor( widthSegments );\r\n\t\theightSegments = Math.floor( heightSegments );\r\n\t\tdepthSegments = Math.floor( depthSegments );\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// helper variables\r\n\r\n\t\tlet numberOfVertices = 0;\r\n\t\tlet groupStart = 0;\r\n\r\n\t\t// build each side of the box geometry\r\n\r\n\t\tbuildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px\r\n\t\tbuildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx\r\n\t\tbuildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py\r\n\t\tbuildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny\r\n\t\tbuildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz\r\n\t\tbuildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t\tfunction buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {\r\n\r\n\t\t\tconst segmentWidth = width / gridX;\r\n\t\t\tconst segmentHeight = height / gridY;\r\n\r\n\t\t\tconst widthHalf = width / 2;\r\n\t\t\tconst heightHalf = height / 2;\r\n\t\t\tconst depthHalf = depth / 2;\r\n\r\n\t\t\tconst gridX1 = gridX + 1;\r\n\t\t\tconst gridY1 = gridY + 1;\r\n\r\n\t\t\tlet vertexCounter = 0;\r\n\t\t\tlet groupCount = 0;\r\n\r\n\t\t\tconst vector = new Vector3();\r\n\r\n\t\t\t// generate vertices, normals and uvs\r\n\r\n\t\t\tfor ( let iy = 0; iy < gridY1; iy ++ ) {\r\n\r\n\t\t\t\tconst y = iy * segmentHeight - heightHalf;\r\n\r\n\t\t\t\tfor ( let ix = 0; ix < gridX1; ix ++ ) {\r\n\r\n\t\t\t\t\tconst x = ix * segmentWidth - widthHalf;\r\n\r\n\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\tvector[ u ] = x * udir;\r\n\t\t\t\t\tvector[ v ] = y * vdir;\r\n\t\t\t\t\tvector[ w ] = depthHalf;\r\n\r\n\t\t\t\t\t// now apply vector to vertex buffer\r\n\r\n\t\t\t\t\tvertices.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t// set values to correct vector component\r\n\r\n\t\t\t\t\tvector[ u ] = 0;\r\n\t\t\t\t\tvector[ v ] = 0;\r\n\t\t\t\t\tvector[ w ] = depth > 0 ? 1 : - 1;\r\n\r\n\t\t\t\t\t// now apply vector to normal buffer\r\n\r\n\t\t\t\t\tnormals.push( vector.x, vector.y, vector.z );\r\n\r\n\t\t\t\t\t// uvs\r\n\r\n\t\t\t\t\tuvs.push( ix / gridX );\r\n\t\t\t\t\tuvs.push( 1 - ( iy / gridY ) );\r\n\r\n\t\t\t\t\t// counters\r\n\r\n\t\t\t\t\tvertexCounter += 1;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// indices\r\n\r\n\t\t\t// 1. you need three indices to draw a single face\r\n\t\t\t// 2. a single segment consists of two faces\r\n\t\t\t// 3. so we need to generate six (2*3) indices per segment\r\n\r\n\t\t\tfor ( let iy = 0; iy < gridY; iy ++ ) {\r\n\r\n\t\t\t\tfor ( let ix = 0; ix < gridX; ix ++ ) {\r\n\r\n\t\t\t\t\tconst a = numberOfVertices + ix + gridX1 * iy;\r\n\t\t\t\t\tconst b = numberOfVertices + ix + gridX1 * ( iy + 1 );\r\n\t\t\t\t\tconst c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );\r\n\t\t\t\t\tconst d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;\r\n\r\n\t\t\t\t\t// faces\r\n\r\n\t\t\t\t\tindices.push( a, b, d );\r\n\t\t\t\t\tindices.push( b, c, d );\r\n\r\n\t\t\t\t\t// increase counter\r\n\r\n\t\t\t\t\tgroupCount += 6;\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t}\r\n\r\n\t\t\t// add a group to the geometry. this will ensure multi material support\r\n\r\n\t\t\tscope.addGroup( groupStart, groupCount, materialIndex );\r\n\r\n\t\t\t// calculate new start value for groups\r\n\r\n\t\t\tgroupStart += groupCount;\r\n\r\n\t\t\t// update total number of vertices\r\n\r\n\t\t\tnumberOfVertices += vertexCounter;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for creating an instance of this class from the given\r\n\t * JSON object.\r\n\t *\r\n\t * @param {Object} data - A JSON object representing the serialized geometry.\r\n\t * @return {BoxGeometry} A new instance.\r\n\t */\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { BoxGeometry };\r\n", "import NodeMaterial from '../../../materials/nodes/NodeMaterial.js';\r\nimport { getDirection, blur } from '../../../nodes/pmrem/PMREMUtils.js';\r\nimport { equirectUV } from '../../../nodes/utils/EquirectUV.js';\r\nimport { uniform } from '../../../nodes/core/UniformNode.js';\r\nimport { uniformArray } from '../../../nodes/accessors/UniformArrayNode.js';\r\nimport { texture } from '../../../nodes/accessors/TextureNode.js';\r\nimport { cubeTexture } from '../../../nodes/accessors/CubeTextureNode.js';\r\nimport { float, vec3 } from '../../../nodes/tsl/TSLBase.js';\r\nimport { uv } from '../../../nodes/accessors/UV.js';\r\nimport { attribute } from '../../../nodes/core/AttributeNode.js';\r\n\r\nimport { OrthographicCamera } from '../../../cameras/OrthographicCamera.js';\r\nimport { Color } from '../../../math/Color.js';\r\nimport { Vector3 } from '../../../math/Vector3.js';\r\nimport { BufferGeometry } from '../../../core/BufferGeometry.js';\r\nimport { BufferAttribute } from '../../../core/BufferAttribute.js';\r\nimport { RenderTarget } from '../../../core/RenderTarget.js';\r\nimport { Mesh } from '../../../objects/Mesh.js';\r\nimport { PerspectiveCamera } from '../../../cameras/PerspectiveCamera.js';\r\nimport { MeshBasicMaterial } from '../../../materials/MeshBasicMaterial.js';\r\nimport { BoxGeometry } from '../../../geometries/BoxGeometry.js';\r\nimport {\r\n\tCubeReflectionMapping,\r\n\tCubeRefractionMapping,\r\n\tCubeUVReflectionMapping,\r\n\tLinearFilter,\r\n\tNoBlending,\r\n\tRGBAFormat,\r\n\tHalfFloatType,\r\n\tBackSide,\r\n\tLinearSRGBColorSpace\r\n} from '../../../constants.js';\r\n\r\nconst LOD_MIN = 4;\r\n\r\n// The standard deviations (radians) associated with the extra mips. These are\r\n// chosen to approximate a Trowbridge-Reitz distribution function times the\r\n// geometric shadowing function. These sigma values squared must match the\r\n// variance #defines in cube_uv_reflection_fragment.glsl.js.\r\nconst EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];\r\n\r\n// The maximum length of the blur for loop. Smaller sigmas will use fewer\r\n// samples and exit early, but not recompile the shader.\r\nconst MAX_SAMPLES = 20;\r\n\r\nconst _flatCamera = /*@__PURE__*/ new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\r\nconst _cubeCamera = /*@__PURE__*/ new PerspectiveCamera( 90, 1 );\r\nconst _clearColor = /*@__PURE__*/ new Color();\r\nlet _oldTarget = null;\r\nlet _oldActiveCubeFace = 0;\r\nlet _oldActiveMipmapLevel = 0;\r\n\r\n// Golden Ratio\r\nconst PHI = ( 1 + Math.sqrt( 5 ) ) / 2;\r\nconst INV_PHI = 1 / PHI;\r\n\r\n// Vertices of a dodecahedron (except the opposites, which represent the\r\n// same axis), used as axis directions evenly spread on a sphere.\r\nconst _axisDirections = [\r\n\t/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ),\r\n\t/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),\r\n\t/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),\r\n\t/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),\r\n\t/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),\r\n\t/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),\r\n\t/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),\r\n\t/*@__PURE__*/ new Vector3( 1, 1, - 1 ),\r\n\t/*@__PURE__*/ new Vector3( - 1, 1, 1 ),\r\n\t/*@__PURE__*/ new Vector3( 1, 1, 1 )\r\n];\r\n\r\nconst _origin = /*@__PURE__*/ new Vector3();\r\n\r\n// maps blur materials to their uniforms dictionary\r\n\r\nconst _uniformsMap = new WeakMap();\r\n\r\n// WebGPU Face indices\r\nconst _faceLib = [\r\n\t3, 1, 5,\r\n\t0, 4, 2\r\n];\r\n\r\nconst _direction = /*@__PURE__*/ getDirection( uv(), attribute( 'faceIndex' ) ).normalize();\r\nconst _outputDirection = /*@__PURE__*/ vec3( _direction.x, _direction.y, _direction.z );\r\n\r\n/**\r\n * This class generates a Prefiltered, Mipmapped Radiance Environment Map\r\n * (PMREM) from a cubeMap environment texture. This allows different levels of\r\n * blur to be quickly accessed based on material roughness. It is packed into a\r\n * special CubeUV format that allows us to perform custom interpolation so that\r\n * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap\r\n * chain, it only goes down to the LOD_MIN level (above), and then creates extra\r\n * even more filtered 'mips' at the same LOD_MIN resolution, associated with\r\n * higher roughness levels. In this way we maintain resolution to smoothly\r\n * interpolate diffuse lighting while limiting sampling computation.\r\n *\r\n * Paper: Fast, Accurate Image-Based Lighting:\r\n * {@link https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view}\r\n*/\r\nclass PMREMGenerator {\r\n\r\n\t/**\r\n\t * Constructs a new PMREM generator.\r\n\t *\r\n\t * @param {Renderer} renderer - The renderer.\r\n\t */\r\n\tconstructor( renderer ) {\r\n\r\n\t\tthis._renderer = renderer;\r\n\t\tthis._pingPongRenderTarget = null;\r\n\r\n\t\tthis._lodMax = 0;\r\n\t\tthis._cubeSize = 0;\r\n\t\tthis._lodPlanes = [];\r\n\t\tthis._sizeLods = [];\r\n\t\tthis._sigmas = [];\r\n\t\tthis._lodMeshes = [];\r\n\r\n\t\tthis._blurMaterial = null;\r\n\t\tthis._cubemapMaterial = null;\r\n\t\tthis._equirectMaterial = null;\r\n\t\tthis._backgroundBox = null;\r\n\r\n\t}\r\n\r\n\tget _hasInitialized() {\r\n\r\n\t\treturn this._renderer.hasInitialized();\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\r\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\r\n\t * in radians to be applied to the scene before PMREM generation. Optional near\r\n\t * and far planes ensure the scene is rendered in its entirety.\r\n\t *\r\n\t * @param {Scene} scene - The scene to be captured.\r\n\t * @param {number} [sigma=0] - The blur radius in radians.\r\n\t * @param {number} [near=0.1] - The near plane distance.\r\n\t * @param {number} [far=100] - The far plane distance.\r\n\t * @param {Object} [options={}] - The configuration options.\r\n\t * @param {number} [options.size=256] - The texture size of the PMREM.\r\n\t * @param {Vector3} [options.renderTarget=origin] - The position of the internal cube camera that renders the scene.\r\n\t * @param {?RenderTarget} [options.renderTarget=null] - The render target to use.\r\n\t * @return {RenderTarget} The resulting PMREM.\r\n\t * @see {@link PMREMGenerator#fromSceneAsync}\r\n\t */\r\n\tfromScene( scene, sigma = 0, near = 0.1, far = 100, options = {} ) {\r\n\r\n\t\tconst {\r\n\t\t\tsize = 256,\r\n\t\t\tposition = _origin,\r\n\t\t\trenderTarget = null,\r\n\t\t} = options;\r\n\r\n\t\tthis._setSize( size );\r\n\r\n\t\tif ( this._hasInitialized === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.' );\r\n\r\n\t\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTarget();\r\n\r\n\t\t\toptions.renderTarget = cubeUVRenderTarget;\r\n\r\n\t\t\tthis.fromSceneAsync( scene, sigma, near, far, options );\r\n\r\n\t\t\treturn cubeUVRenderTarget;\r\n\r\n\t\t}\r\n\r\n\t\t_oldTarget = this._renderer.getRenderTarget();\r\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\r\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\r\n\r\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTarget();\r\n\t\tcubeUVRenderTarget.depthBuffer = true;\r\n\r\n\t\tthis._init( cubeUVRenderTarget );\r\n\r\n\t\tthis._sceneToCubeUV( scene, near, far, cubeUVRenderTarget, position );\r\n\r\n\t\tif ( sigma > 0 ) {\r\n\r\n\t\t\tthis._blur( cubeUVRenderTarget, 0, 0, sigma );\r\n\r\n\t\t}\r\n\r\n\t\tthis._applyPMREM( cubeUVRenderTarget );\r\n\r\n\t\tthis._cleanup( cubeUVRenderTarget );\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from a supplied Scene, which can be faster than using an\r\n\t * image if networking bandwidth is low. Optional sigma specifies a blur radius\r\n\t * in radians to be applied to the scene before PMREM generation. Optional near\r\n\t * and far planes ensure the scene is rendered in its entirety (the cubeCamera\r\n\t * is placed at the origin).\r\n\t *\r\n\t * @param {Scene} scene - The scene to be captured.\r\n\t * @param {number} [sigma=0] - The blur radius in radians.\r\n\t * @param {number} [near=0.1] - The near plane distance.\r\n\t * @param {number} [far=100] - The far plane distance.\r\n\t * @param {Object} [options={}] - The configuration options.\r\n\t * @param {number} [options.size=256] - The texture size of the PMREM.\r\n\t * @param {Vector3} [options.position=origin] - The position of the internal cube camera that renders the scene.\r\n\t * @param {?RenderTarget} [options.renderTarget=null] - The render target to use.\r\n\t * @return {Promise<RenderTarget>} A Promise that resolve with the PMREM when the generation has been finished.\r\n\t * @see {@link PMREMGenerator#fromScene}\r\n\t */\r\n\tasync fromSceneAsync( scene, sigma = 0, near = 0.1, far = 100, options = {} ) {\r\n\r\n\t\tif ( this._hasInitialized === false ) await this._renderer.init();\r\n\r\n\t\treturn this.fromScene( scene, sigma, near, far, options );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\r\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\r\n\t * as this matches best with the 256 x 256 cubemap output.\r\n\t *\r\n\t * @param {Texture} equirectangular - The equirectangular texture to be converted.\r\n\t * @param {?RenderTarget} [renderTarget=null] - The render target to use.\r\n\t * @return {RenderTarget} The resulting PMREM.\r\n\t * @see {@link PMREMGenerator#fromEquirectangularAsync}\r\n\t */\r\n\tfromEquirectangular( equirectangular, renderTarget = null ) {\r\n\r\n\t\tif ( this._hasInitialized === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead.' );\r\n\r\n\t\t\tthis._setSizeFromTexture( equirectangular );\r\n\r\n\t\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTarget();\r\n\r\n\t\t\tthis.fromEquirectangularAsync( equirectangular, cubeUVRenderTarget );\r\n\r\n\t\t\treturn cubeUVRenderTarget;\r\n\r\n\t\t}\r\n\r\n\t\treturn this._fromTexture( equirectangular, renderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from an equirectangular texture, which can be either LDR\r\n\t * or HDR. The ideal input image size is 1k (1024 x 512),\r\n\t * as this matches best with the 256 x 256 cubemap output.\r\n\t *\r\n\t * @param {Texture} equirectangular - The equirectangular texture to be converted.\r\n\t * @param {?RenderTarget} [renderTarget=null] - The render target to use.\r\n\t * @return {Promise<RenderTarget>} The resulting PMREM.\r\n\t * @see {@link PMREMGenerator#fromEquirectangular}\r\n\t */\r\n\tasync fromEquirectangularAsync( equirectangular, renderTarget = null ) {\r\n\r\n\t\tif ( this._hasInitialized === false ) await this._renderer.init();\r\n\r\n\t\treturn this._fromTexture( equirectangular, renderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\r\n\t * or HDR. The ideal input cube size is 256 x 256,\r\n\t * as this matches best with the 256 x 256 cubemap output.\r\n\t *\r\n\t * @param {Texture} cubemap - The cubemap texture to be converted.\r\n\t * @param {?RenderTarget} [renderTarget=null] - The render target to use.\r\n\t * @return {RenderTarget} The resulting PMREM.\r\n\t * @see {@link PMREMGenerator#fromCubemapAsync}\r\n\t */\r\n\tfromCubemap( cubemap, renderTarget = null ) {\r\n\r\n\t\tif ( this._hasInitialized === false ) {\r\n\r\n\t\t\tconsole.warn( 'THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead.' );\r\n\r\n\t\t\tthis._setSizeFromTexture( cubemap );\r\n\r\n\t\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTarget();\r\n\r\n\t\t\tthis.fromCubemapAsync( cubemap, renderTarget );\r\n\r\n\t\t\treturn cubeUVRenderTarget;\r\n\r\n\t\t}\r\n\r\n\t\treturn this._fromTexture( cubemap, renderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Generates a PMREM from an cubemap texture, which can be either LDR\r\n\t * or HDR. The ideal input cube size is 256 x 256,\r\n\t * with the 256 x 256 cubemap output.\r\n\t *\r\n\t * @param {Texture} cubemap - The cubemap texture to be converted.\r\n\t * @param {?RenderTarget} [renderTarget=null] - The render target to use.\r\n\t * @return {Promise<RenderTarget>} The resulting PMREM.\r\n\t * @see {@link PMREMGenerator#fromCubemap}\r\n\t */\r\n\tasync fromCubemapAsync( cubemap, renderTarget = null ) {\r\n\r\n\t\tif ( this._hasInitialized === false ) await this._renderer.init();\r\n\r\n\t\treturn this._fromTexture( cubemap, renderTarget );\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during\r\n\t * your texture's network fetch for increased concurrency.\r\n\t *\r\n\t * @returns {Promise}\r\n\t */\r\n\tasync compileCubemapShader() {\r\n\r\n\t\tif ( this._cubemapMaterial === null ) {\r\n\r\n\t\t\tthis._cubemapMaterial = _getCubemapMaterial();\r\n\t\t\tawait this._compileMaterial( this._cubemapMaterial );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during\r\n\t * your texture's network fetch for increased concurrency.\r\n\t *\r\n\t * @returns {Promise}\r\n\t */\r\n\tasync compileEquirectangularShader() {\r\n\r\n\t\tif ( this._equirectMaterial === null ) {\r\n\r\n\t\t\tthis._equirectMaterial = _getEquirectMaterial();\r\n\t\t\tawait this._compileMaterial( this._equirectMaterial );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,\r\n\t * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on\r\n\t * one of them will cause any others to also become unusable.\r\n\t */\r\n\tdispose() {\r\n\r\n\t\tthis._dispose();\r\n\r\n\t\tif ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();\r\n\t\tif ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();\r\n\t\tif ( this._backgroundBox !== null ) {\r\n\r\n\t\t\tthis._backgroundBox.geometry.dispose();\r\n\t\t\tthis._backgroundBox.material.dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t// private interface\r\n\r\n\t_setSizeFromTexture( texture ) {\r\n\r\n\t\tif ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {\r\n\r\n\t\t\tthis._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );\r\n\r\n\t\t} else { // Equirectangular\r\n\r\n\t\t\tthis._setSize( texture.image.width / 4 );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_setSize( cubeSize ) {\r\n\r\n\t\tthis._lodMax = Math.floor( Math.log2( cubeSize ) );\r\n\t\tthis._cubeSize = Math.pow( 2, this._lodMax );\r\n\r\n\t}\r\n\r\n\t_dispose() {\r\n\r\n\t\tif ( this._blurMaterial !== null ) this._blurMaterial.dispose();\r\n\r\n\t\tif ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();\r\n\r\n\t\tfor ( let i = 0; i < this._lodPlanes.length; i ++ ) {\r\n\r\n\t\t\tthis._lodPlanes[ i ].dispose();\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t_cleanup( outputTarget ) {\r\n\r\n\t\tthis._renderer.setRenderTarget( _oldTarget, _oldActiveCubeFace, _oldActiveMipmapLevel );\r\n\t\toutputTarget.scissorTest = false;\r\n\t\t_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );\r\n\r\n\t}\r\n\r\n\t_fromTexture( texture, renderTarget ) {\r\n\r\n\t\tthis._setSizeFromTexture( texture );\r\n\r\n\t\t_oldTarget = this._renderer.getRenderTarget();\r\n\t\t_oldActiveCubeFace = this._renderer.getActiveCubeFace();\r\n\t\t_oldActiveMipmapLevel = this._renderer.getActiveMipmapLevel();\r\n\r\n\t\tconst cubeUVRenderTarget = renderTarget || this._allocateTarget();\r\n\t\tthis._init( cubeUVRenderTarget );\r\n\t\tthis._textureToCubeUV( texture, cubeUVRenderTarget );\r\n\t\tthis._applyPMREM( cubeUVRenderTarget );\r\n\t\tthis._cleanup( cubeUVRenderTarget );\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t_allocateTarget() {\r\n\r\n\t\tconst width = 3 * Math.max( this._cubeSize, 16 * 7 );\r\n\t\tconst height = 4 * this._cubeSize;\r\n\r\n\t\tconst cubeUVRenderTarget = _createRenderTarget( width, height );\r\n\r\n\t\treturn cubeUVRenderTarget;\r\n\r\n\t}\r\n\r\n\t_init( renderTarget ) {\r\n\r\n\t\tif ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== renderTarget.width || this._pingPongRenderTarget.height !== renderTarget.height ) {\r\n\r\n\t\t\tif ( this._pingPongRenderTarget !== null ) {\r\n\r\n\t\t\t\tthis._dispose();\r\n\r\n\t\t\t}\r\n\r\n\t\t\tthis._pingPongRenderTarget = _createRenderTarget( renderTarget.width, renderTarget.height );\r\n\r\n\t\t\tconst { _lodMax } = this;\r\n\t\t\t( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas, lodMeshes: this._lodMeshes } = _createPlanes( _lodMax ) );\r\n\r\n\t\t\tthis._blurMaterial = _getBlurShader( _lodMax, renderTarget.width, renderTarget.height );\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tasync _compileMaterial( material ) {\r\n\r\n\t\tconst tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );\r\n\t\tawait this._renderer.compile( tmpMesh, _flatCamera );\r\n\r\n\t}\r\n\r\n\t_sceneToCubeUV( scene, near, far, cubeUVRenderTarget, position ) {\r\n\r\n\t\tconst cubeCamera = _cubeCamera;\r\n\t\tcubeCamera.near = near;\r\n\t\tcubeCamera.far = far;\r\n\r\n\t\t// px, py, pz, nx, ny, nz\r\n\t\tconst upSign = [ 1, 1, 1, 1, - 1, 1 ];\r\n\t\tconst forwardSign = [ 1, - 1, 1, - 1, 1, - 1 ];\r\n\r\n\t\tconst renderer = this._renderer;\r\n\r\n\t\tconst originalAutoClear = renderer.autoClear;\r\n\r\n\t\trenderer.getClearColor( _clearColor );\r\n\r\n\t\trenderer.autoClear = false;\r\n\r\n\t\tlet backgroundBox = this._backgroundBox;\r\n\r\n\t\tif ( backgroundBox === null ) {\r\n\r\n\t\t\tconst backgroundMaterial = new MeshBasicMaterial( {\r\n\t\t\t\tname: 'PMREM.Background',\r\n\t\t\t\tside: BackSide,\r\n\t\t\t\tdepthWrite: false,\r\n\t\t\t\tdepthTest: false\r\n\t\t\t} );\r\n\r\n\t\t\tbackgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );\r\n\r\n\t\t}\r\n\r\n\t\tlet useSolidColor = false;\r\n\t\tconst background = scene.background;\r\n\r\n\t\tif ( background ) {\r\n\r\n\t\t\tif ( background.isColor ) {\r\n\r\n\t\t\t\tbackgroundBox.material.color.copy( background );\r\n\t\t\t\tscene.background = null;\r\n\t\t\t\tuseSolidColor = true;\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tbackgroundBox.material.color.copy( _clearColor );\r\n\t\t\tuseSolidColor = true;\r\n\r\n\t\t}\r\n\r\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\r\n\r\n\t\trenderer.clear();\r\n\r\n\t\tif ( useSolidColor ) {\r\n\r\n\t\t\trenderer.render( backgroundBox, cubeCamera );\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < 6; i ++ ) {\r\n\r\n\t\t\tconst col = i % 3;\r\n\r\n\t\t\tif ( col === 0 ) {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\r\n\t\t\t\tcubeCamera.position.set( position.x, position.y, position.z );\r\n\t\t\t\tcubeCamera.lookAt( position.x + forwardSign[ i ], position.y, position.z );\r\n\r\n\t\t\t} else if ( col === 1 ) {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, 0, upSign[ i ] );\r\n\t\t\t\tcubeCamera.position.set( position.x, position.y, position.z );\r\n\t\t\t\tcubeCamera.lookAt( position.x, position.y + forwardSign[ i ], position.z );\r\n\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tcubeCamera.up.set( 0, upSign[ i ], 0 );\r\n\t\t\t\tcubeCamera.position.set( position.x, position.y, position.z );\r\n\t\t\t\tcubeCamera.lookAt( position.x, position.y, position.z + forwardSign[ i ] );\r\n\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst size = this._cubeSize;\r\n\r\n\t\t\t_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );\r\n\r\n\t\t\trenderer.render( scene, cubeCamera );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = originalAutoClear;\r\n\t\tscene.background = background;\r\n\r\n\t}\r\n\r\n\t_textureToCubeUV( texture, cubeUVRenderTarget ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\r\n\t\tconst isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );\r\n\r\n\t\tif ( isCubeTexture ) {\r\n\r\n\t\t\tif ( this._cubemapMaterial === null ) {\r\n\r\n\t\t\t\tthis._cubemapMaterial = _getCubemapMaterial( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( this._equirectMaterial === null ) {\r\n\r\n\t\t\t\tthis._equirectMaterial = _getEquirectMaterial( texture );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tconst material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;\r\n\t\tmaterial.fragmentNode.value = texture;\r\n\r\n\t\tconst mesh = this._lodMeshes[ 0 ];\r\n\t\tmesh.material = material;\r\n\r\n\t\tconst size = this._cubeSize;\r\n\r\n\t\t_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );\r\n\r\n\t\trenderer.setRenderTarget( cubeUVRenderTarget );\r\n\t\trenderer.render( mesh, _flatCamera );\r\n\r\n\t}\r\n\r\n\t_applyPMREM( cubeUVRenderTarget ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst autoClear = renderer.autoClear;\r\n\t\trenderer.autoClear = false;\r\n\t\tconst n = this._lodPlanes.length;\r\n\r\n\t\tfor ( let i = 1; i < n; i ++ ) {\r\n\r\n\t\t\tconst sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );\r\n\r\n\t\t\tconst poleAxis = _axisDirections[ ( n - i - 1 ) % _axisDirections.length ];\r\n\r\n\t\t\tthis._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );\r\n\r\n\t\t}\r\n\r\n\t\trenderer.autoClear = autoClear;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * This is a two-pass Gaussian blur for a cubemap. Normally this is done\r\n\t * vertically and horizontally, but this breaks down on a cube. Here we apply\r\n\t * the blur latitudinally (around the poles), and then longitudinally (towards\r\n\t * the poles) to approximate the orthogonally-separable blur. It is least\r\n\t * accurate at the poles, but still does a decent job.\r\n\t *\r\n\t * @private\r\n\t * @param {RenderTarget} cubeUVRenderTarget - The cubemap render target.\r\n\t * @param {number} lodIn - The input level-of-detail.\r\n\t * @param {number} lodOut - The output level-of-detail.\r\n\t * @param {number} sigma - The blur radius in radians.\r\n\t * @param {Vector3} [poleAxis] - The pole axis.\r\n\t */\r\n\t_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {\r\n\r\n\t\tconst pingPongRenderTarget = this._pingPongRenderTarget;\r\n\r\n\t\tthis._halfBlur(\r\n\t\t\tcubeUVRenderTarget,\r\n\t\t\tpingPongRenderTarget,\r\n\t\t\tlodIn,\r\n\t\t\tlodOut,\r\n\t\t\tsigma,\r\n\t\t\t'latitudinal',\r\n\t\t\tpoleAxis );\r\n\r\n\t\tthis._halfBlur(\r\n\t\t\tpingPongRenderTarget,\r\n\t\t\tcubeUVRenderTarget,\r\n\t\t\tlodOut,\r\n\t\t\tlodOut,\r\n\t\t\tsigma,\r\n\t\t\t'longitudinal',\r\n\t\t\tpoleAxis );\r\n\r\n\t}\r\n\r\n\t_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {\r\n\r\n\t\tconst renderer = this._renderer;\r\n\t\tconst blurMaterial = this._blurMaterial;\r\n\r\n\t\tif ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {\r\n\r\n\t\t\tconsole.error( 'blur direction must be either latitudinal or longitudinal!' );\r\n\r\n\t\t}\r\n\r\n\t\t// Number of standard deviations at which to cut off the discrete approximation.\r\n\t\tconst STANDARD_DEVIATIONS = 3;\r\n\r\n\t\tconst blurMesh = this._lodMeshes[ lodOut ];\r\n\t\tblurMesh.material = blurMaterial;\r\n\r\n\t\tconst blurUniforms = _uniformsMap.get( blurMaterial );\r\n\r\n\t\tconst pixels = this._sizeLods[ lodIn ] - 1;\r\n\t\tconst radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );\r\n\t\tconst sigmaPixels = sigmaRadians / radiansPerPixel;\r\n\t\tconst samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;\r\n\r\n\t\tif ( samples > MAX_SAMPLES ) {\r\n\r\n\t\t\tconsole.warn( `sigmaRadians, ${\r\n\t\t\t\tsigmaRadians}, is too large and will clip, as it requested ${\r\n\t\t\t\tsamples} samples when the maximum is set to ${MAX_SAMPLES}` );\r\n\r\n\t\t}\r\n\r\n\t\tconst weights = [];\r\n\t\tlet sum = 0;\r\n\r\n\t\tfor ( let i = 0; i < MAX_SAMPLES; ++ i ) {\r\n\r\n\t\t\tconst x = i / sigmaPixels;\r\n\t\t\tconst weight = Math.exp( - x * x / 2 );\r\n\t\t\tweights.push( weight );\r\n\r\n\t\t\tif ( i === 0 ) {\r\n\r\n\t\t\t\tsum += weight;\r\n\r\n\t\t\t} else if ( i < samples ) {\r\n\r\n\t\t\t\tsum += 2 * weight;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tfor ( let i = 0; i < weights.length; i ++ ) {\r\n\r\n\t\t\tweights[ i ] = weights[ i ] / sum;\r\n\r\n\t\t}\r\n\r\n\t\ttargetIn.texture.frame = ( targetIn.texture.frame || 0 ) + 1;\r\n\r\n\t\tblurUniforms.envMap.value = targetIn.texture;\r\n\t\tblurUniforms.samples.value = samples;\r\n\t\tblurUniforms.weights.array = weights;\r\n\t\tblurUniforms.latitudinal.value = direction === 'latitudinal' ? 1 : 0;\r\n\r\n\t\tif ( poleAxis ) {\r\n\r\n\t\t\tblurUniforms.poleAxis.value = poleAxis;\r\n\r\n\t\t}\r\n\r\n\t\tconst { _lodMax } = this;\r\n\t\tblurUniforms.dTheta.value = radiansPerPixel;\r\n\t\tblurUniforms.mipInt.value = _lodMax - lodIn;\r\n\r\n\t\tconst outputSize = this._sizeLods[ lodOut ];\r\n\t\tconst x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );\r\n\t\tconst y = 4 * ( this._cubeSize - outputSize );\r\n\r\n\t\t_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );\r\n\t\trenderer.setRenderTarget( targetOut );\r\n\t\trenderer.render( blurMesh, _flatCamera );\r\n\r\n\t}\r\n\r\n}\r\n\r\nfunction _createPlanes( lodMax ) {\r\n\r\n\tconst lodPlanes = [];\r\n\tconst sizeLods = [];\r\n\tconst sigmas = [];\r\n\tconst lodMeshes = [];\r\n\r\n\tlet lod = lodMax;\r\n\r\n\tconst totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;\r\n\r\n\tfor ( let i = 0; i < totalLods; i ++ ) {\r\n\r\n\t\tconst sizeLod = Math.pow( 2, lod );\r\n\t\tsizeLods.push( sizeLod );\r\n\t\tlet sigma = 1.0 / sizeLod;\r\n\r\n\t\tif ( i > lodMax - LOD_MIN ) {\r\n\r\n\t\t\tsigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];\r\n\r\n\t\t} else if ( i === 0 ) {\r\n\r\n\t\t\tsigma = 0;\r\n\r\n\t\t}\r\n\r\n\t\tsigmas.push( sigma );\r\n\r\n\t\tconst texelSize = 1.0 / ( sizeLod - 2 );\r\n\t\tconst min = - texelSize;\r\n\t\tconst max = 1 + texelSize;\r\n\t\tconst uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];\r\n\r\n\t\tconst cubeFaces = 6;\r\n\t\tconst vertices = 6;\r\n\t\tconst positionSize = 3;\r\n\t\tconst uvSize = 2;\r\n\t\tconst faceIndexSize = 1;\r\n\r\n\t\tconst position = new Float32Array( positionSize * vertices * cubeFaces );\r\n\t\tconst uv = new Float32Array( uvSize * vertices * cubeFaces );\r\n\t\tconst faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );\r\n\r\n\t\tfor ( let face = 0; face < cubeFaces; face ++ ) {\r\n\r\n\t\t\tconst x = ( face % 3 ) * 2 / 3 - 1;\r\n\t\t\tconst y = face > 2 ? 0 : - 1;\r\n\t\t\tconst coordinates = [\r\n\t\t\t\tx, y, 0,\r\n\t\t\t\tx + 2 / 3, y, 0,\r\n\t\t\t\tx + 2 / 3, y + 1, 0,\r\n\t\t\t\tx, y, 0,\r\n\t\t\t\tx + 2 / 3, y + 1, 0,\r\n\t\t\t\tx, y + 1, 0\r\n\t\t\t];\r\n\r\n\t\t\tconst faceIdx = _faceLib[ face ];\r\n\t\t\tposition.set( coordinates, positionSize * vertices * faceIdx );\r\n\t\t\tuv.set( uv1, uvSize * vertices * faceIdx );\r\n\t\t\tconst fill = [ faceIdx, faceIdx, faceIdx, faceIdx, faceIdx, faceIdx ];\r\n\t\t\tfaceIndex.set( fill, faceIndexSize * vertices * faceIdx );\r\n\r\n\t\t}\r\n\r\n\t\tconst planes = new BufferGeometry();\r\n\t\tplanes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );\r\n\t\tplanes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );\r\n\t\tplanes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );\r\n\t\tlodPlanes.push( planes );\r\n\t\tlodMeshes.push( new Mesh( planes, null ) );\r\n\r\n\t\tif ( lod > LOD_MIN ) {\r\n\r\n\t\t\tlod --;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\treturn { lodPlanes, sizeLods, sigmas, lodMeshes };\r\n\r\n}\r\n\r\nfunction _createRenderTarget( width, height ) {\r\n\r\n\tconst params = {\r\n\t\tmagFilter: LinearFilter,\r\n\t\tminFilter: LinearFilter,\r\n\t\tgenerateMipmaps: false,\r\n\t\ttype: HalfFloatType,\r\n\t\tformat: RGBAFormat,\r\n\t\tcolorSpace: LinearSRGBColorSpace,\r\n\t\t//depthBuffer: false\r\n\t};\r\n\r\n\tconst cubeUVRenderTarget = new RenderTarget( width, height, params );\r\n\tcubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;\r\n\tcubeUVRenderTarget.texture.name = 'PMREM.cubeUv';\r\n\tcubeUVRenderTarget.texture.isPMREMTexture = true;\r\n\tcubeUVRenderTarget.scissorTest = true;\r\n\treturn cubeUVRenderTarget;\r\n\r\n}\r\n\r\nfunction _setViewport( target, x, y, width, height ) {\r\n\r\n\ttarget.viewport.set( x, y, width, height );\r\n\ttarget.scissor.set( x, y, width, height );\r\n\r\n}\r\n\r\nfunction _getMaterial( type ) {\r\n\r\n\tconst material = new NodeMaterial();\r\n\tmaterial.depthTest = false;\r\n\tmaterial.depthWrite = false;\r\n\tmaterial.blending = NoBlending;\r\n\tmaterial.name = `PMREM_${ type }`;\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nfunction _getBlurShader( lodMax, width, height ) {\r\n\r\n\tconst weights = uniformArray( new Array( MAX_SAMPLES ).fill( 0 ) );\r\n\tconst poleAxis = uniform( new Vector3( 0, 1, 0 ) );\r\n\tconst dTheta = uniform( 0 );\r\n\tconst n = float( MAX_SAMPLES );\r\n\tconst latitudinal = uniform( 0 ); // false, bool\r\n\tconst samples = uniform( 1 ); // int\r\n\tconst envMap = texture( null );\r\n\tconst mipInt = uniform( 0 ); // int\r\n\tconst CUBEUV_TEXEL_WIDTH = float( 1 / width );\r\n\tconst CUBEUV_TEXEL_HEIGHT = float( 1 / height );\r\n\tconst CUBEUV_MAX_MIP = float( lodMax );\r\n\r\n\tconst materialUniforms = {\r\n\t\tn,\r\n\t\tlatitudinal,\r\n\t\tweights,\r\n\t\tpoleAxis,\r\n\t\toutputDirection: _outputDirection,\r\n\t\tdTheta,\r\n\t\tsamples,\r\n\t\tenvMap,\r\n\t\tmipInt,\r\n\t\tCUBEUV_TEXEL_WIDTH,\r\n\t\tCUBEUV_TEXEL_HEIGHT,\r\n\t\tCUBEUV_MAX_MIP\r\n\t};\r\n\r\n\tconst material = _getMaterial( 'blur' );\r\n\tmaterial.fragmentNode = blur( { ...materialUniforms, latitudinal: latitudinal.equal( 1 ) } );\r\n\r\n\t_uniformsMap.set( material, materialUniforms );\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nfunction _getCubemapMaterial( envTexture ) {\r\n\r\n\tconst material = _getMaterial( 'cubemap' );\r\n\tmaterial.fragmentNode = cubeTexture( envTexture, _outputDirection );\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nfunction _getEquirectMaterial( envTexture ) {\r\n\r\n\tconst material = _getMaterial( 'equirect' );\r\n\tmaterial.fragmentNode = texture( envTexture, equirectUV( _outputDirection ), 0 );\r\n\r\n\treturn material;\r\n\r\n}\r\n\r\nexport default PMREMGenerator;\r\n", "import TempNode from '../core/TempNode.js';\r\nimport { texture } from '../accessors/TextureNode.js';\r\nimport { textureCubeUV } from './PMREMUtils.js';\r\nimport { uniform } from '../core/UniformNode.js';\r\nimport { NodeUpdateType } from '../core/constants.js';\r\nimport { nodeProxy, vec3 } from '../tsl/TSLBase.js';\r\n\r\nimport { Texture } from '../../textures/Texture.js';\r\nimport PMREMGenerator from '../../renderers/common/extras/PMREMGenerator.js';\r\nimport { materialEnvRotation } from '../accessors/MaterialProperties.js';\r\n\r\nconst _cache = new WeakMap();\r\n\r\n/**\r\n * Generates the cubeUV size based on the given image height.\r\n *\r\n * @private\r\n * @param {number} imageHeight - The image height.\r\n * @return {{texelWidth: number,texelHeight: number, maxMip: number}} The result object.\r\n */\r\nfunction _generateCubeUVSize( imageHeight ) {\r\n\r\n\tconst maxMip = Math.log2( imageHeight ) - 2;\r\n\r\n\tconst texelHeight = 1.0 / imageHeight;\r\n\r\n\tconst texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );\r\n\r\n\treturn { texelWidth, texelHeight, maxMip };\r\n\r\n}\r\n\r\n/**\r\n * Generates a PMREM from the given texture.\r\n *\r\n * @private\r\n * @param {Texture} texture - The texture to create the PMREM for.\r\n * @param {Renderer} renderer - The renderer.\r\n * @param {PMREMGenerator} generator - The PMREM generator.\r\n * @return {?Texture} The PMREM.\r\n */\r\nfunction _getPMREMFromTexture( texture, renderer, generator ) {\r\n\r\n\tconst cache = _getCache( renderer );\r\n\r\n\tlet cacheTexture = cache.get( texture );\r\n\r\n\tconst pmremVersion = cacheTexture !== undefined ? cacheTexture.pmremVersion : - 1;\r\n\r\n\tif ( pmremVersion !== texture.pmremVersion ) {\r\n\r\n\t\tconst image = texture.image;\r\n\r\n\t\tif ( texture.isCubeTexture ) {\r\n\r\n\t\t\tif ( isCubeMapReady( image ) ) {\r\n\r\n\t\t\t\tcacheTexture = generator.fromCubemap( texture, cacheTexture );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\r\n\t\t} else {\r\n\r\n\t\t\tif ( isEquirectangularMapReady( image ) ) {\r\n\r\n\t\t\t\tcacheTexture = generator.fromEquirectangular( texture, cacheTexture );\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\treturn null;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\tcacheTexture.pmremVersion = texture.pmremVersion;\r\n\r\n\t\tcache.set( texture, cacheTexture );\r\n\r\n\t}\r\n\r\n\treturn cacheTexture.texture;\r\n\r\n}\r\n\r\n/**\r\n * Returns a cache that stores generated PMREMs for the respective textures.\r\n * A cache must be maintained per renderer since PMREMs are render target textures\r\n * which can't be shared across render contexts.\r\n *\r\n * @private\r\n * @param {Renderer} renderer - The renderer.\r\n * @return {WeakMap<Texture, Texture>} The PMREM cache.\r\n */\r\nfunction _getCache( renderer ) {\r\n\r\n\tlet rendererCache = _cache.get( renderer );\r\n\r\n\tif ( rendererCache === undefined ) {\r\n\r\n\t\trendererCache = new WeakMap();\r\n\t\t_cache.set( renderer, rendererCache );\r\n\r\n\t}\r\n\r\n\treturn rendererCache;\r\n\r\n}\r\n\r\n/**\r\n * This node represents a PMREM which is a special type of preprocessed\r\n * environment map intended for PBR materials.\r\n *\r\n * ```js\r\n * const material = new MeshStandardNodeMaterial();\r\n * material.envNode = pmremTexture( envMap );\r\n * ```\r\n *\r\n * @augments TempNode\r\n */\r\nclass PMREMNode extends TempNode {\r\n\r\n\tstatic get type() {\r\n\r\n\t\treturn 'PMREMNode';\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Constructs a new function overloading node.\r\n\t *\r\n\t * @param {Texture} value - The input texture.\r\n\t * @param {Node<vec2>} [uvNode=null] - The uv node.\r\n\t * @param {Node<float>} [levelNode=null] - The level node.\r\n\t */\r\n\tconstructor( value, uvNode = null, levelNode = null ) {\r\n\r\n\t\tsuper( 'vec3' );\r\n\r\n\t\t/**\r\n\t\t * Reference to the input texture.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Texture}\r\n\t\t */\r\n\t\tthis._value = value;\r\n\r\n\t\t/**\r\n\t\t * Reference to the generated PMREM.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {Texture | null}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._pmrem = null;\r\n\r\n\t\t/**\r\n\t\t *  The uv node.\r\n\t\t *\r\n\t\t * @type {Node<vec2>}\r\n\t\t */\r\n\t\tthis.uvNode = uvNode;\r\n\r\n\t\t/**\r\n\t\t *  The level node.\r\n\t\t *\r\n\t\t * @type {Node<float>}\r\n\t\t */\r\n\t\tthis.levelNode = levelNode;\r\n\r\n\t\t/**\r\n\t\t * Reference to a PMREM generator.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {?PMREMGenerator}\r\n\t\t * @default null\r\n\t\t */\r\n\t\tthis._generator = null;\r\n\r\n\t\tconst defaultTexture = new Texture();\r\n\t\tdefaultTexture.isRenderTargetTexture = true;\r\n\r\n\t\t/**\r\n\t\t * The texture node holding the generated PMREM.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {TextureNode}\r\n\t\t */\r\n\t\tthis._texture = texture( defaultTexture );\r\n\r\n\t\t/**\r\n\t\t * A uniform representing the PMREM's width.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {UniformNode<float>}\r\n\t\t */\r\n\t\tthis._width = uniform( 0 );\r\n\r\n\t\t/**\r\n\t\t * A uniform representing the PMREM's height.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {UniformNode<float>}\r\n\t\t */\r\n\t\tthis._height = uniform( 0 );\r\n\r\n\t\t/**\r\n\t\t * A uniform representing the PMREM's max Mip.\r\n\t\t *\r\n\t\t * @private\r\n\t\t * @type {UniformNode<float>}\r\n\t\t */\r\n\t\tthis._maxMip = uniform( 0 );\r\n\r\n\t\t/**\r\n\t\t * The `updateBeforeType` is set to `NodeUpdateType.RENDER`.\r\n\t\t *\r\n\t\t * @type {string}\r\n\t\t * @default 'render'\r\n\t\t */\r\n\t\tthis.updateBeforeType = NodeUpdateType.RENDER;\r\n\r\n\t}\r\n\r\n\tset value( value ) {\r\n\r\n\t\tthis._value = value;\r\n\t\tthis._pmrem = null;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * The node's texture value.\r\n\t *\r\n\t * @type {Texture}\r\n\t */\r\n\tget value() {\r\n\r\n\t\treturn this._value;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Uses the given PMREM texture to update internal values.\r\n\t *\r\n\t * @param {Texture} texture - The PMREM texture.\r\n\t */\r\n\tupdateFromTexture( texture ) {\r\n\r\n\t\tconst cubeUVSize = _generateCubeUVSize( texture.image.height );\r\n\r\n\t\tthis._texture.value = texture;\r\n\t\tthis._width.value = cubeUVSize.texelWidth;\r\n\t\tthis._height.value = cubeUVSize.texelHeight;\r\n\t\tthis._maxMip.value = cubeUVSize.maxMip;\r\n\r\n\t}\r\n\r\n\tupdateBefore( frame ) {\r\n\r\n\t\tlet pmrem = this._pmrem;\r\n\r\n\t\tconst pmremVersion = pmrem ? pmrem.pmremVersion : - 1;\r\n\t\tconst texture = this._value;\r\n\r\n\t\tif ( pmremVersion !== texture.pmremVersion ) {\r\n\r\n\t\t\tif ( texture.isPMREMTexture === true ) {\r\n\r\n\t\t\t\tpmrem = texture;\r\n\r\n\t\t\t} else {\r\n\r\n\t\t\t\tpmrem = _getPMREMFromTexture( texture, frame.renderer, this._generator );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tif ( pmrem !== null ) {\r\n\r\n\t\t\t\tthis._pmrem = pmrem;\r\n\r\n\t\t\t\tthis.updateFromTexture( pmrem );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tsetup( builder ) {\r\n\r\n\t\tif ( this._generator === null ) {\r\n\r\n\t\t\tthis._generator = new PMREMGenerator( builder.renderer );\r\n\r\n\t\t}\r\n\r\n\t\tthis.updateBefore( builder );\r\n\r\n\t\t//\r\n\r\n\t\tlet uvNode = this.uvNode;\r\n\r\n\t\tif ( uvNode === null && builder.context.getUV ) {\r\n\r\n\t\t\tuvNode = builder.context.getUV( this );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tuvNode = materialEnvRotation.mul( vec3( uvNode.x, uvNode.y.negate(), uvNode.z ) );\r\n\r\n\t\t//\r\n\r\n\t\tlet levelNode = this.levelNode;\r\n\r\n\t\tif ( levelNode === null && builder.context.getTextureLevel ) {\r\n\r\n\t\t\tlevelNode = builder.context.getTextureLevel( this );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\treturn textureCubeUV( this._texture, uvNode, levelNode, this._width, this._height, this._maxMip );\r\n\r\n\t}\r\n\r\n\tdispose() {\r\n\r\n\t\tsuper.dispose();\r\n\r\n\t\tif ( this._generator !== null ) this._generator.dispose();\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default PMREMNode;\r\n\r\n/**\r\n * Returns `true` if the given cube map image has been fully loaded.\r\n *\r\n * @private\r\n * @param {?Array<(Image|Object)>} [image] - The cube map image.\r\n * @return {boolean} Whether the given cube map is ready or not.\r\n */\r\nfunction isCubeMapReady( image ) {\r\n\r\n\tif ( image === null || image === undefined ) return false;\r\n\r\n\tlet count = 0;\r\n\tconst length = 6;\r\n\r\n\tfor ( let i = 0; i < length; i ++ ) {\r\n\r\n\t\tif ( image[ i ] !== undefined ) count ++;\r\n\r\n\t}\r\n\r\n\treturn count === length;\r\n\r\n\r\n}\r\n\r\n/**\r\n * Returns `true` if the given equirectangular image has been fully loaded.\r\n *\r\n * @private\r\n * @param {(Image|Object)} image - The equirectangular image.\r\n * @return {boolean} Whether the given cube map is ready or not.\r\n */\r\nfunction isEquirectangularMapReady( image ) {\r\n\r\n\tif ( image === null || image === undefined ) return false;\r\n\r\n\treturn image.height > 0;\r\n\r\n}\r\n\r\n/**\r\n * TSL function for creating a PMREM node.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Texture} value - The input texture.\r\n * @param {?Node<vec2>} [uvNode=null] - The uv node.\r\n * @param {?Node<float>} [levelNode=null] - The level node.\r\n * @returns {PMREMNode}\r\n */\r\nexport const pmremTexture = /*@__PURE__*/ nodeProxy( PMREMNode ).setParameterLength( 1, 3 );\r\n", "import { uv } from '../accessors/UV.js';\r\nimport { Fn } from '../tsl/TSLBase.js';\r\n\r\n/**\r\n * Creates a 2x2 checkerboard pattern that can be used as procedural texture data.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2>} coord - The uv coordinates.\r\n * @return {Node<float>} The result data.\r\n */\r\nexport const checker = /*@__PURE__*/ Fn( ( [ coord = uv() ] ) => {\r\n\r\n\tconst uv = coord.mul( 2.0 );\r\n\r\n\tconst cx = uv.x.floor();\r\n\tconst cy = uv.y.floor();\r\n\tconst result = cx.add( cy ).mod( 2.0 );\r\n\r\n\treturn result.sign();\r\n\r\n} );\r\n", "import { Fn, float, select } from '../tsl/TSLBase.js';\r\nimport { lengthSq, smoothstep } from '../math/MathNode.js';\r\nimport { uv } from '../accessors/UV.js';\r\n\r\n/**\r\n * Generates a circle based on the uv coordinates.\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec2>} coord - The uv to generate the circle.\r\n * @return {Node<float>} The circle shape.\r\n */\r\nexport const shapeCircle = Fn( ( [ coord = uv() ], { renderer, material } ) => {\r\n\r\n\tconst len2 = lengthSq( coord.mul( 2 ).sub( 1 ) );\r\n\r\n\tlet alpha;\r\n\r\n\tif ( material.alphaToCoverage && renderer.samples > 1 ) {\r\n\r\n\t\tconst dlen = float( len2.fwidth() ).toVar();\r\n\r\n\t\talpha = smoothstep( dlen.oneMinus(), dlen.add( 1 ), len2 ).oneMinus();\r\n\r\n\t} else {\r\n\r\n\t\talpha = select( len2.greaterThan( 1.0 ), 0, 1 );\r\n\r\n\t}\r\n\r\n\treturn alpha;\r\n\r\n} );\r\n", "// Three.js Transpiler\r\n// https://raw.githubusercontent.com/AcademySoftwareFoundation/MaterialX/main/libraries/stdlib/genglsl/lib/mx_noise.glsl\r\n\r\nimport { int, uint, float, vec3, bool, uvec3, vec2, vec4, If, Fn } from '../../tsl/TSLBase.js';\r\nimport { select } from '../../math/ConditionalNode.js';\r\nimport { sub, mul } from '../../math/OperatorNode.js';\r\nimport { floor, abs, max, dot, min, sqrt } from '../../math/MathNode.js';\r\nimport { overloadingFn } from '../../utils/FunctionOverloadingNode.js';\r\nimport { Loop } from '../../utils/LoopNode.js';\r\n\r\n\r\nexport const mx_select = /*@__PURE__*/ Fn( ( [ b_immutable, t_immutable, f_immutable ] ) => {\r\n\r\n\tconst f = float( f_immutable ).toVar();\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst b = bool( b_immutable ).toVar();\r\n\r\n\treturn select( b, t, f );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_select',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'b', type: 'bool' },\r\n\t\t{ name: 't', type: 'float' },\r\n\t\t{ name: 'f', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_negate_if = /*@__PURE__*/ Fn( ( [ val_immutable, b_immutable ] ) => {\r\n\r\n\tconst b = bool( b_immutable ).toVar();\r\n\tconst val = float( val_immutable ).toVar();\r\n\r\n\treturn select( b, val.negate(), val );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_negate_if',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'val', type: 'float' },\r\n\t\t{ name: 'b', type: 'bool' }\r\n\t]\r\n} );\r\n\r\nexport const mx_floor = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\r\n\r\n\tconst x = float( x_immutable ).toVar();\r\n\r\n\treturn int( floor( x ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_floor',\r\n\ttype: 'int',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_floorfrac = /*@__PURE__*/ Fn( ( [ x_immutable, i ] ) => {\r\n\r\n\tconst x = float( x_immutable ).toVar();\r\n\ti.assign( mx_floor( x ) );\r\n\r\n\treturn x.sub( float( i ) );\r\n\r\n} );\r\n\r\nexport const mx_bilerp_0 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\r\n\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v3 = float( v3_immutable ).toVar();\r\n\tconst v2 = float( v2_immutable ).toVar();\r\n\tconst v1 = float( v1_immutable ).toVar();\r\n\tconst v0 = float( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\r\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bilerp_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'float' },\r\n\t\t{ name: 'v1', type: 'float' },\r\n\t\t{ name: 'v2', type: 'float' },\r\n\t\t{ name: 'v3', type: 'float' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bilerp_1 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, s_immutable, t_immutable ] ) => {\r\n\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v3 = vec3( v3_immutable ).toVar();\r\n\tconst v2 = vec3( v2_immutable ).toVar();\r\n\tconst v1 = vec3( v1_immutable ).toVar();\r\n\tconst v0 = vec3( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\r\n\treturn sub( 1.0, t ).mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bilerp_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'vec3' },\r\n\t\t{ name: 'v1', type: 'vec3' },\r\n\t\t{ name: 'v2', type: 'vec3' },\r\n\t\t{ name: 'v3', type: 'vec3' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bilerp = /*@__PURE__*/ overloadingFn( [ mx_bilerp_0, mx_bilerp_1 ] );\r\n\r\nexport const mx_trilerp_0 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\r\n\r\n\tconst r = float( r_immutable ).toVar();\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v7 = float( v7_immutable ).toVar();\r\n\tconst v6 = float( v6_immutable ).toVar();\r\n\tconst v5 = float( v5_immutable ).toVar();\r\n\tconst v4 = float( v4_immutable ).toVar();\r\n\tconst v3 = float( v3_immutable ).toVar();\r\n\tconst v2 = float( v2_immutable ).toVar();\r\n\tconst v1 = float( v1_immutable ).toVar();\r\n\tconst v0 = float( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\r\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\r\n\r\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_trilerp_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'float' },\r\n\t\t{ name: 'v1', type: 'float' },\r\n\t\t{ name: 'v2', type: 'float' },\r\n\t\t{ name: 'v3', type: 'float' },\r\n\t\t{ name: 'v4', type: 'float' },\r\n\t\t{ name: 'v5', type: 'float' },\r\n\t\t{ name: 'v6', type: 'float' },\r\n\t\t{ name: 'v7', type: 'float' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' },\r\n\t\t{ name: 'r', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_trilerp_1 = /*@__PURE__*/ Fn( ( [ v0_immutable, v1_immutable, v2_immutable, v3_immutable, v4_immutable, v5_immutable, v6_immutable, v7_immutable, s_immutable, t_immutable, r_immutable ] ) => {\r\n\r\n\tconst r = float( r_immutable ).toVar();\r\n\tconst t = float( t_immutable ).toVar();\r\n\tconst s = float( s_immutable ).toVar();\r\n\tconst v7 = vec3( v7_immutable ).toVar();\r\n\tconst v6 = vec3( v6_immutable ).toVar();\r\n\tconst v5 = vec3( v5_immutable ).toVar();\r\n\tconst v4 = vec3( v4_immutable ).toVar();\r\n\tconst v3 = vec3( v3_immutable ).toVar();\r\n\tconst v2 = vec3( v2_immutable ).toVar();\r\n\tconst v1 = vec3( v1_immutable ).toVar();\r\n\tconst v0 = vec3( v0_immutable ).toVar();\r\n\tconst s1 = float( sub( 1.0, s ) ).toVar();\r\n\tconst t1 = float( sub( 1.0, t ) ).toVar();\r\n\tconst r1 = float( sub( 1.0, r ) ).toVar();\r\n\r\n\treturn r1.mul( t1.mul( v0.mul( s1 ).add( v1.mul( s ) ) ).add( t.mul( v2.mul( s1 ).add( v3.mul( s ) ) ) ) ).add( r.mul( t1.mul( v4.mul( s1 ).add( v5.mul( s ) ) ).add( t.mul( v6.mul( s1 ).add( v7.mul( s ) ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_trilerp_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v0', type: 'vec3' },\r\n\t\t{ name: 'v1', type: 'vec3' },\r\n\t\t{ name: 'v2', type: 'vec3' },\r\n\t\t{ name: 'v3', type: 'vec3' },\r\n\t\t{ name: 'v4', type: 'vec3' },\r\n\t\t{ name: 'v5', type: 'vec3' },\r\n\t\t{ name: 'v6', type: 'vec3' },\r\n\t\t{ name: 'v7', type: 'vec3' },\r\n\t\t{ name: 's', type: 'float' },\r\n\t\t{ name: 't', type: 'float' },\r\n\t\t{ name: 'r', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_trilerp = /*@__PURE__*/ overloadingFn( [ mx_trilerp_0, mx_trilerp_1 ] );\r\n\r\nexport const mx_gradient_float_0 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uint( hash_immutable ).toVar();\r\n\tconst h = uint( hash.bitAnd( uint( 7 ) ) ).toVar();\r\n\tconst u = float( mx_select( h.lessThan( uint( 4 ) ), x, y ) ).toVar();\r\n\tconst v = float( mul( 2.0, mx_select( h.lessThan( uint( 4 ) ), y, x ) ) ).toVar();\r\n\r\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uint' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_float_1 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = float( z_immutable ).toVar();\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uint( hash_immutable ).toVar();\r\n\tconst h = uint( hash.bitAnd( uint( 15 ) ) ).toVar();\r\n\tconst u = float( mx_select( h.lessThan( uint( 8 ) ), x, y ) ).toVar();\r\n\tconst v = float( mx_select( h.lessThan( uint( 4 ) ), y, mx_select( h.equal( uint( 12 ) ).or( h.equal( uint( 14 ) ) ), x, z ) ) ).toVar();\r\n\r\n\treturn mx_negate_if( u, bool( h.bitAnd( uint( 1 ) ) ) ).add( mx_negate_if( v, bool( h.bitAnd( uint( 2 ) ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uint' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' },\r\n\t\t{ name: 'z', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_float = /*@__PURE__*/ overloadingFn( [ mx_gradient_float_0, mx_gradient_float_1 ] );\r\n\r\nexport const mx_gradient_vec3_0 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uvec3( hash_immutable ).toVar();\r\n\r\n\treturn vec3( mx_gradient_float( hash.x, x, y ), mx_gradient_float( hash.y, x, y ), mx_gradient_float( hash.z, x, y ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uvec3' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_vec3_1 = /*@__PURE__*/ Fn( ( [ hash_immutable, x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = float( z_immutable ).toVar();\r\n\tconst y = float( y_immutable ).toVar();\r\n\tconst x = float( x_immutable ).toVar();\r\n\tconst hash = uvec3( hash_immutable ).toVar();\r\n\r\n\treturn vec3( mx_gradient_float( hash.x, x, y, z ), mx_gradient_float( hash.y, x, y, z ), mx_gradient_float( hash.z, x, y, z ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'hash', type: 'uvec3' },\r\n\t\t{ name: 'x', type: 'float' },\r\n\t\t{ name: 'y', type: 'float' },\r\n\t\t{ name: 'z', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_vec3 = /*@__PURE__*/ overloadingFn( [ mx_gradient_vec3_0, mx_gradient_vec3_1 ] );\r\n\r\nexport const mx_gradient_scale2d_0 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = float( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.6616, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale2d_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale3d_0 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = float( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.9820, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale3d_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale2d_1 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = vec3( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.6616, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale2d_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale2d = /*@__PURE__*/ overloadingFn( [ mx_gradient_scale2d_0, mx_gradient_scale2d_1 ] );\r\n\r\nexport const mx_gradient_scale3d_1 = /*@__PURE__*/ Fn( ( [ v_immutable ] ) => {\r\n\r\n\tconst v = vec3( v_immutable ).toVar();\r\n\r\n\treturn mul( 0.9820, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_gradient_scale3d_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'v', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_gradient_scale3d = /*@__PURE__*/ overloadingFn( [ mx_gradient_scale3d_0, mx_gradient_scale3d_1 ] );\r\n\r\nexport const mx_rotl32 = /*@__PURE__*/ Fn( ( [ x_immutable, k_immutable ] ) => {\r\n\r\n\tconst k = int( k_immutable ).toVar();\r\n\tconst x = uint( x_immutable ).toVar();\r\n\r\n\treturn x.shiftLeft( k ).bitOr( x.shiftRight( int( 32 ).sub( k ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_rotl32',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'uint' },\r\n\t\t{ name: 'k', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bjmix = /*@__PURE__*/ Fn( ( [ a, b, c ] ) => {\r\n\r\n\ta.subAssign( c );\r\n\ta.bitXorAssign( mx_rotl32( c, int( 4 ) ) );\r\n\tc.addAssign( b );\r\n\tb.subAssign( a );\r\n\tb.bitXorAssign( mx_rotl32( a, int( 6 ) ) );\r\n\ta.addAssign( c );\r\n\tc.subAssign( b );\r\n\tc.bitXorAssign( mx_rotl32( b, int( 8 ) ) );\r\n\tb.addAssign( a );\r\n\ta.subAssign( c );\r\n\ta.bitXorAssign( mx_rotl32( c, int( 16 ) ) );\r\n\tc.addAssign( b );\r\n\tb.subAssign( a );\r\n\tb.bitXorAssign( mx_rotl32( a, int( 19 ) ) );\r\n\ta.addAssign( c );\r\n\tc.subAssign( b );\r\n\tc.bitXorAssign( mx_rotl32( b, int( 4 ) ) );\r\n\tb.addAssign( a );\r\n\r\n} );\r\n\r\nexport const mx_bjfinal = /*@__PURE__*/ Fn( ( [ a_immutable, b_immutable, c_immutable ] ) => {\r\n\r\n\tconst c = uint( c_immutable ).toVar();\r\n\tconst b = uint( b_immutable ).toVar();\r\n\tconst a = uint( a_immutable ).toVar();\r\n\tc.bitXorAssign( b );\r\n\tc.subAssign( mx_rotl32( b, int( 14 ) ) );\r\n\ta.bitXorAssign( c );\r\n\ta.subAssign( mx_rotl32( c, int( 11 ) ) );\r\n\tb.bitXorAssign( a );\r\n\tb.subAssign( mx_rotl32( a, int( 25 ) ) );\r\n\tc.bitXorAssign( b );\r\n\tc.subAssign( mx_rotl32( b, int( 16 ) ) );\r\n\ta.bitXorAssign( c );\r\n\ta.subAssign( mx_rotl32( c, int( 4 ) ) );\r\n\tb.bitXorAssign( a );\r\n\tb.subAssign( mx_rotl32( a, int( 14 ) ) );\r\n\tc.bitXorAssign( b );\r\n\tc.subAssign( mx_rotl32( b, int( 24 ) ) );\r\n\r\n\treturn c;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bjfinal',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'a', type: 'uint' },\r\n\t\t{ name: 'b', type: 'uint' },\r\n\t\t{ name: 'c', type: 'uint' }\r\n\t]\r\n} );\r\n\r\nexport const mx_bits_to_01 = /*@__PURE__*/ Fn( ( [ bits_immutable ] ) => {\r\n\r\n\tconst bits = uint( bits_immutable ).toVar();\r\n\r\n\treturn float( bits ).div( float( uint( int( 0xffffffff ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_bits_to_01',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'bits', type: 'uint' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fade = /*@__PURE__*/ Fn( ( [ t_immutable ] ) => {\r\n\r\n\tconst t = float( t_immutable ).toVar();\r\n\r\n\treturn t.mul( t ).mul( t ).mul( t.mul( t.mul( 6.0 ).sub( 15.0 ) ).add( 10.0 ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fade',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 't', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_0 = /*@__PURE__*/ Fn( ( [ x_immutable ] ) => {\r\n\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 1 ) ).toVar();\r\n\tconst seed = uint( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ).toVar();\r\n\r\n\treturn mx_bjfinal( seed.add( uint( x ) ), seed, seed );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_0',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_1 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 2 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_1',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_2 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 3 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\tc.addAssign( uint( z ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_2',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_3 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable ] ) => {\r\n\r\n\tconst xx = int( xx_immutable ).toVar();\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 4 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\tc.addAssign( uint( z ) );\r\n\tmx_bjmix( a, b, c );\r\n\ta.addAssign( uint( xx ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_3',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' },\r\n\t\t{ name: 'xx', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int_4 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable, xx_immutable, yy_immutable ] ) => {\r\n\r\n\tconst yy = int( yy_immutable ).toVar();\r\n\tconst xx = int( xx_immutable ).toVar();\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst len = uint( uint( 5 ) ).toVar();\r\n\tconst a = uint().toVar(), b = uint().toVar(), c = uint().toVar();\r\n\ta.assign( b.assign( c.assign( uint( int( 0xdeadbeef ) ).add( len.shiftLeft( uint( 2 ) ) ).add( uint( 13 ) ) ) ) );\r\n\ta.addAssign( uint( x ) );\r\n\tb.addAssign( uint( y ) );\r\n\tc.addAssign( uint( z ) );\r\n\tmx_bjmix( a, b, c );\r\n\ta.addAssign( uint( xx ) );\r\n\tb.addAssign( uint( yy ) );\r\n\r\n\treturn mx_bjfinal( a, b, c );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_int_4',\r\n\ttype: 'uint',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' },\r\n\t\t{ name: 'xx', type: 'int' },\r\n\t\t{ name: 'yy', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_int = /*@__PURE__*/ overloadingFn( [ mx_hash_int_0, mx_hash_int_1, mx_hash_int_2, mx_hash_int_3, mx_hash_int_4 ] );\r\n\r\nexport const mx_hash_vec3_0 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable ] ) => {\r\n\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst h = uint( mx_hash_int( x, y ) ).toVar();\r\n\tconst result = uvec3().toVar();\r\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\r\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\r\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_vec3_0',\r\n\ttype: 'uvec3',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_vec3_1 = /*@__PURE__*/ Fn( ( [ x_immutable, y_immutable, z_immutable ] ) => {\r\n\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst h = uint( mx_hash_int( x, y, z ) ).toVar();\r\n\tconst result = uvec3().toVar();\r\n\tresult.x.assign( h.bitAnd( int( 0xFF ) ) );\r\n\tresult.y.assign( h.shiftRight( int( 8 ) ).bitAnd( int( 0xFF ) ) );\r\n\tresult.z.assign( h.shiftRight( int( 16 ) ).bitAnd( int( 0xFF ) ) );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hash_vec3_1',\r\n\ttype: 'uvec3',\r\n\tinputs: [\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_hash_vec3 = /*@__PURE__*/ overloadingFn( [ mx_hash_vec3_0, mx_hash_vec3_1 ] );\r\n\r\nexport const mx_perlin_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst result = float( mx_bilerp( mx_gradient_float( mx_hash_int( X, Y ), fx, fy ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\r\n\r\n\treturn mx_gradient_scale2d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst w = float( mx_fade( fz ) ).toVar();\r\n\tconst result = float( mx_trilerp( mx_gradient_float( mx_hash_int( X, Y, Z ), fx, fy, fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_float( mx_hash_int( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_float( mx_hash_int( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\r\n\r\n\treturn mx_gradient_scale3d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_float = /*@__PURE__*/ overloadingFn( [ mx_perlin_noise_float_0, mx_perlin_noise_float_1 ] );\r\n\r\nexport const mx_perlin_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst result = vec3( mx_bilerp( mx_gradient_vec3( mx_hash_vec3( X, Y ), fx, fy ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y ), fx.sub( 1.0 ), fy ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ) ), fx, fy.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ) ), u, v ) ).toVar();\r\n\r\n\treturn mx_gradient_scale2d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst fx = float( mx_floorfrac( p.x, X ) ).toVar();\r\n\tconst fy = float( mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst fz = float( mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst u = float( mx_fade( fx ) ).toVar();\r\n\tconst v = float( mx_fade( fy ) ).toVar();\r\n\tconst w = float( mx_fade( fz ) ).toVar();\r\n\tconst result = vec3( mx_trilerp( mx_gradient_vec3( mx_hash_vec3( X, Y, Z ), fx, fy, fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z ), fx.sub( 1.0 ), fy, fz ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z ), fx, fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz ), mx_gradient_vec3( mx_hash_vec3( X, Y, Z.add( int( 1 ) ) ), fx, fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y, Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy, fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X, Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx, fy.sub( 1.0 ), fz.sub( 1.0 ) ), mx_gradient_vec3( mx_hash_vec3( X.add( int( 1 ) ), Y.add( int( 1 ) ), Z.add( int( 1 ) ) ), fx.sub( 1.0 ), fy.sub( 1.0 ), fz.sub( 1.0 ) ), u, v, w ) ).toVar();\r\n\r\n\treturn mx_gradient_scale3d( result );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_perlin_noise_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_perlin_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_perlin_noise_vec3_0, mx_perlin_noise_vec3_1 ] );\r\n\r\nexport const mx_cell_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = float( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix, iy ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float_2 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_2',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float_3 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec4( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\tconst iw = int( mx_floor( p.w ) ).toVar();\r\n\r\n\treturn mx_bits_to_01( mx_hash_int( ix, iy, iz, iw ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_float_3',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec4' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_float = /*@__PURE__*/ overloadingFn( [ mx_cell_noise_float_0, mx_cell_noise_float_1, mx_cell_noise_float_2, mx_cell_noise_float_3 ] );\r\n\r\nexport const mx_cell_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = float( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3_2 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_2',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3_3 = /*@__PURE__*/ Fn( ( [ p_immutable ] ) => {\r\n\r\n\tconst p = vec4( p_immutable ).toVar();\r\n\tconst ix = int( mx_floor( p.x ) ).toVar();\r\n\tconst iy = int( mx_floor( p.y ) ).toVar();\r\n\tconst iz = int( mx_floor( p.z ) ).toVar();\r\n\tconst iw = int( mx_floor( p.w ) ).toVar();\r\n\r\n\treturn vec3( mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 0 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 1 ) ) ), mx_bits_to_01( mx_hash_int( ix, iy, iz, iw, int( 2 ) ) ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_cell_noise_vec3_3',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec4' }\r\n\t]\r\n} );\r\n\r\nexport const mx_cell_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_cell_noise_vec3_0, mx_cell_noise_vec3_1, mx_cell_noise_vec3_2, mx_cell_noise_vec3_3 ] );\r\n\r\nexport const mx_fractal_noise_float = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst result = float( 0.0 ).toVar();\r\n\tconst amplitude = float( 1.0 ).toVar();\r\n\r\n\tLoop( octaves, () => {\r\n\r\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_float( p ) ) );\r\n\t\tamplitude.mulAssign( diminish );\r\n\t\tp.mulAssign( lacunarity );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_float',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fractal_noise_vec3 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst result = vec3( 0.0 ).toVar();\r\n\tconst amplitude = float( 1.0 ).toVar();\r\n\r\n\tLoop( octaves, () => {\r\n\r\n\t\tresult.addAssign( amplitude.mul( mx_perlin_noise_vec3( p ) ) );\r\n\t\tamplitude.mulAssign( diminish );\r\n\t\tp.mulAssign( lacunarity );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_vec3',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fractal_noise_vec2 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\r\n\treturn vec2( mx_fractal_noise_float( p, octaves, lacunarity, diminish ), mx_fractal_noise_float( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_vec2',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_fractal_noise_vec4 = /*@__PURE__*/ Fn( ( [ p_immutable, octaves_immutable, lacunarity_immutable, diminish_immutable ] ) => {\r\n\r\n\tconst diminish = float( diminish_immutable ).toVar();\r\n\tconst lacunarity = float( lacunarity_immutable ).toVar();\r\n\tconst octaves = int( octaves_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst c = vec3( mx_fractal_noise_vec3( p, octaves, lacunarity, diminish ) ).toVar();\r\n\tconst f = float( mx_fractal_noise_float( p.add( vec3( int( 19 ), int( 193 ), int( 17 ) ) ), octaves, lacunarity, diminish ) ).toVar();\r\n\r\n\treturn vec4( c, f );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_fractal_noise_vec4',\r\n\ttype: 'vec4',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'octaves', type: 'int' },\r\n\t\t{ name: 'lacunarity', type: 'float' },\r\n\t\t{ name: 'diminish', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_distance_0 = /*@__PURE__*/ Fn( ( [ p_immutable, x_immutable, y_immutable, xoff_immutable, yoff_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst yoff = int( yoff_immutable ).toVar();\r\n\tconst xoff = int( xoff_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst tmp = vec3( mx_cell_noise_vec3( vec2( x.add( xoff ), y.add( yoff ) ) ) ).toVar();\r\n\tconst off = vec2( tmp.x, tmp.y ).toVar();\r\n\toff.subAssign( 0.5 );\r\n\toff.mulAssign( jitter );\r\n\toff.addAssign( 0.5 );\r\n\tconst cellpos = vec2( vec2( float( x ), float( y ) ).add( off ) ).toVar();\r\n\tconst diff = vec2( cellpos.sub( p ) ).toVar();\r\n\r\n\tIf( metric.equal( int( 2 ) ), () => {\r\n\r\n\t\treturn abs( diff.x ).add( abs( diff.y ) );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 3 ) ), () => {\r\n\r\n\t\treturn max( abs( diff.x ), abs( diff.y ) );\r\n\r\n\t} );\r\n\r\n\treturn dot( diff, diff );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_distance_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'xoff', type: 'int' },\r\n\t\t{ name: 'yoff', type: 'int' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_distance_1 = /*@__PURE__*/ Fn( ( [ p_immutable, x_immutable, y_immutable, z_immutable, xoff_immutable, yoff_immutable, zoff_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst zoff = int( zoff_immutable ).toVar();\r\n\tconst yoff = int( yoff_immutable ).toVar();\r\n\tconst xoff = int( xoff_immutable ).toVar();\r\n\tconst z = int( z_immutable ).toVar();\r\n\tconst y = int( y_immutable ).toVar();\r\n\tconst x = int( x_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst off = vec3( mx_cell_noise_vec3( vec3( x.add( xoff ), y.add( yoff ), z.add( zoff ) ) ) ).toVar();\r\n\toff.subAssign( 0.5 );\r\n\toff.mulAssign( jitter );\r\n\toff.addAssign( 0.5 );\r\n\tconst cellpos = vec3( vec3( float( x ), float( y ), float( z ) ).add( off ) ).toVar();\r\n\tconst diff = vec3( cellpos.sub( p ) ).toVar();\r\n\r\n\tIf( metric.equal( int( 2 ) ), () => {\r\n\r\n\t\treturn abs( diff.x ).add( abs( diff.y ) ).add( abs( diff.z ) );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 3 ) ), () => {\r\n\r\n\t\treturn max( abs( diff.x ), abs( diff.y ), abs( diff.z ) );\r\n\r\n\t} );\r\n\r\n\treturn dot( diff, diff );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_distance_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'x', type: 'int' },\r\n\t\t{ name: 'y', type: 'int' },\r\n\t\t{ name: 'z', type: 'int' },\r\n\t\t{ name: 'xoff', type: 'int' },\r\n\t\t{ name: 'yoff', type: 'int' },\r\n\t\t{ name: 'zoff', type: 'int' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_distance = /*@__PURE__*/ overloadingFn( [ mx_worley_distance_0, mx_worley_distance_1 ] );\r\n\r\nexport const mx_worley_noise_float_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst sqdist = float( 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\r\n\t\t\tsqdist.assign( min( sqdist, dist ) );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_float_0',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec2_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\r\n\r\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec2_0',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec3_0 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec2( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar();\r\n\tconst localpos = vec2( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ) ).toVar();\r\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, X, Y, jitter, metric ) ).toVar();\r\n\r\n\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t} ).ElseIf( dist.lessThan( sqdist.z ), () => {\r\n\r\n\t\t\t\tsqdist.z.assign( dist );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec3_0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec2' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_float_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst sqdist = float( 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\r\n\r\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\r\n\t\t\t\tsqdist.assign( min( sqdist, dist ) );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_float_1',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_float = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_float_0, mx_worley_noise_float_1 ] );\r\n\r\nexport const mx_worley_noise_vec2_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst sqdist = vec2( 1e6, 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\r\n\r\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\r\n\r\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec2_1',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec2 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_vec2_0, mx_worley_noise_vec2_1 ] );\r\n\r\nexport const mx_worley_noise_vec3_1 = /*@__PURE__*/ Fn( ( [ p_immutable, jitter_immutable, metric_immutable ] ) => {\r\n\r\n\tconst metric = int( metric_immutable ).toVar();\r\n\tconst jitter = float( jitter_immutable ).toVar();\r\n\tconst p = vec3( p_immutable ).toVar();\r\n\tconst X = int().toVar(), Y = int().toVar(), Z = int().toVar();\r\n\tconst localpos = vec3( mx_floorfrac( p.x, X ), mx_floorfrac( p.y, Y ), mx_floorfrac( p.z, Z ) ).toVar();\r\n\tconst sqdist = vec3( 1e6, 1e6, 1e6 ).toVar();\r\n\r\n\tLoop( { start: - 1, end: int( 1 ), name: 'x', condition: '<=' }, ( { x } ) => {\r\n\r\n\t\tLoop( { start: - 1, end: int( 1 ), name: 'y', condition: '<=' }, ( { y } ) => {\r\n\r\n\t\t\tLoop( { start: - 1, end: int( 1 ), name: 'z', condition: '<=' }, ( { z } ) => {\r\n\r\n\t\t\t\tconst dist = float( mx_worley_distance( localpos, x, y, z, X, Y, Z, jitter, metric ) ).toVar();\r\n\r\n\t\t\t\tIf( dist.lessThan( sqdist.x ), () => {\r\n\r\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\t\tsqdist.y.assign( sqdist.x );\r\n\t\t\t\t\tsqdist.x.assign( dist );\r\n\r\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.y ), () => {\r\n\r\n\t\t\t\t\tsqdist.z.assign( sqdist.y );\r\n\t\t\t\t\tsqdist.y.assign( dist );\r\n\r\n\t\t\t\t} ).ElseIf( dist.lessThan( sqdist.z ), () => {\r\n\r\n\t\t\t\t\tsqdist.z.assign( dist );\r\n\r\n\t\t\t\t} );\r\n\r\n\t\t\t} );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\tIf( metric.equal( int( 0 ) ), () => {\r\n\r\n\t\tsqdist.assign( sqrt( sqdist ) );\r\n\r\n\t} );\r\n\r\n\treturn sqdist;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_worley_noise_vec3_1',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'p', type: 'vec3' },\r\n\t\t{ name: 'jitter', type: 'float' },\r\n\t\t{ name: 'metric', type: 'int' }\r\n\t]\r\n} );\r\n\r\nexport const mx_worley_noise_vec3 = /*@__PURE__*/ overloadingFn( [ mx_worley_noise_vec3_0, mx_worley_noise_vec3_1 ] );\r\n", "// Three.js Transpiler\r\n// https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_hsv.glsl\r\n\r\nimport { int, float, vec3, If, Fn } from '../../tsl/TSLBase.js';\r\nimport { add } from '../../math/OperatorNode.js';\r\nimport { floor, trunc, max, min } from '../../math/MathNode.js';\r\n\r\nexport const mx_hsvtorgb = /*@__PURE__*/ Fn( ( [ hsv ] ) => {\r\n\r\n\tconst s = hsv.y;\r\n\tconst v = hsv.z;\r\n\r\n\tconst result = vec3().toVar();\r\n\r\n\tIf( s.lessThan( 0.0001 ), () => {\r\n\r\n\t\tresult.assign( vec3( v, v, v ) );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tlet h = hsv.x;\r\n\t\th = h.sub( floor( h ) ).mul( 6.0 ).toVar(); // TODO: check what .toVar() is needed in node system cache\r\n\t\tconst hi = int( trunc( h ) );\r\n\t\tconst f = h.sub( float( hi ) );\r\n\t\tconst p = v.mul( s.oneMinus() );\r\n\t\tconst q = v.mul( s.mul( f ).oneMinus() );\r\n\t\tconst t = v.mul( s.mul( f.oneMinus() ).oneMinus() );\r\n\r\n\t\tIf( hi.equal( int( 0 ) ), () => {\r\n\r\n\t\t\tresult.assign( vec3( v, t, p ) );\r\n\r\n\t\t} ).ElseIf( hi.equal( int( 1 ) ), () => {\r\n\r\n\t\t\tresult.assign( vec3( q, v, p ) );\r\n\r\n\t\t} ).ElseIf( hi.equal( int( 2 ) ), () => {\r\n\r\n\t\t\tresult.assign( vec3( p, v, t ) );\r\n\r\n\t\t} ).ElseIf( hi.equal( int( 3 ) ), () => {\r\n\r\n\t\t\tresult.assign( vec3( p, q, v ) );\r\n\r\n\t\t} ).ElseIf( hi.equal( int( 4 ) ), () => {\r\n\r\n\t\t\tresult.assign( vec3( t, p, v ) );\r\n\r\n\t\t} ).Else( () => {\r\n\r\n\t\t\tresult.assign( vec3( v, p, q ) );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\treturn result;\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_hsvtorgb',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'hsv', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport const mx_rgbtohsv = /*@__PURE__*/ Fn( ( [ c_immutable ] ) => {\r\n\r\n\tconst c = vec3( c_immutable ).toVar();\r\n\tconst r = float( c.x ).toVar();\r\n\tconst g = float( c.y ).toVar();\r\n\tconst b = float( c.z ).toVar();\r\n\tconst mincomp = float( min( r, min( g, b ) ) ).toVar();\r\n\tconst maxcomp = float( max( r, max( g, b ) ) ).toVar();\r\n\tconst delta = float( maxcomp.sub( mincomp ) ).toVar();\r\n\tconst h = float().toVar(), s = float().toVar(), v = float().toVar();\r\n\tv.assign( maxcomp );\r\n\r\n\tIf( maxcomp.greaterThan( 0.0 ), () => {\r\n\r\n\t\ts.assign( delta.div( maxcomp ) );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\ts.assign( 0.0 );\r\n\r\n\t} );\r\n\r\n\tIf( s.lessThanEqual( 0.0 ), () => {\r\n\r\n\t\th.assign( 0.0 );\r\n\r\n\t} ).Else( () => {\r\n\r\n\t\tIf( r.greaterThanEqual( maxcomp ), () => {\r\n\r\n\t\t\th.assign( g.sub( b ).div( delta ) );\r\n\r\n\t\t} ).ElseIf( g.greaterThanEqual( maxcomp ), () => {\r\n\r\n\t\t\th.assign( add( 2.0, b.sub( r ).div( delta ) ) );\r\n\r\n\t\t} ).Else( () => {\r\n\r\n\t\t\th.assign( add( 4.0, r.sub( g ).div( delta ) ) );\r\n\r\n\t\t} );\r\n\r\n\t\th.mulAssign( 1.0 / 6.0 );\r\n\r\n\t\tIf( h.lessThan( 0.0 ), () => {\r\n\r\n\t\t\th.addAssign( 1.0 );\r\n\r\n\t\t} );\r\n\r\n\t} );\r\n\r\n\treturn vec3( h, s, v );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_rgbtohsv',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'c', type: 'vec3' }\r\n\t]\r\n} );\r\n", "// Three.js Transpiler\r\n// https://github.com/AcademySoftwareFoundation/MaterialX/blob/main/libraries/stdlib/genglsl/lib/mx_transform_color.glsl\r\n\r\nimport { bvec3, vec3, Fn } from '../../tsl/TSLBase.js';\r\nimport { greaterThan } from '../../math/OperatorNode.js';\r\nimport { max, pow, mix } from '../../math/MathNode.js';\r\n\r\nexport const mx_srgb_texture_to_lin_rec709 = /*@__PURE__*/ Fn( ( [ color_immutable ] ) => {\r\n\r\n\tconst color = vec3( color_immutable ).toVar();\r\n\tconst isAbove = bvec3( greaterThan( color, vec3( 0.04045 ) ) ).toVar();\r\n\tconst linSeg = vec3( color.div( 12.92 ) ).toVar();\r\n\tconst powSeg = vec3( pow( max( color.add( vec3( 0.055 ) ), vec3( 0.0 ) ).div( 1.055 ), vec3( 2.4 ) ) ).toVar();\r\n\r\n\treturn mix( linSeg, powSeg, isAbove );\r\n\r\n} ).setLayout( {\r\n\tname: 'mx_srgb_texture_to_lin_rec709',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'color', type: 'vec3' }\r\n\t]\r\n} );\r\n", "import { Fn } from '../../tsl/TSLBase.js';\r\n\r\nconst F_Schlick = /*@__PURE__*/ Fn( ( { f0, f90, dotVH } ) => {\r\n\r\n\t// Original approximation by Christophe Schlick '94\r\n\t// float fresnel = pow( 1.0 - dotVH, 5.0 );\r\n\r\n\t// Optimized variant (presented by Epic at SIGGRAPH '13)\r\n\t// https://cdn2.unrealengine.com/Resources/files/2013SiggraphPresentationsNotes-26915738.pdf\r\n\tconst fresnel = dotVH.mul( - 5.55473 ).sub( 6.98316 ).mul( dotVH ).exp2();\r\n\r\n\treturn f0.mul( fresnel.oneMinus() ).add( f90.mul( fresnel ) );\r\n\r\n} ); // validated\r\n\r\nexport default F_Schlick;\r\n", "import { div } from '../../math/OperatorNode.js';\r\nimport { EPSILON } from '../../math/MathNode.js';\r\nimport { Fn } from '../../tsl/TSLBase.js';\r\n\r\n// Moving Frostbite to Physically Based Rendering 3.0 - page 12, listing 2\r\n// https://seblagarde.files.wordpress.com/2015/07/course_notes_moving_frostbite_to_pbr_v32.pdf\r\nconst V_GGX_SmithCorrelated = /*@__PURE__*/ Fn( ( { alpha, dotNL, dotNV } ) => {\r\n\r\n\tconst a2 = alpha.pow2();\r\n\r\n\tconst gv = dotNL.mul( a2.add( a2.oneMinus().mul( dotNV.pow2() ) ).sqrt() );\r\n\tconst gl = dotNV.mul( a2.add( a2.oneMinus().mul( dotNL.pow2() ) ).sqrt() );\r\n\r\n\treturn div( 0.5, gv.add( gl ).max( EPSILON ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'V_GGX_SmithCorrelated',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alpha', type: 'float' },\r\n\t\t{ name: 'dotNL', type: 'float' },\r\n\t\t{ name: 'dotNV', type: 'float' }\r\n\t]\r\n} ); // validated\r\n\r\nexport default V_GGX_SmithCorrelated;\r\n", "import { div } from '../../math/OperatorNode.js';\r\nimport { Fn, vec3 } from '../../tsl/TSLBase.js';\r\n\r\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\r\n\r\nconst V_GGX_SmithCorrelated_Anisotropic = /*@__PURE__*/ Fn( ( { alphaT, alphaB, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } ) => {\r\n\r\n\tconst gv = dotNL.mul( vec3( alphaT.mul( dotTV ), alphaB.mul( dotBV ), dotNV ).length() );\r\n\tconst gl = dotNV.mul( vec3( alphaT.mul( dotTL ), alphaB.mul( dotBL ), dotNL ).length() );\r\n\tconst v = div( 0.5, gv.add( gl ) );\r\n\r\n\treturn v.saturate();\r\n\r\n} ).setLayout( {\r\n\tname: 'V_GGX_SmithCorrelated_Anisotropic',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alphaT', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'alphaB', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotTV', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotBV', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotTL', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotBL', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotNV', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotNL', type: 'float', qualifier: 'in' }\r\n\t]\r\n} );\r\n\r\nexport default V_GGX_SmithCorrelated_Anisotropic;\r\n", "import { Fn } from '../../tsl/TSLBase.js';\r\n\r\n// Microfacet Models for Refraction through Rough Surfaces - equation (33)\r\n// http://graphicrants.blogspot.com/2013/08/specular-brdf-reference.html\r\n// alpha is \"roughness squared\" in Disney’s reparameterization\r\nconst D_GGX = /*@__PURE__*/ Fn( ( { alpha, dotNH } ) => {\r\n\r\n\tconst a2 = alpha.pow2();\r\n\r\n\tconst denom = dotNH.pow2().mul( a2.oneMinus() ).oneMinus(); // avoid alpha = 0 with dotNH = 1\r\n\r\n\treturn a2.div( denom.pow2() ).mul( 1 / Math.PI );\r\n\r\n} ).setLayout( {\r\n\tname: 'D_GGX',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alpha', type: 'float' },\r\n\t\t{ name: 'dotNH', type: 'float' }\r\n\t]\r\n} ); // validated\r\n\r\nexport default D_GGX;\r\n", "import { Fn, float, vec3 } from '../../tsl/TSLBase.js';\r\n\r\nconst RECIPROCAL_PI = /*@__PURE__*/ float( 1 / Math.PI );\r\n\r\n// https://google.github.io/filament/Filament.md.html#materialsystem/anisotropicmodel/anisotropicspecularbrdf\r\n\r\nconst D_GGX_Anisotropic = /*@__PURE__*/ Fn( ( { alphaT, alphaB, dotNH, dotTH, dotBH } ) => {\r\n\r\n\tconst a2 = alphaT.mul( alphaB );\r\n\tconst v = vec3( alphaB.mul( dotTH ), alphaT.mul( dotBH ), a2.mul( dotNH ) );\r\n\tconst v2 = v.dot( v );\r\n\tconst w2 = a2.div( v2 );\r\n\r\n\treturn RECIPROCAL_PI.mul( a2.mul( w2.pow2() ) );\r\n\r\n} ).setLayout( {\r\n\tname: 'D_GGX_Anisotropic',\r\n\ttype: 'float',\r\n\tinputs: [\r\n\t\t{ name: 'alphaT', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'alphaB', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotNH', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotTH', type: 'float', qualifier: 'in' },\r\n\t\t{ name: 'dotBH', type: 'float', qualifier: 'in' }\r\n\t]\r\n} );\r\n\r\nexport default D_GGX_Anisotropic;\r\n", "import F_Schlick from './F_Schlick.js';\r\nimport V_GGX_SmithCorrelated from './V_GGX_SmithCorrelated.js';\r\nimport V_GGX_SmithCorrelated_Anisotropic from './V_GGX_SmithCorrelated_Anisotropic.js';\r\nimport D_GGX from './D_GGX.js';\r\nimport D_GGX_Anisotropic from './D_GGX_Anisotropic.js';\r\nimport { normalView as NormalView } from '../../accessors/Normal.js';\r\nimport { positionViewDirection } from '../../accessors/Position.js';\r\nimport { iridescence, alphaT, anisotropyT, anisotropyB } from '../../core/PropertyNode.js';\r\nimport { Fn, defined } from '../../tsl/TSLBase.js';\r\n\r\n// GGX Distribution, Schlick Fresnel, GGX_SmithCorrelated Visibility\r\nconst BRDF_GGX = /*@__PURE__*/ Fn( ( { lightDirection, f0, f90, roughness, f, normalView = NormalView, USE_IRIDESCENCE, USE_ANISOTROPY } ) => {\r\n\r\n\tconst alpha = roughness.pow2(); // UE4's roughness\r\n\r\n\tconst halfDir = lightDirection.add( positionViewDirection ).normalize();\r\n\r\n\tconst dotNL = normalView.dot( lightDirection ).clamp();\r\n\tconst dotNV = normalView.dot( positionViewDirection ).clamp(); // @ TODO: Move to core dotNV\r\n\tconst dotNH = normalView.dot( halfDir ).clamp();\r\n\tconst dotVH = positionViewDirection.dot( halfDir ).clamp();\r\n\r\n\tlet F = F_Schlick( { f0, f90, dotVH } );\r\n\tlet V, D;\r\n\r\n\tif ( defined( USE_IRIDESCENCE ) ) {\r\n\r\n\t\tF = iridescence.mix( F, f );\r\n\r\n\t}\r\n\r\n\tif ( defined( USE_ANISOTROPY ) ) {\r\n\r\n\t\tconst dotTL = anisotropyT.dot( lightDirection );\r\n\t\tconst dotTV = anisotropyT.dot( positionViewDirection );\r\n\t\tconst dotTH = anisotropyT.dot( halfDir );\r\n\t\tconst dotBL = anisotropyB.dot( lightDirection );\r\n\t\tconst dotBV = anisotropyB.dot( positionViewDirection );\r\n\t\tconst dotBH = anisotropyB.dot( halfDir );\r\n\r\n\t\tV = V_GGX_SmithCorrelated_Anisotropic( { alphaT, alphaB: alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL } );\r\n\t\tD = D_GGX_Anisotropic( { alphaT, alphaB: alpha, dotNH, dotTH, dotBH } );\r\n\r\n\t} else {\r\n\r\n\t\tV = V_GGX_SmithCorrelated( { alpha, dotNL, dotNV } );\r\n\t\tD = D_GGX( { alpha, dotNH } );\r\n\r\n\t}\r\n\r\n\treturn F.mul( V ).mul( D );\r\n\r\n} ); // validated\r\n\r\nexport default BRDF_GGX;\r\n", "import { Fn } from '../../tsl/TSLBase.js';\r\n\r\nconst BRDF_Lambert = /*@__PURE__*/ Fn( ( inputs ) => {\r\n\r\n\treturn inputs.diffuseColor.mul( 1 / Math.PI ); // punctual light\r\n\r\n} ); // validated\r\n\r\nexport default BRDF_Lambert;\r\n", "import { Fn, vec2, vec4 } from '../../tsl/TSLBase.js';\r\n\r\n// Analytical approximation of the DFG LUT, one half of the\r\n// split-sum approximation used in indirect specular lighting.\r\n// via 'environmentBRDF' from \"Physically Based Shading on Mobile\"\r\n// https://www.unrealengine.com/blog/physically-based-shading-on-mobile\r\nconst DFGApprox = /*@__PURE__*/ Fn( ( { roughness, dotNV } ) => {\r\n\r\n\tconst c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\r\n\r\n\tconst c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\r\n\r\n\tconst r = roughness.mul( c0 ).add( c1 );\r\n\r\n\tconst a004 = r.x.mul( r.x ).min( dotNV.mul( - 9.28 ).exp2() ).mul( r.x ).add( r.y );\r\n\r\n\tconst fab = vec2( - 1.04, 1.04 ).mul( a004 ).add( r.zw );\r\n\r\n\treturn fab;\r\n\r\n} ).setLayout( {\r\n\tname: 'DFGApprox',\r\n\ttype: 'vec2',\r\n\tinputs: [\r\n\t\t{ name: 'roughness', type: 'float' },\r\n\t\t{ name: 'dotNV', type: 'vec3' }\r\n\t]\r\n} );\r\n\r\nexport default DFGApprox;\r\n", "import { Fn, vec3 } from '../../tsl/TSLBase.js';\r\n\r\nconst Schlick_to_F0 = /*@__PURE__*/ Fn( ( { f, f90, dotVH } ) => {\r\n\r\n\tconst x = dotVH.oneMinus().saturate();\r\n\tconst x2 = x.mul( x );\r\n\tconst x5 = x.mul( x2, x2 ).clamp( 0, .9999 );\r\n\r\n\treturn f.sub( vec3( f90 ).mul( x5 ) ).div( x5.oneMinus() );\r\n\r\n} ).setLayout( {\r\n\tname: 'Schlick_to_F0',\r\n\ttype: 'vec3',\r\n\tinputs: [\r\n\t\t{ name: 'f', type: 'vec3' },\r\n\t\t{ name: 'f90', type: 'float' },\r\n\t\t{ name: 'dotVH', type: 'float' }\r\n\t]\r\n} );\r\n\r\nexport default Schlick_to_F0;\r\n", "import { normalViewGeometry } from '../../accessors/Normal.js';\r\nimport { float, Fn } from '../../tsl/TSLBase.js';\r\n\r\nconst getGeometryRoughness = /*@__PURE__*/ Fn( ( builder ) => {\r\n\r\n\tif ( builder.geometry.hasAttribute( 'normal' ) === false ) {\r\n\r\n\t\treturn float( 0 );\r\n\r\n\t}\r\n\r\n\tconst dxy = normalViewGeometry.dFdx().abs().max( normalViewGeometry.dFdy().abs() );\r\n\tconst geometryRoughness = dxy.x.max( dxy.y ).max( dxy.z );\r\n\r\n\treturn geometryRoughness;\r\n\r\n} );\r\n\r\nexport default getGeometryRoughness;\r\n", "import { positionWorld } from '../../accessors/Position.js';\r\nimport { float, Fn, min, normalize, sub, vec3 } from '../../tsl/TSLBase.js';\r\n\r\n/**\r\n * This computes a parallax corrected normal which is used for box-projected cube mapping (BPCEM).\r\n *\r\n * Reference: {@link https://devlog-martinsh.blogspot.com/2011/09/box-projected-cube-environment-mapping.html}\r\n *\r\n * ```js\r\n * const uvNode = getParallaxCorrectNormal( reflectVector, vec3( 200, 100, 100 ), vec3( 0, - 50, 0 ) );\r\n * material.envNode = pmremTexture( renderTarget.texture, uvNode );\r\n * ```\r\n *\r\n * @tsl\r\n * @function\r\n * @param {Node<vec3>} normal - The normal to correct.\r\n * @param {Node<vec3>} cubeSize - The cube size should reflect the size of the environment (BPCEM is usually applied in closed environments like rooms).\r\n * @param {Node<vec3>} cubePos - The cube position.\r\n * @return {Node<vec3>} The parallax corrected normal.\r\n */\r\nconst getParallaxCorrectNormal = /*@__PURE__*/ Fn( ( [ normal, cubeSize, cubePos ] ) => {\r\n\r\n\tconst nDir = normalize( normal ).toVar();\r\n\tconst rbmax = sub( float( 0.5 ).mul( cubeSize.sub( cubePos ) ), positionWorld ).div( nDir ).toVar();\r\n\tconst rbmin = sub( float( - 0.5 ).mul( cubeSize.sub( cubePos ) ), positionWorld ).div( nDir ).toVar();\r\n\tconst rbminmax = vec3().toVar();\r\n\trbminmax.x = nDir.x.greaterThan( float( 0 ) ).select( rbmax.x, rbmin.x );\r\n\trbminmax.y = nDir.y.greaterThan( float( 0 ) ).select( rbmax.y, rbmin.y );\r\n\trbminmax.z = nDir.z.greaterThan( float( 0 ) ).select( rbmax.z, rbmin.z );\r\n\r\n\tconst correction = min( rbminmax.x, rbminmax.y, rbminmax.z ).toVar();\r\n\tconst boxIntersection = positionWorld.add( nDir.mul( correction ) ).toVar();\r\n\treturn boxIntersection.sub( cubePos );\r\n\r\n} );\r\n\r\nexport default getParallaxCorrectNormal;\r\n", "import getGeometryRoughness from './getGeometryRoughness.js';\r\nimport { Fn } from '../../tsl/TSLBase.js';\r\n\r\nconst getRoughness = /*@__PURE__*/ Fn( ( inputs ) => {\r\n\r\n\tconst { roughness } = inputs;\r\n\r\n\tconst geometryRoughness = getGeometryRoughness();\r\n\r\n\tlet roughnessFactor = roughness.max( 0.0525 ); // 0.0525 corresponds to the base mip of a 256 cubemap.\r\n\troughnessFactor = roughnessFactor.add( geometryRoughness );\r\n\troughnessFactor = roughnessFactor.min( 1.0 );\r\n\r\n\treturn roughnessFactor;\r\n\r\n} );\r\n\r\nexport default getRoughness;\r\n", "import { Fn, mul } from '../../tsl/TSLBase.js';\r\n\r\nconst getShIrradianceAt = /*@__PURE__*/ Fn( ( [ normal, shCoefficients ] ) => {\r\n\r\n\t// normal is assumed to have unit length\r\n\r\n\tconst x = normal.x, y = normal.y, z = normal.z;\r\n\r\n\t// band 0\r\n\tlet result = shCoefficients.element( 0 ).mul( 0.886227 );\r\n\r\n\t// band 1\r\n\tresult = result.add( shCoefficients.element( 1 ).mul( 2.0 * 0.511664 ).mul( y ) );\r\n\tresult = result.add( shCoefficients.element( 2 ).mul( 2.0 * 0.511664 ).mul( z ) );\r\n\tresult = result.add( shCoefficients.element( 3 ).mul( 2.0 * 0.511664 ).mul( x ) );\r\n\r\n\t// band 2\r\n\tresult = result.add( shCoefficients.element( 4 ).mul( 2.0 * 0.429043 ).mul( x ).mul( y ) );\r\n\tresult = result.add( shCoefficients.element( 5 ).mul( 2.0 * 0.429043 ).mul( y ).mul( z ) );\r\n\tresult = result.add( shCoefficients.element( 6 ).mul( z.mul( z ).mul( 0.743125 ).sub( 0.247708 ) ) );\r\n\tresult = result.add( shCoefficients.element( 7 ).mul( 2.0 * 0.429043 ).mul( x ).mul( z ) );\r\n\tresult = result.add( shCoefficients.element( 8 ).mul( 0.429043 ).mul( mul( x, x ).sub( mul( y, y ) ) ) );\r\n\r\n\treturn result;\r\n\r\n} );\r\n\r\nexport default getShIrradianceAt;\r\n", "import { BufferGeometry } from '../core/BufferGeometry.js';\r\nimport { Float32BufferAttribute } from '../core/BufferAttribute.js';\r\nimport { Vector3 } from '../math/Vector3.js';\r\n\r\n/**\r\n * A class for generating a sphere geometry.\r\n *\r\n * ```js\r\n * const geometry = new THREE.SphereGeometry( 15, 32, 16 );\r\n * const material = new THREE.MeshBasicMaterial( { color: 0xffff00 } );\r\n * const sphere = new THREE.Mesh( geometry, material );\r\n * scene.add( sphere );\r\n * ```\r\n *\r\n * @augments BufferGeometry\r\n */\r\nclass SphereGeometry extends BufferGeometry {\r\n\r\n\t/**\r\n\t * Constructs a new sphere geometry.\r\n\t *\r\n\t * @param {number} [radius=1] - The sphere radius.\r\n\t * @param {number} [widthSegments=32] - The number of horizontal segments. Minimum value is `3`.\r\n\t * @param {number} [heightSegments=16] - The number of vertical segments. Minimum value is `2`.\r\n\t * @param {number} [phiStart=0] - The horizontal starting angle in radians.\r\n\t * @param {number} [phiLength=Math.PI*2] - The horizontal sweep angle size.\r\n\t * @param {number} [thetaStart=0] - The vertical starting angle in radians.\r\n\t * @param {number} [thetaLength=Math.PI] - The vertical sweep angle size.\r\n\t */\r\n\tconstructor( radius = 1, widthSegments = 32, heightSegments = 16, phiStart = 0, phiLength = Math.PI * 2, thetaStart = 0, thetaLength = Math.PI ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\tthis.type = 'SphereGeometry';\r\n\r\n\t\t/**\r\n\t\t * Holds the constructor parameters that have been\r\n\t\t * used to generate the geometry. Any modification\r\n\t\t * after instantiation does not change the geometry.\r\n\t\t *\r\n\t\t * @type {Object}\r\n\t\t */\r\n\t\tthis.parameters = {\r\n\t\t\tradius: radius,\r\n\t\t\twidthSegments: widthSegments,\r\n\t\t\theightSegments: heightSegments,\r\n\t\t\tphiStart: phiStart,\r\n\t\t\tphiLength: phiLength,\r\n\t\t\tthetaStart: thetaStart,\r\n\t\t\tthetaLength: thetaLength\r\n\t\t};\r\n\r\n\t\twidthSegments = Math.max( 3, Math.floor( widthSegments ) );\r\n\t\theightSegments = Math.max( 2, Math.floor( heightSegments ) );\r\n\r\n\t\tconst thetaEnd = Math.min( thetaStart + thetaLength, Math.PI );\r\n\r\n\t\tlet index = 0;\r\n\t\tconst grid = [];\r\n\r\n\t\tconst vertex = new Vector3();\r\n\t\tconst normal = new Vector3();\r\n\r\n\t\t// buffers\r\n\r\n\t\tconst indices = [];\r\n\t\tconst vertices = [];\r\n\t\tconst normals = [];\r\n\t\tconst uvs = [];\r\n\r\n\t\t// generate vertices, normals and uvs\r\n\r\n\t\tfor ( let iy = 0; iy <= heightSegments; iy ++ ) {\r\n\r\n\t\t\tconst verticesRow = [];\r\n\r\n\t\t\tconst v = iy / heightSegments;\r\n\r\n\t\t\t// special case for the poles\r\n\r\n\t\t\tlet uOffset = 0;\r\n\r\n\t\t\tif ( iy === 0 && thetaStart === 0 ) {\r\n\r\n\t\t\t\tuOffset = 0.5 / widthSegments;\r\n\r\n\t\t\t} else if ( iy === heightSegments && thetaEnd === Math.PI ) {\r\n\r\n\t\t\t\tuOffset = - 0.5 / widthSegments;\r\n\r\n\t\t\t}\r\n\r\n\t\t\tfor ( let ix = 0; ix <= widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tconst u = ix / widthSegments;\r\n\r\n\t\t\t\t// vertex\r\n\r\n\t\t\t\tvertex.x = - radius * Math.cos( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.y = radius * Math.cos( thetaStart + v * thetaLength );\r\n\t\t\t\tvertex.z = radius * Math.sin( phiStart + u * phiLength ) * Math.sin( thetaStart + v * thetaLength );\r\n\r\n\t\t\t\tvertices.push( vertex.x, vertex.y, vertex.z );\r\n\r\n\t\t\t\t// normal\r\n\r\n\t\t\t\tnormal.copy( vertex ).normalize();\r\n\t\t\t\tnormals.push( normal.x, normal.y, normal.z );\r\n\r\n\t\t\t\t// uv\r\n\r\n\t\t\t\tuvs.push( u + uOffset, 1 - v );\r\n\r\n\t\t\t\tverticesRow.push( index ++ );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tgrid.push( verticesRow );\r\n\r\n\t\t}\r\n\r\n\t\t// indices\r\n\r\n\t\tfor ( let iy = 0; iy < heightSegments; iy ++ ) {\r\n\r\n\t\t\tfor ( let ix = 0; ix < widthSegments; ix ++ ) {\r\n\r\n\t\t\t\tconst a = grid[ iy ][ ix + 1 ];\r\n\t\t\t\tconst b = grid[ iy ][ ix ];\r\n\t\t\t\tconst c = grid[ iy + 1 ][ ix ];\r\n\t\t\t\tconst d = grid[ iy + 1 ][ ix + 1 ];\r\n\r\n\t\t\t\tif ( iy !== 0 || thetaStart > 0 ) indices.push( a, b, d );\r\n\t\t\t\tif ( iy !== heightSegments - 1 || thetaEnd < Math.PI ) indices.push( b, c, d );\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t// build geometry\r\n\r\n\t\tthis.setIndex( indices );\r\n\t\tthis.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );\r\n\t\tthis.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );\r\n\t\tthis.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );\r\n\r\n\t}\r\n\r\n\tcopy( source ) {\r\n\r\n\t\tsuper.copy( source );\r\n\r\n\t\tthis.parameters = Object.assign( {}, source.parameters );\r\n\r\n\t\treturn this;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Factory method for creating an instance of this class from the given\r\n\t * JSON object.\r\n\t *\r\n\t * @param {Object} data - A JSON object representing the serialized geometry.\r\n\t * @return {SphereGeometry} A new instance.\r\n\t */\r\n\tstatic fromJSON( data ) {\r\n\r\n\t\treturn new SphereGeometry( data.radius, data.widthSegments, data.heightSegments, data.phiStart, data.phiLength, data.thetaStart, data.thetaLength );\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport { SphereGeometry };\r\n", "import DataMap from './DataMap.js';\r\nimport Color4 from './Color4.js';\r\nimport { vec4, context, normalWorldGeometry, backgroundBlurriness, backgroundIntensity, backgroundRotation, modelViewProjection } from '../../nodes/TSL.js';\r\nimport NodeMaterial from '../../materials/nodes/NodeMaterial.js';\r\n\r\nimport { Mesh } from '../../objects/Mesh.js';\r\nimport { SphereGeometry } from '../../geometries/SphereGeometry.js';\r\nimport { BackSide } from '../../constants.js';\r\n\r\nconst _clearColor = /*@__PURE__*/ new Color4();\r\n\r\n/**\r\n * This renderer module manages the background.\r\n *\r\n * @private\r\n * @augments DataMap\r\n */\r\nclass Background extends DataMap {\r\n\r\n\t/**\r\n\t * Constructs a new background management component.\r\n\t *\r\n\t * @param {Renderer} renderer - The renderer.\r\n\t * @param {Nodes} nodes - Renderer component for managing nodes related logic.\r\n\t */\r\n\tconstructor( renderer, nodes ) {\r\n\r\n\t\tsuper();\r\n\r\n\t\t/**\r\n\t\t * The renderer.\r\n\t\t *\r\n\t\t * @type {Renderer}\r\n\t\t */\r\n\t\tthis.renderer = renderer;\r\n\r\n\t\t/**\r\n\t\t * Renderer component for managing nodes related logic.\r\n\t\t *\r\n\t\t * @type {Nodes}\r\n\t\t */\r\n\t\tthis.nodes = nodes;\r\n\r\n\t}\r\n\r\n\t/**\r\n\t * Updates the background for the given scene. Depending on how `Scene.background`\r\n\t * or `Scene.backgroundNode` are configured, this method might configure a simple clear\r\n\t * or add a mesh to the render list for rendering the background as a textured plane\r\n\t * or skybox.\r\n\t *\r\n\t * @param {Scene} scene - The scene.\r\n\t * @param {RenderList} renderList - The current render list.\r\n\t * @param {RenderContext} renderContext - The current render context.\r\n\t */\r\n\tupdate( scene, renderList, renderContext ) {\r\n\r\n\t\tconst renderer = this.renderer;\r\n\t\tconst background = this.nodes.getBackgroundNode( scene ) || scene.background;\r\n\r\n\t\tlet forceClear = false;\r\n\r\n\t\tif ( background === null ) {\r\n\r\n\t\t\t// no background settings, use clear color configuration from the renderer\r\n\r\n\t\t\trenderer._clearColor.getRGB( _clearColor );\r\n\t\t\t_clearColor.a = renderer._clearColor.a;\r\n\r\n\t\t} else if ( background.isColor === true ) {\r\n\r\n\t\t\t// background is an opaque color\r\n\r\n\t\t\tbackground.getRGB( _clearColor );\r\n\t\t\t_clearColor.a = 1;\r\n\r\n\t\t\tforceClear = true;\r\n\r\n\t\t} else if ( background.isNode === true ) {\r\n\r\n\t\t\tconst sceneData = this.get( scene );\r\n\t\t\tconst backgroundNode = background;\r\n\r\n\t\t\t_clearColor.copy( renderer._clearColor );\r\n\r\n\t\t\tlet backgroundMesh = sceneData.backgroundMesh;\r\n\r\n\t\t\tif ( backgroundMesh === undefined ) {\r\n\r\n\t\t\t\tconst backgroundMeshNode = context( vec4( backgroundNode ).mul( backgroundIntensity ), {\r\n\t\t\t\t\t// @TODO: Add Texture2D support using node context\r\n\t\t\t\t\tgetUV: () => backgroundRotation.mul( normalWorldGeometry ),\r\n\t\t\t\t\tgetTextureLevel: () => backgroundBlurriness\r\n\t\t\t\t} );\r\n\r\n\t\t\t\tlet viewProj = modelViewProjection;\r\n\t\t\t\tviewProj = viewProj.setZ( viewProj.w );\r\n\r\n\t\t\t\tconst nodeMaterial = new NodeMaterial();\r\n\t\t\t\tnodeMaterial.name = 'Background.material';\r\n\t\t\t\tnodeMaterial.side = BackSide;\r\n\t\t\t\tnodeMaterial.depthTest = false;\r\n\t\t\t\tnodeMaterial.depthWrite = false;\r\n\t\t\t\tnodeMaterial.allowOverride = false;\r\n\t\t\t\tnodeMaterial.fog = false;\r\n\t\t\t\tnodeMaterial.lights = false;\r\n\t\t\t\tnodeMaterial.vertexNode = viewProj;\r\n\t\t\t\tnodeMaterial.colorNode = backgroundMeshNode;\r\n\r\n\t\t\t\tsceneData.backgroundMeshNode = backgroundMeshNode;\r\n\t\t\t\tsceneData.backgroundMesh = backgroundMesh = new Mesh( new SphereGeometry( 1, 32, 32 ), nodeMaterial );\r\n\t\t\t\tbackgroundMesh.frustumCulled = false;\r\n\t\t\t\tbackgroundMesh.name = 'Background.mesh';\r\n\r\n\t\t\t\tbackgroundMesh.onBeforeRender = function ( renderer, scene, camera ) {\r\n\r\n\t\t\t\t\tthis.matrixWorld.copyPosition( camera.matrixWorld );\r\n\r\n\t\t\t\t};\r\n\r\n\t\t\t\tfunction onBackgroundDispose() {\r\n\r\n\t\t\t\t\tbackground.removeEventListener( 'dispose', onBackgroundDispose );\r\n\r\n\t\t\t\t\tbackgroundMesh.material.dispose();\r\n\t\t\t\t\tbackgroundMesh.geometry.dispose();\r\n\r\n\t\t\t\t}\r\n\r\n\t\t\t\tbackground.addEventListener( 'dispose', onBackgroundDispose );\r\n\r\n\t\t\t}\r\n\r\n\t\t\tconst backgroundCacheKey = backgroundNode.getCacheKey();\r\n\r\n\t\t\tif ( sceneData.backgroundCacheKey !== backgroundCacheKey ) {\r\n\r\n\t\t\t\tsceneData.backgroundMeshNode.node = vec4( backgroundNode ).mul( backgroundIntensity );\r\n\t\t\t\tsceneData.backgroundMeshNode.needsUpdate = true;\r\n\r\n\t\t\t\tbackgroundMesh.material.needsUpdate = true;\r\n\r\n\t\t\t\tsceneData.backgroundCacheKey = backgroundCacheKey;\r\n\r\n\t\t\t}\r\n\r\n\t\t\trenderList.unshift( backgroundMesh, backgroundMesh.geometry, backgroundMesh.material, 0, 0, null, null );\r\n\r\n\t\t} else {\r\n\r\n\t\t\tconsole.error( 'THREE.Renderer: Unsupported background configuration.', background );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tconst environmentBlendMode = renderer.xr.getEnvironmentBlendMode();\r\n\r\n\t\tif ( environmentBlendMode === 'additive' ) {\r\n\r\n\t\t\t_clearColor.set( 0, 0, 0, 1 );\r\n\r\n\t\t} else if ( environmentBlendMode === 'alpha-blend' ) {\r\n\r\n\t\t\t_clearColor.set( 0, 0, 0, 0 );\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tif ( renderer.autoClear === true || forceClear === true ) {\r\n\r\n\t\t\tconst clearColorValue = renderContext.clearColorValue;\r\n\r\n\t\t\tclearColorValue.r = _clearColor.r;\r\n\t\t\tclearColorValue.g = _clearColor.g;\r\n\t\t\tclearColorValue.b = _clearColor.b;\r\n\t\t\tclearColorValue.a = _clearColor.a;\r\n\r\n\t\t\t// premultiply alpha\r\n\r\n\t\t\tif ( renderer.backend.isWebGLBackend === true || renderer.alpha === true ) {\r\n\r\n\t\t\t\tclearColorValue.r *= clearColorValue.a;\r\n\t\t\t\tclearColorValue.g *= clearColorValue.a;\r\n\t\t\t\tclearColorValue.b *= clearColorValue.a;\r\n\r\n\t\t\t}\r\n\r\n\t\t\t//\r\n\r\n\t\t\trenderContext.depthClearValue = renderer._clearDepth;\r\n\t\t\trenderContext.stencilClearValue = renderer._clearStencil;\r\n\r\n\t\t\trenderContext.clearColor = renderer.autoClearColor === true;\r\n\t\t\trenderContext.clearDepth = renderer.autoClearDepth === true;\r\n\t\t\trenderContext.clearStencil = renderer.autoClearStencil === true;\r\n\r\n\t\t} else {\r\n\r\n\t\t\trenderContext.clearColor = false;\r\n\t\t\trenderContext.clearDepth = false;\r\n\t\t\trenderContext.clearStencil = false;\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n\r\nexport default Background;\r\n"],
  "mappings": "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",
  "names": ["min", "max", "length", "range", "degrees", "radians", "cos", "sin", "array", "det", "array", "array", "ColorManagement", "color", "color", "max", "min", "hue", "saturation", "array", "attribute", "color", "array", "w0", "w1", "cos", "sin", "step", "array", "attribute", "min", "max", "length", "normal", "array", "attribute", "det", "scale", "array", "min", "max", "length", "array", "attribute", "min", "max", "length", "array", "attribute", "h1", "array", "property", "array", "array", "hash", "output", "nodeData", "property", "cache", "data", "output", "output", "output", "length", "output", "length", "length", "output", "property", "nodeObject", "array", "subBuild", "output", "bool", "uint", "int", "float", "layout", "stack", "output", "output", "hash", "varying", "output", "output", "temp", "normalize", "output", "normalize", "clamp", "smoothstep", "uv", "normalize", "clamp", "output", "output", "varying", "color", "property", "property", "toneMapping", "color", "buffer", "_vector", "_vector2", "array", "attribute", "array", "array", "array", "_vector", "array", "array", "array", "buffer", "bufferAttribute", "output", "array", "output", "cache", "output", "toneMapping", "context", "color", "toneMapping", "code", "attribute", "output", "expression", "mrt", "hash", "stack", "time", "min", "max", "array", "_vector", "attribute", "_v1", "_box", "_v1", "_v2", "lengthSq", "length", "array", "i", "length", "cameraProjectionMatrix", "camera", "cameraProjectionMatrixInverse", "cameraViewMatrix", "normal", "context", "texture", "uv", "modelViewMatrix", "output", "output", "context", "output", "anisotropy", "output", "uv", "texture", "output", "snippet", "anisotropy", "depth", "depth", "uv", "depth", "scale", "_vector2", "normal", "_quaternion", "array", "_v1", "_m1", "_quaternion", "scale", "distance", "output", "element", "cache", "texture", "depth", "_target", "_size", "cache", "data", "_m1", "anisotropy", "EmptyTexture", "texture", "EmptyTexture", "ReferenceElementNode", "property", "property", "uv", "normalMap", "scale", "output", "property", "array", "array", "buffer", "instancedMesh", "size", "x", "y", "j", "color", "output", "normal", "mrt", "output", "depth", "depth", "buffer", "context", "smoothstep", "distance", "mrt", "attribute", "property", "notEqual", "clamp", "color", "mrt", "property", "cache", "data", "_id", "_m1", "_box", "_vector", "attribute", "normal", "indices", "array", "array2", "_vector", "_normal", "det", "sign", "_v0", "_v1", "_v2", "attribute", "_sphere", "uv", "normal", "distance", "uv", "_size", "depth", "uv", "normalize", "uv", "_e1", "_m1", "output", "output", "texture", "uv", "step", "frameId", "velocity", "color", "saturation", "_size", "texture", "mrt", "cameraNear", "cameraFar", "color", "clamp", "code", "element", "output", "code", "smoothstep", "color", "min", "max", "output", "length", "array", "bufferAttribute", "output", "shadow", "uv", "depth", "distance", "clamp", "cameraNear", "cameraFar", "depth", "shadow", "uv", "roughness", "clamp", "normalize", "_v3", "distance", "depth", "width", "height", "_clearColor", "cubeUVRenderTarget", "texture", "x", "min", "max", "uv", "_cache", "texture", "cache", "length", "uv", "smoothstep", "hash", "color", "alphaT", "alphaT", "w2", "roughness", "normalView", "roughness", "normal", "normalize", "roughness", "normal", "normal", "_clearColor", "renderer", "scene"]
}
